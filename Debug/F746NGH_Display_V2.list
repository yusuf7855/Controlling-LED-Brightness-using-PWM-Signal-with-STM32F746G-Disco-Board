
F746NGH_Display_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021f88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d0  08022158  08022158  00032158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002162  08024628  08024628  00034628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  0802678c  0802678c  0003678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0007dec0  08026944  08026944  00036944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000050  080a4804  080a4804  000b4804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080a4854  080a4854  000c0100  2**0
                  CONTENTS
  8 .ARM          00000008  080a4854  080a4854  000b4854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080a485c  080a485c  000c0100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080a485c  080a485c  000b485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080a4870  080a4870  000b4870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  080a4878  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00011cc0  20000100  080a4978  000c0100  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  20011dc0  080a4978  000c1dc0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000c0100  2**0
                  CONTENTS, READONLY
 16 .debug_info   0009e440  00000000  00000000  000c0130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00011c1a  00000000  00000000  0015e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003c18  00000000  00000000  00170190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003760  00000000  00000000  00173da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00034d2d  00000000  00000000  00177508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000432c7  00000000  00000000  001ac235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00122d26  00000000  00000000  001ef4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00312222  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010600  00000000  00000000  003122f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08022140 	.word	0x08022140

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	08022140 	.word	0x08022140

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005be:	f000 f9b5 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f2:	2300      	movs	r3, #0
 80005f4:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f6:	f000 f999 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
 80005fe:	e010      	b.n	8000622 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	21a8      	movs	r1, #168	; 0xa8
 8000606:	4618      	mov	r0, r3
 8000608:	f00a fea6 	bl	800b358 <TS_IO_Read>
 800060c:	4603      	mov	r3, r0
 800060e:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b51      	cmp	r3, #81	; 0x51
 8000616:	d101      	bne.n	800061c <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	3301      	adds	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d802      	bhi.n	800062e <ft5336_ReadID+0x4e>
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0e8      	beq.n	8000600 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	b29b      	uxth	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f97d 	bl	8000948 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f933 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00a fe6f 	bl	800b358 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000011c 	.word	0x2000011c

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00a fdbc 	bl	800b358 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00a fdae 	bl	800b358 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00a fd93 	bl	800b358 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00a fd85 	bl	800b358 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000011c 	.word	0x2000011c
 8000890:	20000120 	.word	0x20000120

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00a fd38 	bl	800b324 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00a fd24 	bl	800b324 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	2000011c 	.word	0x2000011c

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093a:	4b02      	ldr	r3, [pc, #8]	; (8000944 <ft5336_I2C_InitializeIfRequired+0x18>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
  }
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000011c 	.word	0x2000011c

08000948 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <PollingInit>:
uint8_t uartMsgData[2];
uint8_t msgIndex = 0;
uint8_t msgRdyFlag = 0;


void PollingInit(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000968:	2201      	movs	r2, #1
 800096a:	4903      	ldr	r1, [pc, #12]	; (8000978 <PollingInit+0x14>)
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <PollingInit+0x18>)
 800096e:	f006 fd51 	bl	8007414 <HAL_UART_Receive_IT>

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000134 	.word	0x20000134
 800097c:	200003b8 	.word	0x200003b8

08000980 <PollingRoutine>:

void PollingRoutine(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

	if(msgRdyFlag)
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <PollingRoutine+0x24>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d009      	beq.n	80009a0 <PollingRoutine+0x20>
	{
		xSemaphoreGive(binarySemUartMsgHandle);
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <PollingRoutine+0x28>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	f008 fb0f 	bl	8008fb8 <xQueueGenericSend>
       msgRdyFlag = 0;
 800099a:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <PollingRoutine+0x24>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
	}
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000137 	.word	0x20000137
 80009a8:	200004e4 	.word	0x200004e4

080009ac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	if(msgIndex == 0){
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <HAL_UART_RxCpltCallback+0x1a>
		memset(&uartMsgBuf, 0 , sizeof(uartMsgBuf));
 80009bc:	2210      	movs	r2, #16
 80009be:	2100      	movs	r1, #0
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <HAL_UART_RxCpltCallback+0x6c>)
 80009c2:	f020 fc27 	bl	8021214 <memset>
	}
	if (uartMsgData[0] != 13) {
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b0d      	cmp	r3, #13
 80009cc:	d00b      	beq.n	80009e6 <HAL_UART_RxCpltCallback+0x3a>
		uartMsgBuf[msgIndex++] = uartMsgData[0];
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	b2d1      	uxtb	r1, r2
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009d8:	7011      	strb	r1, [r2, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 80009de:	7819      	ldrb	r1, [r3, #0]
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_UART_RxCpltCallback+0x6c>)
 80009e2:	5499      	strb	r1, [r3, r2]
 80009e4:	e00c      	b.n	8000a00 <HAL_UART_RxCpltCallback+0x54>
	}
	else
	{
		uartMsgBuf[msgIndex] = uartMsgData[0];
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_UART_RxCpltCallback+0x6c>)
 80009f2:	5499      	strb	r1, [r3, r2]
		msgIndex=0;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]

		msgRdyFlag = 1;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_UART_RxCpltCallback+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(huart, uartMsgData, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	4906      	ldr	r1, [pc, #24]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f006 fd05 	bl	8007414 <HAL_UART_Receive_IT>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000136 	.word	0x20000136
 8000a18:	20000124 	.word	0x20000124
 8000a1c:	20000134 	.word	0x20000134
 8000a20:	20000137 	.word	0x20000137

08000a24 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5c:	f3bf 8f4f 	dsb	sy
}
 8000a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a62:	f3bf 8f6f 	isb	sy
}
 8000a66:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <SCB_EnableICache+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
}
 8000a74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SCB_EnableICache+0x48>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <SCB_EnableICache+0x48>)
 8000a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a88:	f3bf 8f4f 	dsb	sy
}
 8000a8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8e:	f3bf 8f6f 	isb	sy
}
 8000a92:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab2:	f3bf 8f4f 	dsb	sy
}
 8000ab6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000abe:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0b5b      	lsrs	r3, r3, #13
 8000ac4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ac8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ad2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	015a      	lsls	r2, r3, #5
 8000ad8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000adc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ae2:	4911      	ldr	r1, [pc, #68]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1e5a      	subs	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1ef      	bne.n	8000ad4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	1e5a      	subs	r2, r3, #1
 8000af8:	60fa      	str	r2, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1e5      	bne.n	8000aca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000afe:	f3bf 8f4f 	dsb	sy
}
 8000b02:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b10:	f3bf 8f4f 	dsb	sy
}
 8000b14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b16:	f3bf 8f6f 	isb	sy
}
 8000b1a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b096      	sub	sp, #88	; 0x58
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b32:	f7ff ff91 	bl	8000a58 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b36:	f7ff ffb5 	bl	8000aa4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3a:	f001 fb69 	bl	8002210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3e:	f000 f87d 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b42:	f000 fc01 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b46:	f000 fb35 	bl	80011b4 <MX_DMA_Init>
  MX_FMC_Init();
 8000b4a:	f000 fb51 	bl	80011f0 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8000b4e:	f000 f9f9 	bl	8000f44 <MX_QUADSPI_Init>
  MX_CRC_Init();
 8000b52:	f000 f8e1 	bl	8000d18 <MX_CRC_Init>
  MX_LTDC_Init();
 8000b56:	f000 f973 	bl	8000e40 <MX_LTDC_Init>
  MX_USART6_UART_Init();
 8000b5a:	f000 fafb 	bl	8001154 <MX_USART6_UART_Init>
  MX_I2C3_Init();
 8000b5e:	f000 f92f 	bl	8000dc0 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000b62:	f000 fac7 	bl	80010f4 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000b66:	f000 f8f9 	bl	8000d5c <MX_DMA2D_Init>
  MX_TIM8_Init();
 8000b6a:	f000 fa17 	bl	8000f9c <MX_TIM8_Init>
  MX_TouchGFX_Init();
 8000b6e:	f00a fc18 	bl	800b3a2 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000b72:	f00a fc0f 	bl	800b394 <MX_TouchGFX_PreOSInit>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemUartMsg */
  osSemaphoreDef(binarySemUartMsg);
 8000b76:	2300      	movs	r3, #0
 8000b78:	657b      	str	r3, [r7, #84]	; 0x54
  binarySemUartMsgHandle = osSemaphoreCreate(osSemaphore(binarySemUartMsg), 1);
 8000b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 ffbf 	bl	8008b04 <osSemaphoreCreate>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <main+0xec>)
 8000b8a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <main+0xf0>)
 8000b8e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b92:	461d      	mov	r5, r3
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 ff73 	bl	8008a8e <osThreadCreate>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <main+0xf4>)
 8000bac:	6013      	str	r3, [r2, #0]

  /* definition and creation of hardwareTask */
  osThreadDef(hardwareTask, StartHardwareTask, osPriorityNormal, 0, 512);
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <main+0xf8>)
 8000bb0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	682b      	ldr	r3, [r5, #0]
 8000bbc:	6023      	str	r3, [r4, #0]
  hardwareTaskHandle = osThreadCreate(osThread(hardwareTask), NULL);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 ff62 	bl	8008a8e <osThreadCreate>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <main+0xfc>)
 8000bce:	6013      	str	r3, [r2, #0]

  /* definition and creation of myGFXtask */
  osThreadDef(myGFXtask, StartGFXTask, osPriorityNormal, 0, 8192);
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <main+0x100>)
 8000bd2:	f107 0418 	add.w	r4, r7, #24
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	6023      	str	r3, [r4, #0]
  myGFXtaskHandle = osThreadCreate(osThread(myGFXtask), NULL);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 ff51 	bl	8008a8e <osThreadCreate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <main+0x104>)
 8000bf0:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskUartMsg */
  osThreadDef(taskUartMsg, StartTaskUartMsg, osPriorityIdle, 0, 128);
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <main+0x108>)
 8000bf4:	1d3c      	adds	r4, r7, #4
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	6023      	str	r3, [r4, #0]
  taskUartMsgHandle = osThreadCreate(osThread(taskUartMsg), NULL);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f007 ff42 	bl	8008a8e <osThreadCreate>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <main+0x10c>)
 8000c0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c10:	f007 ff36 	bl	8008a80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <main+0xe8>
 8000c16:	bf00      	nop
 8000c18:	200004e4 	.word	0x200004e4
 8000c1c:	0802218c 	.word	0x0802218c
 8000c20:	200004d4 	.word	0x200004d4
 8000c24:	080221a0 	.word	0x080221a0
 8000c28:	200004d8 	.word	0x200004d8
 8000c2c:	080221b4 	.word	0x080221b4
 8000c30:	200004dc 	.word	0x200004dc
 8000c34:	080221c8 	.word	0x080221c8
 8000c38:	200004e0 	.word	0x200004e0

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2230      	movs	r2, #48	; 0x30
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f020 fae2 	bl	8021214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ca4:	2319      	movs	r3, #25
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ca8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 ffe6 	bl	8004c8c <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 fc51 	bl	800156c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cca:	f003 fecd 	bl	8004a68 <HAL_PWREx_EnableOverDrive>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cd4:	f000 fc4a 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2106      	movs	r1, #6
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f004 fa6c 	bl	80051d4 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d02:	f000 fc33 	bl	800156c <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <MX_CRC_Init+0x3c>)
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <MX_CRC_Init+0x40>)
 8000d20:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_CRC_Init+0x3c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_CRC_Init+0x3c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_CRC_Init+0x3c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_CRC_Init+0x3c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_CRC_Init+0x3c>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_CRC_Init+0x3c>)
 8000d42:	f001 fba7 	bl	8002494 <HAL_CRC_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d4c:	f000 fc0e 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000138 	.word	0x20000138
 8000d58:	40023000 	.word	0x40023000

08000d5c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <MX_DMA2D_Init+0x60>)
 8000d64:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000d92:	f001 ffe5 	bl	8002d60 <HAL_DMA2D_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d9c:	f000 fbe6 	bl	800156c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000da0:	2101      	movs	r1, #1
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_DMA2D_Init+0x5c>)
 8000da4:	f002 f936 	bl	8003014 <HAL_DMA2D_ConfigLayer>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000dae:	f000 fbdd 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000015c 	.word	0x2000015c
 8000dbc:	4002b000 	.word	0x4002b000

08000dc0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_I2C3_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <MX_I2C3_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000dfc:	f002 fc6e 	bl	80036dc <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 fbb1 	bl	800156c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000e0e:	f003 f9fb 	bl	8004208 <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 fba8 	bl	800156c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2C3_Init+0x74>)
 8000e20:	f003 fa3d 	bl	800429e <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 fb9f 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000019c 	.word	0x2000019c
 8000e38:	40005c00 	.word	0x40005c00
 8000e3c:	00c0eaff 	.word	0x00c0eaff

08000e40 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2234      	movs	r2, #52	; 0x34
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f020 f9e1 	bl	8021214 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e54:	4a3a      	ldr	r2, [pc, #232]	; (8000f40 <MX_LTDC_Init+0x100>)
 8000e56:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e58:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e64:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e6a:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000e70:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e78:	2209      	movs	r2, #9
 8000e7a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e7e:	2235      	movs	r2, #53	; 0x35
 8000e80:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e84:	220b      	movs	r2, #11
 8000e86:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e8a:	f240 2215 	movw	r2, #533	; 0x215
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e92:	f240 121b 	movw	r2, #283	; 0x11b
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000e9a:	f240 2235 	movw	r2, #565	; 0x235
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ea0:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000ea2:	f240 121d 	movw	r2, #285	; 0x11d
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000ec2:	f003 fa39 	bl	8004338 <HAL_LTDC_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ecc:	f000 fb4e 	bl	800156c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ed4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ed8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000ede:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ee2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ee8:	23ff      	movs	r3, #255	; 0xff
 8000eea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000efa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_LTDC_Init+0xfc>)
 8000f26:	f003 fb8f 	bl	8004648 <HAL_LTDC_ConfigLayer>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000f30:	f000 fb1c 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3738      	adds	r7, #56	; 0x38
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200001f0 	.word	0x200001f0
 8000f40:	40016800 	.word	0x40016800

08000f44 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_QUADSPI_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f62:	2218      	movs	r2, #24
 8000f64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f68:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f6c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_QUADSPI_Init+0x50>)
 8000f82:	f003 fdc1 	bl	8004b08 <HAL_QSPI_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 faee 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000298 	.word	0x20000298
 8000f98:	a0001000 	.word	0xa0001000

08000f9c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09a      	sub	sp, #104	; 0x68
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	222c      	movs	r2, #44	; 0x2c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f020 f91c 	bl	8021214 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <MX_TIM8_Init+0x150>)
 8000fde:	4a44      	ldr	r2, [pc, #272]	; (80010f0 <MX_TIM8_Init+0x154>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1000-1;
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <MX_TIM8_Init+0x150>)
 8000fe4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <MX_TIM8_Init+0x150>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <MX_TIM8_Init+0x150>)
 8000ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <MX_TIM8_Init+0x150>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <MX_TIM8_Init+0x150>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b39      	ldr	r3, [pc, #228]	; (80010ec <MX_TIM8_Init+0x150>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800100a:	4838      	ldr	r0, [pc, #224]	; (80010ec <MX_TIM8_Init+0x150>)
 800100c:	f004 ff7b 	bl	8005f06 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001016:	f000 faa9 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001024:	4619      	mov	r1, r3
 8001026:	4831      	ldr	r0, [pc, #196]	; (80010ec <MX_TIM8_Init+0x150>)
 8001028:	f005 fbcc 	bl	80067c4 <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001032:	f000 fa9b 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001036:	482d      	ldr	r0, [pc, #180]	; (80010ec <MX_TIM8_Init+0x150>)
 8001038:	f005 f834 	bl	80060a4 <HAL_TIM_PWM_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001042:	f000 fa93 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001052:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001056:	4619      	mov	r1, r3
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <MX_TIM8_Init+0x150>)
 800105a:	f006 f863 	bl	8007124 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001064:	f000 fa82 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001068:	2360      	movs	r3, #96	; 0x60
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 999;
 800106c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001072:	2300      	movs	r3, #0
 8001074:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001086:	220c      	movs	r2, #12
 8001088:	4619      	mov	r1, r3
 800108a:	4818      	ldr	r0, [pc, #96]	; (80010ec <MX_TIM8_Init+0x150>)
 800108c:	f005 fa86 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001096:	f000 fa69 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM8_Init+0x150>)
 80010d0:	f006 f8b6 	bl	8007240 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80010da:	f000 fa47 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM8_Init+0x150>)
 80010e0:	f000 fcec 	bl	8001abc <HAL_TIM_MspPostInit>

}
 80010e4:	bf00      	nop
 80010e6:	3768      	adds	r7, #104	; 0x68
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200002e4 	.word	0x200002e4
 80010f0:	40010400 	.word	0x40010400

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART1_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <MX_USART1_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART1_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001138:	f006 f91e 	bl	8007378 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 fa13 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000330 	.word	0x20000330
 8001150:	40011000 	.word	0x40011000

08001154 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_USART6_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001160:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001164:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001198:	f006 f8ee 	bl	8007378 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 f9e3 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200003b8 	.word	0x200003b8
 80011b0:	40011400 	.word	0x40011400

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x38>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x38>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x38>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2105      	movs	r1, #5
 80011d6:	2039      	movs	r0, #57	; 0x39
 80011d8:	f001 f932 	bl	8002440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011dc:	2039      	movs	r0, #57	; 0x39
 80011de:	f001 f94b 	bl	8002478 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001208:	4b4c      	ldr	r3, [pc, #304]	; (800133c <MX_FMC_Init+0x14c>)
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <MX_FMC_Init+0x150>)
 800120c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <MX_FMC_Init+0x14c>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001214:	4b49      	ldr	r3, [pc, #292]	; (800133c <MX_FMC_Init+0x14c>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <MX_FMC_Init+0x14c>)
 800121c:	2204      	movs	r2, #4
 800121e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <MX_FMC_Init+0x14c>)
 8001222:	2210      	movs	r2, #16
 8001224:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <MX_FMC_Init+0x14c>)
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <MX_FMC_Init+0x14c>)
 800122e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001232:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <MX_FMC_Init+0x14c>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <MX_FMC_Init+0x14c>)
 800123c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001240:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <MX_FMC_Init+0x14c>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <MX_FMC_Init+0x14c>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001250:	2302      	movs	r3, #2
 8001252:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001254:	2307      	movs	r3, #7
 8001256:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800125c:	2307      	movs	r3, #7
 800125e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001260:	2303      	movs	r3, #3
 8001262:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	4832      	ldr	r0, [pc, #200]	; (800133c <MX_FMC_Init+0x14c>)
 8001272:	f004 fdb7 	bl	8005de4 <HAL_SDRAM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800127c:	f000 f976 	bl	800156c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */


  __IO uint32_t tmpmrd = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_FMC_Init+0x154>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_FMC_Init+0x154>)
 800128c:	2210      	movs	r2, #16
 800128e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_FMC_Init+0x154>)
 8001292:	2201      	movs	r2, #1
 8001294:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MX_FMC_Init+0x154>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800129c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a0:	4928      	ldr	r1, [pc, #160]	; (8001344 <MX_FMC_Init+0x154>)
 80012a2:	4826      	ldr	r0, [pc, #152]	; (800133c <MX_FMC_Init+0x14c>)
 80012a4:	f004 fdd2 	bl	8005e4c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 ffed 	bl	8002288 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_FMC_Init+0x154>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_FMC_Init+0x154>)
 80012b6:	2210      	movs	r2, #16
 80012b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_FMC_Init+0x154>)
 80012bc:	2201      	movs	r2, #1
 80012be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_FMC_Init+0x154>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ca:	491e      	ldr	r1, [pc, #120]	; (8001344 <MX_FMC_Init+0x154>)
 80012cc:	481b      	ldr	r0, [pc, #108]	; (800133c <MX_FMC_Init+0x14c>)
 80012ce:	f004 fdbd 	bl	8005e4c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_FMC_Init+0x154>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_FMC_Init+0x154>)
 80012da:	2210      	movs	r2, #16
 80012dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_FMC_Init+0x154>)
 80012e0:	2208      	movs	r2, #8
 80012e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_FMC_Init+0x154>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ee:	4915      	ldr	r1, [pc, #84]	; (8001344 <MX_FMC_Init+0x154>)
 80012f0:	4812      	ldr	r0, [pc, #72]	; (800133c <MX_FMC_Init+0x14c>)
 80012f2:	f004 fdab 	bl	8005e4c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80012f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80012fa:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_FMC_Init+0x154>)
 80012fe:	2204      	movs	r2, #4
 8001300:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_FMC_Init+0x154>)
 8001304:	2210      	movs	r2, #16
 8001306:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_FMC_Init+0x154>)
 800130a:	2201      	movs	r2, #1
 800130c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <MX_FMC_Init+0x154>)
 8001312:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	490a      	ldr	r1, [pc, #40]	; (8001344 <MX_FMC_Init+0x154>)
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <MX_FMC_Init+0x14c>)
 800131c:	f004 fd96 	bl	8005e4c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001320:	f240 712b 	movw	r1, #1835	; 0x72b
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_FMC_Init+0x14c>)
 8001326:	f004 fdc6 	bl	8005eb6 <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 800132a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800132e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001332:	601a      	str	r2, [r3, #0]



  /* USER CODE END FMC_Init 2 */
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200004a0 	.word	0x200004a0
 8001340:	a0000140 	.word	0xa0000140
 8001344:	200004e8 	.word	0x200004e8

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b090      	sub	sp, #64	; 0x40
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135e:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b55      	ldr	r3, [pc, #340]	; (80014c0 <MX_GPIO_Init+0x178>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a51      	ldr	r2, [pc, #324]	; (80014c0 <MX_GPIO_Init+0x178>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <MX_GPIO_Init+0x178>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a6:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a45      	ldr	r2, [pc, #276]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a39      	ldr	r2, [pc, #228]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <MX_GPIO_Init+0x178>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <MX_GPIO_Init+0x178>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <MX_GPIO_Init+0x178>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <MX_GPIO_Init+0x178>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_GPIO_Init+0x178>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2108      	movs	r1, #8
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0x17c>)
 800146c:	f002 f91c 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001476:	4814      	ldr	r0, [pc, #80]	; (80014c8 <MX_GPIO_Init+0x180>)
 8001478:	f002 f916 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800147c:	2308      	movs	r3, #8
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	; (80014c4 <MX_GPIO_Init+0x17c>)
 8001494:	f001 fe50 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_GPIO_Init+0x180>)
 80014b2:	f001 fe41 	bl	8003138 <HAL_GPIO_Init>

}
 80014b6:	bf00      	nop
 80014b8:	3740      	adds	r7, #64	; 0x40
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40022800 	.word	0x40022800
 80014c8:	40022000 	.word	0x40022000

080014cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f007 fb01 	bl	8008adc <osDelay>
 80014da:	e7fb      	b.n	80014d4 <StartDefaultTask+0x8>

080014dc <StartHardwareTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void const * argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f007 faf9 	bl	8008adc <osDelay>
 80014ea:	e7fb      	b.n	80014e4 <StartHardwareTask+0x8>

080014ec <StartGFXTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGFXTask */
void StartGFXTask(void const * argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGFXTask */

	MX_TouchGFX_Process();
 80014f4:	f009 ff5d 	bl	800b3b2 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f007 faef 	bl	8008adc <osDelay>
 80014fe:	e7fb      	b.n	80014f8 <StartGFXTask+0xc>

08001500 <StartTaskUartMsg>:
* @retval None
*/

/* USER CODE END Header_StartTaskUartMsg */
void StartTaskUartMsg(void const * argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartMsg */
	PollingInit();
 8001508:	f7ff fa2c 	bl	8000964 <PollingInit>

  /* Infinite loop */
  for(;;)
  {

	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800150c:	210c      	movs	r1, #12
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <StartTaskUartMsg+0x40>)
 8001510:	f004 fe2a 	bl	8006168 <HAL_TIM_PWM_Start>



	 	  	 	      __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4, counter);
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <StartTaskUartMsg+0x44>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <StartTaskUartMsg+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
	 	  	 	      HAL_Delay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f000 feb2 	bl	8002288 <HAL_Delay>


	 	  	 	      __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4, counter);
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <StartTaskUartMsg+0x44>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <StartTaskUartMsg+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
	 	  	 	      HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f000 feaa 	bl	8002288 <HAL_Delay>

	  PollingRoutine();
 8001534:	f7ff fa24 	bl	8000980 <PollingRoutine>

    osDelay(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f007 facf 	bl	8008adc <osDelay>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800153e:	e7e5      	b.n	800150c <StartTaskUartMsg+0xc>
 8001540:	200002e4 	.word	0x200002e4
 8001544:	200004f8 	.word	0x200004f8

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f000 fe75 	bl	8002248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40001000 	.word	0x40001000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_MspInit+0x4c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_MspInit+0x4c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	210f      	movs	r1, #15
 80015b2:	f06f 0001 	mvn.w	r0, #1
 80015b6:	f000 ff43 	bl	8002440 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_CRC_MspInit+0x38>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10b      	bne.n	80015f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_CRC_MspInit+0x3c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_CRC_MspInit+0x3c>)
 80015e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_CRC_MspInit+0x3c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023000 	.word	0x40023000
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_DMA2D_MspInit+0x44>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d113      	bne.n	8001642 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_DMA2D_MspInit+0x48>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <HAL_DMA2D_MspInit+0x48>)
 8001620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_DMA2D_MspInit+0x48>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2105      	movs	r1, #5
 8001636:	205a      	movs	r0, #90	; 0x5a
 8001638:	f000 ff02 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800163c:	205a      	movs	r0, #90	; 0x5a
 800163e:	f000 ff1b 	bl	8002478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	4002b000 	.word	0x4002b000
 8001650:	40023800 	.word	0x40023800

08001654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0aa      	sub	sp, #168	; 0xa8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2284      	movs	r2, #132	; 0x84
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f01f fdcd 	bl	8021214 <memset>
  if(hi2c->Instance==I2C3)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_I2C_MspInit+0xb4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13c      	bne.n	80016fe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f003 ffb6 	bl	8005604 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800169e:	f7ff ff65 	bl	800156c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_I2C_MspInit+0xb8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_I2C_MspInit+0xb8>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_I2C_MspInit+0xb8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016d4:	2304      	movs	r3, #4
 80016d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <HAL_I2C_MspInit+0xbc>)
 80016e2:	f001 fd29 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_I2C_MspInit+0xb8>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_I2C_MspInit+0xb8>)
 80016ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_I2C_MspInit+0xb8>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	37a8      	adds	r7, #168	; 0xa8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40005c00 	.word	0x40005c00
 800170c:	40023800 	.word	0x40023800
 8001710:	40021c00 	.word	0x40021c00

08001714 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_I2C_MspDeInit+0x38>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10e      	bne.n	8001744 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_I2C_MspDeInit+0x3c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_I2C_MspDeInit+0x3c>)
 800172c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <HAL_I2C_MspDeInit+0x40>)
 8001736:	f001 feab 	bl	8003490 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800173a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_I2C_MspDeInit+0x40>)
 8001740:	f001 fea6 	bl	8003490 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005c00 	.word	0x40005c00
 8001750:	40023800 	.word	0x40023800
 8001754:	40021c00 	.word	0x40021c00

08001758 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0ae      	sub	sp, #184	; 0xb8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	2284      	movs	r2, #132	; 0x84
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f01f fd4b 	bl	8021214 <memset>
  if(hltdc->Instance==LTDC)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6f      	ldr	r2, [pc, #444]	; (8001940 <HAL_LTDC_MspInit+0x1e8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	f040 80d6 	bne.w	8001936 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800178a:	2308      	movs	r3, #8
 800178c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800178e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001794:	2305      	movs	r3, #5
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001798:	2302      	movs	r3, #2
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800179c:	2300      	movs	r3, #0
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 ff28 	bl	8005604 <HAL_RCCEx_PeriphCLKConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80017ba:	f7ff fed7 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017be:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a60      	ldr	r2, [pc, #384]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b5e      	ldr	r3, [pc, #376]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a5a      	ldr	r2, [pc, #360]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b58      	ldr	r3, [pc, #352]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017ee:	4b55      	ldr	r3, [pc, #340]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a54      	ldr	r2, [pc, #336]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b52      	ldr	r3, [pc, #328]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001806:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 800180c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a48      	ldr	r2, [pc, #288]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 8001824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a42      	ldr	r2, [pc, #264]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <HAL_LTDC_MspInit+0x1ec>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184e:	2310      	movs	r3, #16
 8001850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001866:	230e      	movs	r3, #14
 8001868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001870:	4619      	mov	r1, r3
 8001872:	4835      	ldr	r0, [pc, #212]	; (8001948 <HAL_LTDC_MspInit+0x1f0>)
 8001874:	f001 fc60 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001878:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001892:	230e      	movs	r3, #14
 8001894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001898:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800189c:	4619      	mov	r1, r3
 800189e:	482b      	ldr	r0, [pc, #172]	; (800194c <HAL_LTDC_MspInit+0x1f4>)
 80018a0:	f001 fc4a 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80018a4:	23f7      	movs	r3, #247	; 0xf7
 80018a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018bc:	230e      	movs	r3, #14
 80018be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4821      	ldr	r0, [pc, #132]	; (8001950 <HAL_LTDC_MspInit+0x1f8>)
 80018ca:	f001 fc35 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018e8:	2309      	movs	r3, #9
 80018ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4817      	ldr	r0, [pc, #92]	; (8001954 <HAL_LTDC_MspInit+0x1fc>)
 80018f6:	f001 fc1f 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80018fa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80018fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001914:	230e      	movs	r3, #14
 8001916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800191a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800191e:	4619      	mov	r1, r3
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <HAL_LTDC_MspInit+0x200>)
 8001922:	f001 fc09 	bl	8003138 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	2058      	movs	r0, #88	; 0x58
 800192c:	f000 fd88 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001930:	2058      	movs	r0, #88	; 0x58
 8001932:	f000 fda1 	bl	8002478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	37b8      	adds	r7, #184	; 0xb8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40016800 	.word	0x40016800
 8001944:	40023800 	.word	0x40023800
 8001948:	40021000 	.word	0x40021000
 800194c:	40022400 	.word	0x40022400
 8001950:	40022800 	.word	0x40022800
 8001954:	40021800 	.word	0x40021800
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_QSPI_MspInit+0x10c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d170      	bne.n	8001a60 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6393      	str	r3, [r2, #56]	; 0x38
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a34      	ldr	r2, [pc, #208]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a2e      	ldr	r2, [pc, #184]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_QSPI_MspInit+0x110>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019de:	2304      	movs	r3, #4
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019ee:	2309      	movs	r3, #9
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	481d      	ldr	r0, [pc, #116]	; (8001a70 <HAL_QSPI_MspInit+0x114>)
 80019fa:	f001 fb9d 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019fe:	2340      	movs	r3, #64	; 0x40
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a0e:	230a      	movs	r3, #10
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4816      	ldr	r0, [pc, #88]	; (8001a74 <HAL_QSPI_MspInit+0x118>)
 8001a1a:	f001 fb8d 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a2e:	2309      	movs	r3, #9
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <HAL_QSPI_MspInit+0x118>)
 8001a3a:	f001 fb7d 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001a3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a50:	2309      	movs	r3, #9
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <HAL_QSPI_MspInit+0x11c>)
 8001a5c:	f001 fb6c 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3730      	adds	r7, #48	; 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	a0001000 	.word	0xa0001000
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020c00 	.word	0x40020c00

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_TIM_Base_MspInit+0x38>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40010400 	.word	0x40010400
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_TIM_MspPostInit+0x64>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d11b      	bne.n	8001b16 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_TIM_MspPostInit+0x68>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_TIM_MspPostInit+0x68>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_TIM_MspPostInit+0x68>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af6:	2304      	movs	r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <HAL_TIM_MspPostInit+0x6c>)
 8001b12:	f001 fb11 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40010400 	.word	0x40010400
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40022000 	.word	0x40022000

08001b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0ae      	sub	sp, #184	; 0xb8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	2284      	movs	r2, #132	; 0x84
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f01f fb61 	bl	8021214 <memset>
  if(huart->Instance==USART1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <HAL_UART_MspInit+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d165      	bne.n	8001c28 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b60:	2300      	movs	r3, #0
 8001b62:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b64:	f107 0320 	add.w	r3, r7, #32
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fd4b 	bl	8005604 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b74:	f7ff fcfa 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b78:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	4a69      	ldr	r2, [pc, #420]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001b7e:	f043 0310 	orr.w	r3, r3, #16
 8001b82:	6453      	str	r3, [r2, #68]	; 0x44
 8001b84:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	4a63      	ldr	r2, [pc, #396]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9c:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bd8:	2307      	movs	r3, #7
 8001bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4850      	ldr	r0, [pc, #320]	; (8001d28 <HAL_UART_MspInit+0x1fc>)
 8001be6:	f001 faa7 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c04:	2307      	movs	r3, #7
 8001c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4846      	ldr	r0, [pc, #280]	; (8001d2c <HAL_UART_MspInit+0x200>)
 8001c12:	f001 fa91 	bl	8003138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2105      	movs	r1, #5
 8001c1a:	2025      	movs	r0, #37	; 0x25
 8001c1c:	f000 fc10 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c20:	2025      	movs	r0, #37	; 0x25
 8001c22:	f000 fc29 	bl	8002478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c26:	e076      	b.n	8001d16 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART6)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a40      	ldr	r2, [pc, #256]	; (8001d30 <HAL_UART_MspInit+0x204>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d171      	bne.n	8001d16 <HAL_UART_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c36:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fcdf 	bl	8005604 <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8001c4c:	f7ff fc8e 	bl	800156c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	4a33      	ldr	r2, [pc, #204]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_UART_MspInit+0x1f8>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4823      	ldr	r0, [pc, #140]	; (8001d34 <HAL_UART_MspInit+0x208>)
 8001ca6:	f001 fa47 	bl	8003138 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_UART_MspInit+0x210>)
 8001cae:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cb2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001cb6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cca:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001cea:	4813      	ldr	r0, [pc, #76]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cec:	f000 fcbc 	bl	8002668 <HAL_DMA_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8001cf6:	f7ff fc39 	bl	800156c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001cfe:	675a      	str	r2, [r3, #116]	; 0x74
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_UART_MspInit+0x20c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2105      	movs	r1, #5
 8001d0a:	2047      	movs	r0, #71	; 0x47
 8001d0c:	f000 fb98 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d10:	2047      	movs	r0, #71	; 0x47
 8001d12:	f000 fbb1 	bl	8002478 <HAL_NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	37b8      	adds	r7, #184	; 0xb8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40011400 	.word	0x40011400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	20000440 	.word	0x20000440
 8001d3c:	40026428 	.word	0x40026428

08001d40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_FMC_MspInit+0x100>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d16d      	bne.n	8001e38 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_FMC_MspInit+0x100>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_FMC_MspInit+0x104>)
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	4a37      	ldr	r2, [pc, #220]	; (8001e44 <HAL_FMC_MspInit+0x104>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6393      	str	r3, [r2, #56]	; 0x38
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_FMC_MspInit+0x104>)
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001d7a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001d7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	4619      	mov	r1, r3
 8001d94:	482c      	ldr	r0, [pc, #176]	; (8001e48 <HAL_FMC_MspInit+0x108>)
 8001d96:	f001 f9cf 	bl	8003138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001d9a:	f248 1333 	movw	r3, #33075	; 0x8133
 8001d9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dac:	230c      	movs	r3, #12
 8001dae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	4619      	mov	r1, r3
 8001db4:	4825      	ldr	r0, [pc, #148]	; (8001e4c <HAL_FMC_MspInit+0x10c>)
 8001db6:	f001 f9bf 	bl	8003138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001dba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001dbe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dcc:	230c      	movs	r3, #12
 8001dce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	481e      	ldr	r0, [pc, #120]	; (8001e50 <HAL_FMC_MspInit+0x110>)
 8001dd6:	f001 f9af 	bl	8003138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001dda:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001dde:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dec:	230c      	movs	r3, #12
 8001dee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <HAL_FMC_MspInit+0x114>)
 8001df6:	f001 f99f 	bl	8003138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001dfa:	2328      	movs	r3, #40	; 0x28
 8001dfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4811      	ldr	r0, [pc, #68]	; (8001e58 <HAL_FMC_MspInit+0x118>)
 8001e14:	f001 f990 	bl	8003138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e28:	230c      	movs	r3, #12
 8001e2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <HAL_FMC_MspInit+0x11c>)
 8001e32:	f001 f981 	bl	8003138 <HAL_GPIO_Init>
 8001e36:	e000      	b.n	8001e3a <HAL_FMC_MspInit+0xfa>
    return;
 8001e38:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200004fc 	.word	0x200004fc
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021800 	.word	0x40021800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021400 	.word	0x40021400
 8001e58:	40021c00 	.word	0x40021c00
 8001e5c:	40020800 	.word	0x40020800

08001e60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e68:	f7ff ff6a 	bl	8001d40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e84:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_InitTick+0xe0>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <HAL_InitTick+0xe0>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <HAL_InitTick+0xe0>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e9c:	f107 0210 	add.w	r2, r7, #16
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fb7a 	bl	80055a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eb6:	f003 fb4b 	bl	8005550 <HAL_RCC_GetPCLK1Freq>
 8001eba:	6378      	str	r0, [r7, #52]	; 0x34
 8001ebc:	e004      	b.n	8001ec8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ebe:	f003 fb47 	bl	8005550 <HAL_RCC_GetPCLK1Freq>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <HAL_InitTick+0xe4>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	0c9b      	lsrs	r3, r3, #18
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_InitTick+0xe8>)
 8001ed8:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <HAL_InitTick+0xec>)
 8001eda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_InitTick+0xe8>)
 8001ede:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_InitTick+0xe8>)
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_InitTick+0xe8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_InitTick+0xe8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_InitTick+0xe8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001efc:	4817      	ldr	r0, [pc, #92]	; (8001f5c <HAL_InitTick+0xe8>)
 8001efe:	f004 f802 	bl	8005f06 <HAL_TIM_Base_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11b      	bne.n	8001f48 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f10:	4812      	ldr	r0, [pc, #72]	; (8001f5c <HAL_InitTick+0xe8>)
 8001f12:	f004 f84f 	bl	8005fb4 <HAL_TIM_Base_Start_IT>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d111      	bne.n	8001f48 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f24:	2036      	movs	r0, #54	; 0x36
 8001f26:	f000 faa7 	bl	8002478 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d808      	bhi.n	8001f42 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	2036      	movs	r0, #54	; 0x36
 8001f36:	f000 fa83 	bl	8002440 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_InitTick+0xf0>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e002      	b.n	8001f48 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3738      	adds	r7, #56	; 0x38
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	20000500 	.word	0x20000500
 8001f60:	40001000 	.word	0x40001000
 8001f64:	20000030 	.word	0x20000030

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <USART1_IRQHandler+0x10>)
 8001f9a:	f005 fa7f 	bl	800749c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000330 	.word	0x20000330

08001fa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM6_DAC_IRQHandler+0x10>)
 8001fae:	f004 f9d5 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000500 	.word	0x20000500

08001fbc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <DMA2_Stream1_IRQHandler+0x10>)
 8001fc2:	f000 fc91 	bl	80028e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000440 	.word	0x20000440

08001fd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <USART6_IRQHandler+0x10>)
 8001fd6:	f005 fa61 	bl	800749c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200003b8 	.word	0x200003b8

08001fe4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <LTDC_IRQHandler+0x10>)
 8001fea:	f002 fa75 	bl	80044d8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200001f0 	.word	0x200001f0

08001ff8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <DMA2D_IRQHandler+0x10>)
 8001ffe:	f000 fef9 	bl	8002df4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000015c 	.word	0x2000015c

0800200c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_kill>:

int _kill(int pid, int sig)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002026:	f01e ffa1 	bl	8020f6c <__errno>
 800202a:	4603      	mov	r3, r0
 800202c:	2216      	movs	r2, #22
 800202e:	601a      	str	r2, [r3, #0]
  return -1;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_exit>:

void _exit (int status)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffe7 	bl	800201c <_kill>
  while (1) {}    /* Make sure we hang here */
 800204e:	e7fe      	b.n	800204e <_exit+0x12>

08002050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00a      	b.n	8002078 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002062:	f3af 8000 	nop.w
 8002066:	4601      	mov	r1, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf0      	blt.n	8002062 <_read+0x12>
  }

  return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e009      	b.n	80020b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	60ba      	str	r2, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf1      	blt.n	800209c <_write+0x12>
  }
  return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_close>:

int _close(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ea:	605a      	str	r2, [r3, #4]
  return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_isatty>:

int _isatty(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <_sbrk+0x5c>)
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <_sbrk+0x60>)
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <_sbrk+0x64>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <_sbrk+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800215c:	f01e ff06 	bl	8020f6c <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e009      	b.n	8002180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <_sbrk+0x64>)
 800217c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20050000 	.word	0x20050000
 800218c:	00000400 	.word	0x00000400
 8002190:	2000054c 	.word	0x2000054c
 8002194:	20011dc0 	.word	0x20011dc0

08002198 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <SystemInit+0x20>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <SystemInit+0x20>)
 80021a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021c2:	490e      	ldr	r1, [pc, #56]	; (80021fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021c4:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d8:	4c0b      	ldr	r4, [pc, #44]	; (8002208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021e6:	f7ff ffd7 	bl	8002198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ea:	f01e ffcd 	bl	8021188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ee:	f7fe fc9d 	bl	8000b2c <main>
  bx  lr    
 80021f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021fc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002200:	080a4878 	.word	0x080a4878
  ldr r2, =_sbss
 8002204:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002208:	20011dc0 	.word	0x20011dc0

0800220c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC_IRQHandler>
	...

08002210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_Init+0x34>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_Init+0x34>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_Init+0x34>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_Init+0x34>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f8fc 	bl	800242a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	200f      	movs	r0, #15
 8002234:	f7ff fe1e 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff f99e 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000034 	.word	0x20000034
 800226c:	20000550 	.word	0x20000550

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000550 	.word	0x20000550

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000034 	.word	0x20000034

080022d0 <__NVIC_SetPriorityGrouping>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <__NVIC_SetPriorityGrouping+0x40>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <__NVIC_SetPriorityGrouping+0x40>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00
 8002314:	05fa0000 	.word	0x05fa0000

08002318 <__NVIC_GetPriorityGrouping>:
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	; (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff4c 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002452:	f7ff ff61 	bl	8002318 <__NVIC_GetPriorityGrouping>
 8002456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	6978      	ldr	r0, [r7, #20]
 800245e:	f7ff ffb1 	bl	80023c4 <NVIC_EncodePriority>
 8002462:	4602      	mov	r2, r0
 8002464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff80 	bl	8002370 <__NVIC_SetPriority>
}
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff54 	bl	8002334 <__NVIC_EnableIRQ>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e054      	b.n	8002550 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7f5b      	ldrb	r3, [r3, #29]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff f886 	bl	80015c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	791b      	ldrb	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_CRC_Init+0xc4>)
 80024d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0218 	bic.w	r2, r2, #24
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	e00c      	b.n	80024fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	461a      	mov	r2, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f834 	bl	800255c <HAL_CRCEx_Polynomial_Set>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e028      	b.n	8002550 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	795b      	ldrb	r3, [r3, #5]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f04f 32ff 	mov.w	r2, #4294967295
 800250e:	611a      	str	r2, [r3, #16]
 8002510:	e004      	b.n	800251c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6912      	ldr	r2, [r2, #16]
 800251a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	04c11db7 	.word	0x04c11db7

0800255c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800256c:	231f      	movs	r3, #31
 800256e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002570:	bf00      	nop
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	613a      	str	r2, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_CRCEx_Polynomial_Set+0x34>
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b18      	cmp	r3, #24
 8002594:	d846      	bhi.n	8002624 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002596:	a201      	add	r2, pc, #4	; (adr r2, 800259c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	0800262b 	.word	0x0800262b
 80025a0:	08002625 	.word	0x08002625
 80025a4:	08002625 	.word	0x08002625
 80025a8:	08002625 	.word	0x08002625
 80025ac:	08002625 	.word	0x08002625
 80025b0:	08002625 	.word	0x08002625
 80025b4:	08002625 	.word	0x08002625
 80025b8:	08002625 	.word	0x08002625
 80025bc:	08002619 	.word	0x08002619
 80025c0:	08002625 	.word	0x08002625
 80025c4:	08002625 	.word	0x08002625
 80025c8:	08002625 	.word	0x08002625
 80025cc:	08002625 	.word	0x08002625
 80025d0:	08002625 	.word	0x08002625
 80025d4:	08002625 	.word	0x08002625
 80025d8:	08002625 	.word	0x08002625
 80025dc:	0800260d 	.word	0x0800260d
 80025e0:	08002625 	.word	0x08002625
 80025e4:	08002625 	.word	0x08002625
 80025e8:	08002625 	.word	0x08002625
 80025ec:	08002625 	.word	0x08002625
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002625 	.word	0x08002625
 80025f8:	08002625 	.word	0x08002625
 80025fc:	08002601 	.word	0x08002601
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b06      	cmp	r3, #6
 8002604:	d913      	bls.n	800262e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800260a:	e010      	b.n	800262e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b07      	cmp	r3, #7
 8002610:	d90f      	bls.n	8002632 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002616:	e00c      	b.n	8002632 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	d90b      	bls.n	8002636 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002622:	e008      	b.n	8002636 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	75fb      	strb	r3, [r7, #23]
      break;
 8002628:	e006      	b.n	8002638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800262a:	bf00      	nop
 800262c:	e004      	b.n	8002638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002636:	bf00      	nop
  }
  if (status == HAL_OK)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 0118 	bic.w	r1, r3, #24
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff fdfc 	bl	8002270 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e099      	b.n	80027b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	e00f      	b.n	80026c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a6:	f7ff fde3 	bl	8002270 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d908      	bls.n	80026c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2203      	movs	r2, #3
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e078      	b.n	80027b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e8      	bne.n	80026a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_DMA_Init+0x158>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2b04      	cmp	r3, #4
 800271e:	d107      	bne.n	8002730 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	4313      	orrs	r3, r2
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 0307 	bic.w	r3, r3, #7
 8002746:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b04      	cmp	r3, #4
 8002758:	d117      	bne.n	800278a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00e      	beq.n	800278a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fa7b 	bl	8002c68 <DMA_CheckFifoParam>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2240      	movs	r2, #64	; 0x40
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002786:	2301      	movs	r3, #1
 8002788:	e016      	b.n	80027b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa32 	bl	8002bfc <DMA_CalcBaseAndBitshift>
 8002798:	4603      	mov	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	223f      	movs	r2, #63	; 0x3f
 80027a2:	409a      	lsls	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	f010803f 	.word	0xf010803f

080027c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027d2:	f7ff fd4d 	bl	8002270 <HAL_GetTick>
 80027d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e052      	b.n	800289c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0216 	bic.w	r2, r2, #22
 8002804:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002814:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <HAL_DMA_Abort+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0208 	bic.w	r2, r2, #8
 8002834:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002846:	e013      	b.n	8002870 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002848:	f7ff fd12 	bl	8002270 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b05      	cmp	r3, #5
 8002854:	d90c      	bls.n	8002870 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2203      	movs	r2, #3
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e015      	b.n	800289c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e4      	bne.n	8002848 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	223f      	movs	r2, #63	; 0x3f
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2280      	movs	r2, #128	; 0x80
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00c      	b.n	80028dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2205      	movs	r2, #5
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028f4:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <HAL_DMA_IRQHandler+0x248>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a8e      	ldr	r2, [pc, #568]	; (8002b34 <HAL_DMA_IRQHandler+0x24c>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0a9b      	lsrs	r3, r3, #10
 8002900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2208      	movs	r2, #8
 8002914:	409a      	lsls	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01a      	beq.n	8002954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0204 	bic.w	r2, r2, #4
 800293a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2208      	movs	r2, #8
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2201      	movs	r2, #1
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2201      	movs	r2, #1
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 0202 	orr.w	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2204      	movs	r2, #4
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d012      	beq.n	80029c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2204      	movs	r2, #4
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0204 	orr.w	r2, r3, #4
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	2210      	movs	r2, #16
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d043      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d03c      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2210      	movs	r2, #16
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d018      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d108      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d024      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
 8002a16:	e01f      	b.n	8002a58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
 8002a28:	e016      	b.n	8002a58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d107      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0208 	bic.w	r2, r2, #8
 8002a46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 808f 	beq.w	8002b88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8087 	beq.w	8002b88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2220      	movs	r2, #32
 8002a80:	409a      	lsls	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d136      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0216 	bic.w	r2, r2, #22
 8002aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0x1da>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0208 	bic.w	r2, r2, #8
 8002ad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	223f      	movs	r2, #63	; 0x3f
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d07e      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
        }
        return;
 8002afe:	e079      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01d      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10d      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d031      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e02c      	b.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
 8002b2e:	bf00      	nop
 8002b30:	2000002c 	.word	0x2000002c
 8002b34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d023      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
 8002b48:	e01e      	b.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10f      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0210 	bic.w	r2, r2, #16
 8002b66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d032      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d022      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d307      	bcc.n	8002bd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f2      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x2cc>
 8002bce:	e000      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
 8002bf2:	e000      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bf4:	bf00      	nop
    }
  }
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3b10      	subs	r3, #16
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <DMA_CalcBaseAndBitshift+0x60>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <DMA_CalcBaseAndBitshift+0x64>)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d908      	bls.n	8002c3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <DMA_CalcBaseAndBitshift+0x68>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	1d1a      	adds	r2, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58
 8002c3a:	e006      	b.n	8002c4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <DMA_CalcBaseAndBitshift+0x68>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	aaaaaaab 	.word	0xaaaaaaab
 8002c60:	08022f04 	.word	0x08022f04
 8002c64:	fffffc00 	.word	0xfffffc00

08002c68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11f      	bne.n	8002cc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d856      	bhi.n	8002d36 <DMA_CheckFifoParam+0xce>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <DMA_CheckFifoParam+0x28>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002ca1 	.word	0x08002ca1
 8002c94:	08002cb3 	.word	0x08002cb3
 8002c98:	08002ca1 	.word	0x08002ca1
 8002c9c:	08002d37 	.word	0x08002d37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d046      	beq.n	8002d3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb0:	e043      	b.n	8002d3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cba:	d140      	bne.n	8002d3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc0:	e03d      	b.n	8002d3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cca:	d121      	bne.n	8002d10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d837      	bhi.n	8002d42 <DMA_CheckFifoParam+0xda>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <DMA_CheckFifoParam+0x70>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cef 	.word	0x08002cef
 8002ce0:	08002ce9 	.word	0x08002ce9
 8002ce4:	08002d01 	.word	0x08002d01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
      break;
 8002cec:	e030      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d025      	beq.n	8002d46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfe:	e022      	b.n	8002d46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d08:	d11f      	bne.n	8002d4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d0e:	e01c      	b.n	8002d4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d903      	bls.n	8002d1e <DMA_CheckFifoParam+0xb6>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d003      	beq.n	8002d24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d1c:	e018      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      break;
 8002d22:	e015      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00e      	beq.n	8002d4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e00b      	b.n	8002d4e <DMA_CheckFifoParam+0xe6>
      break;
 8002d36:	bf00      	nop
 8002d38:	e00a      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e008      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e006      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e004      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e002      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop

08002d60 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e039      	b.n	8002de6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fc3e 	bl	8001608 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	f023 0107 	bic.w	r1, r3, #7
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_DMA2D_Init+0x90>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68d1      	ldr	r1, [r2, #12]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	ffffc000 	.word	0xffffc000

08002df4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d026      	beq.n	8002e64 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d021      	beq.n	8002e64 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2204      	movs	r2, #4
 8002e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d026      	beq.n	8002ebc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d021      	beq.n	8002ebc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e86:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d026      	beq.n	8002f14 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d021      	beq.n	8002f14 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ede:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	f043 0204 	orr.w	r2, r3, #4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d013      	beq.n	8002f46 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f36:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f853 	bl	8002fec <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d024      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01f      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01f      	beq.n	8002fe4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01a      	beq.n	8002fe4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f80e 	bl	8003000 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_DMA2D_ConfigLayer+0x20>
 8003030:	2302      	movs	r3, #2
 8003032:	e079      	b.n	8003128 <HAL_DMA2D_ConfigLayer+0x114>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	3318      	adds	r3, #24
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800305e:	4b35      	ldr	r3, [pc, #212]	; (8003134 <HAL_DMA2D_ConfigLayer+0x120>)
 8003060:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b0a      	cmp	r3, #10
 8003068:	d003      	beq.n	8003072 <HAL_DMA2D_ConfigLayer+0x5e>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b09      	cmp	r3, #9
 8003070:	d107      	bne.n	8003082 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e005      	b.n	800308e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d120      	bne.n	80030d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	ea02 0103 	and.w	r1, r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b0a      	cmp	r3, #10
 80030bc:	d003      	beq.n	80030c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b09      	cmp	r3, #9
 80030c4:	d127      	bne.n	8003116 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
 80030d4:	e01f      	b.n	8003116 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	ea02 0103 	and.w	r1, r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b0a      	cmp	r3, #10
 80030fe:	d003      	beq.n	8003108 <HAL_DMA2D_ConfigLayer+0xf4>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b09      	cmp	r3, #9
 8003106:	d106      	bne.n	8003116 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003114:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	ff03000f 	.word	0xff03000f

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e175      	b.n	8003444 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	f040 8164 	bne.w	800343e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d005      	beq.n	800318e <HAL_GPIO_Init+0x56>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d130      	bne.n	80031f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 0201 	and.w	r2, r3, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d017      	beq.n	800322c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d123      	bne.n	8003280 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80be 	beq.w	800343e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	4b66      	ldr	r3, [pc, #408]	; (800345c <HAL_GPIO_Init+0x324>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4a65      	ldr	r2, [pc, #404]	; (800345c <HAL_GPIO_Init+0x324>)
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6453      	str	r3, [r2, #68]	; 0x44
 80032ce:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_GPIO_Init+0x324>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032da:	4a61      	ldr	r2, [pc, #388]	; (8003460 <HAL_GPIO_Init+0x328>)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	3302      	adds	r3, #2
 80032e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_GPIO_Init+0x32c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d037      	beq.n	8003376 <HAL_GPIO_Init+0x23e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_GPIO_Init+0x330>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d031      	beq.n	8003372 <HAL_GPIO_Init+0x23a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a56      	ldr	r2, [pc, #344]	; (800346c <HAL_GPIO_Init+0x334>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02b      	beq.n	800336e <HAL_GPIO_Init+0x236>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a55      	ldr	r2, [pc, #340]	; (8003470 <HAL_GPIO_Init+0x338>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d025      	beq.n	800336a <HAL_GPIO_Init+0x232>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a54      	ldr	r2, [pc, #336]	; (8003474 <HAL_GPIO_Init+0x33c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <HAL_GPIO_Init+0x22e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a53      	ldr	r2, [pc, #332]	; (8003478 <HAL_GPIO_Init+0x340>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x22a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_GPIO_Init+0x344>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x226>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a51      	ldr	r2, [pc, #324]	; (8003480 <HAL_GPIO_Init+0x348>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x222>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a50      	ldr	r2, [pc, #320]	; (8003484 <HAL_GPIO_Init+0x34c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x21e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_GPIO_Init+0x350>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x21a>
 800334e:	2309      	movs	r3, #9
 8003350:	e012      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003352:	230a      	movs	r3, #10
 8003354:	e010      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003356:	2308      	movs	r3, #8
 8003358:	e00e      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800335a:	2307      	movs	r3, #7
 800335c:	e00c      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800335e:	2306      	movs	r3, #6
 8003360:	e00a      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003362:	2305      	movs	r3, #5
 8003364:	e008      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003366:	2304      	movs	r3, #4
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800336a:	2303      	movs	r3, #3
 800336c:	e004      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800336e:	2302      	movs	r3, #2
 8003370:	e002      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003376:	2300      	movs	r3, #0
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	f002 0203 	and.w	r2, r2, #3
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4093      	lsls	r3, r2
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003388:	4935      	ldr	r1, [pc, #212]	; (8003460 <HAL_GPIO_Init+0x328>)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_GPIO_Init+0x354>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ba:	4a34      	ldr	r2, [pc, #208]	; (800348c <HAL_GPIO_Init+0x354>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_GPIO_Init+0x354>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e4:	4a29      	ldr	r2, [pc, #164]	; (800348c <HAL_GPIO_Init+0x354>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_GPIO_Init+0x354>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_GPIO_Init+0x354>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_GPIO_Init+0x354>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <HAL_GPIO_Init+0x354>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3301      	adds	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	f67f ae86 	bls.w	8003158 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	40013800 	.word	0x40013800
 8003464:	40020000 	.word	0x40020000
 8003468:	40020400 	.word	0x40020400
 800346c:	40020800 	.word	0x40020800
 8003470:	40020c00 	.word	0x40020c00
 8003474:	40021000 	.word	0x40021000
 8003478:	40021400 	.word	0x40021400
 800347c:	40021800 	.word	0x40021800
 8003480:	40021c00 	.word	0x40021c00
 8003484:	40022000 	.word	0x40022000
 8003488:	40022400 	.word	0x40022400
 800348c:	40013c00 	.word	0x40013c00

08003490 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e0d9      	b.n	8003660 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80034ac:	2201      	movs	r2, #1
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	f040 80c9 	bne.w	800365a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80034c8:	4a6b      	ldr	r2, [pc, #428]	; (8003678 <HAL_GPIO_DeInit+0x1e8>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a63      	ldr	r2, [pc, #396]	; (800367c <HAL_GPIO_DeInit+0x1ec>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d037      	beq.n	8003562 <HAL_GPIO_DeInit+0xd2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a62      	ldr	r2, [pc, #392]	; (8003680 <HAL_GPIO_DeInit+0x1f0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d031      	beq.n	800355e <HAL_GPIO_DeInit+0xce>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a61      	ldr	r2, [pc, #388]	; (8003684 <HAL_GPIO_DeInit+0x1f4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d02b      	beq.n	800355a <HAL_GPIO_DeInit+0xca>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a60      	ldr	r2, [pc, #384]	; (8003688 <HAL_GPIO_DeInit+0x1f8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d025      	beq.n	8003556 <HAL_GPIO_DeInit+0xc6>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a5f      	ldr	r2, [pc, #380]	; (800368c <HAL_GPIO_DeInit+0x1fc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01f      	beq.n	8003552 <HAL_GPIO_DeInit+0xc2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a5e      	ldr	r2, [pc, #376]	; (8003690 <HAL_GPIO_DeInit+0x200>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_GPIO_DeInit+0xbe>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a5d      	ldr	r2, [pc, #372]	; (8003694 <HAL_GPIO_DeInit+0x204>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_DeInit+0xba>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a5c      	ldr	r2, [pc, #368]	; (8003698 <HAL_GPIO_DeInit+0x208>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_DeInit+0xb6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a5b      	ldr	r2, [pc, #364]	; (800369c <HAL_GPIO_DeInit+0x20c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_DeInit+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a5a      	ldr	r2, [pc, #360]	; (80036a0 <HAL_GPIO_DeInit+0x210>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_DeInit+0xae>
 800353a:	2309      	movs	r3, #9
 800353c:	e012      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 800353e:	230a      	movs	r3, #10
 8003540:	e010      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 8003542:	2308      	movs	r3, #8
 8003544:	e00e      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 8003546:	2307      	movs	r3, #7
 8003548:	e00c      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 800354a:	2306      	movs	r3, #6
 800354c:	e00a      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 800354e:	2305      	movs	r3, #5
 8003550:	e008      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 8003552:	2304      	movs	r3, #4
 8003554:	e006      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 8003556:	2303      	movs	r3, #3
 8003558:	e004      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 800355a:	2302      	movs	r3, #2
 800355c:	e002      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_GPIO_DeInit+0xd4>
 8003562:	2300      	movs	r3, #0
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	f002 0203 	and.w	r2, r2, #3
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	4093      	lsls	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	d132      	bne.n	80035da <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	4949      	ldr	r1, [pc, #292]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 800357e:	4013      	ands	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003582:	4b48      	ldr	r3, [pc, #288]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	4946      	ldr	r1, [pc, #280]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 800358c:	4013      	ands	r3, r2
 800358e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003590:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	43db      	mvns	r3, r3
 8003598:	4942      	ldr	r1, [pc, #264]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 800359a:	4013      	ands	r3, r2
 800359c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	493f      	ldr	r1, [pc, #252]	; (80036a4 <HAL_GPIO_DeInit+0x214>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80035bc:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <HAL_GPIO_DeInit+0x1e8>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	43da      	mvns	r2, r3
 80035cc:	482a      	ldr	r0, [pc, #168]	; (8003678 <HAL_GPIO_DeInit+0x1e8>)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	400a      	ands	r2, r1
 80035d4:	3302      	adds	r3, #2
 80035d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2103      	movs	r1, #3
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	401a      	ands	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	08da      	lsrs	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3208      	adds	r2, #8
 80035f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	220f      	movs	r2, #15
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	08d2      	lsrs	r2, r2, #3
 8003610:	4019      	ands	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3208      	adds	r2, #8
 8003616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2103      	movs	r1, #3
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	401a      	ands	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	2101      	movs	r1, #1
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	401a      	ands	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2103      	movs	r1, #3
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	401a      	ands	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3301      	adds	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	f67f af22 	bls.w	80034ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40013800 	.word	0x40013800
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	40020800 	.word	0x40020800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40021000 	.word	0x40021000
 8003690:	40021400 	.word	0x40021400
 8003694:	40021800 	.word	0x40021800
 8003698:	40021c00 	.word	0x40021c00
 800369c:	40022000 	.word	0x40022000
 80036a0:	40022400 	.word	0x40022400
 80036a4:	40013c00 	.word	0x40013c00

080036a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b8:	787b      	ldrb	r3, [r7, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036c4:	e003      	b.n	80036ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd ffa6 	bl	8001654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800372c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e006      	b.n	8003764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d104      	bne.n	8003776 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_I2C_Init+0x11c>)
 8003782:	430b      	orrs	r3, r1
 8003784:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69d9      	ldr	r1, [r3, #28]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	02008000 	.word	0x02008000

080037fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e021      	b.n	8003852 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2224      	movs	r2, #36	; 0x24
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd ff74 	bl	8001714 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4603      	mov	r3, r0
 800386c:	817b      	strh	r3, [r7, #10]
 800386e:	460b      	mov	r3, r1
 8003870:	813b      	strh	r3, [r7, #8]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b20      	cmp	r3, #32
 8003880:	f040 80f9 	bne.w	8003a76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_I2C_Mem_Write+0x34>
 800388a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003896:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0ed      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_I2C_Mem_Write+0x4e>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0e6      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038b2:	f7fe fcdd 	bl	8002270 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2319      	movs	r3, #25
 80038be:	2201      	movs	r2, #1
 80038c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fad1 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0d1      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2221      	movs	r2, #33	; 0x21
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a3a      	ldr	r2, [r7, #32]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038fc:	88f8      	ldrh	r0, [r7, #6]
 80038fe:	893a      	ldrh	r2, [r7, #8]
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	4603      	mov	r3, r0
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f9e1 	bl	8003cd4 <I2C_RequestMemoryWrite>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0a9      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2bff      	cmp	r3, #255	; 0xff
 800392c:	d90e      	bls.n	800394c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	22ff      	movs	r2, #255	; 0xff
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	b2da      	uxtb	r2, r3
 800393a:	8979      	ldrh	r1, [r7, #10]
 800393c:	2300      	movs	r3, #0
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fc2d 	bl	80041a4 <I2C_TransferConfig>
 800394a:	e00f      	b.n	800396c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	b2da      	uxtb	r2, r3
 800395c:	8979      	ldrh	r1, [r7, #10]
 800395e:	2300      	movs	r3, #0
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fc1c 	bl	80041a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fabb 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e07b      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d034      	beq.n	8003a24 <HAL_I2C_Mem_Write+0x1c8>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d130      	bne.n	8003a24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	2200      	movs	r2, #0
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fa4d 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e04d      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2bff      	cmp	r3, #255	; 0xff
 80039e4:	d90e      	bls.n	8003a04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fbd1 	bl	80041a4 <I2C_TransferConfig>
 8003a02:	e00f      	b.n	8003a24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	8979      	ldrh	r1, [r7, #10]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fbc0 	bl	80041a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d19e      	bne.n	800396c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa9a 	bl	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e01a      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2220      	movs	r2, #32
 8003a48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_I2C_Mem_Write+0x224>)
 8003a56:	400b      	ands	r3, r1
 8003a58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	fe00e800 	.word	0xfe00e800

08003a84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	817b      	strh	r3, [r7, #10]
 8003a96:	460b      	mov	r3, r1
 8003a98:	813b      	strh	r3, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	f040 80fd 	bne.w	8003ca6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0x34>
 8003ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0f1      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Mem_Read+0x4e>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e0ea      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ada:	f7fe fbc9 	bl	8002270 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2319      	movs	r3, #25
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f9bd 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0d5      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2222      	movs	r2, #34	; 0x22
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a3a      	ldr	r2, [r7, #32]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b24:	88f8      	ldrh	r0, [r7, #6]
 8003b26:	893a      	ldrh	r2, [r7, #8]
 8003b28:	8979      	ldrh	r1, [r7, #10]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	4603      	mov	r3, r0
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f921 	bl	8003d7c <I2C_RequestMemoryRead>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0ad      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2bff      	cmp	r3, #255	; 0xff
 8003b54:	d90e      	bls.n	8003b74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	22ff      	movs	r2, #255	; 0xff
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	8979      	ldrh	r1, [r7, #10]
 8003b64:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <HAL_I2C_Mem_Read+0x22c>)
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fb19 	bl	80041a4 <I2C_TransferConfig>
 8003b72:	e00f      	b.n	8003b94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_I2C_Mem_Read+0x22c>)
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fb08 	bl	80041a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f964 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07c      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d034      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x1d0>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d130      	bne.n	8003c54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f935 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e04d      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2bff      	cmp	r3, #255	; 0xff
 8003c14:	d90e      	bls.n	8003c34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	22ff      	movs	r2, #255	; 0xff
 8003c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	8979      	ldrh	r1, [r7, #10]
 8003c24:	2300      	movs	r3, #0
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fab9 	bl	80041a4 <I2C_TransferConfig>
 8003c32:	e00f      	b.n	8003c54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	8979      	ldrh	r1, [r7, #10]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 faa8 	bl	80041a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d19a      	bne.n	8003b94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f982 	bl	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e01a      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2220      	movs	r2, #32
 8003c78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_I2C_Mem_Read+0x230>)
 8003c86:	400b      	ands	r3, r1
 8003c88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	80002400 	.word	0x80002400
 8003cb4:	fe00e800 	.word	0xfe00e800

08003cb8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc6:	b2db      	uxtb	r3, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	8979      	ldrh	r1, [r7, #10]
 8003cf4:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <I2C_RequestMemoryWrite+0xa4>)
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa51 	bl	80041a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	69b9      	ldr	r1, [r7, #24]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f8f0 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e02c      	b.n	8003d70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
 8003d26:	e015      	b.n	8003d54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d28:	893b      	ldrh	r3, [r7, #8]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f8d6 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e012      	b.n	8003d70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4a:	893b      	ldrh	r3, [r7, #8]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f884 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	80002000 	.word	0x80002000

08003d7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <I2C_RequestMemoryRead+0xa4>)
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f9fe 	bl	80041a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	69b9      	ldr	r1, [r7, #24]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f89d 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e02c      	b.n	8003e16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
 8003dcc:	e015      	b.n	8003dfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dce:	893b      	ldrh	r3, [r7, #8]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f883 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e012      	b.n	8003e16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003df0:	893b      	ldrh	r3, [r7, #8]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2140      	movs	r1, #64	; 0x40
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f831 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	80002000 	.word	0x80002000

08003e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d103      	bne.n	8003e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d007      	beq.n	8003e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	619a      	str	r2, [r3, #24]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7c:	e022      	b.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d01e      	beq.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe f9f3 	bl	8002270 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d113      	bne.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e00f      	b.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d0cd      	beq.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef8:	e02c      	b.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f870 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e02a      	b.n	8003f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d01e      	beq.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fe f9ab 	bl	8002270 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d113      	bne.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d1cb      	bne.n	8003efa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f78:	e028      	b.n	8003fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f830 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e026      	b.n	8003fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7fe f96f 	bl	8002270 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d113      	bne.n	8003fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e007      	b.n	8003fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d1cf      	bne.n	8003f7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d068      	beq.n	80040e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004018:	e049      	b.n	80040ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d045      	beq.n	80040ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe f925 	bl	8002270 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_IsErrorOccurred+0x54>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13a      	bne.n	80040ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800404a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d121      	bne.n	80040a0 <I2C_IsErrorOccurred+0xbc>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004062:	d01d      	beq.n	80040a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b20      	cmp	r3, #32
 8004068:	d01a      	beq.n	80040a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800407a:	f7fe f8f9 	bl	8002270 <HAL_GetTick>
 800407e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004080:	e00e      	b.n	80040a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004082:	f7fe f8f5 	bl	8002270 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b19      	cmp	r3, #25
 800408e:	d907      	bls.n	80040a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800409e:	e006      	b.n	80040ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d1e9      	bne.n	8004082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d003      	beq.n	80040c4 <I2C_IsErrorOccurred+0xe0>
 80040bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0aa      	beq.n	800401a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2220      	movs	r2, #32
 80040d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01c      	beq.n	8004192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fe63 	bl	8003e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <I2C_IsErrorOccurred+0x1bc>)
 800416a:	400b      	ands	r3, r1
 800416c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	fe00e800 	.word	0xfe00e800

080041a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	817b      	strh	r3, [r7, #10]
 80041b2:	4613      	mov	r3, r2
 80041b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041bc:	7a7b      	ldrb	r3, [r7, #9]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	0d5b      	lsrs	r3, r3, #21
 80041de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <I2C_TransferConfig+0x60>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	43db      	mvns	r3, r3
 80041e8:	ea02 0103 	and.w	r1, r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	03ff63ff 	.word	0x03ff63ff

08004208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b20      	cmp	r3, #32
 800421c:	d138      	bne.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004228:	2302      	movs	r3, #2
 800422a:	e032      	b.n	8004292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	; 0x24
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800425a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d139      	bne.n	8004328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042be:	2302      	movs	r3, #2
 80042c0:	e033      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2224      	movs	r2, #36	; 0x24
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0bf      	b.n	80044ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd f9fa 	bl	8001758 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800437a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6999      	ldr	r1, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004390:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <HAL_LTDC_Init+0x19c>)
 80043ac:	400b      	ands	r3, r1
 80043ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6899      	ldr	r1, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68d9      	ldr	r1, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <HAL_LTDC_Init+0x19c>)
 80043da:	400b      	ands	r3, r1
 80043dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68d9      	ldr	r1, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6919      	ldr	r1, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b33      	ldr	r3, [pc, #204]	; (80044d4 <HAL_LTDC_Init+0x19c>)
 8004408:	400b      	ands	r3, r1
 800440a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6919      	ldr	r1, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6959      	ldr	r1, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_LTDC_Init+0x19c>)
 8004436:	400b      	ands	r3, r1
 8004438:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6959      	ldr	r1, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0206 	orr.w	r2, r2, #6
 80044a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	f000f800 	.word	0xf000f800

080044d8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d023      	beq.n	8004542 <HAL_LTDC_IRQHandler+0x6a>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01e      	beq.n	8004542 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2204      	movs	r2, #4
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004522:	f043 0201 	orr.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2204      	movs	r2, #4
 8004530:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f86f 	bl	8004620 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d023      	beq.n	8004594 <HAL_LTDC_IRQHandler+0xbc>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01e      	beq.n	8004594 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0202 	bic.w	r2, r2, #2
 8004564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2202      	movs	r2, #2
 800456c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004574:	f043 0202 	orr.w	r2, r3, #2
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2204      	movs	r2, #4
 8004582:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f846 	bl	8004620 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01b      	beq.n	80045d6 <HAL_LTDC_IRQHandler+0xfe>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f00d fa8b 	bl	8011aec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <HAL_LTDC_IRQHandler+0x140>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d016      	beq.n	8004618 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0208 	bic.w	r2, r2, #8
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2208      	movs	r2, #8
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f80e 	bl	8004634 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_LTDC_ConfigLayer+0x1a>
 800465e:	2302      	movs	r3, #2
 8004660:	e02c      	b.n	80046bc <HAL_LTDC_ConfigLayer+0x74>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2134      	movs	r1, #52	; 0x34
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4614      	mov	r4, r2
 8004686:	461d      	mov	r5, r3
 8004688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800468a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800468c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800468e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f849 	bl	8004734 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bdb0      	pop	{r4, r5, r7, pc}

080046c4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_LTDC_ProgramLineEvent+0x18>
 80046d8:	2302      	movs	r3, #2
 80046da:	e023      	b.n	8004724 <HAL_LTDC_ProgramLineEvent+0x60>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40016800 	.word	0x40016800

08004734 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004750:	4413      	add	r3, r2
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	01db      	lsls	r3, r3, #7
 8004760:	4413      	add	r3, r2
 8004762:	3384      	adds	r3, #132	; 0x84
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	4611      	mov	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	01d2      	lsls	r2, r2, #7
 8004770:	440a      	add	r2, r1
 8004772:	3284      	adds	r2, #132	; 0x84
 8004774:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004778:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800478a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800478c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	01db      	lsls	r3, r3, #7
 8004798:	440b      	add	r3, r1
 800479a:	3384      	adds	r3, #132	; 0x84
 800479c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b2:	4413      	add	r3, r2
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	01db      	lsls	r3, r3, #7
 80047c2:	4413      	add	r3, r2
 80047c4:	3384      	adds	r3, #132	; 0x84
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	4611      	mov	r1, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	01d2      	lsls	r2, r2, #7
 80047d2:	440a      	add	r2, r1
 80047d4:	3284      	adds	r2, #132	; 0x84
 80047d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80047da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ea:	4413      	add	r3, r2
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4619      	mov	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	01db      	lsls	r3, r3, #7
 80047f8:	440b      	add	r3, r1
 80047fa:	3384      	adds	r3, #132	; 0x84
 80047fc:	4619      	mov	r1, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4313      	orrs	r3, r2
 8004802:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	01db      	lsls	r3, r3, #7
 800480e:	4413      	add	r3, r2
 8004810:	3384      	adds	r3, #132	; 0x84
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4611      	mov	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	01d2      	lsls	r2, r2, #7
 800481e:	440a      	add	r2, r1
 8004820:	3284      	adds	r2, #132	; 0x84
 8004822:	f023 0307 	bic.w	r3, r3, #7
 8004826:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	01db      	lsls	r3, r3, #7
 8004832:	4413      	add	r3, r2
 8004834:	3384      	adds	r3, #132	; 0x84
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	4413      	add	r3, r2
 8004866:	3384      	adds	r3, #132	; 0x84
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	01db      	lsls	r3, r3, #7
 8004874:	4413      	add	r3, r2
 8004876:	3384      	adds	r3, #132	; 0x84
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004884:	461a      	mov	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	431a      	orrs	r2, r3
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	01db      	lsls	r3, r3, #7
 8004898:	440b      	add	r3, r1
 800489a:	3384      	adds	r3, #132	; 0x84
 800489c:	4619      	mov	r1, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	01db      	lsls	r3, r3, #7
 80048ae:	4413      	add	r3, r2
 80048b0:	3384      	adds	r3, #132	; 0x84
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	4611      	mov	r1, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	01d2      	lsls	r2, r2, #7
 80048be:	440a      	add	r2, r1
 80048c0:	3284      	adds	r2, #132	; 0x84
 80048c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	01db      	lsls	r3, r3, #7
 80048d2:	4413      	add	r3, r2
 80048d4:	3384      	adds	r3, #132	; 0x84
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	01db      	lsls	r3, r3, #7
 80048e8:	4413      	add	r3, r2
 80048ea:	3384      	adds	r3, #132	; 0x84
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4619      	mov	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	01db      	lsls	r3, r3, #7
 80048f8:	440b      	add	r3, r1
 80048fa:	3384      	adds	r3, #132	; 0x84
 80048fc:	4619      	mov	r1, r3
 80048fe:	4b58      	ldr	r3, [pc, #352]	; (8004a60 <LTDC_SetConfig+0x32c>)
 8004900:	4013      	ands	r3, r2
 8004902:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	6809      	ldr	r1, [r1, #0]
 8004910:	4608      	mov	r0, r1
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	01c9      	lsls	r1, r1, #7
 8004916:	4401      	add	r1, r0
 8004918:	3184      	adds	r1, #132	; 0x84
 800491a:	4313      	orrs	r3, r2
 800491c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	01db      	lsls	r3, r3, #7
 8004928:	4413      	add	r3, r2
 800492a:	3384      	adds	r3, #132	; 0x84
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	4413      	add	r3, r2
 800493a:	3384      	adds	r3, #132	; 0x84
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	01db      	lsls	r3, r3, #7
 800494c:	4413      	add	r3, r2
 800494e:	3384      	adds	r3, #132	; 0x84
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004960:	2304      	movs	r3, #4
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	e01b      	b.n	800499e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d102      	bne.n	8004974 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800496e:	2303      	movs	r3, #3
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	e014      	b.n	800499e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d00b      	beq.n	8004994 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004980:	2b02      	cmp	r3, #2
 8004982:	d007      	beq.n	8004994 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004988:	2b03      	cmp	r3, #3
 800498a:	d003      	beq.n	8004994 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004990:	2b07      	cmp	r3, #7
 8004992:	d102      	bne.n	800499a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004994:	2302      	movs	r3, #2
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	e001      	b.n	800499e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800499a:	2301      	movs	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	01db      	lsls	r3, r3, #7
 80049a8:	4413      	add	r3, r2
 80049aa:	3384      	adds	r3, #132	; 0x84
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	4611      	mov	r1, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	01d2      	lsls	r2, r2, #7
 80049b8:	440a      	add	r2, r1
 80049ba:	3284      	adds	r2, #132	; 0x84
 80049bc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80049c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	1acb      	subs	r3, r1, r3
 80049d8:	69f9      	ldr	r1, [r7, #28]
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049e0:	68f9      	ldr	r1, [r7, #12]
 80049e2:	6809      	ldr	r1, [r1, #0]
 80049e4:	4608      	mov	r0, r1
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	01c9      	lsls	r1, r1, #7
 80049ea:	4401      	add	r1, r0
 80049ec:	3184      	adds	r1, #132	; 0x84
 80049ee:	4313      	orrs	r3, r2
 80049f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	01db      	lsls	r3, r3, #7
 80049fc:	4413      	add	r3, r2
 80049fe:	3384      	adds	r3, #132	; 0x84
 8004a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4619      	mov	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	01db      	lsls	r3, r3, #7
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3384      	adds	r3, #132	; 0x84
 8004a10:	4619      	mov	r1, r3
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <LTDC_SetConfig+0x330>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	01db      	lsls	r3, r3, #7
 8004a22:	4413      	add	r3, r2
 8004a24:	3384      	adds	r3, #132	; 0x84
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	01db      	lsls	r3, r3, #7
 8004a38:	4413      	add	r3, r2
 8004a3a:	3384      	adds	r3, #132	; 0x84
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	4611      	mov	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	01d2      	lsls	r2, r2, #7
 8004a48:	440a      	add	r2, r1
 8004a4a:	3284      	adds	r2, #132	; 0x84
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6013      	str	r3, [r2, #0]
}
 8004a52:	bf00      	nop
 8004a54:	3724      	adds	r7, #36	; 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	fffff8f8 	.word	0xfffff8f8
 8004a64:	fffff800 	.word	0xfffff800

08004a68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a72:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a96:	f7fd fbeb 	bl	8002270 <HAL_GetTick>
 8004a9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a9c:	e009      	b.n	8004ab2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a9e:	f7fd fbe7 	bl	8002270 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aac:	d901      	bls.n	8004ab2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e022      	b.n	8004af8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ab2:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abe:	d1ee      	bne.n	8004a9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004acc:	f7fd fbd0 	bl	8002270 <HAL_GetTick>
 8004ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ad2:	e009      	b.n	8004ae8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ad4:	f7fd fbcc 	bl	8002270 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ae2:	d901      	bls.n	8004ae8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e007      	b.n	8004af8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004af4:	d1ee      	bne.n	8004ad4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40007000 	.word	0x40007000

08004b08 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b10:	f7fd fbae 	bl	8002270 <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e067      	b.n	8004bf0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc ff11 	bl	800195c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004b3a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f85e 	bl	8004c00 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2120      	movs	r1, #32
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f856 	bl	8004c1c <QSPI_WaitFlagStateUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004b74:	7afb      	ldrb	r3, [r7, #11]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d135      	bne.n	8004be6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_QSPI_Init+0xf0>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6852      	ldr	r2, [r2, #4]
 8004b88:	0611      	lsls	r1, r2, #24
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	4311      	orrs	r1, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	69d2      	ldr	r2, [r2, #28]
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6a12      	ldr	r2, [r2, #32]
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <HAL_QSPI_Init+0xf4>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6912      	ldr	r2, [r2, #16]
 8004bb2:	0411      	lsls	r1, r2, #16
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6952      	ldr	r2, [r2, #20]
 8004bb8:	4311      	orrs	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6992      	ldr	r2, [r2, #24]
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004bee:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	00ffff2f 	.word	0x00ffff2f
 8004bfc:	ffe0f8fe 	.word	0xffe0f8fe

08004c00 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c2c:	e01a      	b.n	8004c64 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d016      	beq.n	8004c64 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c36:	f7fd fb1b 	bl	8002270 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	f043 0201 	orr.w	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e00e      	b.n	8004c82 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1d6      	bne.n	8004c2e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e291      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8087 	beq.w	8004dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cb0:	4b96      	ldr	r3, [pc, #600]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d00c      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbc:	4b93      	ldr	r3, [pc, #588]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 030c 	and.w	r3, r3, #12
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d112      	bne.n	8004cee <HAL_RCC_OscConfig+0x62>
 8004cc8:	4b90      	ldr	r3, [pc, #576]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd4:	d10b      	bne.n	8004cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd6:	4b8d      	ldr	r3, [pc, #564]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d06c      	beq.n	8004dbc <HAL_RCC_OscConfig+0x130>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d168      	bne.n	8004dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e26b      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCC_OscConfig+0x7a>
 8004cf8:	4b84      	ldr	r3, [pc, #528]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a83      	ldr	r2, [pc, #524]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e02e      	b.n	8004d64 <HAL_RCC_OscConfig+0xd8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x9c>
 8004d0e:	4b7f      	ldr	r3, [pc, #508]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7e      	ldr	r2, [pc, #504]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4b7c      	ldr	r3, [pc, #496]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7b      	ldr	r2, [pc, #492]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e01d      	b.n	8004d64 <HAL_RCC_OscConfig+0xd8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	4b73      	ldr	r3, [pc, #460]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a72      	ldr	r2, [pc, #456]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0xd8>
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6e      	ldr	r2, [pc, #440]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fa80 	bl	8002270 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd fa7c 	bl	8002270 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e21f      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd fa6c 	bl	8002270 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fa68 	bl	8002270 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e20b      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dae:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x110>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d069      	beq.n	8004e9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dca:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd6:	4b4d      	ldr	r3, [pc, #308]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d11c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x190>
 8004de2:	4b4a      	ldr	r3, [pc, #296]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d116      	bne.n	8004e1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_RCC_OscConfig+0x17a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e1df      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e06:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	493d      	ldr	r1, [pc, #244]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	e040      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d023      	beq.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e24:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a38      	ldr	r2, [pc, #224]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fa1e 	bl	8002270 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fd fa1a 	bl	8002270 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e1bd      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4929      	ldr	r1, [pc, #164]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]
 8004e6a:	e018      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a26      	ldr	r2, [pc, #152]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fd f9fa 	bl	8002270 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e80:	f7fd f9f6 	bl	8002270 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e199      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d038      	beq.n	8004f1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d019      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb2:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebe:	f7fd f9d7 	bl	8002270 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec6:	f7fd f9d3 	bl	8002270 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e176      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x23a>
 8004ee4:	e01a      	b.n	8004f1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fd f9bd 	bl	8002270 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fd f9b9 	bl	8002270 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d903      	bls.n	8004f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e15c      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
 8004f0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b91      	ldr	r3, [pc, #580]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ee      	bne.n	8004efa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a4 	beq.w	8005072 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2a:	4b8b      	ldr	r3, [pc, #556]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	4b88      	ldr	r3, [pc, #544]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	4a87      	ldr	r2, [pc, #540]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6413      	str	r3, [r2, #64]	; 0x40
 8004f42:	4b85      	ldr	r3, [pc, #532]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f52:	4b82      	ldr	r3, [pc, #520]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d118      	bne.n	8004f90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7e      	ldr	r2, [pc, #504]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6a:	f7fd f981 	bl	8002270 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fd f97d 	bl	8002270 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b64      	cmp	r3, #100	; 0x64
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e120      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f84:	4b75      	ldr	r3, [pc, #468]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x31a>
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a6e      	ldr	r2, [pc, #440]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	e02d      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x33c>
 8004fae:	4b6a      	ldr	r3, [pc, #424]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	4a69      	ldr	r2, [pc, #420]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fba:	4b67      	ldr	r3, [pc, #412]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	4a66      	ldr	r2, [pc, #408]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc6:	e01c      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	d10c      	bne.n	8004fea <HAL_RCC_OscConfig+0x35e>
 8004fd0:	4b61      	ldr	r3, [pc, #388]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	4a60      	ldr	r2, [pc, #384]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fd6:	f043 0304 	orr.w	r3, r3, #4
 8004fda:	6713      	str	r3, [r2, #112]	; 0x70
 8004fdc:	4b5e      	ldr	r3, [pc, #376]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	4a5d      	ldr	r2, [pc, #372]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe8:	e00b      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
 8004fea:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a5a      	ldr	r2, [pc, #360]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff6:	4b58      	ldr	r3, [pc, #352]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	4a57      	ldr	r2, [pc, #348]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004ffc:	f023 0304 	bic.w	r3, r3, #4
 8005000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d015      	beq.n	8005036 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fd f931 	bl	8002270 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fd f92d 	bl	8002270 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0ce      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	4b4b      	ldr	r3, [pc, #300]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ee      	beq.n	8005012 <HAL_RCC_OscConfig+0x386>
 8005034:	e014      	b.n	8005060 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7fd f91b 	bl	8002270 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fd f917 	bl	8002270 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e0b8      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005054:	4b40      	ldr	r3, [pc, #256]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ee      	bne.n	800503e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b3c      	ldr	r3, [pc, #240]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	4a3b      	ldr	r2, [pc, #236]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80a4 	beq.w	80051c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d06b      	beq.n	8005160 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d149      	bne.n	8005124 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a30      	ldr	r2, [pc, #192]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fd f8e8 	bl	8002270 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fd f8e4 	bl	8002270 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e087      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b6:	4b28      	ldr	r3, [pc, #160]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69da      	ldr	r2, [r3, #28]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	3b01      	subs	r3, #1
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	4313      	orrs	r3, r2
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fd f8b8 	bl	8002270 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fd f8b4 	bl	8002270 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e057      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x478>
 8005122:	e04f      	b.n	80051c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800512a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fd f89e 	bl	8002270 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fd f89a 	bl	8002270 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e03d      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x4ac>
 8005156:	e035      	b.n	80051c4 <HAL_RCC_OscConfig+0x538>
 8005158:	40023800 	.word	0x40023800
 800515c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <HAL_RCC_OscConfig+0x544>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d028      	beq.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d121      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d11a      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005196:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005198:	4293      	cmp	r3, r2
 800519a:	d111      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	3b01      	subs	r3, #1
 80051aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0d0      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051ec:	4b6a      	ldr	r3, [pc, #424]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d910      	bls.n	800521c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fa:	4b67      	ldr	r3, [pc, #412]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 020f 	bic.w	r2, r3, #15
 8005202:	4965      	ldr	r1, [pc, #404]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	4313      	orrs	r3, r2
 8005208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800520a:	4b63      	ldr	r3, [pc, #396]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0b8      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005234:	4b59      	ldr	r3, [pc, #356]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a58      	ldr	r2, [pc, #352]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800523e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800524c:	4b53      	ldr	r3, [pc, #332]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a52      	ldr	r2, [pc, #328]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005258:	4b50      	ldr	r3, [pc, #320]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	494d      	ldr	r1, [pc, #308]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d040      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	4b47      	ldr	r3, [pc, #284]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d115      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e07f      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005296:	4b41      	ldr	r3, [pc, #260]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e073      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	4b3d      	ldr	r3, [pc, #244]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e06b      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052b6:	4b39      	ldr	r3, [pc, #228]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 0203 	bic.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4936      	ldr	r1, [pc, #216]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fc ffd2 	bl	8002270 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d0:	f7fc ffce 	bl	8002270 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e053      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 020c 	and.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d1eb      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f8:	4b27      	ldr	r3, [pc, #156]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d210      	bcs.n	8005328 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 020f 	bic.w	r2, r3, #15
 800530e:	4922      	ldr	r1, [pc, #136]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e032      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005334:	4b19      	ldr	r3, [pc, #100]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4916      	ldr	r1, [pc, #88]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	490e      	ldr	r1, [pc, #56]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005366:	f000 f821 	bl	80053ac <HAL_RCC_GetSysClockFreq>
 800536a:	4602      	mov	r2, r0
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	490a      	ldr	r1, [pc, #40]	; (80053a0 <HAL_RCC_ClockConfig+0x1cc>)
 8005378:	5ccb      	ldrb	r3, [r1, r3]
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_RCC_ClockConfig+0x1d4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fc fd74 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023c00 	.word	0x40023c00
 800539c:	40023800 	.word	0x40023800
 80053a0:	08022eec 	.word	0x08022eec
 80053a4:	2000002c 	.word	0x2000002c
 80053a8:	20000030 	.word	0x20000030

080053ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053b0:	b090      	sub	sp, #64	; 0x40
 80053b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
 80053b8:	2300      	movs	r3, #0
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053bc:	2300      	movs	r3, #0
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053c4:	4b59      	ldr	r3, [pc, #356]	; (800552c <HAL_RCC_GetSysClockFreq+0x180>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d00d      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x40>
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	f200 80a1 	bhi.w	8005518 <HAL_RCC_GetSysClockFreq+0x16c>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x34>
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d003      	beq.n	80053e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053de:	e09b      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053e0:	4b53      	ldr	r3, [pc, #332]	; (8005530 <HAL_RCC_GetSysClockFreq+0x184>)
 80053e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053e4:	e09b      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053e6:	4b53      	ldr	r3, [pc, #332]	; (8005534 <HAL_RCC_GetSysClockFreq+0x188>)
 80053e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053ea:	e098      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053ec:	4b4f      	ldr	r3, [pc, #316]	; (800552c <HAL_RCC_GetSysClockFreq+0x180>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053f6:	4b4d      	ldr	r3, [pc, #308]	; (800552c <HAL_RCC_GetSysClockFreq+0x180>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d028      	beq.n	8005454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005402:	4b4a      	ldr	r3, [pc, #296]	; (800552c <HAL_RCC_GetSysClockFreq+0x180>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	2200      	movs	r2, #0
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	627a      	str	r2, [r7, #36]	; 0x24
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005414:	2100      	movs	r1, #0
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_GetSysClockFreq+0x188>)
 8005418:	fb03 f201 	mul.w	r2, r3, r1
 800541c:	2300      	movs	r3, #0
 800541e:	fb00 f303 	mul.w	r3, r0, r3
 8005422:	4413      	add	r3, r2
 8005424:	4a43      	ldr	r2, [pc, #268]	; (8005534 <HAL_RCC_GetSysClockFreq+0x188>)
 8005426:	fba0 1202 	umull	r1, r2, r0, r2
 800542a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542c:	460a      	mov	r2, r1
 800542e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005432:	4413      	add	r3, r2
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	2200      	movs	r2, #0
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	61fa      	str	r2, [r7, #28]
 800543e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005446:	f7fa ff33 	bl	80002b0 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4613      	mov	r3, r2
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005452:	e053      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005454:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_RCC_GetSysClockFreq+0x180>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	099b      	lsrs	r3, r3, #6
 800545a:	2200      	movs	r2, #0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	617a      	str	r2, [r7, #20]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005466:	f04f 0b00 	mov.w	fp, #0
 800546a:	4652      	mov	r2, sl
 800546c:	465b      	mov	r3, fp
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	0159      	lsls	r1, r3, #5
 8005478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800547c:	0150      	lsls	r0, r2, #5
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	ebb2 080a 	subs.w	r8, r2, sl
 8005486:	eb63 090b 	sbc.w	r9, r3, fp
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800549a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800549e:	ebb2 0408 	subs.w	r4, r2, r8
 80054a2:	eb63 0509 	sbc.w	r5, r3, r9
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	00eb      	lsls	r3, r5, #3
 80054b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054b4:	00e2      	lsls	r2, r4, #3
 80054b6:	4614      	mov	r4, r2
 80054b8:	461d      	mov	r5, r3
 80054ba:	eb14 030a 	adds.w	r3, r4, sl
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	eb45 030b 	adc.w	r3, r5, fp
 80054c4:	607b      	str	r3, [r7, #4]
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054d2:	4629      	mov	r1, r5
 80054d4:	028b      	lsls	r3, r1, #10
 80054d6:	4621      	mov	r1, r4
 80054d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054dc:	4621      	mov	r1, r4
 80054de:	028a      	lsls	r2, r1, #10
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	2200      	movs	r2, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	60fa      	str	r2, [r7, #12]
 80054ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054f0:	f7fa fede 	bl	80002b0 <__aeabi_uldivmod>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4613      	mov	r3, r2
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCC_GetSysClockFreq+0x180>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	3301      	adds	r3, #1
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800550c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005516:	e002      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCC_GetSysClockFreq+0x184>)
 800551a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800551c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005520:	4618      	mov	r0, r3
 8005522:	3740      	adds	r7, #64	; 0x40
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800552a:	bf00      	nop
 800552c:	40023800 	.word	0x40023800
 8005530:	00f42400 	.word	0x00f42400
 8005534:	017d7840 	.word	0x017d7840

08005538 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <HAL_RCC_GetHCLKFreq+0x14>)
 800553e:	681b      	ldr	r3, [r3, #0]
}
 8005540:	4618      	mov	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	2000002c 	.word	0x2000002c

08005550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005554:	f7ff fff0 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 8005558:	4602      	mov	r2, r0
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	0a9b      	lsrs	r3, r3, #10
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	4903      	ldr	r1, [pc, #12]	; (8005574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005566:	5ccb      	ldrb	r3, [r1, r3]
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40023800 	.word	0x40023800
 8005574:	08022efc 	.word	0x08022efc

08005578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800557c:	f7ff ffdc 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 8005580:	4602      	mov	r2, r0
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	0b5b      	lsrs	r3, r3, #13
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	4903      	ldr	r1, [pc, #12]	; (800559c <HAL_RCC_GetPCLK2Freq+0x24>)
 800558e:	5ccb      	ldrb	r3, [r1, r3]
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40023800 	.word	0x40023800
 800559c:	08022efc 	.word	0x08022efc

080055a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	220f      	movs	r2, #15
 80055ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <HAL_RCC_GetClockConfig+0x5c>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0203 	and.w	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <HAL_RCC_GetClockConfig+0x5c>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <HAL_RCC_GetClockConfig+0x5c>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <HAL_RCC_GetClockConfig+0x5c>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	08db      	lsrs	r3, r3, #3
 80055da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <HAL_RCC_GetClockConfig+0x60>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	601a      	str	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	40023c00 	.word	0x40023c00

08005604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800562c:	4b69      	ldr	r3, [pc, #420]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a68      	ldr	r2, [pc, #416]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005632:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005636:	6093      	str	r3, [r2, #8]
 8005638:	4b66      	ldr	r3, [pc, #408]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	4964      	ldr	r1, [pc, #400]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d017      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800565e:	4b5d      	ldr	r3, [pc, #372]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	4959      	ldr	r1, [pc, #356]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567c:	d101      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800567e:	2301      	movs	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800568a:	2301      	movs	r3, #1
 800568c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d017      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800569a:	4b4e      	ldr	r3, [pc, #312]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	494a      	ldr	r1, [pc, #296]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056b8:	d101      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056ba:	2301      	movs	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056c6:	2301      	movs	r3, #1
 80056c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056d6:	2301      	movs	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 808b 	beq.w	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e8:	4b3a      	ldr	r3, [pc, #232]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	4a39      	ldr	r2, [pc, #228]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f2:	6413      	str	r3, [r2, #64]	; 0x40
 80056f4:	4b37      	ldr	r3, [pc, #220]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005700:	4b35      	ldr	r3, [pc, #212]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a34      	ldr	r2, [pc, #208]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570c:	f7fc fdb0 	bl	8002270 <HAL_GetTick>
 8005710:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005714:	f7fc fdac 	bl	8002270 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	; 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e357      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005726:	4b2c      	ldr	r3, [pc, #176]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005732:	4b28      	ldr	r3, [pc, #160]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d035      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	429a      	cmp	r2, r3
 800574e:	d02e      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005758:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800575a:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005766:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a1a      	ldr	r2, [pc, #104]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005772:	4a18      	ldr	r2, [pc, #96]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005778:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d114      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fc fd74 	bl	8002270 <HAL_GetTick>
 8005788:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578a:	e00a      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578c:	f7fc fd70 	bl	8002270 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f241 3288 	movw	r2, #5000	; 0x1388
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e319      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ee      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ba:	d111      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057ca:	400b      	ands	r3, r1
 80057cc:	4901      	ldr	r1, [pc, #4]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	608b      	str	r3, [r1, #8]
 80057d2:	e00b      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40007000 	.word	0x40007000
 80057dc:	0ffffcff 	.word	0x0ffffcff
 80057e0:	4baa      	ldr	r3, [pc, #680]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4aa9      	ldr	r2, [pc, #676]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057ea:	6093      	str	r3, [r2, #8]
 80057ec:	4ba7      	ldr	r3, [pc, #668]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f8:	49a4      	ldr	r1, [pc, #656]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b00      	cmp	r3, #0
 8005808:	d010      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800580a:	4ba0      	ldr	r3, [pc, #640]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005810:	4a9e      	ldr	r2, [pc, #632]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800581a:	4b9c      	ldr	r3, [pc, #624]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800581c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	4999      	ldr	r1, [pc, #612]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005838:	4b94      	ldr	r3, [pc, #592]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005846:	4991      	ldr	r1, [pc, #580]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800585a:	4b8c      	ldr	r3, [pc, #560]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005868:	4988      	ldr	r1, [pc, #544]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800587c:	4b83      	ldr	r3, [pc, #524]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588a:	4980      	ldr	r1, [pc, #512]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800589e:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	4977      	ldr	r1, [pc, #476]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058c0:	4b72      	ldr	r3, [pc, #456]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f023 0203 	bic.w	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	496f      	ldr	r1, [pc, #444]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058e2:	4b6a      	ldr	r3, [pc, #424]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	f023 020c 	bic.w	r2, r3, #12
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f0:	4966      	ldr	r1, [pc, #408]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005904:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005912:	495e      	ldr	r1, [pc, #376]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005926:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	4955      	ldr	r1, [pc, #340]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005948:	4b50      	ldr	r3, [pc, #320]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	494d      	ldr	r1, [pc, #308]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800596a:	4b48      	ldr	r3, [pc, #288]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	4944      	ldr	r1, [pc, #272]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800598c:	4b3f      	ldr	r3, [pc, #252]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599a:	493c      	ldr	r1, [pc, #240]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059bc:	4933      	ldr	r1, [pc, #204]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059d0:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059de:	492b      	ldr	r1, [pc, #172]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d011      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a00:	4922      	ldr	r1, [pc, #136]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a10:	d101      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a22:	2301      	movs	r3, #1
 8005a24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a32:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	4912      	ldr	r1, [pc, #72]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00b      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a64:	4909      	ldr	r1, [pc, #36]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d006      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80d9 	beq.w	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a80:	4b02      	ldr	r3, [pc, #8]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a01      	ldr	r2, [pc, #4]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a8a:	e001      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a92:	f7fc fbed 	bl	8002270 <HAL_GetTick>
 8005a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a9a:	f7fc fbe9 	bl	8002270 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b64      	cmp	r3, #100	; 0x64
 8005aa6:	d901      	bls.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e194      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aac:	4b6c      	ldr	r3, [pc, #432]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f0      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d021      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d11d      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005acc:	4b64      	ldr	r3, [pc, #400]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ada:	4b61      	ldr	r3, [pc, #388]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae0:	0e1b      	lsrs	r3, r3, #24
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	019a      	lsls	r2, r3, #6
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	431a      	orrs	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	071b      	lsls	r3, r3, #28
 8005b00:	4957      	ldr	r1, [pc, #348]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b1c:	d00a      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d02e      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b32:	d129      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b34:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b42:	4b47      	ldr	r3, [pc, #284]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b48:	0f1b      	lsrs	r3, r3, #28
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	019a      	lsls	r2, r3, #6
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	071b      	lsls	r3, r3, #28
 8005b68:	493d      	ldr	r1, [pc, #244]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b70:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b76:	f023 021f 	bic.w	r2, r3, #31
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	4937      	ldr	r1, [pc, #220]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01d      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b94:	4b32      	ldr	r3, [pc, #200]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9a:	0e1b      	lsrs	r3, r3, #24
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba8:	0f1b      	lsrs	r3, r3, #28
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	019a      	lsls	r2, r3, #6
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	071b      	lsls	r3, r3, #28
 8005bc8:	4925      	ldr	r1, [pc, #148]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d011      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	019a      	lsls	r2, r3, #6
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	071b      	lsls	r3, r3, #28
 8005bf8:	4919      	ldr	r1, [pc, #100]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c00:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c0c:	f7fc fb30 	bl	8002270 <HAL_GetTick>
 8005c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c14:	f7fc fb2c 	bl	8002270 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0d7      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c26:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	f040 80cd 	bne.w	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c46:	f7fc fb13 	bl	8002270 <HAL_GetTick>
 8005c4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c4e:	f7fc fb0f 	bl	8002270 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b64      	cmp	r3, #100	; 0x64
 8005c5a:	d903      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e0ba      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005c60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c64:	4b5e      	ldr	r3, [pc, #376]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c70:	d0ed      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d02e      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d12a      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c9a:	4b51      	ldr	r3, [pc, #324]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	0c1b      	lsrs	r3, r3, #16
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ca8:	4b4d      	ldr	r3, [pc, #308]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	0f1b      	lsrs	r3, r3, #28
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	019a      	lsls	r2, r3, #6
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	061b      	lsls	r3, r3, #24
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	071b      	lsls	r3, r3, #28
 8005cce:	4944      	ldr	r1, [pc, #272]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cd6:	4b42      	ldr	r3, [pc, #264]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	493d      	ldr	r1, [pc, #244]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d022      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d04:	d11d      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d06:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d14:	4b32      	ldr	r3, [pc, #200]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	0f1b      	lsrs	r3, r3, #28
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	019a      	lsls	r2, r3, #6
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	041b      	lsls	r3, r3, #16
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	061b      	lsls	r3, r3, #24
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	071b      	lsls	r3, r3, #28
 8005d3a:	4929      	ldr	r1, [pc, #164]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d028      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d4e:	4b24      	ldr	r3, [pc, #144]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	0e1b      	lsrs	r3, r3, #24
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d5c:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	019a      	lsls	r2, r3, #6
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	041b      	lsls	r3, r3, #16
 8005d74:	431a      	orrs	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	071b      	lsls	r3, r3, #28
 8005d82:	4917      	ldr	r1, [pc, #92]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4911      	ldr	r1, [pc, #68]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dac:	f7fc fa60 	bl	8002270 <HAL_GetTick>
 8005db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005db4:	f7fc fa5c 	bl	8002270 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	; 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e007      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd2:	d1ef      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800

08005de4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e025      	b.n	8005e44 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7fc f827 	bl	8001e60 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f002 fcff 	bl	8008828 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	f002 fd53 	bl	80088e0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e5e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d101      	bne.n	8005e6a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	e021      	b.n	8005eae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d002      	beq.n	8005e76 <HAL_SDRAM_SendCommand+0x2a>
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	2b05      	cmp	r3, #5
 8005e74:	d118      	bne.n	8005ea8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f002 fd94 	bl	80089b4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d104      	bne.n	8005e9e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2205      	movs	r2, #5
 8005e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005e9c:	e006      	b.n	8005eac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005ea6:	e001      	b.n	8005eac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d101      	bne.n	8005ed0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e016      	b.n	8005efe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d10f      	bne.n	8005efc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f002 fd86 	bl	80089fc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e049      	b.n	8005fac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fb fda5 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f000 fd2f 	bl	80069a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d001      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e054      	b.n	8006076 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	; (8006084 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d01d      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a22      	ldr	r2, [pc, #136]	; (8006088 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a21      	ldr	r2, [pc, #132]	; (800608c <HAL_TIM_Base_Start_IT+0xd8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <HAL_TIM_Base_Start_IT+0xdc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <HAL_TIM_Base_Start_IT+0xe0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1c      	ldr	r2, [pc, #112]	; (8006098 <HAL_TIM_Base_Start_IT+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1b      	ldr	r2, [pc, #108]	; (800609c <HAL_TIM_Base_Start_IT+0xe8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d115      	bne.n	8006060 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_TIM_Base_Start_IT+0xec>)
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d015      	beq.n	8006072 <HAL_TIM_Base_Start_IT+0xbe>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d011      	beq.n	8006072 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	e008      	b.n	8006072 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e000      	b.n	8006074 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	40000c00 	.word	0x40000c00
 8006094:	40010400 	.word	0x40010400
 8006098:	40014000 	.word	0x40014000
 800609c:	40001800 	.word	0x40001800
 80060a0:	00010007 	.word	0x00010007

080060a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e049      	b.n	800614a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f841 	bl	8006152 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f000 fc60 	bl	80069a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <HAL_TIM_PWM_Start+0x24>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e03c      	b.n	8006206 <HAL_TIM_PWM_Start+0x9e>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b04      	cmp	r3, #4
 8006190:	d109      	bne.n	80061a6 <HAL_TIM_PWM_Start+0x3e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e02f      	b.n	8006206 <HAL_TIM_PWM_Start+0x9e>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d109      	bne.n	80061c0 <HAL_TIM_PWM_Start+0x58>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e022      	b.n	8006206 <HAL_TIM_PWM_Start+0x9e>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d109      	bne.n	80061da <HAL_TIM_PWM_Start+0x72>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	bf14      	ite	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	2300      	moveq	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e015      	b.n	8006206 <HAL_TIM_PWM_Start+0x9e>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d109      	bne.n	80061f4 <HAL_TIM_PWM_Start+0x8c>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bf14      	ite	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	2300      	moveq	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e008      	b.n	8006206 <HAL_TIM_PWM_Start+0x9e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	bf14      	ite	ne
 8006200:	2301      	movne	r3, #1
 8006202:	2300      	moveq	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e092      	b.n	8006334 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start+0xb6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800621c:	e023      	b.n	8006266 <HAL_TIM_PWM_Start+0xfe>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start+0xc6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622c:	e01b      	b.n	8006266 <HAL_TIM_PWM_Start+0xfe>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0xd6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800623c:	e013      	b.n	8006266 <HAL_TIM_PWM_Start+0xfe>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b0c      	cmp	r3, #12
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0xe6>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800624c:	e00b      	b.n	8006266 <HAL_TIM_PWM_Start+0xfe>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b10      	cmp	r3, #16
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0xf6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800625c:	e003      	b.n	8006266 <HAL_TIM_PWM_Start+0xfe>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2201      	movs	r2, #1
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 ff32 	bl	80070d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a30      	ldr	r2, [pc, #192]	; (800633c <HAL_TIM_PWM_Start+0x1d4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIM_PWM_Start+0x120>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2f      	ldr	r2, [pc, #188]	; (8006340 <HAL_TIM_PWM_Start+0x1d8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_TIM_PWM_Start+0x124>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_TIM_PWM_Start+0x126>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a25      	ldr	r2, [pc, #148]	; (800633c <HAL_TIM_PWM_Start+0x1d4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d022      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x18a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b4:	d01d      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x18a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a22      	ldr	r2, [pc, #136]	; (8006344 <HAL_TIM_PWM_Start+0x1dc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d018      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x18a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a20      	ldr	r2, [pc, #128]	; (8006348 <HAL_TIM_PWM_Start+0x1e0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x18a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1f      	ldr	r2, [pc, #124]	; (800634c <HAL_TIM_PWM_Start+0x1e4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00e      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x18a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <HAL_TIM_PWM_Start+0x1d8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x18a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <HAL_TIM_PWM_Start+0x1e8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x18a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_TIM_PWM_Start+0x1ec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d115      	bne.n	800631e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	4b17      	ldr	r3, [pc, #92]	; (8006358 <HAL_TIM_PWM_Start+0x1f0>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b06      	cmp	r3, #6
 8006302:	d015      	beq.n	8006330 <HAL_TIM_PWM_Start+0x1c8>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630a:	d011      	beq.n	8006330 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631c:	e008      	b.n	8006330 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0201 	orr.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e000      	b.n	8006332 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006330:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40010000 	.word	0x40010000
 8006340:	40010400 	.word	0x40010400
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40014000 	.word	0x40014000
 8006354:	40001800 	.word	0x40001800
 8006358:	00010007 	.word	0x00010007

0800635c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0202 	mvn.w	r2, #2
 8006388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fae4 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fad6 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fae7 	bl	8006980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0204 	mvn.w	r2, #4
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 faba 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 faac 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fabd 	bl	8006980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b08      	cmp	r3, #8
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0208 	mvn.w	r2, #8
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa90 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa82 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa93 	bl	8006980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0210 	mvn.w	r2, #16
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2208      	movs	r2, #8
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa66 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa58 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa69 	bl	8006980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0201 	mvn.w	r2, #1
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb f834 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 ff22 	bl	8007350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 ff15 	bl	8007364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fa17 	bl	8006994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b20      	cmp	r3, #32
 8006572:	d10e      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d107      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0220 	mvn.w	r2, #32
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fed5 	bl	800733c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e0ff      	b.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b14      	cmp	r3, #20
 80065c6:	f200 80f0 	bhi.w	80067aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080067ab 	.word	0x080067ab
 80065d8:	080067ab 	.word	0x080067ab
 80065dc:	080067ab 	.word	0x080067ab
 80065e0:	08006665 	.word	0x08006665
 80065e4:	080067ab 	.word	0x080067ab
 80065e8:	080067ab 	.word	0x080067ab
 80065ec:	080067ab 	.word	0x080067ab
 80065f0:	080066a7 	.word	0x080066a7
 80065f4:	080067ab 	.word	0x080067ab
 80065f8:	080067ab 	.word	0x080067ab
 80065fc:	080067ab 	.word	0x080067ab
 8006600:	080066e7 	.word	0x080066e7
 8006604:	080067ab 	.word	0x080067ab
 8006608:	080067ab 	.word	0x080067ab
 800660c:	080067ab 	.word	0x080067ab
 8006610:	08006729 	.word	0x08006729
 8006614:	080067ab 	.word	0x080067ab
 8006618:	080067ab 	.word	0x080067ab
 800661c:	080067ab 	.word	0x080067ab
 8006620:	08006769 	.word	0x08006769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fa5c 	bl	8006ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0208 	orr.w	r2, r2, #8
 800663e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0204 	bic.w	r2, r2, #4
 800664e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6999      	ldr	r1, [r3, #24]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	619a      	str	r2, [r3, #24]
      break;
 8006662:	e0a5      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 faae 	bl	8006bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6999      	ldr	r1, [r3, #24]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	021a      	lsls	r2, r3, #8
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	619a      	str	r2, [r3, #24]
      break;
 80066a4:	e084      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fb05 	bl	8006cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0208 	orr.w	r2, r2, #8
 80066c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0204 	bic.w	r2, r2, #4
 80066d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69d9      	ldr	r1, [r3, #28]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	61da      	str	r2, [r3, #28]
      break;
 80066e4:	e064      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fb5b 	bl	8006da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69d9      	ldr	r1, [r3, #28]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	021a      	lsls	r2, r3, #8
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	61da      	str	r2, [r3, #28]
      break;
 8006726:	e043      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fb92 	bl	8006e58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0208 	orr.w	r2, r2, #8
 8006742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006766:	e023      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fbc4 	bl	8006efc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067a8:	e002      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	75fb      	strb	r3, [r7, #23]
      break;
 80067ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop

080067c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_TIM_ConfigClockSource+0x1c>
 80067dc:	2302      	movs	r3, #2
 80067de:	e0b4      	b.n	800694a <HAL_TIM_ConfigClockSource+0x186>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	4b56      	ldr	r3, [pc, #344]	; (8006954 <HAL_TIM_ConfigClockSource+0x190>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006818:	d03e      	beq.n	8006898 <HAL_TIM_ConfigClockSource+0xd4>
 800681a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681e:	f200 8087 	bhi.w	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006826:	f000 8086 	beq.w	8006936 <HAL_TIM_ConfigClockSource+0x172>
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682e:	d87f      	bhi.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006830:	2b70      	cmp	r3, #112	; 0x70
 8006832:	d01a      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xa6>
 8006834:	2b70      	cmp	r3, #112	; 0x70
 8006836:	d87b      	bhi.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006838:	2b60      	cmp	r3, #96	; 0x60
 800683a:	d050      	beq.n	80068de <HAL_TIM_ConfigClockSource+0x11a>
 800683c:	2b60      	cmp	r3, #96	; 0x60
 800683e:	d877      	bhi.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006840:	2b50      	cmp	r3, #80	; 0x50
 8006842:	d03c      	beq.n	80068be <HAL_TIM_ConfigClockSource+0xfa>
 8006844:	2b50      	cmp	r3, #80	; 0x50
 8006846:	d873      	bhi.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d058      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x13a>
 800684c:	2b40      	cmp	r3, #64	; 0x40
 800684e:	d86f      	bhi.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006850:	2b30      	cmp	r3, #48	; 0x30
 8006852:	d064      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x15a>
 8006854:	2b30      	cmp	r3, #48	; 0x30
 8006856:	d86b      	bhi.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006858:	2b20      	cmp	r3, #32
 800685a:	d060      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x15a>
 800685c:	2b20      	cmp	r3, #32
 800685e:	d867      	bhi.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d05c      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x15a>
 8006864:	2b10      	cmp	r3, #16
 8006866:	d05a      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x15a>
 8006868:	e062      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6899      	ldr	r1, [r3, #8]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f000 fc0d 	bl	8007098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800688c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	609a      	str	r2, [r3, #8]
      break;
 8006896:	e04f      	b.n	8006938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6899      	ldr	r1, [r3, #8]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f000 fbf6 	bl	8007098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ba:	609a      	str	r2, [r3, #8]
      break;
 80068bc:	e03c      	b.n	8006938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	6859      	ldr	r1, [r3, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f000 fb6a 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2150      	movs	r1, #80	; 0x50
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fbc3 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 80068dc:	e02c      	b.n	8006938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6859      	ldr	r1, [r3, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f000 fb89 	bl	8007002 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2160      	movs	r1, #96	; 0x60
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fbb3 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 80068fc:	e01c      	b.n	8006938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	461a      	mov	r2, r3
 800690c:	f000 fb4a 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2140      	movs	r1, #64	; 0x40
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fba3 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 800691c:	e00c      	b.n	8006938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f000 fb9a 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 800692e:	e003      	b.n	8006938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
      break;
 8006934:	e000      	b.n	8006938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	fffeff88 	.word	0xfffeff88

08006958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a40      	ldr	r2, [pc, #256]	; (8006abc <TIM_Base_SetConfig+0x114>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d00f      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a3d      	ldr	r2, [pc, #244]	; (8006ac0 <TIM_Base_SetConfig+0x118>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a3c      	ldr	r2, [pc, #240]	; (8006ac4 <TIM_Base_SetConfig+0x11c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a3b      	ldr	r2, [pc, #236]	; (8006ac8 <TIM_Base_SetConfig+0x120>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a3a      	ldr	r2, [pc, #232]	; (8006acc <TIM_Base_SetConfig+0x124>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2f      	ldr	r2, [pc, #188]	; (8006abc <TIM_Base_SetConfig+0x114>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d02b      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a08:	d027      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2c      	ldr	r2, [pc, #176]	; (8006ac0 <TIM_Base_SetConfig+0x118>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d023      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2b      	ldr	r2, [pc, #172]	; (8006ac4 <TIM_Base_SetConfig+0x11c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01f      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a2a      	ldr	r2, [pc, #168]	; (8006ac8 <TIM_Base_SetConfig+0x120>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d01b      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a29      	ldr	r2, [pc, #164]	; (8006acc <TIM_Base_SetConfig+0x124>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d017      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a28      	ldr	r2, [pc, #160]	; (8006ad0 <TIM_Base_SetConfig+0x128>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a27      	ldr	r2, [pc, #156]	; (8006ad4 <TIM_Base_SetConfig+0x12c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a26      	ldr	r2, [pc, #152]	; (8006ad8 <TIM_Base_SetConfig+0x130>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a25      	ldr	r2, [pc, #148]	; (8006adc <TIM_Base_SetConfig+0x134>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a24      	ldr	r2, [pc, #144]	; (8006ae0 <TIM_Base_SetConfig+0x138>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a23      	ldr	r2, [pc, #140]	; (8006ae4 <TIM_Base_SetConfig+0x13c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <TIM_Base_SetConfig+0x114>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_Base_SetConfig+0xf8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <TIM_Base_SetConfig+0x124>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d103      	bne.n	8006aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	691a      	ldr	r2, [r3, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	615a      	str	r2, [r3, #20]
}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40000800 	.word	0x40000800
 8006ac8:	40000c00 	.word	0x40000c00
 8006acc:	40010400 	.word	0x40010400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800
 8006adc:	40001800 	.word	0x40001800
 8006ae0:	40001c00 	.word	0x40001c00
 8006ae4:	40002000 	.word	0x40002000

08006ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0201 	bic.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4b2b      	ldr	r3, [pc, #172]	; (8006bc0 <TIM_OC1_SetConfig+0xd8>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0303 	bic.w	r3, r3, #3
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f023 0302 	bic.w	r3, r3, #2
 8006b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a21      	ldr	r2, [pc, #132]	; (8006bc4 <TIM_OC1_SetConfig+0xdc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC1_SetConfig+0x64>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a20      	ldr	r2, [pc, #128]	; (8006bc8 <TIM_OC1_SetConfig+0xe0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d10c      	bne.n	8006b66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0308 	bic.w	r3, r3, #8
 8006b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0304 	bic.w	r3, r3, #4
 8006b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <TIM_OC1_SetConfig+0xdc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <TIM_OC1_SetConfig+0x8e>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <TIM_OC1_SetConfig+0xe0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d111      	bne.n	8006b9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	fffeff8f 	.word	0xfffeff8f
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	40010400 	.word	0x40010400

08006bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0210 	bic.w	r2, r3, #16
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4b2e      	ldr	r3, [pc, #184]	; (8006cb0 <TIM_OC2_SetConfig+0xe4>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 0320 	bic.w	r3, r3, #32
 8006c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a23      	ldr	r2, [pc, #140]	; (8006cb4 <TIM_OC2_SetConfig+0xe8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_OC2_SetConfig+0x68>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a22      	ldr	r2, [pc, #136]	; (8006cb8 <TIM_OC2_SetConfig+0xec>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d10d      	bne.n	8006c50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <TIM_OC2_SetConfig+0xe8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d003      	beq.n	8006c60 <TIM_OC2_SetConfig+0x94>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <TIM_OC2_SetConfig+0xec>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d113      	bne.n	8006c88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	feff8fff 	.word	0xfeff8fff
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40010400 	.word	0x40010400

08006cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4b2d      	ldr	r3, [pc, #180]	; (8006d9c <TIM_OC3_SetConfig+0xe0>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a22      	ldr	r2, [pc, #136]	; (8006da0 <TIM_OC3_SetConfig+0xe4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC3_SetConfig+0x66>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a21      	ldr	r2, [pc, #132]	; (8006da4 <TIM_OC3_SetConfig+0xe8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d10d      	bne.n	8006d3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a17      	ldr	r2, [pc, #92]	; (8006da0 <TIM_OC3_SetConfig+0xe4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC3_SetConfig+0x92>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <TIM_OC3_SetConfig+0xe8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d113      	bne.n	8006d76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	fffeff8f 	.word	0xfffeff8f
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010400 	.word	0x40010400

08006da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <TIM_OC4_SetConfig+0xa4>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <TIM_OC4_SetConfig+0xa8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC4_SetConfig+0x68>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a12      	ldr	r2, [pc, #72]	; (8006e54 <TIM_OC4_SetConfig+0xac>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d109      	bne.n	8006e24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	019b      	lsls	r3, r3, #6
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	feff8fff 	.word	0xfeff8fff
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40010400 	.word	0x40010400

08006e58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <TIM_OC5_SetConfig+0x98>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <TIM_OC5_SetConfig+0x9c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC5_SetConfig+0x5e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a11      	ldr	r2, [pc, #68]	; (8006ef8 <TIM_OC5_SetConfig+0xa0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d109      	bne.n	8006eca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	621a      	str	r2, [r3, #32]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	fffeff8f 	.word	0xfffeff8f
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40010400 	.word	0x40010400

08006efc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <TIM_OC6_SetConfig+0x9c>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	051b      	lsls	r3, r3, #20
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <TIM_OC6_SetConfig+0xa0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d003      	beq.n	8006f5c <TIM_OC6_SetConfig+0x60>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <TIM_OC6_SetConfig+0xa4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d109      	bne.n	8006f70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	029b      	lsls	r3, r3, #10
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	621a      	str	r2, [r3, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	feff8fff 	.word	0xfeff8fff
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40010400 	.word	0x40010400

08006fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f023 0201 	bic.w	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f023 030a 	bic.w	r3, r3, #10
 8006fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 0210 	bic.w	r2, r3, #16
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800702c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	031b      	lsls	r3, r3, #12
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800703e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	f043 0307 	orr.w	r3, r3, #7
 8007084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	609a      	str	r2, [r3, #8]
}
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	021a      	lsls	r2, r3, #8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4313      	orrs	r3, r2
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	609a      	str	r2, [r3, #8]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 031f 	and.w	r3, r3, #31
 80070ea:	2201      	movs	r2, #1
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a1a      	ldr	r2, [r3, #32]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	43db      	mvns	r3, r3
 80070fa:	401a      	ands	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	431a      	orrs	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e06d      	b.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a30      	ldr	r2, [pc, #192]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d004      	beq.n	8007170 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2f      	ldr	r2, [pc, #188]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d108      	bne.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007176:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a20      	ldr	r2, [pc, #128]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d022      	beq.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ae:	d01d      	beq.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d018      	beq.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d013      	beq.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00e      	beq.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d009      	beq.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a16      	ldr	r2, [pc, #88]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d004      	beq.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a15      	ldr	r2, [pc, #84]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d10c      	bne.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40010000 	.word	0x40010000
 8007228:	40010400 	.word	0x40010400
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800
 8007234:	40000c00 	.word	0x40000c00
 8007238:	40014000 	.word	0x40014000
 800723c:	40001800 	.word	0x40001800

08007240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007258:	2302      	movs	r3, #2
 800725a:	e065      	b.n	8007328 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a16      	ldr	r2, [pc, #88]	; (8007334 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a14      	ldr	r2, [pc, #80]	; (8007338 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d115      	bne.n	8007316 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	051b      	lsls	r3, r3, #20
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40010000 	.word	0x40010000
 8007338:	40010400 	.word	0x40010400

0800733c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e040      	b.n	800740c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fa fbc6 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2224      	movs	r2, #36	; 0x24
 80073a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0201 	bic.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fb62 	bl	8007a80 <UART_SetConfig>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e022      	b.n	800740c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fdba 	bl	8007f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fe41 	bl	800808c <UART_CheckIdleState>
 800740a:	4603      	mov	r3, r0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007428:	2b20      	cmp	r3, #32
 800742a:	d132      	bne.n	8007492 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_UART_Receive_IT+0x24>
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e02b      	b.n	8007494 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d018      	beq.n	8007482 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	613b      	str	r3, [r7, #16]
   return(result);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	69f9      	ldr	r1, [r7, #28]
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	61bb      	str	r3, [r7, #24]
   return(result);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e6      	bne.n	8007450 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	461a      	mov	r2, r3
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fefd 	bl	8008288 <UART_Start_Receive_IT>
 800748e:	4603      	mov	r3, r0
 8007490:	e000      	b.n	8007494 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3728      	adds	r7, #40	; 0x28
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b0ba      	sub	sp, #232	; 0xe8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80074ca:	4013      	ands	r3, r2
 80074cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d115      	bne.n	8007504 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00f      	beq.n	8007504 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8297 	beq.w	8007a28 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
      }
      return;
 8007502:	e291      	b.n	8007a28 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8117 	beq.w	800773c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800751a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800751e:	4b85      	ldr	r3, [pc, #532]	; (8007734 <HAL_UART_IRQHandler+0x298>)
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 810a 	beq.w	800773c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d011      	beq.n	8007558 <HAL_UART_IRQHandler+0xbc>
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2201      	movs	r2, #1
 8007546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754e:	f043 0201 	orr.w	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <HAL_UART_IRQHandler+0xec>
 8007564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2202      	movs	r2, #2
 8007576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757e:	f043 0204 	orr.w	r2, r3, #4
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d011      	beq.n	80075b8 <HAL_UART_IRQHandler+0x11c>
 8007594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2204      	movs	r2, #4
 80075a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ae:	f043 0202 	orr.w	r2, r3, #2
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d017      	beq.n	80075f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d105      	bne.n	80075dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	f043 0208 	orr.w	r2, r3, #8
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d012      	beq.n	8007626 <HAL_UART_IRQHandler+0x18a>
 8007600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761c:	f043 0220 	orr.w	r2, r3, #32
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 81fd 	beq.w	8007a2c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00d      	beq.n	800765a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800763e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d005      	beq.n	800767e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007676:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800767a:	2b00      	cmp	r3, #0
 800767c:	d04f      	beq.n	800771e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fec8 	bl	8008414 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d141      	bne.n	8007716 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1d9      	bne.n	8007692 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d013      	beq.n	800770e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ea:	4a13      	ldr	r2, [pc, #76]	; (8007738 <HAL_UART_IRQHandler+0x29c>)
 80076ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fb f8d6 	bl	80028a4 <HAL_DMA_Abort_IT>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d017      	beq.n	800772e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	e00f      	b.n	800772e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f9a0 	bl	8007a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e00b      	b.n	800772e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f99c 	bl	8007a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771c:	e007      	b.n	800772e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f998 	bl	8007a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800772c:	e17e      	b.n	8007a2c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772e:	bf00      	nop
    return;
 8007730:	e17c      	b.n	8007a2c <HAL_UART_IRQHandler+0x590>
 8007732:	bf00      	nop
 8007734:	04000120 	.word	0x04000120
 8007738:	080084dd 	.word	0x080084dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007740:	2b01      	cmp	r3, #1
 8007742:	f040 814c 	bne.w	80079de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 8145 	beq.w	80079de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007758:	f003 0310 	and.w	r3, r3, #16
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 813e 	beq.w	80079de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2210      	movs	r2, #16
 8007768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	f040 80b6 	bne.w	80078e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007786:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8150 	beq.w	8007a30 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800779a:	429a      	cmp	r2, r3
 800779c:	f080 8148 	bcs.w	8007a30 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b4:	f000 8086 	beq.w	80078c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1da      	bne.n	80077b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007826:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800782a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800782e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e1      	bne.n	8007802 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800784e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80078a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e4      	bne.n	8007884 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fa ff80 	bl	80027c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f8c2 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078e4:	e0a4      	b.n	8007a30 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 8096 	beq.w	8007a34 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8091 	beq.w	8007a34 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007934:	647b      	str	r3, [r7, #68]	; 0x44
 8007936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800793a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e4      	bne.n	8007912 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	623b      	str	r3, [r7, #32]
   return(result);
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3308      	adds	r3, #8
 8007968:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800796c:	633a      	str	r2, [r7, #48]	; 0x30
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e3      	bne.n	8007948 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0310 	bic.w	r3, r3, #16
 80079a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	69b9      	ldr	r1, [r7, #24]
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	617b      	str	r3, [r7, #20]
   return(result);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e4      	bne.n	8007994 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2202      	movs	r2, #2
 80079ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f846 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079dc:	e02a      	b.n	8007a34 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00e      	beq.n	8007a08 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d01c      	beq.n	8007a38 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
    }
    return;
 8007a06:	e017      	b.n	8007a38 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d012      	beq.n	8007a3a <HAL_UART_IRQHandler+0x59e>
 8007a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fd71 	bl	8008508 <UART_EndTransmit_IT>
    return;
 8007a26:	e008      	b.n	8007a3a <HAL_UART_IRQHandler+0x59e>
      return;
 8007a28:	bf00      	nop
 8007a2a:	e006      	b.n	8007a3a <HAL_UART_IRQHandler+0x59e>
    return;
 8007a2c:	bf00      	nop
 8007a2e:	e004      	b.n	8007a3a <HAL_UART_IRQHandler+0x59e>
      return;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <HAL_UART_IRQHandler+0x59e>
      return;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_UART_IRQHandler+0x59e>
    return;
 8007a38:	bf00      	nop
  }

}
 8007a3a:	37e8      	adds	r7, #232	; 0xe8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4ba6      	ldr	r3, [pc, #664]	; (8007d44 <UART_SetConfig+0x2c4>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	6979      	ldr	r1, [r7, #20]
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a94      	ldr	r2, [pc, #592]	; (8007d48 <UART_SetConfig+0x2c8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d120      	bne.n	8007b3e <UART_SetConfig+0xbe>
 8007afc:	4b93      	ldr	r3, [pc, #588]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d816      	bhi.n	8007b38 <UART_SetConfig+0xb8>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <UART_SetConfig+0x90>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b2d 	.word	0x08007b2d
 8007b18:	08007b27 	.word	0x08007b27
 8007b1c:	08007b33 	.word	0x08007b33
 8007b20:	2301      	movs	r3, #1
 8007b22:	77fb      	strb	r3, [r7, #31]
 8007b24:	e150      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007b26:	2302      	movs	r3, #2
 8007b28:	77fb      	strb	r3, [r7, #31]
 8007b2a:	e14d      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	77fb      	strb	r3, [r7, #31]
 8007b30:	e14a      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007b32:	2308      	movs	r3, #8
 8007b34:	77fb      	strb	r3, [r7, #31]
 8007b36:	e147      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	77fb      	strb	r3, [r7, #31]
 8007b3c:	e144      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a83      	ldr	r2, [pc, #524]	; (8007d50 <UART_SetConfig+0x2d0>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d132      	bne.n	8007bae <UART_SetConfig+0x12e>
 8007b48:	4b80      	ldr	r3, [pc, #512]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	f003 030c 	and.w	r3, r3, #12
 8007b52:	2b0c      	cmp	r3, #12
 8007b54:	d828      	bhi.n	8007ba8 <UART_SetConfig+0x128>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0xdc>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b91 	.word	0x08007b91
 8007b60:	08007ba9 	.word	0x08007ba9
 8007b64:	08007ba9 	.word	0x08007ba9
 8007b68:	08007ba9 	.word	0x08007ba9
 8007b6c:	08007b9d 	.word	0x08007b9d
 8007b70:	08007ba9 	.word	0x08007ba9
 8007b74:	08007ba9 	.word	0x08007ba9
 8007b78:	08007ba9 	.word	0x08007ba9
 8007b7c:	08007b97 	.word	0x08007b97
 8007b80:	08007ba9 	.word	0x08007ba9
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007ba9 	.word	0x08007ba9
 8007b8c:	08007ba3 	.word	0x08007ba3
 8007b90:	2300      	movs	r3, #0
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e118      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007b96:	2302      	movs	r3, #2
 8007b98:	77fb      	strb	r3, [r7, #31]
 8007b9a:	e115      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e112      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e10f      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e10c      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a68      	ldr	r2, [pc, #416]	; (8007d54 <UART_SetConfig+0x2d4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d120      	bne.n	8007bfa <UART_SetConfig+0x17a>
 8007bb8:	4b64      	ldr	r3, [pc, #400]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bc2:	2b30      	cmp	r3, #48	; 0x30
 8007bc4:	d013      	beq.n	8007bee <UART_SetConfig+0x16e>
 8007bc6:	2b30      	cmp	r3, #48	; 0x30
 8007bc8:	d814      	bhi.n	8007bf4 <UART_SetConfig+0x174>
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d009      	beq.n	8007be2 <UART_SetConfig+0x162>
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d810      	bhi.n	8007bf4 <UART_SetConfig+0x174>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <UART_SetConfig+0x15c>
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d006      	beq.n	8007be8 <UART_SetConfig+0x168>
 8007bda:	e00b      	b.n	8007bf4 <UART_SetConfig+0x174>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e0f2      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007be2:	2302      	movs	r3, #2
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	e0ef      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007be8:	2304      	movs	r3, #4
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e0ec      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007bee:	2308      	movs	r3, #8
 8007bf0:	77fb      	strb	r3, [r7, #31]
 8007bf2:	e0e9      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	77fb      	strb	r3, [r7, #31]
 8007bf8:	e0e6      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a56      	ldr	r2, [pc, #344]	; (8007d58 <UART_SetConfig+0x2d8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d120      	bne.n	8007c46 <UART_SetConfig+0x1c6>
 8007c04:	4b51      	ldr	r3, [pc, #324]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c10:	d013      	beq.n	8007c3a <UART_SetConfig+0x1ba>
 8007c12:	2bc0      	cmp	r3, #192	; 0xc0
 8007c14:	d814      	bhi.n	8007c40 <UART_SetConfig+0x1c0>
 8007c16:	2b80      	cmp	r3, #128	; 0x80
 8007c18:	d009      	beq.n	8007c2e <UART_SetConfig+0x1ae>
 8007c1a:	2b80      	cmp	r3, #128	; 0x80
 8007c1c:	d810      	bhi.n	8007c40 <UART_SetConfig+0x1c0>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <UART_SetConfig+0x1a8>
 8007c22:	2b40      	cmp	r3, #64	; 0x40
 8007c24:	d006      	beq.n	8007c34 <UART_SetConfig+0x1b4>
 8007c26:	e00b      	b.n	8007c40 <UART_SetConfig+0x1c0>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e0cc      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	77fb      	strb	r3, [r7, #31]
 8007c32:	e0c9      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c34:	2304      	movs	r3, #4
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e0c6      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	77fb      	strb	r3, [r7, #31]
 8007c3e:	e0c3      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c40:	2310      	movs	r3, #16
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e0c0      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a44      	ldr	r2, [pc, #272]	; (8007d5c <UART_SetConfig+0x2dc>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d125      	bne.n	8007c9c <UART_SetConfig+0x21c>
 8007c50:	4b3e      	ldr	r3, [pc, #248]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5e:	d017      	beq.n	8007c90 <UART_SetConfig+0x210>
 8007c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c64:	d817      	bhi.n	8007c96 <UART_SetConfig+0x216>
 8007c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c6a:	d00b      	beq.n	8007c84 <UART_SetConfig+0x204>
 8007c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c70:	d811      	bhi.n	8007c96 <UART_SetConfig+0x216>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <UART_SetConfig+0x1fe>
 8007c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7a:	d006      	beq.n	8007c8a <UART_SetConfig+0x20a>
 8007c7c:	e00b      	b.n	8007c96 <UART_SetConfig+0x216>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	77fb      	strb	r3, [r7, #31]
 8007c82:	e0a1      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c84:	2302      	movs	r3, #2
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e09e      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c8a:	2304      	movs	r3, #4
 8007c8c:	77fb      	strb	r3, [r7, #31]
 8007c8e:	e09b      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c90:	2308      	movs	r3, #8
 8007c92:	77fb      	strb	r3, [r7, #31]
 8007c94:	e098      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c96:	2310      	movs	r3, #16
 8007c98:	77fb      	strb	r3, [r7, #31]
 8007c9a:	e095      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a2f      	ldr	r2, [pc, #188]	; (8007d60 <UART_SetConfig+0x2e0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d125      	bne.n	8007cf2 <UART_SetConfig+0x272>
 8007ca6:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cb4:	d017      	beq.n	8007ce6 <UART_SetConfig+0x266>
 8007cb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cba:	d817      	bhi.n	8007cec <UART_SetConfig+0x26c>
 8007cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc0:	d00b      	beq.n	8007cda <UART_SetConfig+0x25a>
 8007cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc6:	d811      	bhi.n	8007cec <UART_SetConfig+0x26c>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <UART_SetConfig+0x254>
 8007ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd0:	d006      	beq.n	8007ce0 <UART_SetConfig+0x260>
 8007cd2:	e00b      	b.n	8007cec <UART_SetConfig+0x26c>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	77fb      	strb	r3, [r7, #31]
 8007cd8:	e076      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	77fb      	strb	r3, [r7, #31]
 8007cde:	e073      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	77fb      	strb	r3, [r7, #31]
 8007ce4:	e070      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	77fb      	strb	r3, [r7, #31]
 8007cea:	e06d      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007cec:	2310      	movs	r3, #16
 8007cee:	77fb      	strb	r3, [r7, #31]
 8007cf0:	e06a      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1b      	ldr	r2, [pc, #108]	; (8007d64 <UART_SetConfig+0x2e4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d138      	bne.n	8007d6e <UART_SetConfig+0x2ee>
 8007cfc:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d0a:	d017      	beq.n	8007d3c <UART_SetConfig+0x2bc>
 8007d0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d10:	d82a      	bhi.n	8007d68 <UART_SetConfig+0x2e8>
 8007d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d16:	d00b      	beq.n	8007d30 <UART_SetConfig+0x2b0>
 8007d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1c:	d824      	bhi.n	8007d68 <UART_SetConfig+0x2e8>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <UART_SetConfig+0x2aa>
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d26:	d006      	beq.n	8007d36 <UART_SetConfig+0x2b6>
 8007d28:	e01e      	b.n	8007d68 <UART_SetConfig+0x2e8>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e04b      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007d30:	2302      	movs	r3, #2
 8007d32:	77fb      	strb	r3, [r7, #31]
 8007d34:	e048      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007d36:	2304      	movs	r3, #4
 8007d38:	77fb      	strb	r3, [r7, #31]
 8007d3a:	e045      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007d3c:	2308      	movs	r3, #8
 8007d3e:	77fb      	strb	r3, [r7, #31]
 8007d40:	e042      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007d42:	bf00      	nop
 8007d44:	efff69f3 	.word	0xefff69f3
 8007d48:	40011000 	.word	0x40011000
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	40004400 	.word	0x40004400
 8007d54:	40004800 	.word	0x40004800
 8007d58:	40004c00 	.word	0x40004c00
 8007d5c:	40005000 	.word	0x40005000
 8007d60:	40011400 	.word	0x40011400
 8007d64:	40007800 	.word	0x40007800
 8007d68:	2310      	movs	r3, #16
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e02c      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a72      	ldr	r2, [pc, #456]	; (8007f3c <UART_SetConfig+0x4bc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d125      	bne.n	8007dc4 <UART_SetConfig+0x344>
 8007d78:	4b71      	ldr	r3, [pc, #452]	; (8007f40 <UART_SetConfig+0x4c0>)
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d86:	d017      	beq.n	8007db8 <UART_SetConfig+0x338>
 8007d88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d8c:	d817      	bhi.n	8007dbe <UART_SetConfig+0x33e>
 8007d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d92:	d00b      	beq.n	8007dac <UART_SetConfig+0x32c>
 8007d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d98:	d811      	bhi.n	8007dbe <UART_SetConfig+0x33e>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <UART_SetConfig+0x326>
 8007d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da2:	d006      	beq.n	8007db2 <UART_SetConfig+0x332>
 8007da4:	e00b      	b.n	8007dbe <UART_SetConfig+0x33e>
 8007da6:	2300      	movs	r3, #0
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e00d      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007dac:	2302      	movs	r3, #2
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e00a      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007db2:	2304      	movs	r3, #4
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e007      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007db8:	2308      	movs	r3, #8
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	e004      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007dbe:	2310      	movs	r3, #16
 8007dc0:	77fb      	strb	r3, [r7, #31]
 8007dc2:	e001      	b.n	8007dc8 <UART_SetConfig+0x348>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd0:	d15b      	bne.n	8007e8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007dd2:	7ffb      	ldrb	r3, [r7, #31]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d828      	bhi.n	8007e2a <UART_SetConfig+0x3aa>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <UART_SetConfig+0x360>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e0d 	.word	0x08007e0d
 8007de8:	08007e15 	.word	0x08007e15
 8007dec:	08007e2b 	.word	0x08007e2b
 8007df0:	08007e1b 	.word	0x08007e1b
 8007df4:	08007e2b 	.word	0x08007e2b
 8007df8:	08007e2b 	.word	0x08007e2b
 8007dfc:	08007e2b 	.word	0x08007e2b
 8007e00:	08007e23 	.word	0x08007e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e04:	f7fd fba4 	bl	8005550 <HAL_RCC_GetPCLK1Freq>
 8007e08:	61b8      	str	r0, [r7, #24]
        break;
 8007e0a:	e013      	b.n	8007e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e0c:	f7fd fbb4 	bl	8005578 <HAL_RCC_GetPCLK2Freq>
 8007e10:	61b8      	str	r0, [r7, #24]
        break;
 8007e12:	e00f      	b.n	8007e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e14:	4b4b      	ldr	r3, [pc, #300]	; (8007f44 <UART_SetConfig+0x4c4>)
 8007e16:	61bb      	str	r3, [r7, #24]
        break;
 8007e18:	e00c      	b.n	8007e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e1a:	f7fd fac7 	bl	80053ac <HAL_RCC_GetSysClockFreq>
 8007e1e:	61b8      	str	r0, [r7, #24]
        break;
 8007e20:	e008      	b.n	8007e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e26:	61bb      	str	r3, [r7, #24]
        break;
 8007e28:	e004      	b.n	8007e34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	77bb      	strb	r3, [r7, #30]
        break;
 8007e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d074      	beq.n	8007f24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	005a      	lsls	r2, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	085b      	lsrs	r3, r3, #1
 8007e44:	441a      	add	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b0f      	cmp	r3, #15
 8007e54:	d916      	bls.n	8007e84 <UART_SetConfig+0x404>
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e5c:	d212      	bcs.n	8007e84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f023 030f 	bic.w	r3, r3, #15
 8007e66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	89fb      	ldrh	r3, [r7, #14]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	89fa      	ldrh	r2, [r7, #14]
 8007e80:	60da      	str	r2, [r3, #12]
 8007e82:	e04f      	b.n	8007f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	77bb      	strb	r3, [r7, #30]
 8007e88:	e04c      	b.n	8007f24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e8a:	7ffb      	ldrb	r3, [r7, #31]
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d828      	bhi.n	8007ee2 <UART_SetConfig+0x462>
 8007e90:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <UART_SetConfig+0x418>)
 8007e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e96:	bf00      	nop
 8007e98:	08007ebd 	.word	0x08007ebd
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	08007ee3 	.word	0x08007ee3
 8007ea8:	08007ed3 	.word	0x08007ed3
 8007eac:	08007ee3 	.word	0x08007ee3
 8007eb0:	08007ee3 	.word	0x08007ee3
 8007eb4:	08007ee3 	.word	0x08007ee3
 8007eb8:	08007edb 	.word	0x08007edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ebc:	f7fd fb48 	bl	8005550 <HAL_RCC_GetPCLK1Freq>
 8007ec0:	61b8      	str	r0, [r7, #24]
        break;
 8007ec2:	e013      	b.n	8007eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ec4:	f7fd fb58 	bl	8005578 <HAL_RCC_GetPCLK2Freq>
 8007ec8:	61b8      	str	r0, [r7, #24]
        break;
 8007eca:	e00f      	b.n	8007eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ecc:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <UART_SetConfig+0x4c4>)
 8007ece:	61bb      	str	r3, [r7, #24]
        break;
 8007ed0:	e00c      	b.n	8007eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ed2:	f7fd fa6b 	bl	80053ac <HAL_RCC_GetSysClockFreq>
 8007ed6:	61b8      	str	r0, [r7, #24]
        break;
 8007ed8:	e008      	b.n	8007eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ede:	61bb      	str	r3, [r7, #24]
        break;
 8007ee0:	e004      	b.n	8007eec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8007eea:	bf00      	nop
    }

    if (pclk != 0U)
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d018      	beq.n	8007f24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	085a      	lsrs	r2, r3, #1
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	441a      	add	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2b0f      	cmp	r3, #15
 8007f0a:	d909      	bls.n	8007f20 <UART_SetConfig+0x4a0>
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f12:	d205      	bcs.n	8007f20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	e001      	b.n	8007f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f30:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40007c00 	.word	0x40007c00
 8007f40:	40023800 	.word	0x40023800
 8007f44:	00f42400 	.word	0x00f42400

08007f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01a      	beq.n	800805e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008046:	d10a      	bne.n	800805e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	605a      	str	r2, [r3, #4]
  }
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800809c:	f7fa f8e8 	bl	8002270 <HAL_GetTick>
 80080a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d10e      	bne.n	80080ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f81b 	bl	80080fa <UART_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e011      	b.n	80080f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b09c      	sub	sp, #112	; 0x70
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	4613      	mov	r3, r2
 8008108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800810a:	e0a7      	b.n	800825c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008112:	f000 80a3 	beq.w	800825c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008116:	f7fa f8ab 	bl	8002270 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008122:	429a      	cmp	r2, r3
 8008124:	d302      	bcc.n	800812c <UART_WaitOnFlagUntilTimeout+0x32>
 8008126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008128:	2b00      	cmp	r3, #0
 800812a:	d13f      	bne.n	80081ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800813a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008140:	667b      	str	r3, [r7, #100]	; 0x64
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800814a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800814c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e6      	bne.n	800812c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	f023 0301 	bic.w	r3, r3, #1
 8008174:	663b      	str	r3, [r7, #96]	; 0x60
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800817e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800818c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e5      	bne.n	800815e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2220      	movs	r2, #32
 8008196:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e068      	b.n	800827e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d050      	beq.n	800825c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081c8:	d148      	bne.n	800825c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
 80081f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e6      	bne.n	80081d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	613b      	str	r3, [r7, #16]
   return(result);
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	66bb      	str	r3, [r7, #104]	; 0x68
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008226:	623a      	str	r2, [r7, #32]
 8008228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	69f9      	ldr	r1, [r7, #28]
 800822c:	6a3a      	ldr	r2, [r7, #32]
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	61bb      	str	r3, [r7, #24]
   return(result);
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e5      	bne.n	8008206 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2220      	movs	r2, #32
 8008244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2220      	movs	r2, #32
 800824c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e010      	b.n	800827e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69da      	ldr	r2, [r3, #28]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	4013      	ands	r3, r2
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	429a      	cmp	r2, r3
 800826a:	bf0c      	ite	eq
 800826c:	2301      	moveq	r3, #1
 800826e:	2300      	movne	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	461a      	mov	r2, r3
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	429a      	cmp	r2, r3
 8008278:	f43f af48 	beq.w	800810c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3770      	adds	r7, #112	; 0x70
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008288:	b480      	push	{r7}
 800828a:	b097      	sub	sp, #92	; 0x5c
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	88fa      	ldrh	r2, [r7, #6]
 80082a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	88fa      	ldrh	r2, [r7, #6]
 80082a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ba:	d10e      	bne.n	80082da <UART_Start_Receive_IT+0x52>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <UART_Start_Receive_IT+0x48>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80082ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082ce:	e02d      	b.n	800832c <UART_Start_Receive_IT+0xa4>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	22ff      	movs	r2, #255	; 0xff
 80082d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082d8:	e028      	b.n	800832c <UART_Start_Receive_IT+0xa4>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10d      	bne.n	80082fe <UART_Start_Receive_IT+0x76>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d104      	bne.n	80082f4 <UART_Start_Receive_IT+0x6c>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	22ff      	movs	r2, #255	; 0xff
 80082ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082f2:	e01b      	b.n	800832c <UART_Start_Receive_IT+0xa4>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	227f      	movs	r2, #127	; 0x7f
 80082f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082fc:	e016      	b.n	800832c <UART_Start_Receive_IT+0xa4>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008306:	d10d      	bne.n	8008324 <UART_Start_Receive_IT+0x9c>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <UART_Start_Receive_IT+0x92>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	227f      	movs	r2, #127	; 0x7f
 8008314:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008318:	e008      	b.n	800832c <UART_Start_Receive_IT+0xa4>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	223f      	movs	r2, #63	; 0x3f
 800831e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008322:	e003      	b.n	800832c <UART_Start_Receive_IT+0xa4>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2222      	movs	r2, #34	; 0x22
 8008338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	657b      	str	r3, [r7, #84]	; 0x54
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3308      	adds	r3, #8
 800835a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800835c:	64ba      	str	r2, [r7, #72]	; 0x48
 800835e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800836a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e5      	bne.n	800833c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008378:	d107      	bne.n	800838a <UART_Start_Receive_IT+0x102>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d103      	bne.n	800838a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a21      	ldr	r2, [pc, #132]	; (800840c <UART_Start_Receive_IT+0x184>)
 8008386:	669a      	str	r2, [r3, #104]	; 0x68
 8008388:	e002      	b.n	8008390 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4a20      	ldr	r2, [pc, #128]	; (8008410 <UART_Start_Receive_IT+0x188>)
 800838e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d019      	beq.n	80083cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80083ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b6:	637b      	str	r3, [r7, #52]	; 0x34
 80083b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e6      	bne.n	8008398 <UART_Start_Receive_IT+0x110>
 80083ca:	e018      	b.n	80083fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	613b      	str	r3, [r7, #16]
   return(result);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f043 0320 	orr.w	r3, r3, #32
 80083e0:	653b      	str	r3, [r7, #80]	; 0x50
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ea:	623b      	str	r3, [r7, #32]
 80083ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	69f9      	ldr	r1, [r7, #28]
 80083f0:	6a3a      	ldr	r2, [r7, #32]
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e6      	bne.n	80083cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	375c      	adds	r7, #92	; 0x5c
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	080086c3 	.word	0x080086c3
 8008410:	0800855d 	.word	0x0800855d

08008414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008414:	b480      	push	{r7}
 8008416:	b095      	sub	sp, #84	; 0x54
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008430:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843a:	643b      	str	r3, [r7, #64]	; 0x40
 800843c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e6      	bne.n	800841c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	61fb      	str	r3, [r7, #28]
   return(result);
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	64bb      	str	r3, [r7, #72]	; 0x48
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3308      	adds	r3, #8
 800846c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e5      	bne.n	800844e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008486:	2b01      	cmp	r3, #1
 8008488:	d118      	bne.n	80084bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	60bb      	str	r3, [r7, #8]
   return(result);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f023 0310 	bic.w	r3, r3, #16
 800849e:	647b      	str	r3, [r7, #68]	; 0x44
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6979      	ldr	r1, [r7, #20]
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	613b      	str	r3, [r7, #16]
   return(result);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e6      	bne.n	800848a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084d0:	bf00      	nop
 80084d2:	3754      	adds	r7, #84	; 0x54
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7ff faaa 	bl	8007a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008500:	bf00      	nop
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	60bb      	str	r3, [r7, #8]
   return(result);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6979      	ldr	r1, [r7, #20]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	613b      	str	r3, [r7, #16]
   return(result);
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e6      	bne.n	8008510 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fa76 	bl	8007a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008554:	bf00      	nop
 8008556:	3720      	adds	r7, #32
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b096      	sub	sp, #88	; 0x58
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800856a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008574:	2b22      	cmp	r3, #34	; 0x22
 8008576:	f040 8098 	bne.w	80086aa <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008584:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008588:	b2d9      	uxtb	r1, r3
 800858a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800858e:	b2da      	uxtb	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008594:	400a      	ands	r2, r1
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d17b      	bne.n	80086ba <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d6:	653b      	str	r3, [r7, #80]	; 0x50
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e0:	647b      	str	r3, [r7, #68]	; 0x44
 80085e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e6      	bne.n	80085c2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	623b      	str	r3, [r7, #32]
   return(result);
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	f023 0301 	bic.w	r3, r3, #1
 800860a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3308      	adds	r3, #8
 8008612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008614:	633a      	str	r2, [r7, #48]	; 0x30
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e5      	bne.n	80085f4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008640:	2b01      	cmp	r3, #1
 8008642:	d12e      	bne.n	80086a2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	60fb      	str	r3, [r7, #12]
   return(result);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0310 	bic.w	r3, r3, #16
 800865e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	69b9      	ldr	r1, [r7, #24]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	617b      	str	r3, [r7, #20]
   return(result);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e6      	bne.n	800864a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b10      	cmp	r3, #16
 8008688:	d103      	bne.n	8008692 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2210      	movs	r2, #16
 8008690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff f9e4 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086a0:	e00b      	b.n	80086ba <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7f8 f982 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 80086a8:	e007      	b.n	80086ba <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0208 	orr.w	r2, r2, #8
 80086b8:	619a      	str	r2, [r3, #24]
}
 80086ba:	bf00      	nop
 80086bc:	3758      	adds	r7, #88	; 0x58
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b096      	sub	sp, #88	; 0x58
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086da:	2b22      	cmp	r3, #34	; 0x22
 80086dc:	f040 8098 	bne.w	8008810 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80086f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80086f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086f8:	4013      	ands	r3, r2
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008704:	1c9a      	adds	r2, r3, #2
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	b29a      	uxth	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008722:	b29b      	uxth	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d17b      	bne.n	8008820 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800873c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008746:	643b      	str	r3, [r7, #64]	; 0x40
 8008748:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800874c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e6      	bne.n	8008728 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	61fb      	str	r3, [r7, #28]
   return(result);
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	64bb      	str	r3, [r7, #72]	; 0x48
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800877a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d12e      	bne.n	8008808 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f023 0310 	bic.w	r3, r3, #16
 80087c4:	647b      	str	r3, [r7, #68]	; 0x44
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6979      	ldr	r1, [r7, #20]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	613b      	str	r3, [r7, #16]
   return(result);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e6      	bne.n	80087b0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d103      	bne.n	80087f8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2210      	movs	r2, #16
 80087f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff f931 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008806:	e00b      	b.n	8008820 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7f8 f8cf 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 800880e:	e007      	b.n	8008820 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0208 	orr.w	r2, r2, #8
 800881e:	619a      	str	r2, [r3, #24]
}
 8008820:	bf00      	nop
 8008822:	3758      	adds	r7, #88	; 0x58
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d121      	bne.n	800887e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4b27      	ldr	r3, [pc, #156]	; (80088dc <FMC_SDRAM_Init+0xb4>)
 8008840:	4013      	ands	r3, r2
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	6851      	ldr	r1, [r2, #4]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	6892      	ldr	r2, [r2, #8]
 800884a:	4311      	orrs	r1, r2
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	68d2      	ldr	r2, [r2, #12]
 8008850:	4311      	orrs	r1, r2
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	6912      	ldr	r2, [r2, #16]
 8008856:	4311      	orrs	r1, r2
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	6952      	ldr	r2, [r2, #20]
 800885c:	4311      	orrs	r1, r2
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	6992      	ldr	r2, [r2, #24]
 8008862:	4311      	orrs	r1, r2
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	69d2      	ldr	r2, [r2, #28]
 8008868:	4311      	orrs	r1, r2
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	6a12      	ldr	r2, [r2, #32]
 800886e:	4311      	orrs	r1, r2
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008874:	430a      	orrs	r2, r1
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e026      	b.n	80088cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	69d9      	ldr	r1, [r3, #28]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	4319      	orrs	r1, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	430b      	orrs	r3, r1
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4b0e      	ldr	r3, [pc, #56]	; (80088dc <FMC_SDRAM_Init+0xb4>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	6851      	ldr	r1, [r2, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	6892      	ldr	r2, [r2, #8]
 80088ac:	4311      	orrs	r1, r2
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	68d2      	ldr	r2, [r2, #12]
 80088b2:	4311      	orrs	r1, r2
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	6912      	ldr	r2, [r2, #16]
 80088b8:	4311      	orrs	r1, r2
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	6952      	ldr	r2, [r2, #20]
 80088be:	4311      	orrs	r1, r2
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	6992      	ldr	r2, [r2, #24]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	ffff8000 	.word	0xffff8000

080088e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d128      	bne.n	8008944 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	1e59      	subs	r1, r3, #1
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	3b01      	subs	r3, #1
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	4319      	orrs	r1, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	3b01      	subs	r3, #1
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	4319      	orrs	r1, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	3b01      	subs	r3, #1
 800891a:	031b      	lsls	r3, r3, #12
 800891c:	4319      	orrs	r1, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	3b01      	subs	r3, #1
 8008924:	041b      	lsls	r3, r3, #16
 8008926:	4319      	orrs	r1, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	3b01      	subs	r3, #1
 800892e:	051b      	lsls	r3, r3, #20
 8008930:	4319      	orrs	r1, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	3b01      	subs	r3, #1
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	430b      	orrs	r3, r1
 800893c:	431a      	orrs	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	609a      	str	r2, [r3, #8]
 8008942:	e02d      	b.n	80089a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	4b19      	ldr	r3, [pc, #100]	; (80089b0 <FMC_SDRAM_Timing_Init+0xd0>)
 800894a:	4013      	ands	r3, r2
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	68d2      	ldr	r2, [r2, #12]
 8008950:	3a01      	subs	r2, #1
 8008952:	0311      	lsls	r1, r2, #12
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	6952      	ldr	r2, [r2, #20]
 8008958:	3a01      	subs	r2, #1
 800895a:	0512      	lsls	r2, r2, #20
 800895c:	430a      	orrs	r2, r1
 800895e:	431a      	orrs	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	1e59      	subs	r1, r3, #1
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	3b01      	subs	r3, #1
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	4319      	orrs	r1, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	3b01      	subs	r3, #1
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	4319      	orrs	r1, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	3b01      	subs	r3, #1
 800898c:	041b      	lsls	r3, r3, #16
 800898e:	4319      	orrs	r1, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	3b01      	subs	r3, #1
 8008996:	061b      	lsls	r3, r3, #24
 8008998:	430b      	orrs	r3, r1
 800899a:	431a      	orrs	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	ff0f0fff 	.word	0xff0f0fff

080089b4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	4b0c      	ldr	r3, [pc, #48]	; (80089f8 <FMC_SDRAM_SendCommand+0x44>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	6811      	ldr	r1, [r2, #0]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	6852      	ldr	r2, [r2, #4]
 80089d0:	4311      	orrs	r1, r2
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	6892      	ldr	r2, [r2, #8]
 80089d6:	3a01      	subs	r2, #1
 80089d8:	0152      	lsls	r2, r2, #5
 80089da:	4311      	orrs	r1, r2
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	68d2      	ldr	r2, [r2, #12]
 80089e0:	0252      	lsls	r2, r2, #9
 80089e2:	430a      	orrs	r2, r1
 80089e4:	431a      	orrs	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	ffc00000 	.word	0xffc00000

080089fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695a      	ldr	r2, [r3, #20]
 8008a0a:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	0052      	lsls	r2, r2, #1
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	ffffc001 	.word	0xffffc001

08008a2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a3e:	2b84      	cmp	r3, #132	; 0x84
 8008a40:	d005      	beq.n	8008a4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	3303      	adds	r3, #3
 8008a4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a62:	f3ef 8305 	mrs	r3, IPSR
 8008a66:	607b      	str	r3, [r7, #4]
  return(result);
 8008a68:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	bf14      	ite	ne
 8008a6e:	2301      	movne	r3, #1
 8008a70:	2300      	moveq	r3, #0
 8008a72:	b2db      	uxtb	r3, r3
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008a84:	f001 f884 	bl	8009b90 <vTaskStartScheduler>
  
  return osOK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a90:	b087      	sub	sp, #28
 8008a92:	af02      	add	r7, sp, #8
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685c      	ldr	r4, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008aa4:	b29e      	uxth	r6, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff ffbd 	bl	8008a2c <makeFreeRtosPriority>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	9200      	str	r2, [sp, #0]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	4632      	mov	r2, r6
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fed6 	bl	8009874 <xTaskCreate>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d001      	beq.n	8008ad2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e000      	b.n	8008ad4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008adc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <osDelay+0x16>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	e000      	b.n	8008af4 <osDelay+0x18>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4618      	mov	r0, r3
 8008af6:	f001 f815 	bl	8009b24 <vTaskDelay>
  
  return osOK;
 8008afa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d110      	bne.n	8008b36 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8008b14:	2203      	movs	r2, #3
 8008b16:	2100      	movs	r1, #0
 8008b18:	2001      	movs	r0, #1
 8008b1a:	f000 f9b9 	bl	8008e90 <xQueueGenericCreate>
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <osSemaphoreCreate+0x2e>
 8008b26:	2300      	movs	r3, #0
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 fa43 	bl	8008fb8 <xQueueGenericSend>
    return sema;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	e006      	b.n	8008b44 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fa04 	bl	8008f4a <xQueueCreateCountingSemaphore>
 8008b42:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008b56:	2300      	movs	r3, #0
 8008b58:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008b60:	2380      	movs	r3, #128	; 0x80
 8008b62:	e03a      	b.n	8008bda <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d103      	bne.n	8008b78 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008b70:	f04f 33ff 	mov.w	r3, #4294967295
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	e009      	b.n	8008b8c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d006      	beq.n	8008b8c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <osSemaphoreWait+0x40>
      ticks = 1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008b8c:	f7ff ff66 	bl	8008a5c <inHandlerMode>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d017      	beq.n	8008bc6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008b96:	f107 0308 	add.w	r3, r7, #8
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fcba 	bl	8009518 <xQueueReceiveFromISR>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d001      	beq.n	8008bae <osSemaphoreWait+0x62>
      return osErrorOS;
 8008baa:	23ff      	movs	r3, #255	; 0xff
 8008bac:	e015      	b.n	8008bda <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d011      	beq.n	8008bd8 <osSemaphoreWait+0x8c>
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <osSemaphoreWait+0x98>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	e008      	b.n	8008bd8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fb91 	bl	80092f0 <xQueueSemaphoreTake>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d001      	beq.n	8008bd8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008bd4:	23ff      	movs	r3, #255	; 0xff
 8008bd6:	e000      	b.n	8008bda <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	e000ed04 	.word	0xe000ed04

08008be8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008bf8:	f7ff ff30 	bl	8008a5c <inHandlerMode>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d016      	beq.n	8008c30 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008c02:	f107 0308 	add.w	r3, r7, #8
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fadb 	bl	80091c4 <xQueueGiveFromISR>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d001      	beq.n	8008c18 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008c14:	23ff      	movs	r3, #255	; 0xff
 8008c16:	e017      	b.n	8008c48 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d013      	beq.n	8008c46 <osSemaphoreRelease+0x5e>
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <osSemaphoreRelease+0x68>)
 8008c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	e00a      	b.n	8008c46 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008c30:	2300      	movs	r3, #0
 8008c32:	2200      	movs	r2, #0
 8008c34:	2100      	movs	r1, #0
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9be 	bl	8008fb8 <xQueueGenericSend>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d001      	beq.n	8008c46 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008c42:	23ff      	movs	r3, #255	; 0xff
 8008c44:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008c46:	68fb      	ldr	r3, [r7, #12]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f103 0208 	add.w	r2, r3, #8
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f103 0208 	add.w	r2, r3, #8
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f103 0208 	add.w	r2, r3, #8
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	601a      	str	r2, [r3, #0]
}
 8008cea:	bf00      	nop
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0c:	d103      	bne.n	8008d16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e00c      	b.n	8008d30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	e002      	b.n	8008d24 <vListInsert+0x2e>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d2f6      	bcs.n	8008d1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	601a      	str	r2, [r3, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6892      	ldr	r2, [r2, #8]
 8008d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6852      	ldr	r2, [r2, #4]
 8008d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d103      	bne.n	8008d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	1e5a      	subs	r2, r3, #1
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10c      	bne.n	8008dea <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	b672      	cpsid	i
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	b662      	cpsie	i
 8008de4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008dea:	f001 fe2f 	bl	800aa4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	441a      	add	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	68f9      	ldr	r1, [r7, #12]
 8008e1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e20:	fb01 f303 	mul.w	r3, r1, r3
 8008e24:	441a      	add	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	22ff      	movs	r2, #255	; 0xff
 8008e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	22ff      	movs	r2, #255	; 0xff
 8008e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d114      	bne.n	8008e6a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01a      	beq.n	8008e7e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3310      	adds	r3, #16
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 f909 	bl	800a064 <xTaskRemoveFromEventList>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d012      	beq.n	8008e7e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e58:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <xQueueGenericReset+0xd0>)
 8008e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	e009      	b.n	8008e7e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3310      	adds	r3, #16
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff fef0 	bl	8008c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3324      	adds	r3, #36	; 0x24
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff feeb 	bl	8008c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e7e:	f001 fe19 	bl	800aab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e82:	2301      	movs	r3, #1
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	e000ed04 	.word	0xe000ed04

08008e90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08a      	sub	sp, #40	; 0x28
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10c      	bne.n	8008ebe <xQueueGenericCreate+0x2e>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	b672      	cpsid	i
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	b662      	cpsie	i
 8008eb8:	613b      	str	r3, [r7, #16]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61fb      	str	r3, [r7, #28]
 8008ec8:	e004      	b.n	8008ed4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	3348      	adds	r3, #72	; 0x48
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 fee3 	bl	800aca4 <pvPortMalloc>
 8008ede:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00d      	beq.n	8008f02 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	3348      	adds	r3, #72	; 0x48
 8008eee:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ef0:	79fa      	ldrb	r2, [r7, #7]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 f805 	bl	8008f0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f02:	69bb      	ldr	r3, [r7, #24]
	}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	e002      	b.n	8008f2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	69b8      	ldr	r0, [r7, #24]
 8008f3e:	f7ff ff3d 	bl	8008dbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10c      	bne.n	8008f74 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	b672      	cpsid	i
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	b662      	cpsie	i
 8008f6e:	613b      	str	r3, [r7, #16]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d90c      	bls.n	8008f96 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	b672      	cpsid	i
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	b662      	cpsie	i
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f96:	2202      	movs	r2, #2
 8008f98:	2100      	movs	r1, #0
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff ff78 	bl	8008e90 <xQueueGenericCreate>
 8008fa0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008fae:	697b      	ldr	r3, [r7, #20]
	}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08e      	sub	sp, #56	; 0x38
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10c      	bne.n	8008fee <xQueueGenericSend+0x36>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	b672      	cpsid	i
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	b662      	cpsie	i
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fea:	bf00      	nop
 8008fec:	e7fe      	b.n	8008fec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <xQueueGenericSend+0x44>
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <xQueueGenericSend+0x48>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e000      	b.n	8009002 <xQueueGenericSend+0x4a>
 8009000:	2300      	movs	r3, #0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10c      	bne.n	8009020 <xQueueGenericSend+0x68>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	b672      	cpsid	i
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	b662      	cpsie	i
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d103      	bne.n	800902e <xQueueGenericSend+0x76>
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <xQueueGenericSend+0x7a>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <xQueueGenericSend+0x7c>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10c      	bne.n	8009052 <xQueueGenericSend+0x9a>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	b672      	cpsid	i
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	b662      	cpsie	i
 800904c:	623b      	str	r3, [r7, #32]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009052:	f001 f9b1 	bl	800a3b8 <xTaskGetSchedulerState>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <xQueueGenericSend+0xaa>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <xQueueGenericSend+0xae>
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <xQueueGenericSend+0xb0>
 8009066:	2300      	movs	r3, #0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10c      	bne.n	8009086 <xQueueGenericSend+0xce>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	b672      	cpsid	i
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	b662      	cpsie	i
 8009080:	61fb      	str	r3, [r7, #28]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009086:	f001 fce1 	bl	800aa4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	429a      	cmp	r2, r3
 8009094:	d302      	bcc.n	800909c <xQueueGenericSend+0xe4>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d129      	bne.n	80090f0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090a2:	f000 fad7 	bl	8009654 <prvCopyDataToQueue>
 80090a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d010      	beq.n	80090d2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	3324      	adds	r3, #36	; 0x24
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 ffd5 	bl	800a064 <xTaskRemoveFromEventList>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d013      	beq.n	80090e8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090c0:	4b3f      	ldr	r3, [pc, #252]	; (80091c0 <xQueueGenericSend+0x208>)
 80090c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	e00a      	b.n	80090e8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090d8:	4b39      	ldr	r3, [pc, #228]	; (80091c0 <xQueueGenericSend+0x208>)
 80090da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090e8:	f001 fce4 	bl	800aab4 <vPortExitCritical>
				return pdPASS;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e063      	b.n	80091b8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d103      	bne.n	80090fe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090f6:	f001 fcdd 	bl	800aab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e05c      	b.n	80091b8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009104:	f107 0314 	add.w	r3, r7, #20
 8009108:	4618      	mov	r0, r3
 800910a:	f001 f80f 	bl	800a12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800910e:	2301      	movs	r3, #1
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009112:	f001 fccf 	bl	800aab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009116:	f000 fd8f 	bl	8009c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800911a:	f001 fc97 	bl	800aa4c <vPortEnterCritical>
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009124:	b25b      	sxtb	r3, r3
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912a:	d103      	bne.n	8009134 <xQueueGenericSend+0x17c>
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800913a:	b25b      	sxtb	r3, r3
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d103      	bne.n	800914a <xQueueGenericSend+0x192>
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800914a:	f001 fcb3 	bl	800aab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800914e:	1d3a      	adds	r2, r7, #4
 8009150:	f107 0314 	add.w	r3, r7, #20
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fffe 	bl	800a158 <xTaskCheckForTimeOut>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d124      	bne.n	80091ac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009164:	f000 fb6e 	bl	8009844 <prvIsQueueFull>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d018      	beq.n	80091a0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	3310      	adds	r3, #16
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f000 ff4e 	bl	800a018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800917c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800917e:	f000 faf9 	bl	8009774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009182:	f000 fd67 	bl	8009c54 <xTaskResumeAll>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f af7c 	bne.w	8009086 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800918e:	4b0c      	ldr	r3, [pc, #48]	; (80091c0 <xQueueGenericSend+0x208>)
 8009190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	e772      	b.n	8009086 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a2:	f000 fae7 	bl	8009774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091a6:	f000 fd55 	bl	8009c54 <xTaskResumeAll>
 80091aa:	e76c      	b.n	8009086 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ae:	f000 fae1 	bl	8009774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091b2:	f000 fd4f 	bl	8009c54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3738      	adds	r7, #56	; 0x38
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	e000ed04 	.word	0xe000ed04

080091c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b08e      	sub	sp, #56	; 0x38
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	b672      	cpsid	i
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	b662      	cpsie	i
 80091ec:	623b      	str	r3, [r7, #32]
}
 80091ee:	bf00      	nop
 80091f0:	e7fe      	b.n	80091f0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00c      	beq.n	8009214 <xQueueGiveFromISR+0x50>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	b672      	cpsid	i
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	b662      	cpsie	i
 800920e:	61fb      	str	r3, [r7, #28]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d103      	bne.n	8009224 <xQueueGiveFromISR+0x60>
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <xQueueGiveFromISR+0x64>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <xQueueGiveFromISR+0x66>
 8009228:	2300      	movs	r3, #0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10c      	bne.n	8009248 <xQueueGiveFromISR+0x84>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	b672      	cpsid	i
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	b662      	cpsie	i
 8009242:	61bb      	str	r3, [r7, #24]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009248:	f001 fce8 	bl	800ac1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800924c:	f3ef 8211 	mrs	r2, BASEPRI
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	b672      	cpsid	i
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	b662      	cpsie	i
 8009264:	617a      	str	r2, [r7, #20]
 8009266:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009268:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009278:	429a      	cmp	r2, r3
 800927a:	d22b      	bcs.n	80092d4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800928e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009296:	d112      	bne.n	80092be <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	d016      	beq.n	80092ce <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	3324      	adds	r3, #36	; 0x24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fedd 	bl	800a064 <xTaskRemoveFromEventList>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00e      	beq.n	80092ce <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00b      	beq.n	80092ce <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2201      	movs	r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	e007      	b.n	80092ce <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092c2:	3301      	adds	r3, #1
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	b25a      	sxtb	r2, r3
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092ce:	2301      	movs	r3, #1
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
 80092d2:	e001      	b.n	80092d8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
 80092d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092da:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3738      	adds	r7, #56	; 0x38
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08e      	sub	sp, #56	; 0x38
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009302:	2300      	movs	r3, #0
 8009304:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10c      	bne.n	8009326 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	b672      	cpsid	i
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	b662      	cpsie	i
 8009320:	623b      	str	r3, [r7, #32]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00c      	beq.n	8009348 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	b672      	cpsid	i
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	b662      	cpsie	i
 8009342:	61fb      	str	r3, [r7, #28]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009348:	f001 f836 	bl	800a3b8 <xTaskGetSchedulerState>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <xQueueSemaphoreTake+0x68>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <xQueueSemaphoreTake+0x6c>
 8009358:	2301      	movs	r3, #1
 800935a:	e000      	b.n	800935e <xQueueSemaphoreTake+0x6e>
 800935c:	2300      	movs	r3, #0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10c      	bne.n	800937c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	b672      	cpsid	i
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	b662      	cpsie	i
 8009376:	61bb      	str	r3, [r7, #24]
}
 8009378:	bf00      	nop
 800937a:	e7fe      	b.n	800937a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800937c:	f001 fb66 	bl	800aa4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d024      	beq.n	80093d6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800939c:	f001 f9d2 	bl	800a744 <pvTaskIncrementMutexHeldCount>
 80093a0:	4602      	mov	r2, r0
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00f      	beq.n	80093ce <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	3310      	adds	r3, #16
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fe56 	bl	800a064 <xTaskRemoveFromEventList>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093be:	4b55      	ldr	r3, [pc, #340]	; (8009514 <xQueueSemaphoreTake+0x224>)
 80093c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093ce:	f001 fb71 	bl	800aab4 <vPortExitCritical>
				return pdPASS;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e099      	b.n	800950a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d113      	bne.n	8009404 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00c      	beq.n	80093fc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	b672      	cpsid	i
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	b662      	cpsie	i
 80093f6:	617b      	str	r3, [r7, #20]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80093fc:	f001 fb5a 	bl	800aab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009400:	2300      	movs	r3, #0
 8009402:	e082      	b.n	800950a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800940a:	f107 030c 	add.w	r3, r7, #12
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fe8c 	bl	800a12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009418:	f001 fb4c 	bl	800aab4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800941c:	f000 fc0c 	bl	8009c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009420:	f001 fb14 	bl	800aa4c <vPortEnterCritical>
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800942a:	b25b      	sxtb	r3, r3
 800942c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009430:	d103      	bne.n	800943a <xQueueSemaphoreTake+0x14a>
 8009432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009440:	b25b      	sxtb	r3, r3
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009446:	d103      	bne.n	8009450 <xQueueSemaphoreTake+0x160>
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009450:	f001 fb30 	bl	800aab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009454:	463a      	mov	r2, r7
 8009456:	f107 030c 	add.w	r3, r7, #12
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fe7b 	bl	800a158 <xTaskCheckForTimeOut>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d132      	bne.n	80094ce <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800946a:	f000 f9d5 	bl	8009818 <prvIsQueueEmpty>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d026      	beq.n	80094c2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800947c:	f001 fae6 	bl	800aa4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 ffb5 	bl	800a3f4 <xTaskPriorityInherit>
 800948a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800948c:	f001 fb12 	bl	800aab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	3324      	adds	r3, #36	; 0x24
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	4611      	mov	r1, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fdbd 	bl	800a018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800949e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094a0:	f000 f968 	bl	8009774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094a4:	f000 fbd6 	bl	8009c54 <xTaskResumeAll>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f47f af66 	bne.w	800937c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80094b0:	4b18      	ldr	r3, [pc, #96]	; (8009514 <xQueueSemaphoreTake+0x224>)
 80094b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	e75c      	b.n	800937c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80094c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094c4:	f000 f956 	bl	8009774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094c8:	f000 fbc4 	bl	8009c54 <xTaskResumeAll>
 80094cc:	e756      	b.n	800937c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80094ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094d0:	f000 f950 	bl	8009774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094d4:	f000 fbbe 	bl	8009c54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094da:	f000 f99d 	bl	8009818 <prvIsQueueEmpty>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f43f af4b 	beq.w	800937c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00d      	beq.n	8009508 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80094ec:	f001 faae 	bl	800aa4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80094f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f2:	f000 f897 	bl	8009624 <prvGetDisinheritPriorityAfterTimeout>
 80094f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 f882 	bl	800a608 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009504:	f001 fad6 	bl	800aab4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800950a:	4618      	mov	r0, r3
 800950c:	3738      	adds	r7, #56	; 0x38
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	e000ed04 	.word	0xe000ed04

08009518 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08e      	sub	sp, #56	; 0x38
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10c      	bne.n	8009548 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	b672      	cpsid	i
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	b662      	cpsie	i
 8009542:	623b      	str	r3, [r7, #32]
}
 8009544:	bf00      	nop
 8009546:	e7fe      	b.n	8009546 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d103      	bne.n	8009556 <xQueueReceiveFromISR+0x3e>
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <xQueueReceiveFromISR+0x42>
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <xQueueReceiveFromISR+0x44>
 800955a:	2300      	movs	r3, #0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10c      	bne.n	800957a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	b672      	cpsid	i
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	b662      	cpsie	i
 8009574:	61fb      	str	r3, [r7, #28]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800957a:	f001 fb4f 	bl	800ac1c <vPortValidateInterruptPriority>
	__asm volatile
 800957e:	f3ef 8211 	mrs	r2, BASEPRI
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	b672      	cpsid	i
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	b662      	cpsie	i
 8009596:	61ba      	str	r2, [r7, #24]
 8009598:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800959a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800959c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d02f      	beq.n	800960a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095b8:	f000 f8b6 	bl	8009728 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	1e5a      	subs	r2, r3, #1
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80095c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095cc:	d112      	bne.n	80095f4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d016      	beq.n	8009604 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	3310      	adds	r3, #16
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 fd42 	bl	800a064 <xTaskRemoveFromEventList>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00e      	beq.n	8009604 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e007      	b.n	8009604 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095f8:	3301      	adds	r3, #1
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	b25a      	sxtb	r2, r3
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009604:	2301      	movs	r3, #1
 8009606:	637b      	str	r3, [r7, #52]	; 0x34
 8009608:	e001      	b.n	800960e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800960a:	2300      	movs	r3, #0
 800960c:	637b      	str	r3, [r7, #52]	; 0x34
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f383 8811 	msr	BASEPRI, r3
}
 8009618:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800961c:	4618      	mov	r0, r3
 800961e:	3738      	adds	r7, #56	; 0x38
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1c3 0307 	rsb	r3, r3, #7
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e001      	b.n	8009646 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009646:	68fb      	ldr	r3, [r7, #12]
	}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10d      	bne.n	800968e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d14d      	bne.n	8009716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 ff38 	bl	800a4f4 <xTaskPriorityDisinherit>
 8009684:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	609a      	str	r2, [r3, #8]
 800968c:	e043      	b.n	8009716 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d119      	bne.n	80096c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6858      	ldr	r0, [r3, #4]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969c:	461a      	mov	r2, r3
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	f017 fdaa 	bl	80211f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d32b      	bcc.n	8009716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	605a      	str	r2, [r3, #4]
 80096c6:	e026      	b.n	8009716 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68d8      	ldr	r0, [r3, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	461a      	mov	r2, r3
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	f017 fd90 	bl	80211f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	425b      	negs	r3, r3
 80096e2:	441a      	add	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d207      	bcs.n	8009704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	425b      	negs	r3, r3
 80096fe:	441a      	add	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d105      	bne.n	8009716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	3b01      	subs	r3, #1
 8009714:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800971e:	697b      	ldr	r3, [r7, #20]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	d018      	beq.n	800976c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68da      	ldr	r2, [r3, #12]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009742:	441a      	add	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	429a      	cmp	r2, r3
 8009752:	d303      	bcc.n	800975c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68d9      	ldr	r1, [r3, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009764:	461a      	mov	r2, r3
 8009766:	6838      	ldr	r0, [r7, #0]
 8009768:	f017 fd46 	bl	80211f8 <memcpy>
	}
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800977c:	f001 f966 	bl	800aa4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009788:	e011      	b.n	80097ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	2b00      	cmp	r3, #0
 8009790:	d012      	beq.n	80097b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3324      	adds	r3, #36	; 0x24
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fc64 	bl	800a064 <xTaskRemoveFromEventList>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097a2:	f000 fd3f 	bl	800a224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dce9      	bgt.n	800978a <prvUnlockQueue+0x16>
 80097b6:	e000      	b.n	80097ba <prvUnlockQueue+0x46>
					break;
 80097b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	22ff      	movs	r2, #255	; 0xff
 80097be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80097c2:	f001 f977 	bl	800aab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097c6:	f001 f941 	bl	800aa4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097d2:	e011      	b.n	80097f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d012      	beq.n	8009802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3310      	adds	r3, #16
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fc3f 	bl	800a064 <xTaskRemoveFromEventList>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097ec:	f000 fd1a 	bl	800a224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dce9      	bgt.n	80097d4 <prvUnlockQueue+0x60>
 8009800:	e000      	b.n	8009804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	22ff      	movs	r2, #255	; 0xff
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800980c:	f001 f952 	bl	800aab4 <vPortExitCritical>
}
 8009810:	bf00      	nop
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009820:	f001 f914 	bl	800aa4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e001      	b.n	8009836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009836:	f001 f93d 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 800983a:	68fb      	ldr	r3, [r7, #12]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800984c:	f001 f8fe 	bl	800aa4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009858:	429a      	cmp	r2, r3
 800985a:	d102      	bne.n	8009862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	e001      	b.n	8009866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009866:	f001 f925 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 800986a:	68fb      	ldr	r3, [r7, #12]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08c      	sub	sp, #48	; 0x30
 8009878:	af04      	add	r7, sp, #16
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	4613      	mov	r3, r2
 8009882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009884:	88fb      	ldrh	r3, [r7, #6]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4618      	mov	r0, r3
 800988a:	f001 fa0b 	bl	800aca4 <pvPortMalloc>
 800988e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00e      	beq.n	80098b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009896:	20b8      	movs	r0, #184	; 0xb8
 8009898:	f001 fa04 	bl	800aca4 <pvPortMalloc>
 800989c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	631a      	str	r2, [r3, #48]	; 0x30
 80098aa:	e005      	b.n	80098b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098ac:	6978      	ldr	r0, [r7, #20]
 80098ae:	f001 fac9 	bl	800ae44 <vPortFree>
 80098b2:	e001      	b.n	80098b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d013      	beq.n	80098e6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098be:	88fa      	ldrh	r2, [r7, #6]
 80098c0:	2300      	movs	r3, #0
 80098c2:	9303      	str	r3, [sp, #12]
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	9302      	str	r3, [sp, #8]
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	9301      	str	r3, [sp, #4]
 80098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	68b9      	ldr	r1, [r7, #8]
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 f80f 	bl	80098f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098da:	69f8      	ldr	r0, [r7, #28]
 80098dc:	f000 f8b8 	bl	8009a50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098e0:	2301      	movs	r3, #1
 80098e2:	61bb      	str	r3, [r7, #24]
 80098e4:	e002      	b.n	80098ec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098e6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098ec:	69bb      	ldr	r3, [r7, #24]
	}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3720      	adds	r7, #32
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	461a      	mov	r2, r3
 8009910:	21a5      	movs	r1, #165	; 0xa5
 8009912:	f017 fc7f 	bl	8021214 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009920:	440b      	add	r3, r1
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f023 0307 	bic.w	r3, r3, #7
 800992e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00c      	beq.n	8009954 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	b672      	cpsid	i
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	b662      	cpsie	i
 800994e:	617b      	str	r3, [r7, #20]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01f      	beq.n	800999a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e012      	b.n	8009986 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	7819      	ldrb	r1, [r3, #0]
 8009968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	3334      	adds	r3, #52	; 0x34
 8009970:	460a      	mov	r2, r1
 8009972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	2b0f      	cmp	r3, #15
 800998a:	d9e9      	bls.n	8009960 <prvInitialiseNewTask+0x68>
 800998c:	e000      	b.n	8009990 <prvInitialiseNewTask+0x98>
			{
				break;
 800998e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009998:	e003      	b.n	80099a2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	2b06      	cmp	r3, #6
 80099a6:	d901      	bls.n	80099ac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099a8:	2306      	movs	r3, #6
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	2200      	movs	r2, #0
 80099bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff f966 	bl	8008c94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	3318      	adds	r3, #24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff f961 	bl	8008c94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	f1c3 0207 	rsb	r2, r3, #7
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	2200      	movs	r2, #0
 80099ec:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	3350      	adds	r3, #80	; 0x50
 8009a02:	2260      	movs	r2, #96	; 0x60
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f017 fc04 	bl	8021214 <memset>
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	4a0d      	ldr	r2, [pc, #52]	; (8009a44 <prvInitialiseNewTask+0x14c>)
 8009a10:	655a      	str	r2, [r3, #84]	; 0x54
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	4a0c      	ldr	r2, [pc, #48]	; (8009a48 <prvInitialiseNewTask+0x150>)
 8009a16:	659a      	str	r2, [r3, #88]	; 0x58
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	4a0c      	ldr	r2, [pc, #48]	; (8009a4c <prvInitialiseNewTask+0x154>)
 8009a1c:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	68f9      	ldr	r1, [r7, #12]
 8009a22:	69b8      	ldr	r0, [r7, #24]
 8009a24:	f000 ff08 	bl	800a838 <pxPortInitialiseStack>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a3a:	bf00      	nop
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	080245ac 	.word	0x080245ac
 8009a48:	080245cc 	.word	0x080245cc
 8009a4c:	0802458c 	.word	0x0802458c

08009a50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a58:	f000 fff8 	bl	800aa4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a5c:	4b2a      	ldr	r3, [pc, #168]	; (8009b08 <prvAddNewTaskToReadyList+0xb8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3301      	adds	r3, #1
 8009a62:	4a29      	ldr	r2, [pc, #164]	; (8009b08 <prvAddNewTaskToReadyList+0xb8>)
 8009a64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a66:	4b29      	ldr	r3, [pc, #164]	; (8009b0c <prvAddNewTaskToReadyList+0xbc>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d109      	bne.n	8009a82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a6e:	4a27      	ldr	r2, [pc, #156]	; (8009b0c <prvAddNewTaskToReadyList+0xbc>)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a74:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <prvAddNewTaskToReadyList+0xb8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d110      	bne.n	8009a9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a7c:	f000 fbf8 	bl	800a270 <prvInitialiseTaskLists>
 8009a80:	e00d      	b.n	8009a9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <prvAddNewTaskToReadyList+0xc0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d109      	bne.n	8009a9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a8a:	4b20      	ldr	r3, [pc, #128]	; (8009b0c <prvAddNewTaskToReadyList+0xbc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d802      	bhi.n	8009a9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a98:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <prvAddNewTaskToReadyList+0xbc>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <prvAddNewTaskToReadyList+0xc4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	4a1b      	ldr	r2, [pc, #108]	; (8009b14 <prvAddNewTaskToReadyList+0xc4>)
 8009aa6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	2201      	movs	r2, #1
 8009aae:	409a      	lsls	r2, r3
 8009ab0:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <prvAddNewTaskToReadyList+0xc8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	4a18      	ldr	r2, [pc, #96]	; (8009b18 <prvAddNewTaskToReadyList+0xc8>)
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4a15      	ldr	r2, [pc, #84]	; (8009b1c <prvAddNewTaskToReadyList+0xcc>)
 8009ac8:	441a      	add	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f7ff f8ec 	bl	8008cae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ad6:	f000 ffed 	bl	800aab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ada:	4b0d      	ldr	r3, [pc, #52]	; (8009b10 <prvAddNewTaskToReadyList+0xc0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00e      	beq.n	8009b00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <prvAddNewTaskToReadyList+0xbc>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d207      	bcs.n	8009b00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009af0:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <prvAddNewTaskToReadyList+0xd0>)
 8009af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20000654 	.word	0x20000654
 8009b0c:	20000554 	.word	0x20000554
 8009b10:	20000660 	.word	0x20000660
 8009b14:	20000670 	.word	0x20000670
 8009b18:	2000065c 	.word	0x2000065c
 8009b1c:	20000558 	.word	0x20000558
 8009b20:	e000ed04 	.word	0xe000ed04

08009b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d019      	beq.n	8009b6a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b36:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <vTaskDelay+0x64>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00c      	beq.n	8009b58 <vTaskDelay+0x34>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	b672      	cpsid	i
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	b662      	cpsie	i
 8009b52:	60bb      	str	r3, [r7, #8]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009b58:	f000 f86e 	bl	8009c38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fe04 	bl	800a76c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b64:	f000 f876 	bl	8009c54 <xTaskResumeAll>
 8009b68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d107      	bne.n	8009b80 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <vTaskDelay+0x68>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	2000067c 	.word	0x2000067c
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009b96:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <vTaskStartScheduler+0x88>)
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2280      	movs	r2, #128	; 0x80
 8009ba2:	491e      	ldr	r1, [pc, #120]	; (8009c1c <vTaskStartScheduler+0x8c>)
 8009ba4:	481e      	ldr	r0, [pc, #120]	; (8009c20 <vTaskStartScheduler+0x90>)
 8009ba6:	f7ff fe65 	bl	8009874 <xTaskCreate>
 8009baa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d11d      	bne.n	8009bee <vTaskStartScheduler+0x5e>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	b672      	cpsid	i
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	b662      	cpsie	i
 8009bc6:	60bb      	str	r3, [r7, #8]
}
 8009bc8:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bca:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <vTaskStartScheduler+0x94>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3350      	adds	r3, #80	; 0x50
 8009bd0:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <vTaskStartScheduler+0x98>)
 8009bd2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bd4:	4b15      	ldr	r3, [pc, #84]	; (8009c2c <vTaskStartScheduler+0x9c>)
 8009bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bdc:	4b14      	ldr	r3, [pc, #80]	; (8009c30 <vTaskStartScheduler+0xa0>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009be2:	4b14      	ldr	r3, [pc, #80]	; (8009c34 <vTaskStartScheduler+0xa4>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009be8:	f000 feb2 	bl	800a950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bec:	e010      	b.n	8009c10 <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf4:	d10c      	bne.n	8009c10 <vTaskStartScheduler+0x80>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	b672      	cpsid	i
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	b662      	cpsie	i
 8009c0a:	607b      	str	r3, [r7, #4]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <vTaskStartScheduler+0x7e>
}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000678 	.word	0x20000678
 8009c1c:	080221dc 	.word	0x080221dc
 8009c20:	0800a23d 	.word	0x0800a23d
 8009c24:	20000554 	.word	0x20000554
 8009c28:	20000098 	.word	0x20000098
 8009c2c:	20000674 	.word	0x20000674
 8009c30:	20000660 	.word	0x20000660
 8009c34:	20000658 	.word	0x20000658

08009c38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c3c:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <vTaskSuspendAll+0x18>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	4a03      	ldr	r2, [pc, #12]	; (8009c50 <vTaskSuspendAll+0x18>)
 8009c44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c46:	bf00      	nop
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	2000067c 	.word	0x2000067c

08009c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c62:	4b42      	ldr	r3, [pc, #264]	; (8009d6c <xTaskResumeAll+0x118>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10c      	bne.n	8009c84 <xTaskResumeAll+0x30>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	b672      	cpsid	i
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	b662      	cpsie	i
 8009c7e:	603b      	str	r3, [r7, #0]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c84:	f000 fee2 	bl	800aa4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c88:	4b38      	ldr	r3, [pc, #224]	; (8009d6c <xTaskResumeAll+0x118>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	4a37      	ldr	r2, [pc, #220]	; (8009d6c <xTaskResumeAll+0x118>)
 8009c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c92:	4b36      	ldr	r3, [pc, #216]	; (8009d6c <xTaskResumeAll+0x118>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d161      	bne.n	8009d5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c9a:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <xTaskResumeAll+0x11c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d05d      	beq.n	8009d5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ca2:	e02e      	b.n	8009d02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca4:	4b33      	ldr	r3, [pc, #204]	; (8009d74 <xTaskResumeAll+0x120>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3318      	adds	r3, #24
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff f859 	bl	8008d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff f854 	bl	8008d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	409a      	lsls	r2, r3
 8009cc8:	4b2b      	ldr	r3, [pc, #172]	; (8009d78 <xTaskResumeAll+0x124>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	4a2a      	ldr	r2, [pc, #168]	; (8009d78 <xTaskResumeAll+0x124>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4a27      	ldr	r2, [pc, #156]	; (8009d7c <xTaskResumeAll+0x128>)
 8009ce0:	441a      	add	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fe ffe0 	bl	8008cae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf2:	4b23      	ldr	r3, [pc, #140]	; (8009d80 <xTaskResumeAll+0x12c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d302      	bcc.n	8009d02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009cfc:	4b21      	ldr	r3, [pc, #132]	; (8009d84 <xTaskResumeAll+0x130>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d02:	4b1c      	ldr	r3, [pc, #112]	; (8009d74 <xTaskResumeAll+0x120>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1cc      	bne.n	8009ca4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d10:	f000 fb32 	bl	800a378 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d14:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <xTaskResumeAll+0x134>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d010      	beq.n	8009d42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d20:	f000 f836 	bl	8009d90 <xTaskIncrementTick>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009d2a:	4b16      	ldr	r3, [pc, #88]	; (8009d84 <xTaskResumeAll+0x130>)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f1      	bne.n	8009d20 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009d3c:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <xTaskResumeAll+0x134>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <xTaskResumeAll+0x130>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d4e:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <xTaskResumeAll+0x138>)
 8009d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d5e:	f000 fea9 	bl	800aab4 <vPortExitCritical>

	return xAlreadyYielded;
 8009d62:	68bb      	ldr	r3, [r7, #8]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	2000067c 	.word	0x2000067c
 8009d70:	20000654 	.word	0x20000654
 8009d74:	20000614 	.word	0x20000614
 8009d78:	2000065c 	.word	0x2000065c
 8009d7c:	20000558 	.word	0x20000558
 8009d80:	20000554 	.word	0x20000554
 8009d84:	20000668 	.word	0x20000668
 8009d88:	20000664 	.word	0x20000664
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d9a:	4b4f      	ldr	r3, [pc, #316]	; (8009ed8 <xTaskIncrementTick+0x148>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f040 808a 	bne.w	8009eb8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009da4:	4b4d      	ldr	r3, [pc, #308]	; (8009edc <xTaskIncrementTick+0x14c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3301      	adds	r3, #1
 8009daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dac:	4a4b      	ldr	r2, [pc, #300]	; (8009edc <xTaskIncrementTick+0x14c>)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d122      	bne.n	8009dfe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009db8:	4b49      	ldr	r3, [pc, #292]	; (8009ee0 <xTaskIncrementTick+0x150>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00c      	beq.n	8009ddc <xTaskIncrementTick+0x4c>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	b672      	cpsid	i
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	b662      	cpsie	i
 8009dd6:	603b      	str	r3, [r7, #0]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <xTaskIncrementTick+0x4a>
 8009ddc:	4b40      	ldr	r3, [pc, #256]	; (8009ee0 <xTaskIncrementTick+0x150>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	4b40      	ldr	r3, [pc, #256]	; (8009ee4 <xTaskIncrementTick+0x154>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a3e      	ldr	r2, [pc, #248]	; (8009ee0 <xTaskIncrementTick+0x150>)
 8009de8:	6013      	str	r3, [r2, #0]
 8009dea:	4a3e      	ldr	r2, [pc, #248]	; (8009ee4 <xTaskIncrementTick+0x154>)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	4b3d      	ldr	r3, [pc, #244]	; (8009ee8 <xTaskIncrementTick+0x158>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	4a3c      	ldr	r2, [pc, #240]	; (8009ee8 <xTaskIncrementTick+0x158>)
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	f000 fabd 	bl	800a378 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009dfe:	4b3b      	ldr	r3, [pc, #236]	; (8009eec <xTaskIncrementTick+0x15c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d348      	bcc.n	8009e9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e08:	4b35      	ldr	r3, [pc, #212]	; (8009ee0 <xTaskIncrementTick+0x150>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d104      	bne.n	8009e1c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e12:	4b36      	ldr	r3, [pc, #216]	; (8009eec <xTaskIncrementTick+0x15c>)
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295
 8009e18:	601a      	str	r2, [r3, #0]
					break;
 8009e1a:	e03e      	b.n	8009e9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1c:	4b30      	ldr	r3, [pc, #192]	; (8009ee0 <xTaskIncrementTick+0x150>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d203      	bcs.n	8009e3c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e34:	4a2d      	ldr	r2, [pc, #180]	; (8009eec <xTaskIncrementTick+0x15c>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e3a:	e02e      	b.n	8009e9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe ff91 	bl	8008d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d004      	beq.n	8009e58 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	3318      	adds	r3, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe ff88 	bl	8008d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	409a      	lsls	r2, r3
 8009e60:	4b23      	ldr	r3, [pc, #140]	; (8009ef0 <xTaskIncrementTick+0x160>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	4a22      	ldr	r2, [pc, #136]	; (8009ef0 <xTaskIncrementTick+0x160>)
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <xTaskIncrementTick+0x164>)
 8009e78:	441a      	add	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7fe ff14 	bl	8008cae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ef8 <xTaskIncrementTick+0x168>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d3b9      	bcc.n	8009e08 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e98:	e7b6      	b.n	8009e08 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e9a:	4b17      	ldr	r3, [pc, #92]	; (8009ef8 <xTaskIncrementTick+0x168>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea0:	4914      	ldr	r1, [pc, #80]	; (8009ef4 <xTaskIncrementTick+0x164>)
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4413      	add	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	440b      	add	r3, r1
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d907      	bls.n	8009ec2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	617b      	str	r3, [r7, #20]
 8009eb6:	e004      	b.n	8009ec2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009eb8:	4b10      	ldr	r3, [pc, #64]	; (8009efc <xTaskIncrementTick+0x16c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	4a0f      	ldr	r2, [pc, #60]	; (8009efc <xTaskIncrementTick+0x16c>)
 8009ec0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <xTaskIncrementTick+0x170>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ece:	697b      	ldr	r3, [r7, #20]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	2000067c 	.word	0x2000067c
 8009edc:	20000658 	.word	0x20000658
 8009ee0:	2000060c 	.word	0x2000060c
 8009ee4:	20000610 	.word	0x20000610
 8009ee8:	2000066c 	.word	0x2000066c
 8009eec:	20000674 	.word	0x20000674
 8009ef0:	2000065c 	.word	0x2000065c
 8009ef4:	20000558 	.word	0x20000558
 8009ef8:	20000554 	.word	0x20000554
 8009efc:	20000664 	.word	0x20000664
 8009f00:	20000668 	.word	0x20000668

08009f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f0a:	4b3d      	ldr	r3, [pc, #244]	; (800a000 <vTaskSwitchContext+0xfc>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f12:	4b3c      	ldr	r3, [pc, #240]	; (800a004 <vTaskSwitchContext+0x100>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f18:	e06d      	b.n	8009ff6 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8009f1a:	4b3a      	ldr	r3, [pc, #232]	; (800a004 <vTaskSwitchContext+0x100>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009f20:	4b39      	ldr	r3, [pc, #228]	; (800a008 <vTaskSwitchContext+0x104>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	61fb      	str	r3, [r7, #28]
 8009f28:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009f2c:	61bb      	str	r3, [r7, #24]
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d111      	bne.n	8009f5c <vTaskSwitchContext+0x58>
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d10b      	bne.n	8009f5c <vTaskSwitchContext+0x58>
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	3308      	adds	r3, #8
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69ba      	ldr	r2, [r7, #24]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d105      	bne.n	8009f5c <vTaskSwitchContext+0x58>
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	330c      	adds	r3, #12
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d008      	beq.n	8009f6e <vTaskSwitchContext+0x6a>
 8009f5c:	4b2a      	ldr	r3, [pc, #168]	; (800a008 <vTaskSwitchContext+0x104>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	4b29      	ldr	r3, [pc, #164]	; (800a008 <vTaskSwitchContext+0x104>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3334      	adds	r3, #52	; 0x34
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7f6 fd62 	bl	8000a32 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f6e:	4b27      	ldr	r3, [pc, #156]	; (800a00c <vTaskSwitchContext+0x108>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	fab3 f383 	clz	r3, r3
 8009f7a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f7c:	7afb      	ldrb	r3, [r7, #11]
 8009f7e:	f1c3 031f 	rsb	r3, r3, #31
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	4922      	ldr	r1, [pc, #136]	; (800a010 <vTaskSwitchContext+0x10c>)
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10c      	bne.n	8009fb2 <vTaskSwitchContext+0xae>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	b672      	cpsid	i
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	b662      	cpsie	i
 8009fac:	607b      	str	r3, [r7, #4]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <vTaskSwitchContext+0xac>
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a14      	ldr	r2, [pc, #80]	; (800a010 <vTaskSwitchContext+0x10c>)
 8009fbe:	4413      	add	r3, r2
 8009fc0:	613b      	str	r3, [r7, #16]
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	605a      	str	r2, [r3, #4]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d104      	bne.n	8009fe2 <vTaskSwitchContext+0xde>
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	4a07      	ldr	r2, [pc, #28]	; (800a008 <vTaskSwitchContext+0x104>)
 8009fea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fec:	4b06      	ldr	r3, [pc, #24]	; (800a008 <vTaskSwitchContext+0x104>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3350      	adds	r3, #80	; 0x50
 8009ff2:	4a08      	ldr	r2, [pc, #32]	; (800a014 <vTaskSwitchContext+0x110>)
 8009ff4:	6013      	str	r3, [r2, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3720      	adds	r7, #32
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	2000067c 	.word	0x2000067c
 800a004:	20000668 	.word	0x20000668
 800a008:	20000554 	.word	0x20000554
 800a00c:	2000065c 	.word	0x2000065c
 800a010:	20000558 	.word	0x20000558
 800a014:	20000098 	.word	0x20000098

0800a018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10c      	bne.n	800a042 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	b672      	cpsid	i
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	b662      	cpsie	i
 800a03c:	60fb      	str	r3, [r7, #12]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a042:	4b07      	ldr	r3, [pc, #28]	; (800a060 <vTaskPlaceOnEventList+0x48>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3318      	adds	r3, #24
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7fe fe53 	bl	8008cf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a050:	2101      	movs	r1, #1
 800a052:	6838      	ldr	r0, [r7, #0]
 800a054:	f000 fb8a 	bl	800a76c <prvAddCurrentTaskToDelayedList>
}
 800a058:	bf00      	nop
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20000554 	.word	0x20000554

0800a064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10c      	bne.n	800a094 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	b672      	cpsid	i
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	b662      	cpsie	i
 800a08e:	60fb      	str	r3, [r7, #12]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	3318      	adds	r3, #24
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fe65 	bl	8008d68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a09e:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <xTaskRemoveFromEventList+0xb0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d11c      	bne.n	800a0e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fe5c 	bl	8008d68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	409a      	lsls	r2, r3
 800a0b8:	4b17      	ldr	r3, [pc, #92]	; (800a118 <xTaskRemoveFromEventList+0xb4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	4a16      	ldr	r2, [pc, #88]	; (800a118 <xTaskRemoveFromEventList+0xb4>)
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <xTaskRemoveFromEventList+0xb8>)
 800a0d0:	441a      	add	r2, r3
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f7fe fde8 	bl	8008cae <vListInsertEnd>
 800a0de:	e005      	b.n	800a0ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	3318      	adds	r3, #24
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	480e      	ldr	r0, [pc, #56]	; (800a120 <xTaskRemoveFromEventList+0xbc>)
 800a0e8:	f7fe fde1 	bl	8008cae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <xTaskRemoveFromEventList+0xc0>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d905      	bls.n	800a106 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <xTaskRemoveFromEventList+0xc4>)
 800a100:	2201      	movs	r2, #1
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e001      	b.n	800a10a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a10a:	697b      	ldr	r3, [r7, #20]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	2000067c 	.word	0x2000067c
 800a118:	2000065c 	.word	0x2000065c
 800a11c:	20000558 	.word	0x20000558
 800a120:	20000614 	.word	0x20000614
 800a124:	20000554 	.word	0x20000554
 800a128:	20000668 	.word	0x20000668

0800a12c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <vTaskInternalSetTimeOutState+0x24>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <vTaskInternalSetTimeOutState+0x28>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	605a      	str	r2, [r3, #4]
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	2000066c 	.word	0x2000066c
 800a154:	20000658 	.word	0x20000658

0800a158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10c      	bne.n	800a182 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16c:	b672      	cpsid	i
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	b662      	cpsie	i
 800a17c:	613b      	str	r3, [r7, #16]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10c      	bne.n	800a1a2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	b672      	cpsid	i
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	b662      	cpsie	i
 800a19c:	60fb      	str	r3, [r7, #12]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a1a2:	f000 fc53 	bl	800aa4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <xTaskCheckForTimeOut+0xc4>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1be:	d102      	bne.n	800a1c6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61fb      	str	r3, [r7, #28]
 800a1c4:	e023      	b.n	800a20e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4b15      	ldr	r3, [pc, #84]	; (800a220 <xTaskCheckForTimeOut+0xc8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d007      	beq.n	800a1e2 <xTaskCheckForTimeOut+0x8a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d302      	bcc.n	800a1e2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	61fb      	str	r3, [r7, #28]
 800a1e0:	e015      	b.n	800a20e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d20b      	bcs.n	800a204 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	1ad2      	subs	r2, r2, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff ff97 	bl	800a12c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	e004      	b.n	800a20e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a20e:	f000 fc51 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 800a212:	69fb      	ldr	r3, [r7, #28]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000658 	.word	0x20000658
 800a220:	2000066c 	.word	0x2000066c

0800a224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a228:	4b03      	ldr	r3, [pc, #12]	; (800a238 <vTaskMissedYield+0x14>)
 800a22a:	2201      	movs	r2, #1
 800a22c:	601a      	str	r2, [r3, #0]
}
 800a22e:	bf00      	nop
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	20000668 	.word	0x20000668

0800a23c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a244:	f000 f854 	bl	800a2f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a248:	4b07      	ldr	r3, [pc, #28]	; (800a268 <prvIdleTask+0x2c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d907      	bls.n	800a260 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a250:	4b06      	ldr	r3, [pc, #24]	; (800a26c <prvIdleTask+0x30>)
 800a252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a260:	f7f6 fbe0 	bl	8000a24 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a264:	e7ee      	b.n	800a244 <prvIdleTask+0x8>
 800a266:	bf00      	nop
 800a268:	20000558 	.word	0x20000558
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a276:	2300      	movs	r3, #0
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	e00c      	b.n	800a296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	4613      	mov	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4a12      	ldr	r2, [pc, #72]	; (800a2d0 <prvInitialiseTaskLists+0x60>)
 800a288:	4413      	add	r3, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe fce2 	bl	8008c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3301      	adds	r3, #1
 800a294:	607b      	str	r3, [r7, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b06      	cmp	r3, #6
 800a29a:	d9ef      	bls.n	800a27c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a29c:	480d      	ldr	r0, [pc, #52]	; (800a2d4 <prvInitialiseTaskLists+0x64>)
 800a29e:	f7fe fcd9 	bl	8008c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2a2:	480d      	ldr	r0, [pc, #52]	; (800a2d8 <prvInitialiseTaskLists+0x68>)
 800a2a4:	f7fe fcd6 	bl	8008c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2a8:	480c      	ldr	r0, [pc, #48]	; (800a2dc <prvInitialiseTaskLists+0x6c>)
 800a2aa:	f7fe fcd3 	bl	8008c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ae:	480c      	ldr	r0, [pc, #48]	; (800a2e0 <prvInitialiseTaskLists+0x70>)
 800a2b0:	f7fe fcd0 	bl	8008c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2b4:	480b      	ldr	r0, [pc, #44]	; (800a2e4 <prvInitialiseTaskLists+0x74>)
 800a2b6:	f7fe fccd 	bl	8008c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <prvInitialiseTaskLists+0x78>)
 800a2bc:	4a05      	ldr	r2, [pc, #20]	; (800a2d4 <prvInitialiseTaskLists+0x64>)
 800a2be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <prvInitialiseTaskLists+0x7c>)
 800a2c2:	4a05      	ldr	r2, [pc, #20]	; (800a2d8 <prvInitialiseTaskLists+0x68>)
 800a2c4:	601a      	str	r2, [r3, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000558 	.word	0x20000558
 800a2d4:	200005e4 	.word	0x200005e4
 800a2d8:	200005f8 	.word	0x200005f8
 800a2dc:	20000614 	.word	0x20000614
 800a2e0:	20000628 	.word	0x20000628
 800a2e4:	20000640 	.word	0x20000640
 800a2e8:	2000060c 	.word	0x2000060c
 800a2ec:	20000610 	.word	0x20000610

0800a2f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2f6:	e019      	b.n	800a32c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2f8:	f000 fba8 	bl	800aa4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fc:	4b10      	ldr	r3, [pc, #64]	; (800a340 <prvCheckTasksWaitingTermination+0x50>)
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	3304      	adds	r3, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe fd2d 	bl	8008d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a30e:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <prvCheckTasksWaitingTermination+0x54>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3b01      	subs	r3, #1
 800a314:	4a0b      	ldr	r2, [pc, #44]	; (800a344 <prvCheckTasksWaitingTermination+0x54>)
 800a316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a318:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <prvCheckTasksWaitingTermination+0x58>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	4a0a      	ldr	r2, [pc, #40]	; (800a348 <prvCheckTasksWaitingTermination+0x58>)
 800a320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a322:	f000 fbc7 	bl	800aab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f810 	bl	800a34c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <prvCheckTasksWaitingTermination+0x58>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e1      	bne.n	800a2f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000628 	.word	0x20000628
 800a344:	20000654 	.word	0x20000654
 800a348:	2000063c 	.word	0x2000063c

0800a34c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3350      	adds	r3, #80	; 0x50
 800a358:	4618      	mov	r0, r3
 800a35a:	f017 fb3f 	bl	80219dc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a362:	4618      	mov	r0, r3
 800a364:	f000 fd6e 	bl	800ae44 <vPortFree>
			vPortFree( pxTCB );
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fd6b 	bl	800ae44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a36e:	bf00      	nop
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a37e:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <prvResetNextTaskUnblockTime+0x38>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d104      	bne.n	800a392 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a388:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <prvResetNextTaskUnblockTime+0x3c>)
 800a38a:	f04f 32ff 	mov.w	r2, #4294967295
 800a38e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a390:	e008      	b.n	800a3a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a392:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <prvResetNextTaskUnblockTime+0x38>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	4a04      	ldr	r2, [pc, #16]	; (800a3b4 <prvResetNextTaskUnblockTime+0x3c>)
 800a3a2:	6013      	str	r3, [r2, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	2000060c 	.word	0x2000060c
 800a3b4:	20000674 	.word	0x20000674

0800a3b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3be:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <xTaskGetSchedulerState+0x34>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d102      	bne.n	800a3cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	607b      	str	r3, [r7, #4]
 800a3ca:	e008      	b.n	800a3de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3cc:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <xTaskGetSchedulerState+0x38>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d102      	bne.n	800a3da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	607b      	str	r3, [r7, #4]
 800a3d8:	e001      	b.n	800a3de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3de:	687b      	ldr	r3, [r7, #4]
	}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	20000660 	.word	0x20000660
 800a3f0:	2000067c 	.word	0x2000067c

0800a3f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a400:	2300      	movs	r3, #0
 800a402:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d069      	beq.n	800a4de <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40e:	4b36      	ldr	r3, [pc, #216]	; (800a4e8 <xTaskPriorityInherit+0xf4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	429a      	cmp	r2, r3
 800a416:	d259      	bcs.n	800a4cc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	db06      	blt.n	800a42e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a420:	4b31      	ldr	r3, [pc, #196]	; (800a4e8 <xTaskPriorityInherit+0xf4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	f1c3 0207 	rsb	r2, r3, #7
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	6959      	ldr	r1, [r3, #20]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4a2b      	ldr	r2, [pc, #172]	; (800a4ec <xTaskPriorityInherit+0xf8>)
 800a440:	4413      	add	r3, r2
 800a442:	4299      	cmp	r1, r3
 800a444:	d13a      	bne.n	800a4bc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	3304      	adds	r3, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fc8c 	bl	8008d68 <uxListRemove>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d115      	bne.n	800a482 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45a:	4924      	ldr	r1, [pc, #144]	; (800a4ec <xTaskPriorityInherit+0xf8>)
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	440b      	add	r3, r1
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <xTaskPriorityInherit+0x8e>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	2201      	movs	r2, #1
 800a472:	fa02 f303 	lsl.w	r3, r2, r3
 800a476:	43da      	mvns	r2, r3
 800a478:	4b1d      	ldr	r3, [pc, #116]	; (800a4f0 <xTaskPriorityInherit+0xfc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4013      	ands	r3, r2
 800a47e:	4a1c      	ldr	r2, [pc, #112]	; (800a4f0 <xTaskPriorityInherit+0xfc>)
 800a480:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a482:	4b19      	ldr	r3, [pc, #100]	; (800a4e8 <xTaskPriorityInherit+0xf4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a490:	2201      	movs	r2, #1
 800a492:	409a      	lsls	r2, r3
 800a494:	4b16      	ldr	r3, [pc, #88]	; (800a4f0 <xTaskPriorityInherit+0xfc>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4313      	orrs	r3, r2
 800a49a:	4a15      	ldr	r2, [pc, #84]	; (800a4f0 <xTaskPriorityInherit+0xfc>)
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4a10      	ldr	r2, [pc, #64]	; (800a4ec <xTaskPriorityInherit+0xf8>)
 800a4ac:	441a      	add	r2, r3
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f7fe fbfa 	bl	8008cae <vListInsertEnd>
 800a4ba:	e004      	b.n	800a4c6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <xTaskPriorityInherit+0xf4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	e008      	b.n	800a4de <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4d0:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <xTaskPriorityInherit+0xf4>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d201      	bcs.n	800a4de <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4de:	68fb      	ldr	r3, [r7, #12]
	}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000554 	.word	0x20000554
 800a4ec:	20000558 	.word	0x20000558
 800a4f0:	2000065c 	.word	0x2000065c

0800a4f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a500:	2300      	movs	r3, #0
 800a502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d072      	beq.n	800a5f0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a50a:	4b3c      	ldr	r3, [pc, #240]	; (800a5fc <xTaskPriorityDisinherit+0x108>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	429a      	cmp	r2, r3
 800a512:	d00c      	beq.n	800a52e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	b672      	cpsid	i
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	b662      	cpsie	i
 800a528:	60fb      	str	r3, [r7, #12]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10c      	bne.n	800a550 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	b672      	cpsid	i
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	b662      	cpsie	i
 800a54a:	60bb      	str	r3, [r7, #8]
}
 800a54c:	bf00      	nop
 800a54e:	e7fe      	b.n	800a54e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a554:	1e5a      	subs	r2, r3, #1
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a562:	429a      	cmp	r2, r3
 800a564:	d044      	beq.n	800a5f0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d140      	bne.n	800a5f0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	3304      	adds	r3, #4
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fbf8 	bl	8008d68 <uxListRemove>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d115      	bne.n	800a5aa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a582:	491f      	ldr	r1, [pc, #124]	; (800a600 <xTaskPriorityDisinherit+0x10c>)
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	440b      	add	r3, r1
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <xTaskPriorityDisinherit+0xb6>
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	2201      	movs	r2, #1
 800a59a:	fa02 f303 	lsl.w	r3, r2, r3
 800a59e:	43da      	mvns	r2, r3
 800a5a0:	4b18      	ldr	r3, [pc, #96]	; (800a604 <xTaskPriorityDisinherit+0x110>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	4a17      	ldr	r2, [pc, #92]	; (800a604 <xTaskPriorityDisinherit+0x110>)
 800a5a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	f1c3 0207 	rsb	r2, r3, #7
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	409a      	lsls	r2, r3
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <xTaskPriorityDisinherit+0x110>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	4a0d      	ldr	r2, [pc, #52]	; (800a604 <xTaskPriorityDisinherit+0x110>)
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4a08      	ldr	r2, [pc, #32]	; (800a600 <xTaskPriorityDisinherit+0x10c>)
 800a5de:	441a      	add	r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fe fb61 	bl	8008cae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5f0:	697b      	ldr	r3, [r7, #20]
	}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000554 	.word	0x20000554
 800a600:	20000558 	.word	0x20000558
 800a604:	2000065c 	.word	0x2000065c

0800a608 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a616:	2301      	movs	r3, #1
 800a618:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8087 	beq.w	800a730 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10c      	bne.n	800a644 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	b672      	cpsid	i
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	b662      	cpsie	i
 800a63e:	60fb      	str	r3, [r7, #12]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d902      	bls.n	800a654 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	e002      	b.n	800a65a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a658:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	429a      	cmp	r2, r3
 800a662:	d065      	beq.n	800a730 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d160      	bne.n	800a730 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a66e:	4b32      	ldr	r3, [pc, #200]	; (800a738 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	429a      	cmp	r2, r3
 800a676:	d10c      	bne.n	800a692 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	b672      	cpsid	i
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	b662      	cpsie	i
 800a68c:	60bb      	str	r3, [r7, #8]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	69fa      	ldr	r2, [r7, #28]
 800a69c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	db04      	blt.n	800a6b0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	f1c3 0207 	rsb	r2, r3, #7
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	6959      	ldr	r1, [r3, #20]
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4a1f      	ldr	r2, [pc, #124]	; (800a73c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a6c0:	4413      	add	r3, r2
 800a6c2:	4299      	cmp	r1, r3
 800a6c4:	d134      	bne.n	800a730 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fb4c 	bl	8008d68 <uxListRemove>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d115      	bne.n	800a702 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6da:	4918      	ldr	r1, [pc, #96]	; (800a73c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10a      	bne.n	800a702 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f6:	43da      	mvns	r2, r3
 800a6f8:	4b11      	ldr	r3, [pc, #68]	; (800a740 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	4a10      	ldr	r2, [pc, #64]	; (800a740 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a700:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	2201      	movs	r2, #1
 800a708:	409a      	lsls	r2, r3
 800a70a:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4313      	orrs	r3, r2
 800a710:	4a0b      	ldr	r2, [pc, #44]	; (800a740 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4a06      	ldr	r2, [pc, #24]	; (800a73c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a722:	441a      	add	r2, r3
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7fe fabf 	bl	8008cae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a730:	bf00      	nop
 800a732:	3720      	adds	r7, #32
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000554 	.word	0x20000554
 800a73c:	20000558 	.word	0x20000558
 800a740:	2000065c 	.word	0x2000065c

0800a744 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a744:	b480      	push	{r7}
 800a746:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a748:	4b07      	ldr	r3, [pc, #28]	; (800a768 <pvTaskIncrementMutexHeldCount+0x24>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d004      	beq.n	800a75a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a750:	4b05      	ldr	r3, [pc, #20]	; (800a768 <pvTaskIncrementMutexHeldCount+0x24>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a756:	3201      	adds	r2, #1
 800a758:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a75a:	4b03      	ldr	r3, [pc, #12]	; (800a768 <pvTaskIncrementMutexHeldCount+0x24>)
 800a75c:	681b      	ldr	r3, [r3, #0]
	}
 800a75e:	4618      	mov	r0, r3
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	20000554 	.word	0x20000554

0800a76c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a776:	4b29      	ldr	r3, [pc, #164]	; (800a81c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a77c:	4b28      	ldr	r3, [pc, #160]	; (800a820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3304      	adds	r3, #4
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe faf0 	bl	8008d68 <uxListRemove>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10b      	bne.n	800a7a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a78e:	4b24      	ldr	r3, [pc, #144]	; (800a820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	2201      	movs	r2, #1
 800a796:	fa02 f303 	lsl.w	r3, r2, r3
 800a79a:	43da      	mvns	r2, r3
 800a79c:	4b21      	ldr	r3, [pc, #132]	; (800a824 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	4a20      	ldr	r2, [pc, #128]	; (800a824 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ac:	d10a      	bne.n	800a7c4 <prvAddCurrentTaskToDelayedList+0x58>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d007      	beq.n	800a7c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7b4:	4b1a      	ldr	r3, [pc, #104]	; (800a820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	481a      	ldr	r0, [pc, #104]	; (800a828 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a7be:	f7fe fa76 	bl	8008cae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7c2:	e026      	b.n	800a812 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7cc:	4b14      	ldr	r3, [pc, #80]	; (800a820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d209      	bcs.n	800a7f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7dc:	4b13      	ldr	r3, [pc, #76]	; (800a82c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f7fe fa84 	bl	8008cf6 <vListInsert>
}
 800a7ee:	e010      	b.n	800a812 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7f0:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	f7fe fa7a 	bl	8008cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a802:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d202      	bcs.n	800a812 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a80c:	4a09      	ldr	r2, [pc, #36]	; (800a834 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	6013      	str	r3, [r2, #0]
}
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20000658 	.word	0x20000658
 800a820:	20000554 	.word	0x20000554
 800a824:	2000065c 	.word	0x2000065c
 800a828:	20000640 	.word	0x20000640
 800a82c:	20000610 	.word	0x20000610
 800a830:	2000060c 	.word	0x2000060c
 800a834:	20000674 	.word	0x20000674

0800a838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3b04      	subs	r3, #4
 800a848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3b04      	subs	r3, #4
 800a856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f023 0201 	bic.w	r2, r3, #1
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3b04      	subs	r3, #4
 800a866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a868:	4a0c      	ldr	r2, [pc, #48]	; (800a89c <pxPortInitialiseStack+0x64>)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3b14      	subs	r3, #20
 800a872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3b04      	subs	r3, #4
 800a87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f06f 0202 	mvn.w	r2, #2
 800a886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3b20      	subs	r3, #32
 800a88c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a88e:	68fb      	ldr	r3, [r7, #12]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	0800a8a1 	.word	0x0800a8a1

0800a8a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8aa:	4b14      	ldr	r3, [pc, #80]	; (800a8fc <prvTaskExitError+0x5c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b2:	d00c      	beq.n	800a8ce <prvTaskExitError+0x2e>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	b672      	cpsid	i
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	b662      	cpsie	i
 800a8c8:	60fb      	str	r3, [r7, #12]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <prvTaskExitError+0x2c>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	b672      	cpsid	i
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	b662      	cpsie	i
 800a8e2:	60bb      	str	r3, [r7, #8]
}
 800a8e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8e6:	bf00      	nop
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0fc      	beq.n	800a8e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8ee:	bf00      	nop
 800a8f0:	bf00      	nop
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	20000038 	.word	0x20000038

0800a900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <pxCurrentTCBConst2>)
 800a902:	6819      	ldr	r1, [r3, #0]
 800a904:	6808      	ldr	r0, [r1, #0]
 800a906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	f380 8809 	msr	PSP, r0
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f04f 0000 	mov.w	r0, #0
 800a916:	f380 8811 	msr	BASEPRI, r0
 800a91a:	4770      	bx	lr
 800a91c:	f3af 8000 	nop.w

0800a920 <pxCurrentTCBConst2>:
 800a920:	20000554 	.word	0x20000554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a928:	4808      	ldr	r0, [pc, #32]	; (800a94c <prvPortStartFirstTask+0x24>)
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	6800      	ldr	r0, [r0, #0]
 800a92e:	f380 8808 	msr	MSP, r0
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8814 	msr	CONTROL, r0
 800a93a:	b662      	cpsie	i
 800a93c:	b661      	cpsie	f
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	df00      	svc	0
 800a948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a94a:	bf00      	nop
 800a94c:	e000ed08 	.word	0xe000ed08

0800a950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a956:	4b37      	ldr	r3, [pc, #220]	; (800aa34 <xPortStartScheduler+0xe4>)
 800a958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	22ff      	movs	r2, #255	; 0xff
 800a966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	4b2f      	ldr	r3, [pc, #188]	; (800aa38 <xPortStartScheduler+0xe8>)
 800a97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a97e:	4b2f      	ldr	r3, [pc, #188]	; (800aa3c <xPortStartScheduler+0xec>)
 800a980:	2207      	movs	r2, #7
 800a982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a984:	e009      	b.n	800a99a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a986:	4b2d      	ldr	r3, [pc, #180]	; (800aa3c <xPortStartScheduler+0xec>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	4a2b      	ldr	r2, [pc, #172]	; (800aa3c <xPortStartScheduler+0xec>)
 800a98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b80      	cmp	r3, #128	; 0x80
 800a9a4:	d0ef      	beq.n	800a986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9a6:	4b25      	ldr	r3, [pc, #148]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f1c3 0307 	rsb	r3, r3, #7
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d00c      	beq.n	800a9cc <xPortStartScheduler+0x7c>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	b672      	cpsid	i
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	b662      	cpsie	i
 800a9c6:	60bb      	str	r3, [r7, #8]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9cc:	4b1b      	ldr	r3, [pc, #108]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	4a1a      	ldr	r2, [pc, #104]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9d6:	4b19      	ldr	r3, [pc, #100]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9de:	4a17      	ldr	r2, [pc, #92]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9ea:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9f6:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a11      	ldr	r2, [pc, #68]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa02:	f000 f8dd 	bl	800abc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa06:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <xPortStartScheduler+0xf4>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa0c:	f000 f8fc 	bl	800ac08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa10:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <xPortStartScheduler+0xf8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a0c      	ldr	r2, [pc, #48]	; (800aa48 <xPortStartScheduler+0xf8>)
 800aa16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa1c:	f7ff ff84 	bl	800a928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa20:	f7ff fa70 	bl	8009f04 <vTaskSwitchContext>
	prvTaskExitError();
 800aa24:	f7ff ff3c 	bl	800a8a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	e000e400 	.word	0xe000e400
 800aa38:	20000680 	.word	0x20000680
 800aa3c:	20000684 	.word	0x20000684
 800aa40:	e000ed20 	.word	0xe000ed20
 800aa44:	20000038 	.word	0x20000038
 800aa48:	e000ef34 	.word	0xe000ef34

0800aa4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	b672      	cpsid	i
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	b662      	cpsie	i
 800aa66:	607b      	str	r3, [r7, #4]
}
 800aa68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa6a:	4b10      	ldr	r3, [pc, #64]	; (800aaac <vPortEnterCritical+0x60>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	4a0e      	ldr	r2, [pc, #56]	; (800aaac <vPortEnterCritical+0x60>)
 800aa72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa74:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <vPortEnterCritical+0x60>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d111      	bne.n	800aaa0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa7c:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <vPortEnterCritical+0x64>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00c      	beq.n	800aaa0 <vPortEnterCritical+0x54>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	b672      	cpsid	i
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	b662      	cpsie	i
 800aa9a:	603b      	str	r3, [r7, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <vPortEnterCritical+0x52>
	}
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	20000038 	.word	0x20000038
 800aab0:	e000ed04 	.word	0xe000ed04

0800aab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <vPortExitCritical+0x54>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10c      	bne.n	800aadc <vPortExitCritical+0x28>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	b672      	cpsid	i
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	b662      	cpsie	i
 800aad6:	607b      	str	r3, [r7, #4]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <vPortExitCritical+0x54>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	4a09      	ldr	r2, [pc, #36]	; (800ab08 <vPortExitCritical+0x54>)
 800aae4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aae6:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <vPortExitCritical+0x54>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <vPortExitCritical+0x46>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	f383 8811 	msr	BASEPRI, r3
}
 800aaf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	20000038 	.word	0x20000038
 800ab0c:	00000000 	.word	0x00000000

0800ab10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab10:	f3ef 8009 	mrs	r0, PSP
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <pxCurrentTCBConst>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f01e 0f10 	tst.w	lr, #16
 800ab20:	bf08      	it	eq
 800ab22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab34:	b672      	cpsid	i
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	b662      	cpsie	i
 800ab44:	f7ff f9de 	bl	8009f04 <vTaskSwitchContext>
 800ab48:	f04f 0000 	mov.w	r0, #0
 800ab4c:	f380 8811 	msr	BASEPRI, r0
 800ab50:	bc09      	pop	{r0, r3}
 800ab52:	6819      	ldr	r1, [r3, #0]
 800ab54:	6808      	ldr	r0, [r1, #0]
 800ab56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5a:	f01e 0f10 	tst.w	lr, #16
 800ab5e:	bf08      	it	eq
 800ab60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab64:	f380 8809 	msr	PSP, r0
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop

0800ab70 <pxCurrentTCBConst>:
 800ab70:	20000554 	.word	0x20000554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop

0800ab78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	b672      	cpsid	i
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	b662      	cpsie	i
 800ab92:	607b      	str	r3, [r7, #4]
}
 800ab94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab96:	f7ff f8fb 	bl	8009d90 <xTaskIncrementTick>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <SysTick_Handler+0x44>)
 800aba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	2300      	movs	r3, #0
 800abaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f383 8811 	msr	BASEPRI, r3
}
 800abb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abc0:	b480      	push	{r7}
 800abc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abc4:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <vPortSetupTimerInterrupt+0x34>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abca:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <vPortSetupTimerInterrupt+0x38>)
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abd0:	4b0a      	ldr	r3, [pc, #40]	; (800abfc <vPortSetupTimerInterrupt+0x3c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a0a      	ldr	r2, [pc, #40]	; (800ac00 <vPortSetupTimerInterrupt+0x40>)
 800abd6:	fba2 2303 	umull	r2, r3, r2, r3
 800abda:	099b      	lsrs	r3, r3, #6
 800abdc:	4a09      	ldr	r2, [pc, #36]	; (800ac04 <vPortSetupTimerInterrupt+0x44>)
 800abde:	3b01      	subs	r3, #1
 800abe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abe2:	4b04      	ldr	r3, [pc, #16]	; (800abf4 <vPortSetupTimerInterrupt+0x34>)
 800abe4:	2207      	movs	r2, #7
 800abe6:	601a      	str	r2, [r3, #0]
}
 800abe8:	bf00      	nop
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	e000e010 	.word	0xe000e010
 800abf8:	e000e018 	.word	0xe000e018
 800abfc:	2000002c 	.word	0x2000002c
 800ac00:	10624dd3 	.word	0x10624dd3
 800ac04:	e000e014 	.word	0xe000e014

0800ac08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac18 <vPortEnableVFP+0x10>
 800ac0c:	6801      	ldr	r1, [r0, #0]
 800ac0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac12:	6001      	str	r1, [r0, #0]
 800ac14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac16:	bf00      	nop
 800ac18:	e000ed88 	.word	0xe000ed88

0800ac1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac22:	f3ef 8305 	mrs	r3, IPSR
 800ac26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b0f      	cmp	r3, #15
 800ac2c:	d916      	bls.n	800ac5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac2e:	4a19      	ldr	r2, [pc, #100]	; (800ac94 <vPortValidateInterruptPriority+0x78>)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4413      	add	r3, r2
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac38:	4b17      	ldr	r3, [pc, #92]	; (800ac98 <vPortValidateInterruptPriority+0x7c>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	7afa      	ldrb	r2, [r7, #11]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d20c      	bcs.n	800ac5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	b672      	cpsid	i
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	b662      	cpsie	i
 800ac56:	607b      	str	r3, [r7, #4]
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac5c:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <vPortValidateInterruptPriority+0x80>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac64:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <vPortValidateInterruptPriority+0x84>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d90c      	bls.n	800ac86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	b672      	cpsid	i
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	b662      	cpsie	i
 800ac80:	603b      	str	r3, [r7, #0]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <vPortValidateInterruptPriority+0x68>
	}
 800ac86:	bf00      	nop
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	e000e3f0 	.word	0xe000e3f0
 800ac98:	20000680 	.word	0x20000680
 800ac9c:	e000ed0c 	.word	0xe000ed0c
 800aca0:	20000684 	.word	0x20000684

0800aca4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08a      	sub	sp, #40	; 0x28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acb0:	f7fe ffc2 	bl	8009c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acb4:	4b5e      	ldr	r3, [pc, #376]	; (800ae30 <pvPortMalloc+0x18c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d101      	bne.n	800acc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acbc:	f000 f920 	bl	800af00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acc0:	4b5c      	ldr	r3, [pc, #368]	; (800ae34 <pvPortMalloc+0x190>)
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4013      	ands	r3, r2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f040 8092 	bne.w	800adf2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01f      	beq.n	800ad14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800acd4:	2208      	movs	r2, #8
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4413      	add	r3, r2
 800acda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d016      	beq.n	800ad14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f023 0307 	bic.w	r3, r3, #7
 800acec:	3308      	adds	r3, #8
 800acee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00c      	beq.n	800ad14 <pvPortMalloc+0x70>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	b672      	cpsid	i
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	b662      	cpsie	i
 800ad0e:	617b      	str	r3, [r7, #20]
}
 800ad10:	bf00      	nop
 800ad12:	e7fe      	b.n	800ad12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d06b      	beq.n	800adf2 <pvPortMalloc+0x14e>
 800ad1a:	4b47      	ldr	r3, [pc, #284]	; (800ae38 <pvPortMalloc+0x194>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d866      	bhi.n	800adf2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad24:	4b45      	ldr	r3, [pc, #276]	; (800ae3c <pvPortMalloc+0x198>)
 800ad26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad28:	4b44      	ldr	r3, [pc, #272]	; (800ae3c <pvPortMalloc+0x198>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad2e:	e004      	b.n	800ad3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d903      	bls.n	800ad4c <pvPortMalloc+0xa8>
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1f1      	bne.n	800ad30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad4c:	4b38      	ldr	r3, [pc, #224]	; (800ae30 <pvPortMalloc+0x18c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d04d      	beq.n	800adf2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2208      	movs	r2, #8
 800ad5c:	4413      	add	r3, r2
 800ad5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	2308      	movs	r3, #8
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d921      	bls.n	800adbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00c      	beq.n	800ada4 <pvPortMalloc+0x100>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	b672      	cpsid	i
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	b662      	cpsie	i
 800ad9e:	613b      	str	r3, [r7, #16]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	1ad2      	subs	r2, r2, r3
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adb6:	69b8      	ldr	r0, [r7, #24]
 800adb8:	f000 f904 	bl	800afc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adbc:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <pvPortMalloc+0x194>)
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	4a1c      	ldr	r2, [pc, #112]	; (800ae38 <pvPortMalloc+0x194>)
 800adc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adca:	4b1b      	ldr	r3, [pc, #108]	; (800ae38 <pvPortMalloc+0x194>)
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	4b1c      	ldr	r3, [pc, #112]	; (800ae40 <pvPortMalloc+0x19c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d203      	bcs.n	800adde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800add6:	4b18      	ldr	r3, [pc, #96]	; (800ae38 <pvPortMalloc+0x194>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a19      	ldr	r2, [pc, #100]	; (800ae40 <pvPortMalloc+0x19c>)
 800addc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	4b14      	ldr	r3, [pc, #80]	; (800ae34 <pvPortMalloc+0x190>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	431a      	orrs	r2, r3
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	2200      	movs	r2, #0
 800adf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800adf2:	f7fe ff2f 	bl	8009c54 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800adfc:	f7f5 fe24 	bl	8000a48 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00c      	beq.n	800ae24 <pvPortMalloc+0x180>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	b672      	cpsid	i
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	b662      	cpsie	i
 800ae1e:	60fb      	str	r3, [r7, #12]
}
 800ae20:	bf00      	nop
 800ae22:	e7fe      	b.n	800ae22 <pvPortMalloc+0x17e>
	return pvReturn;
 800ae24:	69fb      	ldr	r3, [r7, #28]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3728      	adds	r7, #40	; 0x28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20010690 	.word	0x20010690
 800ae34:	2001069c 	.word	0x2001069c
 800ae38:	20010694 	.word	0x20010694
 800ae3c:	20010688 	.word	0x20010688
 800ae40:	20010698 	.word	0x20010698

0800ae44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d04c      	beq.n	800aef0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae56:	2308      	movs	r3, #8
 800ae58:	425b      	negs	r3, r3
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	4b23      	ldr	r3, [pc, #140]	; (800aef8 <vPortFree+0xb4>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10c      	bne.n	800ae8c <vPortFree+0x48>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	b672      	cpsid	i
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	b662      	cpsie	i
 800ae86:	60fb      	str	r3, [r7, #12]
}
 800ae88:	bf00      	nop
 800ae8a:	e7fe      	b.n	800ae8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00c      	beq.n	800aeae <vPortFree+0x6a>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	b672      	cpsid	i
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	b662      	cpsie	i
 800aea8:	60bb      	str	r3, [r7, #8]
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <vPortFree+0xb4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d019      	beq.n	800aef0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d115      	bne.n	800aef0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <vPortFree+0xb4>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	43db      	mvns	r3, r3
 800aece:	401a      	ands	r2, r3
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aed4:	f7fe feb0 	bl	8009c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	4b07      	ldr	r3, [pc, #28]	; (800aefc <vPortFree+0xb8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4413      	add	r3, r2
 800aee2:	4a06      	ldr	r2, [pc, #24]	; (800aefc <vPortFree+0xb8>)
 800aee4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aee6:	6938      	ldr	r0, [r7, #16]
 800aee8:	f000 f86c 	bl	800afc4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aeec:	f7fe feb2 	bl	8009c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aef0:	bf00      	nop
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	2001069c 	.word	0x2001069c
 800aefc:	20010694 	.word	0x20010694

0800af00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af0c:	4b27      	ldr	r3, [pc, #156]	; (800afac <prvHeapInit+0xac>)
 800af0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f003 0307 	and.w	r3, r3, #7
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00c      	beq.n	800af34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3307      	adds	r3, #7
 800af1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 0307 	bic.w	r3, r3, #7
 800af26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	4a1f      	ldr	r2, [pc, #124]	; (800afac <prvHeapInit+0xac>)
 800af30:	4413      	add	r3, r2
 800af32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af38:	4a1d      	ldr	r2, [pc, #116]	; (800afb0 <prvHeapInit+0xb0>)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af3e:	4b1c      	ldr	r3, [pc, #112]	; (800afb0 <prvHeapInit+0xb0>)
 800af40:	2200      	movs	r2, #0
 800af42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	4413      	add	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af4c:	2208      	movs	r2, #8
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	1a9b      	subs	r3, r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4a15      	ldr	r2, [pc, #84]	; (800afb4 <prvHeapInit+0xb4>)
 800af60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af62:	4b14      	ldr	r3, [pc, #80]	; (800afb4 <prvHeapInit+0xb4>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2200      	movs	r2, #0
 800af68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <prvHeapInit+0xb4>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <prvHeapInit+0xb4>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	4a0a      	ldr	r2, [pc, #40]	; (800afb8 <prvHeapInit+0xb8>)
 800af8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4a09      	ldr	r2, [pc, #36]	; (800afbc <prvHeapInit+0xbc>)
 800af96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af98:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <prvHeapInit+0xc0>)
 800af9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af9e:	601a      	str	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	20000688 	.word	0x20000688
 800afb0:	20010688 	.word	0x20010688
 800afb4:	20010690 	.word	0x20010690
 800afb8:	20010698 	.word	0x20010698
 800afbc:	20010694 	.word	0x20010694
 800afc0:	2001069c 	.word	0x2001069c

0800afc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afcc:	4b28      	ldr	r3, [pc, #160]	; (800b070 <prvInsertBlockIntoFreeList+0xac>)
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	e002      	b.n	800afd8 <prvInsertBlockIntoFreeList+0x14>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d8f7      	bhi.n	800afd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	4413      	add	r3, r2
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d108      	bne.n	800b006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	441a      	add	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	441a      	add	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d118      	bne.n	800b04c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	4b15      	ldr	r3, [pc, #84]	; (800b074 <prvInsertBlockIntoFreeList+0xb0>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d00d      	beq.n	800b042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	441a      	add	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	e008      	b.n	800b054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b042:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <prvInsertBlockIntoFreeList+0xb0>)
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	e003      	b.n	800b054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d002      	beq.n	800b062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b062:	bf00      	nop
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	20010688 	.word	0x20010688
 800b074:	20010690 	.word	0x20010690

0800b078 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b08c      	sub	sp, #48	; 0x30
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a51      	ldr	r2, [pc, #324]	; (800b1c8 <I2Cx_MspInit+0x150>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d14d      	bne.n	800b124 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b088:	4b50      	ldr	r3, [pc, #320]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08c:	4a4f      	ldr	r2, [pc, #316]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b08e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b092:	6313      	str	r3, [r2, #48]	; 0x30
 800b094:	4b4d      	ldr	r3, [pc, #308]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09c:	61bb      	str	r3, [r7, #24]
 800b09e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800b0a0:	2380      	movs	r3, #128	; 0x80
 800b0a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b0a4:	2312      	movs	r3, #18
 800b0a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800b0b0:	2304      	movs	r3, #4
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b0b4:	f107 031c 	add.w	r3, r7, #28
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4845      	ldr	r0, [pc, #276]	; (800b1d0 <I2Cx_MspInit+0x158>)
 800b0bc:	f7f8 f83c 	bl	8003138 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800b0c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b0c6:	f107 031c 	add.w	r3, r7, #28
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	4840      	ldr	r0, [pc, #256]	; (800b1d0 <I2Cx_MspInit+0x158>)
 800b0ce:	f7f8 f833 	bl	8003138 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800b0d2:	4b3e      	ldr	r3, [pc, #248]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d6:	4a3d      	ldr	r2, [pc, #244]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b0d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b0de:	4b3b      	ldr	r3, [pc, #236]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800b0ea:	4b38      	ldr	r3, [pc, #224]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	4a37      	ldr	r2, [pc, #220]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b0f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0f4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800b0f6:	4b35      	ldr	r3, [pc, #212]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	4a34      	ldr	r2, [pc, #208]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b0fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b100:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800b102:	2200      	movs	r2, #0
 800b104:	210f      	movs	r1, #15
 800b106:	2048      	movs	r0, #72	; 0x48
 800b108:	f7f7 f99a 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800b10c:	2048      	movs	r0, #72	; 0x48
 800b10e:	f7f7 f9b3 	bl	8002478 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800b112:	2200      	movs	r2, #0
 800b114:	210f      	movs	r1, #15
 800b116:	2049      	movs	r0, #73	; 0x49
 800b118:	f7f7 f992 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800b11c:	2049      	movs	r0, #73	; 0x49
 800b11e:	f7f7 f9ab 	bl	8002478 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800b122:	e04d      	b.n	800b1c0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b124:	4b29      	ldr	r3, [pc, #164]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b128:	4a28      	ldr	r2, [pc, #160]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b12a:	f043 0302 	orr.w	r3, r3, #2
 800b12e:	6313      	str	r3, [r2, #48]	; 0x30
 800b130:	4b26      	ldr	r3, [pc, #152]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b134:	f003 0302 	and.w	r3, r3, #2
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800b13c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b140:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b142:	2312      	movs	r3, #18
 800b144:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b146:	2300      	movs	r3, #0
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b14a:	2302      	movs	r3, #2
 800b14c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800b14e:	2304      	movs	r3, #4
 800b150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b152:	f107 031c 	add.w	r3, r7, #28
 800b156:	4619      	mov	r1, r3
 800b158:	481e      	ldr	r0, [pc, #120]	; (800b1d4 <I2Cx_MspInit+0x15c>)
 800b15a:	f7f7 ffed 	bl	8003138 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800b15e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b164:	f107 031c 	add.w	r3, r7, #28
 800b168:	4619      	mov	r1, r3
 800b16a:	481a      	ldr	r0, [pc, #104]	; (800b1d4 <I2Cx_MspInit+0x15c>)
 800b16c:	f7f7 ffe4 	bl	8003138 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800b170:	4b16      	ldr	r3, [pc, #88]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b174:	4a15      	ldr	r2, [pc, #84]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b17a:	6413      	str	r3, [r2, #64]	; 0x40
 800b17c:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800b188:	4b10      	ldr	r3, [pc, #64]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	4a0f      	ldr	r2, [pc, #60]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b18e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b192:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800b194:	4b0d      	ldr	r3, [pc, #52]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	4a0c      	ldr	r2, [pc, #48]	; (800b1cc <I2Cx_MspInit+0x154>)
 800b19a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b19e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	210f      	movs	r1, #15
 800b1a4:	201f      	movs	r0, #31
 800b1a6:	f7f7 f94b 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800b1aa:	201f      	movs	r0, #31
 800b1ac:	f7f7 f964 	bl	8002478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	210f      	movs	r1, #15
 800b1b4:	2020      	movs	r0, #32
 800b1b6:	f7f7 f943 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800b1ba:	2020      	movs	r0, #32
 800b1bc:	f7f7 f95c 	bl	8002478 <HAL_NVIC_EnableIRQ>
}
 800b1c0:	bf00      	nop
 800b1c2:	3730      	adds	r7, #48	; 0x30
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	200106a0 	.word	0x200106a0
 800b1cc:	40023800 	.word	0x40023800
 800b1d0:	40021c00 	.word	0x40021c00
 800b1d4:	40020400 	.word	0x40020400

0800b1d8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7f8 fd69 	bl	8003cb8 <HAL_I2C_GetState>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d125      	bne.n	800b238 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a14      	ldr	r2, [pc, #80]	; (800b240 <I2Cx_Init+0x68>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d103      	bne.n	800b1fc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a13      	ldr	r2, [pc, #76]	; (800b244 <I2Cx_Init+0x6c>)
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	e002      	b.n	800b202 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a12      	ldr	r2, [pc, #72]	; (800b248 <I2Cx_Init+0x70>)
 800b200:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a11      	ldr	r2, [pc, #68]	; (800b24c <I2Cx_Init+0x74>)
 800b206:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff ff23 	bl	800b078 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f8 fa52 	bl	80036dc <HAL_I2C_Init>
  }
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	200106a0 	.word	0x200106a0
 800b244:	40005c00 	.word	0x40005c00
 800b248:	40005400 	.word	0x40005400
 800b24c:	40912732 	.word	0x40912732

0800b250 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08a      	sub	sp, #40	; 0x28
 800b254:	af04      	add	r7, sp, #16
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	4608      	mov	r0, r1
 800b25a:	4611      	mov	r1, r2
 800b25c:	461a      	mov	r2, r3
 800b25e:	4603      	mov	r3, r0
 800b260:	72fb      	strb	r3, [r7, #11]
 800b262:	460b      	mov	r3, r1
 800b264:	813b      	strh	r3, [r7, #8]
 800b266:	4613      	mov	r3, r2
 800b268:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b26e:	7afb      	ldrb	r3, [r7, #11]
 800b270:	b299      	uxth	r1, r3
 800b272:	88f8      	ldrh	r0, [r7, #6]
 800b274:	893a      	ldrh	r2, [r7, #8]
 800b276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b27a:	9302      	str	r3, [sp, #8]
 800b27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	4603      	mov	r3, r0
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f7f8 fbfc 	bl	8003a84 <HAL_I2C_Mem_Read>
 800b28c:	4603      	mov	r3, r0
 800b28e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b290:	7dfb      	ldrb	r3, [r7, #23]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d004      	beq.n	800b2a0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800b296:	7afb      	ldrb	r3, [r7, #11]
 800b298:	4619      	mov	r1, r3
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 f832 	bl	800b304 <I2Cx_Error>
  }
  return status;    
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b08a      	sub	sp, #40	; 0x28
 800b2ae:	af04      	add	r7, sp, #16
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	72fb      	strb	r3, [r7, #11]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	813b      	strh	r3, [r7, #8]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	b299      	uxth	r1, r3
 800b2cc:	88f8      	ldrh	r0, [r7, #6]
 800b2ce:	893a      	ldrh	r2, [r7, #8]
 800b2d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b2d4:	9302      	str	r3, [sp, #8]
 800b2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	4603      	mov	r3, r0
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7f8 fabb 	bl	800385c <HAL_I2C_Mem_Write>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d004      	beq.n	800b2fa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f805 	bl	800b304 <I2Cx_Error>
  }
  return status;
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7f8 fa73 	bl	80037fc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff ff5e 	bl	800b1d8 <I2Cx_Init>
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af02      	add	r7, sp, #8
 800b32a:	4603      	mov	r3, r0
 800b32c:	71fb      	strb	r3, [r7, #7]
 800b32e:	460b      	mov	r3, r1
 800b330:	71bb      	strb	r3, [r7, #6]
 800b332:	4613      	mov	r3, r2
 800b334:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800b336:	79bb      	ldrb	r3, [r7, #6]
 800b338:	b29a      	uxth	r2, r3
 800b33a:	79f9      	ldrb	r1, [r7, #7]
 800b33c:	2301      	movs	r3, #1
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	1d7b      	adds	r3, r7, #5
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	2301      	movs	r3, #1
 800b346:	4803      	ldr	r0, [pc, #12]	; (800b354 <TS_IO_Write+0x30>)
 800b348:	f7ff ffaf 	bl	800b2aa <I2Cx_WriteMultiple>
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	200106a0 	.word	0x200106a0

0800b358 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	4603      	mov	r3, r0
 800b360:	460a      	mov	r2, r1
 800b362:	71fb      	strb	r3, [r7, #7]
 800b364:	4613      	mov	r3, r2
 800b366:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800b36c:	79bb      	ldrb	r3, [r7, #6]
 800b36e:	b29a      	uxth	r2, r3
 800b370:	79f9      	ldrb	r1, [r7, #7]
 800b372:	2301      	movs	r3, #1
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	f107 030f 	add.w	r3, r7, #15
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2301      	movs	r3, #1
 800b37e:	4804      	ldr	r0, [pc, #16]	; (800b390 <TS_IO_Read+0x38>)
 800b380:	f7ff ff66 	bl	800b250 <I2Cx_ReadMultiple>

  return read_value;
 800b384:	7bfb      	ldrb	r3, [r7, #15]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	200106a0 	.word	0x200106a0

0800b394 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800b394:	b480      	push	{r7}
 800b396:	af00      	add	r7, sp, #0
}
 800b398:	bf00      	nop
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800b3a6:	f005 ffd9 	bl	801135c <touchgfx_components_init>
  touchgfx_init();
 800b3aa:	f005 ffad 	bl	8011308 <touchgfx_init>
}
 800b3ae:	bf00      	nop
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800b3b6:	f005 ffd9 	bl	801136c <touchgfx_taskEntry>
}
 800b3ba:	bf00      	nop
 800b3bc:	bd80      	pop	{r7, pc}
	...

0800b3c0 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
    {
 800b3c8:	4a04      	ldr	r2, [pc, #16]	; (800b3dc <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]
    }
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	08022f28 	.word	0x08022f28

0800b3e0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
    }
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff ffe9 	bl	800b3c0 <_ZN8touchgfx12FontProviderD1Ev>
 800b3ee:	2104      	movs	r1, #4
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f015 fd5a 	bl	8020eaa <_ZdlPvj>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	460b      	mov	r3, r1
 800b40a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800b40c:	887b      	ldrh	r3, [r7, #2]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d010      	beq.n	800b434 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800b412:	2b02      	cmp	r3, #2
 800b414:	dc13      	bgt.n	800b43e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d005      	beq.n	800b42a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800b41e:	e00e      	b.n	800b43e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800b420:	f004 f9ec 	bl	800f7fc <_ZN17TypedTextDatabase8getFontsEv>
 800b424:	4603      	mov	r3, r0
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	e00a      	b.n	800b440 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800b42a:	f004 f9e7 	bl	800f7fc <_ZN17TypedTextDatabase8getFontsEv>
 800b42e:	4603      	mov	r3, r0
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	e005      	b.n	800b440 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800b434:	f004 f9e2 	bl	800f7fc <_ZN17TypedTextDatabase8getFontsEv>
 800b438:	4603      	mov	r3, r0
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	e000      	b.n	800b440 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800b43e:	2300      	movs	r3, #0
    }
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	4a05      	ldr	r2, [pc, #20]	; (800b468 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	f7ff ffb1 	bl	800b3c0 <_ZN8touchgfx12FontProviderD1Ev>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4618      	mov	r0, r3
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	08022f14 	.word	0x08022f14

0800b46c <_ZN23ApplicationFontProviderD0Ev>:
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7ff ffe7 	bl	800b448 <_ZN23ApplicationFontProviderD1Ev>
 800b47a:	2104      	movs	r1, #4
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f015 fd14 	bl	8020eaa <_ZdlPvj>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4618      	mov	r0, r3
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
    {
 800b494:	4a04      	ldr	r2, [pc, #16]	; (800b4a8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	601a      	str	r2, [r3, #0]
    }
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	08023628 	.word	0x08023628

0800b4ac <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
    }
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7ff ffe9 	bl	800b48c <_ZN8touchgfx4FontD1Ev>
 800b4ba:	2114      	movs	r1, #20
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f015 fcf4 	bl	8020eaa <_ZdlPvj>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800b4cc:	b590      	push	{r4, r7, lr}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800b4d8:	887b      	ldrh	r3, [r7, #2]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e010      	b.n	800b504 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	681c      	ldr	r4, [r3, #0]
 800b4f2:	f107 030f 	add.w	r3, r7, #15
 800b4f6:	f107 0210 	add.w	r2, r7, #16
 800b4fa:	8879      	ldrh	r1, [r7, #2]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	47a0      	blx	r4
 800b500:	6178      	str	r0, [r7, #20]
        return glyph;
 800b502:	697b      	ldr	r3, [r7, #20]
    }
 800b504:	4618      	mov	r0, r3
 800b506:	371c      	adds	r7, #28
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd90      	pop	{r4, r7, pc}

0800b50c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	89db      	ldrh	r3, [r3, #14]
    }
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800b530:	4618      	mov	r0, r3
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	88db      	ldrh	r3, [r3, #6]
    }
 800b548:	4618      	mov	r0, r3
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	889b      	ldrh	r3, [r3, #4]
    }
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	7a9b      	ldrb	r3, [r3, #10]
 800b578:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800b57c:	b2db      	uxtb	r3, r3
    }
 800b57e:	4618      	mov	r0, r3
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	7a9b      	ldrb	r3, [r3, #10]
 800b596:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b59a:	b2db      	uxtb	r3, r3
    }
 800b59c:	4618      	mov	r0, r3
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	4a05      	ldr	r2, [pc, #20]	; (800b5c8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff ff67 	bl	800b48c <_ZN8touchgfx4FontD1Ev>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	080242a0 	.word	0x080242a0

0800b5cc <_ZN8touchgfx9ConstFontD0Ev>:
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff ffe7 	bl	800b5a8 <_ZN8touchgfx9ConstFontD1Ev>
 800b5da:	211c      	movs	r1, #28
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f015 fc64 	bl	8020eaa <_ZdlPvj>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	4a05      	ldr	r2, [pc, #20]	; (800b60c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff ffd3 	bl	800b5a8 <_ZN8touchgfx9ConstFontD1Ev>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	08022f4c 	.word	0x08022f4c

0800b610 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff ffe7 	bl	800b5ec <_ZN8touchgfx13GeneratedFontD1Ev>
 800b61e:	212c      	movs	r1, #44	; 0x2c
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f015 fc42 	bl	8020eaa <_ZdlPvj>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4618      	mov	r0, r3
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
    {
 800b638:	4a04      	ldr	r2, [pc, #16]	; (800b64c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	601a      	str	r2, [r3, #0]
    }
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	08022f3c 	.word	0x08022f3c

0800b650 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
    }
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff ffe9 	bl	800b630 <_ZN8touchgfx9TypedTextD1Ev>
 800b65e:	2108      	movs	r1, #8
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f015 fc22 	bl	8020eaa <_ZdlPvj>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08e      	sub	sp, #56	; 0x38
 800b6a4:	af0a      	add	r7, sp, #40	; 0x28
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	80fb      	strh	r3, [r7, #6]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	88b9      	ldrh	r1, [r7, #4]
 800b6ba:	88fa      	ldrh	r2, [r7, #6]
 800b6bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b6c4:	9307      	str	r3, [sp, #28]
 800b6c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b6ca:	9306      	str	r3, [sp, #24]
 800b6cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b6d0:	9305      	str	r3, [sp, #20]
 800b6d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6dc:	9303      	str	r3, [sp, #12]
 800b6de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6e2:	9302      	str	r3, [sp, #8]
 800b6e4:	7f3b      	ldrb	r3, [r7, #28]
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	8b3b      	ldrh	r3, [r7, #24]
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	68b9      	ldr	r1, [r7, #8]
 800b6f0:	f00b faf0 	bl	8016cd4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800b6f4:	4a09      	ldr	r2, [pc, #36]	; (800b71c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6fe:	61da      	str	r2, [r3, #28]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b704:	621a      	str	r2, [r3, #32]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b70a:	625a      	str	r2, [r3, #36]	; 0x24
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b710:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	08022f4c 	.word	0x08022f4c

0800b720 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	889b      	ldrh	r3, [r3, #4]
 800b734:	0adb      	lsrs	r3, r3, #11
 800b736:	b29b      	uxth	r3, r3
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4413      	add	r3, r2
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800b752:	b480      	push	{r7}
 800b754:	b089      	sub	sp, #36	; 0x24
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	460b      	mov	r3, r1
 800b75c:	607a      	str	r2, [r7, #4]
 800b75e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7b1b      	ldrb	r3, [r3, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	e030      	b.n	800b7d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6a1a      	ldr	r2, [r3, #32]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	7b5b      	ldrb	r3, [r3, #13]
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	b21b      	sxth	r3, r3
 800b782:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b786:	b219      	sxth	r1, r3
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	7adb      	ldrb	r3, [r3, #11]
 800b78c:	b21b      	sxth	r3, r3
 800b78e:	430b      	orrs	r3, r1
 800b790:	b21b      	sxth	r3, r3
 800b792:	b29b      	uxth	r3, r3
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	7b1b      	ldrb	r3, [r3, #12]
 800b79e:	837b      	strh	r3, [r7, #26]
 800b7a0:	8b7b      	ldrh	r3, [r7, #26]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d015      	beq.n	800b7d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	897a      	ldrh	r2, [r7, #10]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d103      	bne.n	800b7b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b7b6:	e00d      	b.n	800b7d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	897a      	ldrh	r2, [r7, #10]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d306      	bcc.n	800b7d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800b7c2:	8b7b      	ldrh	r3, [r7, #26]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	837b      	strh	r3, [r7, #26]
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	61fb      	str	r3, [r7, #28]
 800b7ce:	e7e7      	b.n	800b7a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800b7d0:	bf00      	nop
        }
    }
    return 0;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3724      	adds	r7, #36	; 0x24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__tcf_0+0xc>)
 800b7e6:	f7ff ff01 	bl	800b5ec <_ZN8touchgfx13GeneratedFontD1Ev>
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	200106f4 	.word	0x200106f4

0800b7f0 <_Z23getFont_verdana_10_4bppv>:
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08e      	sub	sp, #56	; 0x38
 800b7f4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800b7f6:	4b21      	ldr	r3, [pc, #132]	; (800b87c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	f3bf 8f5b 	dmb	ish
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	bf0c      	ite	eq
 800b808:	2301      	moveq	r3, #1
 800b80a:	2300      	movne	r3, #0
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d030      	beq.n	800b874 <_Z23getFont_verdana_10_4bppv+0x84>
 800b812:	481a      	ldr	r0, [pc, #104]	; (800b87c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800b814:	f015 fb4b 	bl	8020eae <__cxa_guard_acquire>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bf14      	ite	ne
 800b81e:	2301      	movne	r3, #1
 800b820:	2300      	moveq	r3, #0
 800b822:	b2db      	uxtb	r3, r3
 800b824:	2b00      	cmp	r3, #0
 800b826:	d025      	beq.n	800b874 <_Z23getFont_verdana_10_4bppv+0x84>
 800b828:	2300      	movs	r3, #0
 800b82a:	930c      	str	r3, [sp, #48]	; 0x30
 800b82c:	2300      	movs	r3, #0
 800b82e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b830:	2300      	movs	r3, #0
 800b832:	930a      	str	r3, [sp, #40]	; 0x28
 800b834:	233f      	movs	r3, #63	; 0x3f
 800b836:	9309      	str	r3, [sp, #36]	; 0x24
 800b838:	4b11      	ldr	r3, [pc, #68]	; (800b880 <_Z23getFont_verdana_10_4bppv+0x90>)
 800b83a:	9308      	str	r3, [sp, #32]
 800b83c:	4b11      	ldr	r3, [pc, #68]	; (800b884 <_Z23getFont_verdana_10_4bppv+0x94>)
 800b83e:	9307      	str	r3, [sp, #28]
 800b840:	2300      	movs	r3, #0
 800b842:	9306      	str	r3, [sp, #24]
 800b844:	2300      	movs	r3, #0
 800b846:	9305      	str	r3, [sp, #20]
 800b848:	2301      	movs	r3, #1
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	2304      	movs	r3, #4
 800b84e:	9303      	str	r3, [sp, #12]
 800b850:	2300      	movs	r3, #0
 800b852:	9302      	str	r3, [sp, #8]
 800b854:	2300      	movs	r3, #0
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	230a      	movs	r3, #10
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	230a      	movs	r3, #10
 800b85e:	2201      	movs	r2, #1
 800b860:	4909      	ldr	r1, [pc, #36]	; (800b888 <_Z23getFont_verdana_10_4bppv+0x98>)
 800b862:	480a      	ldr	r0, [pc, #40]	; (800b88c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800b864:	f7ff ff1c 	bl	800b6a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800b868:	4809      	ldr	r0, [pc, #36]	; (800b890 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800b86a:	f015 fb6b 	bl	8020f44 <atexit>
 800b86e:	4803      	ldr	r0, [pc, #12]	; (800b87c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800b870:	f015 fb29 	bl	8020ec6 <__cxa_guard_release>
    return verdana_10_4bpp;
 800b874:	4b05      	ldr	r3, [pc, #20]	; (800b88c <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800b876:	4618      	mov	r0, r3
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20010720 	.word	0x20010720
 800b880:	0802678c 	.word	0x0802678c
 800b884:	08026938 	.word	0x08026938
 800b888:	08026238 	.word	0x08026238
 800b88c:	200106f4 	.word	0x200106f4
 800b890:	0800b7e1 	.word	0x0800b7e1

0800b894 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800b894:	b580      	push	{r7, lr}
 800b896:	af00      	add	r7, sp, #0
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__tcf_0+0xc>)
 800b89a:	f7ff fea7 	bl	800b5ec <_ZN8touchgfx13GeneratedFontD1Ev>
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20010724 	.word	0x20010724

0800b8a4 <_Z23getFont_verdana_20_4bppv>:
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08e      	sub	sp, #56	; 0x38
 800b8a8:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800b8aa:	4b21      	ldr	r3, [pc, #132]	; (800b930 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	f3bf 8f5b 	dmb	ish
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	bf0c      	ite	eq
 800b8bc:	2301      	moveq	r3, #1
 800b8be:	2300      	movne	r3, #0
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d030      	beq.n	800b928 <_Z23getFont_verdana_20_4bppv+0x84>
 800b8c6:	481a      	ldr	r0, [pc, #104]	; (800b930 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800b8c8:	f015 faf1 	bl	8020eae <__cxa_guard_acquire>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bf14      	ite	ne
 800b8d2:	2301      	movne	r3, #1
 800b8d4:	2300      	moveq	r3, #0
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d025      	beq.n	800b928 <_Z23getFont_verdana_20_4bppv+0x84>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	930c      	str	r3, [sp, #48]	; 0x30
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8e8:	233f      	movs	r3, #63	; 0x3f
 800b8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ec:	4b11      	ldr	r3, [pc, #68]	; (800b934 <_Z23getFont_verdana_20_4bppv+0x90>)
 800b8ee:	9308      	str	r3, [sp, #32]
 800b8f0:	4b11      	ldr	r3, [pc, #68]	; (800b938 <_Z23getFont_verdana_20_4bppv+0x94>)
 800b8f2:	9307      	str	r3, [sp, #28]
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	9306      	str	r3, [sp, #24]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	9305      	str	r3, [sp, #20]
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	9304      	str	r3, [sp, #16]
 800b900:	2304      	movs	r3, #4
 800b902:	9303      	str	r3, [sp, #12]
 800b904:	2300      	movs	r3, #0
 800b906:	9302      	str	r3, [sp, #8]
 800b908:	2300      	movs	r3, #0
 800b90a:	9301      	str	r3, [sp, #4]
 800b90c:	2314      	movs	r3, #20
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	2318      	movs	r3, #24
 800b912:	225f      	movs	r2, #95	; 0x5f
 800b914:	4909      	ldr	r1, [pc, #36]	; (800b93c <_Z23getFont_verdana_20_4bppv+0x98>)
 800b916:	480a      	ldr	r0, [pc, #40]	; (800b940 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800b918:	f7ff fec2 	bl	800b6a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800b91c:	4809      	ldr	r0, [pc, #36]	; (800b944 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800b91e:	f015 fb11 	bl	8020f44 <atexit>
 800b922:	4803      	ldr	r0, [pc, #12]	; (800b930 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800b924:	f015 facf 	bl	8020ec6 <__cxa_guard_release>
    return verdana_20_4bpp;
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	20010750 	.word	0x20010750
 800b934:	08026790 	.word	0x08026790
 800b938:	0802693c 	.word	0x0802693c
 800b93c:	08026248 	.word	0x08026248
 800b940:	20010724 	.word	0x20010724
 800b944:	0800b895 	.word	0x0800b895

0800b948 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__tcf_0+0xc>)
 800b94e:	f7ff fe4d 	bl	800b5ec <_ZN8touchgfx13GeneratedFontD1Ev>
 800b952:	bd80      	pop	{r7, pc}
 800b954:	20010754 	.word	0x20010754

0800b958 <_Z23getFont_verdana_40_4bppv>:
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08e      	sub	sp, #56	; 0x38
 800b95c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800b95e:	4b21      	ldr	r3, [pc, #132]	; (800b9e4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	f3bf 8f5b 	dmb	ish
 800b966:	b2db      	uxtb	r3, r3
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bf0c      	ite	eq
 800b970:	2301      	moveq	r3, #1
 800b972:	2300      	movne	r3, #0
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d030      	beq.n	800b9dc <_Z23getFont_verdana_40_4bppv+0x84>
 800b97a:	481a      	ldr	r0, [pc, #104]	; (800b9e4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800b97c:	f015 fa97 	bl	8020eae <__cxa_guard_acquire>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	bf14      	ite	ne
 800b986:	2301      	movne	r3, #1
 800b988:	2300      	moveq	r3, #0
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d025      	beq.n	800b9dc <_Z23getFont_verdana_40_4bppv+0x84>
 800b990:	2300      	movs	r3, #0
 800b992:	930c      	str	r3, [sp, #48]	; 0x30
 800b994:	2300      	movs	r3, #0
 800b996:	930b      	str	r3, [sp, #44]	; 0x2c
 800b998:	2300      	movs	r3, #0
 800b99a:	930a      	str	r3, [sp, #40]	; 0x28
 800b99c:	233f      	movs	r3, #63	; 0x3f
 800b99e:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a0:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <_Z23getFont_verdana_40_4bppv+0x90>)
 800b9a2:	9308      	str	r3, [sp, #32]
 800b9a4:	4b11      	ldr	r3, [pc, #68]	; (800b9ec <_Z23getFont_verdana_40_4bppv+0x94>)
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	9306      	str	r3, [sp, #24]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9305      	str	r3, [sp, #20]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	9304      	str	r3, [sp, #16]
 800b9b4:	2304      	movs	r3, #4
 800b9b6:	9303      	str	r3, [sp, #12]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	9302      	str	r3, [sp, #8]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	2328      	movs	r3, #40	; 0x28
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	2328      	movs	r3, #40	; 0x28
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	4909      	ldr	r1, [pc, #36]	; (800b9f0 <_Z23getFont_verdana_40_4bppv+0x98>)
 800b9ca:	480a      	ldr	r0, [pc, #40]	; (800b9f4 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800b9cc:	f7ff fe68 	bl	800b6a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800b9d0:	4809      	ldr	r0, [pc, #36]	; (800b9f8 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800b9d2:	f015 fab7 	bl	8020f44 <atexit>
 800b9d6:	4803      	ldr	r0, [pc, #12]	; (800b9e4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800b9d8:	f015 fa75 	bl	8020ec6 <__cxa_guard_release>
    return verdana_40_4bpp;
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20010780 	.word	0x20010780
 800b9e8:	08026934 	.word	0x08026934
 800b9ec:	08026940 	.word	0x08026940
 800b9f0:	0802677c 	.word	0x0802677c
 800b9f4:	20010754 	.word	0x20010754
 800b9f8:	0800b949 	.word	0x0800b949

0800b9fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	801a      	strh	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	805a      	strh	r2, [r3, #2]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	809a      	strh	r2, [r3, #4]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	80da      	strh	r2, [r3, #6]
    {
    }
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800ba42:	b480      	push	{r7}
 800ba44:	b085      	sub	sp, #20
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4603      	mov	r3, r0
 800ba52:	817b      	strh	r3, [r7, #10]
 800ba54:	460b      	mov	r3, r1
 800ba56:	813b      	strh	r3, [r7, #8]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	897a      	ldrh	r2, [r7, #10]
 800ba60:	801a      	strh	r2, [r3, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	893a      	ldrh	r2, [r7, #8]
 800ba66:	805a      	strh	r2, [r3, #2]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	88fa      	ldrh	r2, [r7, #6]
 800ba6c:	809a      	strh	r2, [r3, #4]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8b3a      	ldrh	r2, [r7, #24]
 800ba72:	80da      	strh	r2, [r3, #6]
    {
    }
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800ba8c:	4a14      	ldr	r2, [pc, #80]	; (800bae0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	601a      	str	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3304      	adds	r3, #4
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff ffbc 	bl	800ba14 <_ZN8touchgfx4RectC1Ev>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	330c      	adds	r3, #12
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff ffb7 	bl	800ba14 <_ZN8touchgfx4RectC1Ev>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	615a      	str	r2, [r3, #20]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	619a      	str	r2, [r3, #24]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	61da      	str	r2, [r3, #28]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	841a      	strh	r2, [r3, #32]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	845a      	strh	r2, [r3, #34]	; 0x22
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	08024238 	.word	0x08024238

0800bae4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
    {
 800baec:	4a04      	ldr	r2, [pc, #16]	; (800bb00 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]
    }
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	08024238 	.word	0x08024238

0800bb04 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
    }
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff ffe9 	bl	800bae4 <_ZN8touchgfx8DrawableD1Ev>
 800bb12:	2128      	movs	r1, #40	; 0x28
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f015 f9c8 	bl	8020eaa <_ZdlPvj>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d005      	beq.n	800bb42 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3314      	adds	r3, #20
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	4798      	blx	r3
        }
    }
 800bb42:	bf00      	nop
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <_ZN8touchgfx8Drawable14getNextSiblingEv>:
     * Gets the next sibling node. This will be the next Drawable that has been added to the
     * same Container as this Drawable.
     *
     * @return The next sibling. If there are no more siblings, the return value is 0.
     */
    Drawable* getNextSibling()
 800bb4a:	b480      	push	{r7}
 800bb4c:	b083      	sub	sp, #12
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
    {
        return nextSibling;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	699b      	ldr	r3, [r3, #24]
    }
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800bb6a:	2300      	movs	r3, #0
    }
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	4608      	mov	r0, r1
 800bb82:	4611      	mov	r1, r2
 800bb84:	461a      	mov	r2, r3
 800bb86:	4603      	mov	r3, r0
 800bb88:	817b      	strh	r3, [r7, #10]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	813b      	strh	r3, [r7, #8]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800bb92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800bb96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 f837 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800bba2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800bba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f000 f88b 	bl	800bcc8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800bbb2:	bf00      	nop
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	887a      	ldrh	r2, [r7, #2]
 800bbe4:	809a      	strh	r2, [r3, #4]
    }
 800bbe6:	bf00      	nop
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	887a      	ldrh	r2, [r7, #2]
 800bc02:	80da      	strh	r2, [r3, #6]
    }
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	807b      	strh	r3, [r7, #2]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3330      	adds	r3, #48	; 0x30
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	4798      	blx	r3
        setY(y);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	3334      	adds	r3, #52	; 0x34
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800bc3e:	4611      	mov	r1, r2
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	4798      	blx	r3
    }
 800bc44:	bf00      	nop
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	887a      	ldrh	r2, [r7, #2]
 800bc5c:	811a      	strh	r2, [r3, #8]
    }
 800bc5e:	bf00      	nop
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	460b      	mov	r3, r1
 800bc74:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	887a      	ldrh	r2, [r7, #2]
 800bc7a:	815a      	strh	r2, [r3, #10]
    }
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
    {
    }
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800bca6:	bf00      	nop
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800bcb2:	b480      	push	{r7}
 800bcb4:	b083      	sub	sp, #12
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	807b      	strh	r3, [r7, #2]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3338      	adds	r3, #56	; 0x38
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bce4:	4611      	mov	r1, r2
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
        setHeight(height);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	333c      	adds	r3, #60	; 0x3c
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	4798      	blx	r3
    }
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
    {
    }
 800bd22:	bf00      	nop
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800bd56:	4618      	mov	r0, r3
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	807b      	strh	r3, [r7, #2]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3354      	adds	r3, #84	; 0x54
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	8879      	ldrh	r1, [r7, #2]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800bd82:	b292      	uxth	r2, r2
 800bd84:	1a8a      	subs	r2, r1, r2
 800bd86:	b292      	uxth	r2, r2
 800bd88:	b210      	sxth	r0, r2
 800bd8a:	8839      	ldrh	r1, [r7, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800bd92:	b292      	uxth	r2, r2
 800bd94:	1a8a      	subs	r2, r1, r2
 800bd96:	b292      	uxth	r2, r2
 800bd98:	b212      	sxth	r2, r2
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	4798      	blx	r3
    }
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdb6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdbe:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f7ff ffe1 	bl	800bda8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	601a      	str	r2, [r3, #0]
    }
 800bdf4:	bf00      	nop
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800be06:	bf00      	nop
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800be12:	b480      	push	{r7}
 800be14:	b083      	sub	sp, #12
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800be32:	bf00      	nop
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800be3e:	b480      	push	{r7}
 800be40:	b083      	sub	sp, #12
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	460b      	mov	r3, r1
 800be48:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800be4a:	bf00      	nop
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
    {
    }
 800be5e:	bf00      	nop
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800be6a:	b480      	push	{r7}
 800be6c:	b083      	sub	sp, #12
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
    {
    }
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
	...

0800be80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
    {
 800be88:	4a04      	ldr	r2, [pc, #16]	; (800be9c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	601a      	str	r2, [r3, #0]
    }
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	080231d4 	.word	0x080231d4

0800bea0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
    }
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff ffe9 	bl	800be80 <_ZN8touchgfx15UIEventListenerD1Ev>
 800beae:	2104      	movs	r1, #4
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f014 fffa 	bl	8020eaa <_ZdlPvj>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
    {
    }
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800befe:	6810      	ldr	r0, [r2, #0]
 800bf00:	6851      	ldr	r1, [r2, #4]
 800bf02:	c303      	stmia	r3!, {r0, r1}
    }
 800bf04:	bf00      	nop
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f009 fe0c 	bl	8015b3a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
    {
 800bf34:	4a04      	ldr	r2, [pc, #16]	; (800bf48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	601a      	str	r2, [r3, #0]
    }
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	080231bc 	.word	0x080231bc

0800bf4c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
    }
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7ff ffe9 	bl	800bf2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800bf5a:	2104      	movs	r1, #4
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f014 ffa4 	bl	8020eaa <_ZdlPvj>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
    {
        return instance;
 800bf70:	4b03      	ldr	r3, [pc, #12]	; (800bf80 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800bf72:	681b      	ldr	r3, [r3, #0]
    }
 800bf74:	4618      	mov	r0, r3
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	20011b3c 	.word	0x20011b3c

0800bf84 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800bf84:	b480      	push	{r7}
 800bf86:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800bf88:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d008      	beq.n	800bfa6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800bf94:	4b08      	ldr	r3, [pc, #32]	; (800bfb8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800bf9e:	4b06      	ldr	r3, [pc, #24]	; (800bfb8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa4:	e002      	b.n	800bfac <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800bfa6:	4b04      	ldr	r3, [pc, #16]	; (800bfb8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	689b      	ldr	r3, [r3, #8]
    }
 800bfac:	4618      	mov	r0, r3
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	20011b3c 	.word	0x20011b3c

0800bfbc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	607b      	str	r3, [r7, #4]
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	817b      	strh	r3, [r7, #10]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff feac 	bl	800bd2e <_ZNK8touchgfx8Drawable9isVisibleEv>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d008      	beq.n	800bfee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff feb2 	bl	800bd48 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800bfee:	2300      	movs	r3, #0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	601a      	str	r2, [r3, #0]
        }
    }
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c00c:	4a07      	ldr	r2, [pc, #28]	; (800c02c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	601a      	str	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	605a      	str	r2, [r3, #4]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	721a      	strb	r2, [r3, #8]
    {
    }
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	080230c8 	.word	0x080230c8

0800c030 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
    {
 800c038:	4a04      	ldr	r2, [pc, #16]	; (800c04c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	601a      	str	r2, [r3, #0]
    }
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	080230c8 	.word	0x080230c8

0800c050 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
    }
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff ffe9 	bl	800c030 <_ZN8touchgfx10TransitionD1Ev>
 800c05e:	210c      	movs	r1, #12
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f014 ff22 	bl	8020eaa <_ZdlPvj>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
    {
    }
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
    {
    }
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
    {
    }
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800c0b4:	f009 fcf4 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f00a f962 	bl	8016384 <_ZN8touchgfx11Application10invalidateEv>
    }
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	605a      	str	r2, [r3, #4]
    }
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af02      	add	r7, sp, #8
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	2200      	movs	r2, #0
 800c100:	2100      	movs	r1, #0
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff fc9d 	bl	800ba42 <_ZN8touchgfx4RectC1Essss>
        }
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
        {
        }
 800c11a:	bf00      	nop
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
	...

0800c128 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	4a05      	ldr	r2, [pc, #20]	; (800c148 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff fea1 	bl	800be80 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	080241ec 	.word	0x080241ec

0800c14c <_ZN8touchgfx11ApplicationD0Ev>:
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff ffe7 	bl	800c128 <_ZN8touchgfx11ApplicationD1Ev>
 800c15a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f014 fea3 	bl	8020eaa <_ZdlPvj>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
	...

0800c170 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f009 fd7e 	bl	8015c7c <_ZN8touchgfx11ApplicationC1Ev>
 800c180:	4a09      	ldr	r2, [pc, #36]	; (800c1a8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a04      	ldr	r2, [pc, #16]	; (800c1ac <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c19a:	6013      	str	r3, [r2, #0]
    }
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	0802307c 	.word	0x0802307c
 800c1ac:	20011b88 	.word	0x20011b88

0800c1b0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f804 	bl	800c1c6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c1be:	bf00      	nop
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b082      	sub	sp, #8
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00f      	beq.n	800c1f8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	330c      	adds	r3, #12
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	4798      	blx	r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e000      	b.n	800c1fa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00e      	beq.n	800c21c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3308      	adds	r3, #8
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	601a      	str	r2, [r3, #0]
    }
 800c234:	bf00      	nop
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	4a05      	ldr	r2, [pc, #20]	; (800c260 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4618      	mov	r0, r3
 800c252:	f7ff ff69 	bl	800c128 <_ZN8touchgfx11ApplicationD1Ev>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	0802307c 	.word	0x0802307c

0800c264 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff ffe7 	bl	800c240 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c272:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f014 fe17 	bl	8020eaa <_ZdlPvj>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
	...

0800c288 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	4a08      	ldr	r2, [pc, #32]	; (800c2b4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	601a      	str	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 ff5b 	bl	800d158 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff ffcb 	bl	800c240 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	08023018 	.word	0x08023018

0800c2b8 <_ZN23FrontendApplicationBaseD0Ev>:
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff ffe1 	bl	800c288 <_ZN23FrontendApplicationBaseD1Ev>
 800c2c6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f014 fded 	bl	8020eaa <_ZdlPvj>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b082      	sub	sp, #8
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f8b0 	bl	800c448 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	721a      	strb	r2, [r3, #8]
    }
 800c2fe:	bf00      	nop
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <_ZN13ModelListener4bindEP5Model>:
    
    virtual ~ModelListener() {}

    virtual void uartMsgRdy() {};

    void bind(Model* m)
 800c30a:	b480      	push	{r7}
 800c30c:	b083      	sub	sp, #12
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	605a      	str	r2, [r3, #4]
    }
 800c31a:	bf00      	nop
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
	...

0800c328 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4618      	mov	r0, r3
 800c334:	f7ff fba6 	bl	800ba84 <_ZN8touchgfx8DrawableC1Ev>
 800c338:	4a03      	ldr	r2, [pc, #12]	; (800c348 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	08023154 	.word	0x08023154

0800c34c <_ZN8touchgfx6WidgetD1Ev>:
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	4a05      	ldr	r2, [pc, #20]	; (800c36c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff fbc1 	bl	800bae4 <_ZN8touchgfx8DrawableD1Ev>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	08023154 	.word	0x08023154

0800c370 <_ZN8touchgfx6WidgetD0Ev>:
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff ffe7 	bl	800c34c <_ZN8touchgfx6WidgetD1Ev>
 800c37e:	2128      	movs	r1, #40	; 0x28
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f014 fd92 	bl	8020eaa <_ZdlPvj>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff fee6 	bl	800c170 <_ZN8touchgfx14MVPApplicationC1Ev>
 800c3a4:	4a13      	ldr	r2, [pc, #76]	; (800c3f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 f92b 	bl	800c60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800c3c6:	f7ff fdd1 	bl	800bf6c <_ZN8touchgfx3HAL11getInstanceEv>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	3208      	adds	r2, #8
 800c3d0:	6812      	ldr	r2, [r2, #0]
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f003 f997 	bl	800f70c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800c3de:	f7ff fdd1 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f00f ff3c 	bl	801c262 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	08023018 	.word	0x08023018

0800c3f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	4611      	mov	r1, r2
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff ffe9 	bl	800c3f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	605a      	str	r2, [r3, #4]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	3308      	adds	r3, #8
 800c434:	3208      	adds	r2, #8
 800c436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c43a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b089      	sub	sp, #36	; 0x24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800c456:	4b10      	ldr	r3, [pc, #64]	; (800c498 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800c458:	61bb      	str	r3, [r7, #24]
 800c45a:	2300      	movs	r3, #0
 800c45c:	61fb      	str	r3, [r7, #28]
 800c45e:	f107 0008 	add.w	r0, r7, #8
 800c462:	f107 0318 	add.w	r3, r7, #24
 800c466:	cb0c      	ldmia	r3, {r2, r3}
 800c468:	6879      	ldr	r1, [r7, #4]
 800c46a:	f000 f8eb 	bl	800c644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800c46e:	f107 0308 	add.w	r3, r7, #8
 800c472:	4619      	mov	r1, r3
 800c474:	4620      	mov	r0, r4
 800c476:	f7ff ffcb 	bl	800c410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800c47a:	f107 0308 	add.w	r3, r7, #8
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 fe6a 	bl	800d158 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800c490:	bf00      	nop
 800c492:	3724      	adds	r7, #36	; 0x24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd90      	pop	{r4, r7, pc}
 800c498:	0800c49d 	.word	0x0800c49d

0800c49c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	4b04      	ldr	r3, [pc, #16]	; (800c4cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800c4bc:	4804      	ldr	r0, [pc, #16]	; (800c4d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800c4be:	f000 f8f3 	bl	800c6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800c4c2:	bf00      	nop
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20011b7c 	.word	0x20011b7c
 800c4d0:	20011b78 	.word	0x20011b78

0800c4d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 800c4d4:	b590      	push	{r4, r7, lr}
 800c4d6:	b089      	sub	sp, #36	; 0x24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800c4e2:	4b10      	ldr	r3, [pc, #64]	; (800c524 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 800c4e4:	61bb      	str	r3, [r7, #24]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	61fb      	str	r3, [r7, #28]
 800c4ea:	f107 0008 	add.w	r0, r7, #8
 800c4ee:	f107 0318 	add.w	r3, r7, #24
 800c4f2:	cb0c      	ldmia	r3, {r2, r3}
 800c4f4:	6879      	ldr	r1, [r7, #4]
 800c4f6:	f000 f8a5 	bl	800c644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800c4fa:	f107 0308 	add.w	r3, r7, #8
 800c4fe:	4619      	mov	r1, r3
 800c500:	4620      	mov	r0, r4
 800c502:	f7ff ff85 	bl	800c410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800c506:	f107 0308 	add.w	r3, r7, #8
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 fe24 	bl	800d158 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800c51c:	bf00      	nop
 800c51e:	3724      	adds	r7, #36	; 0x24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd90      	pop	{r4, r7, pc}
 800c524:	0800c529 	.word	0x0800c529

0800c528 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af02      	add	r7, sp, #8
 800c52e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c53c:	461a      	mov	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	4b04      	ldr	r3, [pc, #16]	; (800c558 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 800c548:	4804      	ldr	r0, [pc, #16]	; (800c55c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 800c54a:	f000 f9c9 	bl	800c8e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	20011b7c 	.word	0x20011b7c
 800c55c:	20011b78 	.word	0x20011b78

0800c560 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
{
 800c560:	b590      	push	{r4, r7, lr}
 800c562:	b089      	sub	sp, #36	; 0x24
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenCoverTransitionEastImpl);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800c56e:	4b10      	ldr	r3, [pc, #64]	; (800c5b0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x50>)
 800c570:	61bb      	str	r3, [r7, #24]
 800c572:	2300      	movs	r3, #0
 800c574:	61fb      	str	r3, [r7, #28]
 800c576:	f107 0008 	add.w	r0, r7, #8
 800c57a:	f107 0318 	add.w	r3, r7, #24
 800c57e:	cb0c      	ldmia	r3, {r2, r3}
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	f000 f85f 	bl	800c644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800c586:	f107 0308 	add.w	r3, r7, #8
 800c58a:	4619      	mov	r1, r3
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7ff ff3f 	bl	800c410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800c592:	f107 0308 	add.w	r3, r7, #8
 800c596:	4618      	mov	r0, r3
 800c598:	f000 fdde 	bl	800d158 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800c5a8:	bf00      	nop
 800c5aa:	3724      	adds	r7, #36	; 0x24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd90      	pop	{r4, r7, pc}
 800c5b0:	0800c5b5 	.word	0x0800c5b5

0800c5b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x30>)
 800c5d4:	4804      	ldr	r0, [pc, #16]	; (800c5e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x34>)
 800c5d6:	f000 faa1 	bl	800cb1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800c5da:	bf00      	nop
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20011b7c 	.word	0x20011b7c
 800c5e8:	20011b78 	.word	0x20011b78

0800c5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	4a04      	ldr	r2, [pc, #16]	; (800c608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	080231bc 	.word	0x080231bc

0800c60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ffe8 	bl	800c5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800c61c:	4a08      	ldr	r2, [pc, #32]	; (800c640 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	605a      	str	r2, [r3, #4]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	609a      	str	r2, [r3, #8]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	60da      	str	r2, [r3, #12]
    {
    }
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	08023064 	.word	0x08023064

0800c644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	4639      	mov	r1, r7
 800c650:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff ffc8 	bl	800c5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800c65c:	4a08      	ldr	r2, [pc, #32]	; (800c680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	601a      	str	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	605a      	str	r2, [r3, #4]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3308      	adds	r3, #8
 800c66c:	463a      	mov	r2, r7
 800c66e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c672:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	08023064 	.word	0x08023064

0800c684 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7ff fcb8 	bl	800c004 <_ZN8touchgfx10TransitionC1Ev>
 800c694:	4a03      	ldr	r2, [pc, #12]	; (800c6a4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4618      	mov	r0, r3
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	08022ff4 	.word	0x08022ff4

0800c6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800c6a8:	b590      	push	{r4, r7, lr}
 800c6aa:	b08f      	sub	sp, #60	; 0x3c
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	689a      	ldr	r2, [r3, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3320      	adds	r3, #32
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4798      	blx	r3
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800c6ce:	d205      	bcs.n	800c6dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800c6d0:	4b7e      	ldr	r3, [pc, #504]	; (800c8cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800c6d2:	4a7f      	ldr	r2, [pc, #508]	; (800c8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800c6d4:	21a3      	movs	r1, #163	; 0xa3
 800c6d6:	487f      	ldr	r0, [pc, #508]	; (800c8d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800c6d8:	f014 fc16 	bl	8020f08 <__assert_func>
 800c6dc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3320      	adds	r3, #32
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	4798      	blx	r3
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b0f      	cmp	r3, #15
 800c6f4:	d805      	bhi.n	800c702 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800c6f6:	4b78      	ldr	r3, [pc, #480]	; (800c8d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800c6f8:	4a75      	ldr	r2, [pc, #468]	; (800c8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800c6fa:	21a4      	movs	r1, #164	; 0xa4
 800c6fc:	4875      	ldr	r0, [pc, #468]	; (800c8d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800c6fe:	f014 fc03 	bl	8020f08 <__assert_func>
 800c702:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68da      	ldr	r2, [r3, #12]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3320      	adds	r3, #32
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4610      	mov	r0, r2
 800c714:	4798      	blx	r3
 800c716:	4603      	mov	r3, r0
 800c718:	2b0b      	cmp	r3, #11
 800c71a:	d805      	bhi.n	800c728 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800c71c:	4b6f      	ldr	r3, [pc, #444]	; (800c8dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800c71e:	4a6c      	ldr	r2, [pc, #432]	; (800c8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800c720:	21a5      	movs	r1, #165	; 0xa5
 800c722:	486c      	ldr	r0, [pc, #432]	; (800c8d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800c724:	f014 fbf0 	bl	8020f08 <__assert_func>
 800c728:	bf00      	nop
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	627b      	str	r3, [r7, #36]	; 0x24
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800c736:	f009 f9b3 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800c73a:	4603      	mov	r3, r0
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff fbe7 	bl	800bf10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d008      	beq.n	800c75c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	6a3b      	ldr	r3, [r7, #32]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	330c      	adds	r3, #12
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
    if (*currentTrans)
 800c75c:	6a3b      	ldr	r3, [r7, #32]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d007      	beq.n	800c774 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4610      	mov	r0, r2
 800c772:	4798      	blx	r3
    if (*currentScreen)
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d008      	beq.n	800c78e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3314      	adds	r3, #20
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4610      	mov	r0, r2
 800c78c:	4798      	blx	r3
    if (*currentPresenter)
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d008      	beq.n	800c7a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
    if (*currentScreen)
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d007      	beq.n	800c7c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
    if (*currentPresenter)
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d008      	beq.n	800c7da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4610      	mov	r0, r2
 800c7d8:	4798      	blx	r3
}
 800c7da:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fab8 	bl	800cd58 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	200c      	movs	r0, #12
 800c7ee:	f7ff f905 	bl	800b9fc <_ZnwjPv>
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7ff ff45 	bl	800c684 <_ZN8touchgfx12NoTransitionC1Ev>
 800c7fa:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	2100      	movs	r1, #0
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fabb 	bl	800cd7e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800c808:	4603      	mov	r3, r0
 800c80a:	4619      	mov	r1, r3
 800c80c:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 800c810:	f7ff f8f4 	bl	800b9fc <_ZnwjPv>
 800c814:	4604      	mov	r4, r0
 800c816:	4620      	mov	r0, r4
 800c818:	f003 f9ce 	bl	800fbb8 <_ZN11Screen1ViewC1Ev>
 800c81c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	2100      	movs	r1, #0
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fabd 	bl	800cda4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800c82a:	4603      	mov	r3, r0
 800c82c:	4619      	mov	r1, r3
 800c82e:	2010      	movs	r0, #16
 800c830:	f7ff f8e4 	bl	800b9fc <_ZnwjPv>
 800c834:	4604      	mov	r4, r0
 800c836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c838:	4620      	mov	r0, r4
 800c83a:	f003 f94f 	bl	800fadc <_ZN16Screen1PresenterC1ER11Screen1View>
 800c83e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c844:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c850:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800c852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	3304      	adds	r3, #4
 800c85c:	e000      	b.n	800c860 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800c85e:	2300      	movs	r3, #0
 800c860:	4619      	mov	r1, r3
 800c862:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c864:	f7ff fcde 	bl	800c224 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	3304      	adds	r3, #4
 800c86c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff fd4b 	bl	800c30a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 faa6 	bl	800cdca <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	61fb      	str	r3, [r7, #28]
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	61bb      	str	r3, [r7, #24]
 800c886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c888:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	330c      	adds	r3, #12
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	69f8      	ldr	r0, [r7, #28]
 800c894:	4798      	blx	r3
    newPresenter->activate();
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	69b8      	ldr	r0, [r7, #24]
 800c89e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800c8a0:	6979      	ldr	r1, [r7, #20]
 800c8a2:	69f8      	ldr	r0, [r7, #28]
 800c8a4:	f00a fdb4 	bl	8017410 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3310      	adds	r3, #16
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6978      	ldr	r0, [r7, #20]
 800c8b2:	4798      	blx	r3
    newTransition->invalidate();
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6978      	ldr	r0, [r7, #20]
 800c8be:	4798      	blx	r3
}
 800c8c0:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800c8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	373c      	adds	r7, #60	; 0x3c
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd90      	pop	{r4, r7, pc}
 800c8cc:	080221e4 	.word	0x080221e4
 800c8d0:	08022274 	.word	0x08022274
 800c8d4:	08022378 	.word	0x08022378
 800c8d8:	080223bc 	.word	0x080223bc
 800c8dc:	08022460 	.word	0x08022460

0800c8e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800c8e0:	b590      	push	{r4, r7, lr}
 800c8e2:	b08f      	sub	sp, #60	; 0x3c
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
 800c8ec:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689a      	ldr	r2, [r3, #8]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	3320      	adds	r3, #32
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
 800c900:	4603      	mov	r3, r0
 800c902:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800c906:	d205      	bcs.n	800c914 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800c908:	4b7f      	ldr	r3, [pc, #508]	; (800cb08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800c90a:	4a80      	ldr	r2, [pc, #512]	; (800cb0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800c90c:	21a3      	movs	r1, #163	; 0xa3
 800c90e:	4880      	ldr	r0, [pc, #512]	; (800cb10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800c910:	f014 fafa 	bl	8020f08 <__assert_func>
 800c914:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3320      	adds	r3, #32
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4610      	mov	r0, r2
 800c926:	4798      	blx	r3
 800c928:	4603      	mov	r3, r0
 800c92a:	2b0f      	cmp	r3, #15
 800c92c:	d805      	bhi.n	800c93a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800c92e:	4b79      	ldr	r3, [pc, #484]	; (800cb14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800c930:	4a76      	ldr	r2, [pc, #472]	; (800cb0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800c932:	21a4      	movs	r1, #164	; 0xa4
 800c934:	4876      	ldr	r0, [pc, #472]	; (800cb10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800c936:	f014 fae7 	bl	8020f08 <__assert_func>
 800c93a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	68da      	ldr	r2, [r3, #12]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3320      	adds	r3, #32
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4610      	mov	r0, r2
 800c94c:	4798      	blx	r3
 800c94e:	4603      	mov	r3, r0
 800c950:	2b3f      	cmp	r3, #63	; 0x3f
 800c952:	d805      	bhi.n	800c960 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800c954:	4b70      	ldr	r3, [pc, #448]	; (800cb18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800c956:	4a6d      	ldr	r2, [pc, #436]	; (800cb0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800c958:	21a5      	movs	r1, #165	; 0xa5
 800c95a:	486d      	ldr	r0, [pc, #436]	; (800cb10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800c95c:	f014 fad4 	bl	8020f08 <__assert_func>
 800c960:	bf00      	nop
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	62bb      	str	r3, [r7, #40]	; 0x28
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	627b      	str	r3, [r7, #36]	; 0x24
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800c96e:	f009 f897 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800c972:	4603      	mov	r3, r0
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff facb 	bl	800bf10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d008      	beq.n	800c994 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	330c      	adds	r3, #12
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4610      	mov	r0, r2
 800c992:	4798      	blx	r3
    if (*currentTrans)
 800c994:	6a3b      	ldr	r3, [r7, #32]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d007      	beq.n	800c9ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	4798      	blx	r3
    if (*currentScreen)
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d008      	beq.n	800c9c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3314      	adds	r3, #20
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	4798      	blx	r3
    if (*currentPresenter)
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	3304      	adds	r3, #4
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4610      	mov	r0, r2
 800c9de:	4798      	blx	r3
    if (*currentScreen)
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d007      	beq.n	800c9f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	4798      	blx	r3
    if (*currentPresenter)
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d008      	beq.n	800ca12 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4610      	mov	r0, r2
 800ca10:	4798      	blx	r3
}
 800ca12:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	2100      	movs	r1, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 f9e3 	bl	800cde6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4619      	mov	r1, r3
 800ca24:	2040      	movs	r0, #64	; 0x40
 800ca26:	f7fe ffe9 	bl	800b9fc <_ZnwjPv>
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	2114      	movs	r1, #20
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 fa0e 	bl	800ce50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800ca34:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 f99e 	bl	800cd7e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800ca42:	4603      	mov	r3, r0
 800ca44:	4619      	mov	r1, r3
 800ca46:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 800ca4a:	f7fe ffd7 	bl	800b9fc <_ZnwjPv>
 800ca4e:	4604      	mov	r4, r0
 800ca50:	4620      	mov	r0, r4
 800ca52:	f003 f8b1 	bl	800fbb8 <_ZN11Screen1ViewC1Ev>
 800ca56:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 f9a0 	bl	800cda4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800ca64:	4603      	mov	r3, r0
 800ca66:	4619      	mov	r1, r3
 800ca68:	2010      	movs	r0, #16
 800ca6a:	f7fe ffc7 	bl	800b9fc <_ZnwjPv>
 800ca6e:	4604      	mov	r4, r0
 800ca70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca72:	4620      	mov	r0, r4
 800ca74:	f003 f832 	bl	800fadc <_ZN16Screen1PresenterC1ER11Screen1View>
 800ca78:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca7e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca84:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca8a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ca8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d002      	beq.n	800ca98 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	3304      	adds	r3, #4
 800ca96:	e000      	b.n	800ca9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ca9e:	f7ff fbc1 	bl	800c224 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	3304      	adds	r3, #4
 800caa6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff fc2e 	bl	800c30a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 f989 	bl	800cdca <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	61fb      	str	r3, [r7, #28]
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	61bb      	str	r3, [r7, #24]
 800cac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	330c      	adds	r3, #12
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	69f8      	ldr	r0, [r7, #28]
 800cace:	4798      	blx	r3
    newPresenter->activate();
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	69b8      	ldr	r0, [r7, #24]
 800cad8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800cada:	6979      	ldr	r1, [r7, #20]
 800cadc:	69f8      	ldr	r0, [r7, #28]
 800cade:	f00a fc97 	bl	8017410 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3310      	adds	r3, #16
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6978      	ldr	r0, [r7, #20]
 800caec:	4798      	blx	r3
    newTransition->invalidate();
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3314      	adds	r3, #20
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6978      	ldr	r0, [r7, #20]
 800caf8:	4798      	blx	r3
}
 800cafa:	bf00      	nop
    return newPresenter;
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	373c      	adds	r7, #60	; 0x3c
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd90      	pop	{r4, r7, pc}
 800cb06:	bf00      	nop
 800cb08:	080221e4 	.word	0x080221e4
 800cb0c:	08022504 	.word	0x08022504
 800cb10:	08022378 	.word	0x08022378
 800cb14:	080223bc 	.word	0x080223bc
 800cb18:	08022460 	.word	0x08022460

0800cb1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cb1c:	b590      	push	{r4, r7, lr}
 800cb1e:	b08f      	sub	sp, #60	; 0x3c
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	689a      	ldr	r2, [r3, #8]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3320      	adds	r3, #32
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4610      	mov	r0, r2
 800cb3a:	4798      	blx	r3
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800cb42:	d205      	bcs.n	800cb50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800cb44:	4b7f      	ldr	r3, [pc, #508]	; (800cd44 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cb46:	4a80      	ldr	r2, [pc, #512]	; (800cd48 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cb48:	21a3      	movs	r1, #163	; 0xa3
 800cb4a:	4880      	ldr	r0, [pc, #512]	; (800cd4c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cb4c:	f014 f9dc 	bl	8020f08 <__assert_func>
 800cb50:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3320      	adds	r3, #32
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4610      	mov	r0, r2
 800cb62:	4798      	blx	r3
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b0f      	cmp	r3, #15
 800cb68:	d805      	bhi.n	800cb76 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800cb6a:	4b79      	ldr	r3, [pc, #484]	; (800cd50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800cb6c:	4a76      	ldr	r2, [pc, #472]	; (800cd48 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cb6e:	21a4      	movs	r1, #164	; 0xa4
 800cb70:	4876      	ldr	r0, [pc, #472]	; (800cd4c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cb72:	f014 f9c9 	bl	8020f08 <__assert_func>
 800cb76:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68da      	ldr	r2, [r3, #12]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	3320      	adds	r3, #32
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4610      	mov	r0, r2
 800cb88:	4798      	blx	r3
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b37      	cmp	r3, #55	; 0x37
 800cb8e:	d805      	bhi.n	800cb9c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800cb90:	4b70      	ldr	r3, [pc, #448]	; (800cd54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800cb92:	4a6d      	ldr	r2, [pc, #436]	; (800cd48 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cb94:	21a5      	movs	r1, #165	; 0xa5
 800cb96:	486d      	ldr	r0, [pc, #436]	; (800cd4c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cb98:	f014 f9b6 	bl	8020f08 <__assert_func>
 800cb9c:	bf00      	nop
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800cbaa:	f008 ff79 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7ff f9ad 	bl	800bf10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800cbb6:	6a3b      	ldr	r3, [r7, #32]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d008      	beq.n	800cbd0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	330c      	adds	r3, #12
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4798      	blx	r3
    if (*currentTrans)
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	6a3b      	ldr	r3, [r7, #32]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4798      	blx	r3
    if (*currentScreen)
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d008      	beq.n	800cc02 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800cbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3314      	adds	r3, #20
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4610      	mov	r0, r2
 800cc00:	4798      	blx	r3
    if (*currentPresenter)
 800cc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d008      	beq.n	800cc1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3304      	adds	r3, #4
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4610      	mov	r0, r2
 800cc1a:	4798      	blx	r3
    if (*currentScreen)
 800cc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d007      	beq.n	800cc34 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800cc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4610      	mov	r0, r2
 800cc32:	4798      	blx	r3
    if (*currentPresenter)
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d008      	beq.n	800cc4e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3308      	adds	r3, #8
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	4798      	blx	r3
}
 800cc4e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 f94c 	bl	800cef4 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	4619      	mov	r1, r3
 800cc60:	2038      	movs	r0, #56	; 0x38
 800cc62:	f7fe fecb 	bl	800b9fc <_ZnwjPv>
 800cc66:	4604      	mov	r4, r0
 800cc68:	2114      	movs	r1, #20
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f000 f98a 	bl	800cf84 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800cc70:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	2100      	movs	r1, #0
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 f9c7 	bl	800d00c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	4619      	mov	r1, r3
 800cc82:	f44f 7048 	mov.w	r0, #800	; 0x320
 800cc86:	f7fe feb9 	bl	800b9fc <_ZnwjPv>
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f003 f871 	bl	800fd74 <_ZN11Screen2ViewC1Ev>
 800cc92:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	2100      	movs	r1, #0
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 f9c9 	bl	800d032 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800cca0:	4603      	mov	r3, r0
 800cca2:	4619      	mov	r1, r3
 800cca4:	2010      	movs	r0, #16
 800cca6:	f7fe fea9 	bl	800b9fc <_ZnwjPv>
 800ccaa:	4604      	mov	r4, r0
 800ccac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f003 f808 	bl	800fcc4 <_ZN16Screen2PresenterC1ER11Screen2View>
 800ccb4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccba:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccc0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800ccce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	e000      	b.n	800ccd6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ccda:	f7ff faa3 	bl	800c224 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	3304      	adds	r3, #4
 800cce2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7ff fb10 	bl	800c30a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 f9b2 	bl	800d058 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	61fb      	str	r3, [r7, #28]
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	61bb      	str	r3, [r7, #24]
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfe:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	330c      	adds	r3, #12
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	69f8      	ldr	r0, [r7, #28]
 800cd0a:	4798      	blx	r3
    newPresenter->activate();
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69b8      	ldr	r0, [r7, #24]
 800cd14:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800cd16:	6979      	ldr	r1, [r7, #20]
 800cd18:	69f8      	ldr	r0, [r7, #28]
 800cd1a:	f00a fb79 	bl	8017410 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3310      	adds	r3, #16
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6978      	ldr	r0, [r7, #20]
 800cd28:	4798      	blx	r3
    newTransition->invalidate();
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	3314      	adds	r3, #20
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	6978      	ldr	r0, [r7, #20]
 800cd34:	4798      	blx	r3
}
 800cd36:	bf00      	nop
    return newPresenter;
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	373c      	adds	r7, #60	; 0x3c
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd90      	pop	{r4, r7, pc}
 800cd42:	bf00      	nop
 800cd44:	080221e4 	.word	0x080221e4
 800cd48:	0802261c 	.word	0x0802261c
 800cd4c:	08022378 	.word	0x08022378
 800cd50:	080223bc 	.word	0x080223bc
 800cd54:	08022460 	.word	0x08022460

0800cd58 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3324      	adds	r3, #36	; 0x24
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	887a      	ldrh	r2, [r7, #2]
 800cd6e:	4611      	mov	r1, r2
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	4798      	blx	r3
 800cd74:	4603      	mov	r3, r0
    }
 800cd76:	4618      	mov	r0, r3
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3324      	adds	r3, #36	; 0x24
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	887a      	ldrh	r2, [r7, #2]
 800cd94:	4611      	mov	r1, r2
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	4798      	blx	r3
 800cd9a:	4603      	mov	r3, r0
    }
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3324      	adds	r3, #36	; 0x24
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	887a      	ldrh	r2, [r7, #2]
 800cdba:	4611      	mov	r1, r2
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	4798      	blx	r3
 800cdc0:	4603      	mov	r3, r0
    }
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800cdda:	bf00      	nop
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b082      	sub	sp, #8
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3324      	adds	r3, #36	; 0x24
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	887a      	ldrh	r2, [r7, #2]
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	4798      	blx	r3
 800ce02:	4603      	mov	r3, r0
    }
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	4a05      	ldr	r2, [pc, #20]	; (800ce2c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff fa95 	bl	800c34c <_ZN8touchgfx6WidgetD1Ev>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	08023e54 	.word	0x08023e54

0800ce30 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff ffe7 	bl	800ce0c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800ce3e:	212c      	movs	r1, #44	; 0x2c
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f014 f832 	bl	8020eaa <_ZdlPvj>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af02      	add	r7, sp, #8
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          snapshot(),
          animationSteps(transitionSteps),
          animationCounter(0),
          relativeValue(0)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff f8d0 	bl	800c004 <_ZN8touchgfx10TransitionC1Ev>
 800ce64:	4a1f      	ldr	r2, [pc, #124]	; (800cee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x94>)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	330c      	adds	r3, #12
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f006 fb6a 	bl	8013548 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	78fa      	ldrb	r2, [r7, #3]
 800ce78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	879a      	strh	r2, [r3, #60]	; 0x3c
    {
        if (!HAL::USE_ANIMATION_STORAGE)
 800ce8a:	4b17      	ldr	r3, [pc, #92]	; (800cee8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x98>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	f083 0301 	eor.w	r3, r3, #1
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x50>
        {
            // No animation storage, don't slide
            done = true;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	721a      	strb	r2, [r3, #8]
            return;
 800ce9e:	e01b      	b.n	800ced8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x88>
        }

        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f103 000c 	add.w	r0, r3, #12
 800cea6:	4b11      	ldr	r3, [pc, #68]	; (800ceec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b21a      	sxth	r2, r3
 800ceac:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xa0>)
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	b21b      	sxth	r3, r3
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	2100      	movs	r1, #0
 800ceba:	f7fe fe5d 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
        snapshot.makeSnapshot();
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	330c      	adds	r3, #12
 800cec2:	4618      	mov	r0, r3
 800cec4:	f006 fac3 	bl	801344e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

        switch (templateDirection)
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800cec8:	4b08      	ldr	r3, [pc, #32]	; (800ceec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	425b      	negs	r3, r3
 800cece:	b29b      	uxth	r3, r3
 800ced0:	b21a      	sxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	875a      	strh	r2, [r3, #58]	; 0x3a
            break;
 800ced6:	bf00      	nop
            break;
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
            break;
        }
    }
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	08022fac 	.word	0x08022fac
 800cee8:	20011b39 	.word	0x20011b39
 800ceec:	20011b2e 	.word	0x20011b2e
 800cef0:	20011b30 	.word	0x20011b30

0800cef4 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	460b      	mov	r3, r1
 800cefe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	3324      	adds	r3, #36	; 0x24
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	887a      	ldrh	r2, [r7, #2]
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	4798      	blx	r3
 800cf10:	4603      	mov	r3, r0
    }
 800cf12:	4618      	mov	r0, r3
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7ff f9fe 	bl	800c328 <_ZN8touchgfx6WidgetC1Ev>
 800cf2c:	4a03      	ldr	r2, [pc, #12]	; (800cf3c <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4618      	mov	r0, r3
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	080230ec 	.word	0x080230ec

0800cf40 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	4a05      	ldr	r2, [pc, #20]	; (800cf60 <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff f9fb 	bl	800c34c <_ZN8touchgfx6WidgetD1Ev>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	080230ec 	.word	0x080230ec

0800cf64 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7ff ffe7 	bl	800cf40 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800cf72:	2128      	movs	r1, #40	; 0x28
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f013 ff98 	bl	8020eaa <_ZdlPvj>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af02      	add	r7, sp, #8
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff f836 	bl	800c004 <_ZN8touchgfx10TransitionC1Ev>
 800cf98:	4a19      	ldr	r2, [pc, #100]	; (800d000 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	78fa      	ldrb	r2, [r7, #3]
 800cfa2:	725a      	strb	r2, [r3, #9]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	729a      	strb	r2, [r3, #10]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	81da      	strh	r2, [r3, #14]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3310      	adds	r3, #16
 800cfb4:	2228      	movs	r2, #40	; 0x28
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f014 f92b 	bl	8021214 <memset>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	3310      	adds	r3, #16
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7ff ffaa 	bl	800cf1c <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800cfc8:	4b0e      	ldr	r3, [pc, #56]	; (800d004 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	425b      	negs	r3, r3
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	b21a      	sxth	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	819a      	strh	r2, [r3, #12]
            break;
 800cfd6:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f103 0010 	add.w	r0, r3, #16
 800cfde:	4b09      	ldr	r3, [pc, #36]	; (800d004 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	b21a      	sxth	r2, r3
 800cfe4:	4b08      	ldr	r3, [pc, #32]	; (800d008 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x84>)
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	b21b      	sxth	r3, r3
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	4613      	mov	r3, r2
 800cfee:	2200      	movs	r2, #0
 800cff0:	2100      	movs	r1, #0
 800cff2:	f7fe fdc1 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	08022fd0 	.word	0x08022fd0
 800d004:	20011b2e 	.word	0x20011b2e
 800d008:	20011b30 	.word	0x20011b30

0800d00c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3324      	adds	r3, #36	; 0x24
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	887a      	ldrh	r2, [r7, #2]
 800d022:	4611      	mov	r1, r2
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	4798      	blx	r3
 800d028:	4603      	mov	r3, r0
    }
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800d032:	b580      	push	{r7, lr}
 800d034:	b082      	sub	sp, #8
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	460b      	mov	r3, r1
 800d03c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3324      	adds	r3, #36	; 0x24
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	887a      	ldrh	r2, [r7, #2]
 800d048:	4611      	mov	r1, r2
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	4798      	blx	r3
 800d04e:	4603      	mov	r3, r0
    }
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d068:	bf00      	nop
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	4a08      	ldr	r2, [pc, #32]	; (800d0a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	330c      	adds	r3, #12
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff fec0 	bl	800ce0c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe ffce 	bl	800c030 <_ZN8touchgfx10TransitionD1Ev>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	08022fac 	.word	0x08022fac

0800d0a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff ffe1 	bl	800d074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800d0b2:	2140      	movs	r1, #64	; 0x40
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f013 fef8 	bl	8020eaa <_ZdlPvj>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	4a08      	ldr	r2, [pc, #32]	; (800d0f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3310      	adds	r3, #16
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff ff32 	bl	800cf40 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe ffa6 	bl	800c030 <_ZN8touchgfx10TransitionD1Ev>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	08022fd0 	.word	0x08022fd0

0800d0f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff ffe1 	bl	800d0c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800d102:	2138      	movs	r1, #56	; 0x38
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f013 fed0 	bl	8020eaa <_ZdlPvj>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <_ZN8touchgfx12NoTransitionD1Ev>:
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	4a05      	ldr	r2, [pc, #20]	; (800d134 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4618      	mov	r0, r3
 800d126:	f7fe ff83 	bl	800c030 <_ZN8touchgfx10TransitionD1Ev>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	08022ff4 	.word	0x08022ff4

0800d138 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7ff ffe7 	bl	800d114 <_ZN8touchgfx12NoTransitionD1Ev>
 800d146:	210c      	movs	r1, #12
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f013 feae 	bl	8020eaa <_ZdlPvj>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	4a05      	ldr	r2, [pc, #20]	; (800d178 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	601a      	str	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fedf 	bl	800bf2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	08023064 	.word	0x08023064

0800d17c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff ffe7 	bl	800d158 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d18a:	2110      	movs	r1, #16
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f013 fe8c 	bl	8020eaa <_ZdlPvj>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4618      	mov	r0, r3
 800d196:	3708      	adds	r7, #8
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container and a SnapshotWidget with a snapshot of the previous Screen. The direction
     * of the transition determines the direction the contents of the container and the
     * SnapshotWidget moves.
     */
    virtual void handleTickEvent()
 800d19c:	b590      	push	{r4, r7, lr}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe ff62 	bl	800c070 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        if (animationCounter > animationSteps)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d907      	bls.n	800d1dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
        {
            // Final step: stop the animation
            done = true;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            return;
 800d1da:	e05f      	b.n	800d29c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x100>
        }

        // Calculate value in [0;targetValue]
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d1e2:	b298      	uxth	r0, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	f00a f912 	bl	801741c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	81fb      	strh	r3, [r7, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800d1fc:	89fb      	ldrh	r3, [r7, #14]
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	b29b      	uxth	r3, r3
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00b      	beq.n	800d220 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x84>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800d208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dd01      	ble.n	800d214 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x78>
 800d210:	2201      	movs	r2, #1
 800d212:	e001      	b.n	800d218 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x7c>
 800d214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d218:	89fb      	ldrh	r3, [r7, #14]
 800d21a:	4413      	add	r3, r2
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	81fb      	strh	r3, [r7, #14]
        // Move snapshot
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            relativeValue = calculatedValue - snapshot.getX();
 800d220:	89fc      	ldrh	r4, [r7, #14]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	330c      	adds	r3, #12
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe fcc7 	bl	800bbba <_ZNK8touchgfx8Drawable4getXEv>
 800d22c:	4603      	mov	r3, r0
 800d22e:	b29b      	uxth	r3, r3
 800d230:	1ae3      	subs	r3, r4, r3
 800d232:	b29b      	uxth	r3, r3
 800d234:	b21a      	sxth	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	879a      	strh	r2, [r3, #60]	; 0x3c
            break;
 800d23a:	bf00      	nop
            relativeValue = calculatedValue - snapshot.getY();
            break;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	331c      	adds	r3, #28
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4610      	mov	r0, r2
 800d24c:	4798      	blx	r3
 800d24e:	60b8      	str	r0, [r7, #8]
        while (d)
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d018      	beq.n	800d288 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xec>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3330      	adds	r3, #48	; 0x30
 800d25c:	681c      	ldr	r4, [r3, #0]
 800d25e:	68b8      	ldr	r0, [r7, #8]
 800d260:	f7fe fcab 	bl	800bbba <_ZNK8touchgfx8Drawable4getXEv>
 800d264:	4603      	mov	r3, r0
 800d266:	b29a      	uxth	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d26e:	b29b      	uxth	r3, r3
 800d270:	4413      	add	r3, r2
 800d272:	b29b      	uxth	r3, r3
 800d274:	b21b      	sxth	r3, r3
 800d276:	4619      	mov	r1, r3
 800d278:	68b8      	ldr	r0, [r7, #8]
 800d27a:	47a0      	blx	r4
                break;
 800d27c:	bf00      	nop
            case NORTH:
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }
            d = d->getNextSibling();
 800d27e:	68b8      	ldr	r0, [r7, #8]
 800d280:	f7fe fc63 	bl	800bb4a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800d284:	60b8      	str	r0, [r7, #8]
        while (d)
 800d286:	e7e3      	b.n	800d250 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>
        }

        // Entire screen has changed, redraw
        screenContainer->invalidate();
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	461a      	mov	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3314      	adds	r3, #20
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4610      	mov	r0, r2
 800d29a:	4798      	blx	r3
    }
 800d29c:	3714      	adds	r7, #20
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd90      	pop	{r4, r7, pc}
	...

0800d2a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800d2ac:	4b0b      	ldr	r3, [pc, #44]	; (800d2dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00e      	beq.n	800d2d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00a      	beq.n	800d2d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
        {
            screenContainer->remove(snapshot);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6858      	ldr	r0, [r3, #4]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3364      	adds	r3, #100	; 0x64
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	320c      	adds	r2, #12
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	4798      	blx	r3
        }
    }
 800d2d2:	bf00      	nop
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	20011b39 	.word	0x20011b39

0800d2e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe fed4 	bl	800c098 <_ZN8touchgfx10Transition4initEv>

        if (done)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	7a1b      	ldrb	r3, [r3, #8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d131      	bne.n	800d35c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x7c>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	331c      	adds	r3, #28
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4610      	mov	r0, r2
 800d308:	4798      	blx	r3
 800d30a:	60f8      	str	r0, [r7, #12]
        while (d)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d018      	beq.n	800d344 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x64>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3330      	adds	r3, #48	; 0x30
 800d318:	681c      	ldr	r4, [r3, #0]
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f7fe fc4d 	bl	800bbba <_ZNK8touchgfx8Drawable4getXEv>
 800d320:	4603      	mov	r3, r0
 800d322:	b29a      	uxth	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	b29b      	uxth	r3, r3
 800d330:	b21b      	sxth	r3, r3
 800d332:	4619      	mov	r1, r3
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	47a0      	blx	r4
                break;
 800d338:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7fe fc05 	bl	800bb4a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800d340:	60f8      	str	r0, [r7, #12]
        while (d)
 800d342:	e7e3      	b.n	800d30c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x2c>
        }

        screenContainer->add(snapshot);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6858      	ldr	r0, [r3, #4]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3360      	adds	r3, #96	; 0x60
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	320c      	adds	r2, #12
 800d356:	4611      	mov	r1, r2
 800d358:	4798      	blx	r3
 800d35a:	e000      	b.n	800d35e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x7e>
            return;
 800d35c:	bf00      	nop
    }
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	bd90      	pop	{r4, r7, pc}

0800d364 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    /**
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container. The direction of the transition determines the direction the contents of
     * the container moves.
     */
    virtual void handleTickEvent()
 800d364:	b590      	push	{r4, r7, lr}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe fe7e 	bl	800c070 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7a9b      	ldrb	r3, [r3, #10]
 800d378:	3301      	adds	r3, #1
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	729a      	strb	r2, [r3, #10]
        if (animationCounter > animationSteps)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	7a9a      	ldrb	r2, [r3, #10]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7a5b      	ldrb	r3, [r3, #9]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d906      	bls.n	800d39a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	729a      	strb	r2, [r3, #10]
 800d398:	e08c      	b.n	800d4b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x150>
            return;
        }

        const int16_t oldValue = calculatedValue;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	89db      	ldrh	r3, [r3, #14]
 800d39e:	82fb      	strh	r3, [r7, #22]

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	7a9b      	ldrb	r3, [r3, #10]
 800d3a4:	b298      	uxth	r0, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	7a5b      	ldrb	r3, [r3, #9]
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	f00a f832 	bl	801741c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d011      	beq.n	800d3f6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x92>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800d3e0:	2a00      	cmp	r2, #0
 800d3e2:	dd01      	ble.n	800d3e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x84>
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	e001      	b.n	800d3ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x88>
 800d3e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ec:	4413      	add	r3, r2
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	b21a      	sxth	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	81da      	strh	r2, [r3, #14]
        }

        // Convert the calculated value to delta value relative to current moved-to position
        const int16_t relativeValue = calculatedValue - oldValue;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	8afb      	ldrh	r3, [r7, #22]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	b29b      	uxth	r3, r3
 800d404:	82bb      	strh	r3, [r7, #20]

        // The Cover Transition only draws to parts of the non-TFT framebuffer. To avoid glitches
        // In Double buffering mode both framebuffers must be identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	7a9b      	ldrb	r3, [r3, #10]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d109      	bne.n	800d422 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
 800d40e:	4b2b      	ldr	r3, [pc, #172]	; (800d4bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d005      	beq.n	800d422 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800d416:	f008 fb43 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800d41a:	4603      	mov	r3, r0
 800d41c:	4618      	mov	r0, r3
 800d41e:	f008 fb45 	bl	8015aac <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }

        Rect rect;
 800d422:	f107 0308 	add.w	r3, r7, #8
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe faf4 	bl	800ba14 <_ZN8touchgfx4RectC1Ev>
        switch (templateDirection)
        {
        case EAST:
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d432:	b29a      	uxth	r2, r3
 800d434:	4b22      	ldr	r3, [pc, #136]	; (800d4c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x15c>)
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	4413      	add	r3, r2
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	b21b      	sxth	r3, r3
 800d43e:	813b      	strh	r3, [r7, #8]
            rect.y = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	817b      	strh	r3, [r7, #10]
            rect.width = -calculatedValue;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	425b      	negs	r3, r3
 800d44e:	b29b      	uxth	r3, r3
 800d450:	b21b      	sxth	r3, r3
 800d452:	81bb      	strh	r3, [r7, #12]
            rect.height = HAL::DISPLAY_HEIGHT;
 800d454:	4b1b      	ldr	r3, [pc, #108]	; (800d4c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x160>)
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	b21b      	sxth	r3, r3
 800d45a:	81fb      	strh	r3, [r7, #14]
            break;
 800d45c:	bf00      	nop
            rect.y = HAL::DISPLAY_HEIGHT + calculatedValue;
            rect.width = HAL::DISPLAY_WIDTH;
            rect.height = -calculatedValue;
            break;
        }
        Application::getInstance()->invalidateArea(rect);
 800d45e:	f008 fb1f 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800d462:	f107 0308 	add.w	r3, r7, #8
 800d466:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d46a:	f008 fc65 	bl	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>

        // Move children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	331c      	adds	r3, #28
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
 800d480:	6138      	str	r0, [r7, #16]
        while (d)
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d015      	beq.n	800d4b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x150>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3330      	adds	r3, #48	; 0x30
 800d48e:	681c      	ldr	r4, [r3, #0]
 800d490:	6938      	ldr	r0, [r7, #16]
 800d492:	f7fe fb92 	bl	800bbba <_ZNK8touchgfx8Drawable4getXEv>
 800d496:	4603      	mov	r3, r0
 800d498:	b29a      	uxth	r2, r3
 800d49a:	8abb      	ldrh	r3, [r7, #20]
 800d49c:	4413      	add	r3, r2
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	b21b      	sxth	r3, r3
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6938      	ldr	r0, [r7, #16]
 800d4a6:	47a0      	blx	r4
                break;
 800d4a8:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }

            d = d->getNextSibling();
 800d4aa:	6938      	ldr	r0, [r7, #16]
 800d4ac:	f7fe fb4d 	bl	800bb4a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800d4b0:	6138      	str	r0, [r7, #16]
        while (d)
 800d4b2:	e7e6      	b.n	800d482 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x11e>
        }
    }
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd90      	pop	{r4, r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20011b38 	.word	0x20011b38
 800d4c0:	20011b2e 	.word	0x20011b2e
 800d4c4:	20011b30 	.word	0x20011b30

0800d4c8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6858      	ldr	r0, [r3, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3364      	adds	r3, #100	; 0x64
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	3210      	adds	r2, #16
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	4798      	blx	r3
    }
 800d4e6:	bf00      	nop
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800d4ee:	b590      	push	{r4, r7, lr}
 800d4f0:	b085      	sub	sp, #20
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fe fdcd 	bl	800c098 <_ZN8touchgfx10Transition4initEv>

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	331c      	adds	r3, #28
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4610      	mov	r0, r2
 800d50e:	4798      	blx	r3
 800d510:	60f8      	str	r0, [r7, #12]
        while (d)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d018      	beq.n	800d54a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x5c>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3330      	adds	r3, #48	; 0x30
 800d51e:	681c      	ldr	r4, [r3, #0]
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f7fe fb4a 	bl	800bbba <_ZNK8touchgfx8Drawable4getXEv>
 800d526:	4603      	mov	r3, r0
 800d528:	b29a      	uxth	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800d530:	b29b      	uxth	r3, r3
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	b29b      	uxth	r3, r3
 800d536:	b21b      	sxth	r3, r3
 800d538:	4619      	mov	r1, r3
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	47a0      	blx	r4
                break;
 800d53e:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7fe fb02 	bl	800bb4a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800d546:	60f8      	str	r0, [r7, #12]
        while (d)
 800d548:	e7e3      	b.n	800d512 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x24>
        }

        screenContainer->add(solid);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6858      	ldr	r0, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3360      	adds	r3, #96	; 0x60
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	3210      	adds	r2, #16
 800d55c:	4611      	mov	r1, r2
 800d55e:	4798      	blx	r3
    }
 800d560:	bf00      	nop
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	bd90      	pop	{r4, r7, pc}

0800d568 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	68d2      	ldr	r2, [r2, #12]
 800d578:	1052      	asrs	r2, r2, #1
 800d57a:	1899      	adds	r1, r3, r2
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f003 0301 	and.w	r3, r3, #1
 800d584:	2b00      	cmp	r3, #0
 800d586:	d102      	bne.n	800d58e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	e00a      	b.n	800d5a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	68d2      	ldr	r2, [r2, #12]
 800d596:	1052      	asrs	r2, r2, #1
 800d598:	4413      	add	r3, r2
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	6892      	ldr	r2, [r2, #8]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	4798      	blx	r3
    }
 800d5a8:	bf00      	nop
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d010      	beq.n	800d5e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d107      	bne.n	800d5d8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	f003 0301 	and.w	r3, r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d101      	bne.n	800d5d8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e000      	b.n	800d5da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d001      	beq.n	800d5e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e000      	b.n	800d5e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800d5e2:	2300      	movs	r3, #0
    }
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
        : color(col)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	683a      	ldr	r2, [r7, #0]
 800d5fe:	601a      	str	r2, [r3, #0]
    }
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4618      	mov	r0, r3
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800d60e:	b480      	push	{r7}
 800d610:	b083      	sub	sp, #12
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	460b      	mov	r3, r1
 800d618:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	887a      	ldrh	r2, [r7, #2]
 800d61e:	801a      	strh	r2, [r3, #0]
    {
    }
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4618      	mov	r0, r3
 800d624:	370c      	adds	r7, #12
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800d62e:	b480      	push	{r7}
 800d630:	b083      	sub	sp, #12
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	460b      	mov	r3, r1
 800d638:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	78fa      	ldrb	r2, [r7, #3]
 800d63e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800d642:	bf00      	nop
 800d644:	370c      	adds	r7, #12
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
	...

0800d650 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
    {
 800d658:	4a06      	ldr	r2, [pc, #24]	; (800d674 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	3304      	adds	r3, #4
 800d662:	4618      	mov	r0, r3
 800d664:	f000 fdd0 	bl	800e208 <_ZN8touchgfx9ContainerD1Ev>
    }
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	0802433c 	.word	0x0802433c

0800d678 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
    }
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff ffe5 	bl	800d650 <_ZN8touchgfx6ScreenD1Ev>
 800d686:	213c      	movs	r1, #60	; 0x3c
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f013 fc0e 	bl	8020eaa <_ZdlPvj>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4618      	mov	r0, r3
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
    {
    }
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
    {
    }
 800d6b4:	bf00      	nop
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
    {
    }
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
    {
    }
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3304      	adds	r3, #4
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	4618      	mov	r0, r3
 800d712:	f004 fa6d 	bl	8011bf0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d716:	bf00      	nop
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4618      	mov	r0, r3
 800d72c:	2326      	movs	r3, #38	; 0x26
 800d72e:	461a      	mov	r2, r3
 800d730:	2100      	movs	r1, #0
 800d732:	f013 fd6f 	bl	8021214 <memset>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fdf5 	bl	800c328 <_ZN8touchgfx6WidgetC1Ev>
 800d73e:	4a09      	ldr	r2, [pc, #36]	; (800d764 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	22ff      	movs	r2, #255	; 0xff
 800d748:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3328      	adds	r3, #40	; 0x28
 800d750:	2100      	movs	r1, #0
 800d752:	4618      	mov	r0, r3
 800d754:	f7ff ff4c 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	08023f54 	.word	0x08023f54

0800d768 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	683a      	ldr	r2, [r7, #0]
 800d776:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4618      	mov	r0, r3
 800d790:	2326      	movs	r3, #38	; 0x26
 800d792:	461a      	mov	r2, r3
 800d794:	2100      	movs	r1, #0
 800d796:	f013 fd3d 	bl	8021214 <memset>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe fdc3 	bl	800c328 <_ZN8touchgfx6WidgetC1Ev>
 800d7a2:	4a0a      	ldr	r2, [pc, #40]	; (800d7cc <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	629a      	str	r2, [r3, #40]	; 0x28
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff ff37 	bl	800d62e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	08023de4 	.word	0x08023de4

0800d7d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	4a05      	ldr	r2, [pc, #20]	; (800d80c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fe fda5 	bl	800c34c <_ZN8touchgfx6WidgetD1Ev>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	08023de4 	.word	0x08023de4

0800d810 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff ffe7 	bl	800d7ec <_ZN8touchgfx14AbstractButtonD1Ev>
 800d81e:	2130      	movs	r1, #48	; 0x30
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f013 fb42 	bl	8020eaa <_ZdlPvj>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff ffa2 	bl	800d784 <_ZN8touchgfx14AbstractButtonC1Ev>
 800d840:	4a0c      	ldr	r2, [pc, #48]	; (800d874 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	332e      	adds	r3, #46	; 0x2e
 800d84a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d84e:	4618      	mov	r0, r3
 800d850:	f7ff fedd 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	3330      	adds	r3, #48	; 0x30
 800d858:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7ff fed6 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	22ff      	movs	r2, #255	; 0xff
 800d866:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4618      	mov	r0, r3
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	08023fbc 	.word	0x08023fbc

0800d878 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	460b      	mov	r3, r1
 800d882:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800d884:	4a06      	ldr	r2, [pc, #24]	; (800d8a0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	887a      	ldrh	r2, [r7, #2]
 800d88e:	809a      	strh	r2, [r3, #4]
    }
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4618      	mov	r0, r3
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	08022f3c 	.word	0x08022f3c

0800d8a4 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	2326      	movs	r3, #38	; 0x26
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	f013 fcad 	bl	8021214 <memset>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fe fd33 	bl	800c328 <_ZN8touchgfx6WidgetC1Ev>
 800d8c2:	4a16      	ldr	r2, [pc, #88]	; (800d91c <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	3328      	adds	r3, #40	; 0x28
 800d8cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff ffd1 	bl	800d878 <_ZN8touchgfx9TypedTextC1Et>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	3330      	adds	r3, #48	; 0x30
 800d8da:	2100      	movs	r1, #0
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff fe87 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	869a      	strh	r2, [r3, #52]	; 0x34
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	22ff      	movs	r2, #255	; 0xff
 800d8ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	333c      	adds	r3, #60	; 0x3c
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 f8f2 	bl	800daf6 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	08023ec4 	.word	0x08023ec4

0800d920 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800d920:	b590      	push	{r4, r7, lr}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	6178      	str	r0, [r7, #20]
 800d928:	460b      	mov	r3, r1
 800d92a:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d932:	4611      	mov	r1, r2
 800d934:	4618      	mov	r0, r3
 800d936:	f7fe f989 	bl	800bc4c <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3384      	adds	r3, #132	; 0x84
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	697c      	ldr	r4, [r7, #20]
 800d944:	463a      	mov	r2, r7
 800d946:	6979      	ldr	r1, [r7, #20]
 800d948:	4610      	mov	r0, r2
 800d94a:	4798      	blx	r3
 800d94c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800d950:	463a      	mov	r2, r7
 800d952:	ca07      	ldmia	r2, {r0, r1, r2}
 800d954:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800d958:	bf00      	nop
 800d95a:	371c      	adds	r7, #28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd90      	pop	{r4, r7, pc}

0800d960 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800d960:	b590      	push	{r4, r7, lr}
 800d962:	b087      	sub	sp, #28
 800d964:	af00      	add	r7, sp, #0
 800d966:	6178      	str	r0, [r7, #20]
 800d968:	460b      	mov	r3, r1
 800d96a:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7fe f978 	bl	800bc6a <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3384      	adds	r3, #132	; 0x84
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	697c      	ldr	r4, [r7, #20]
 800d984:	463a      	mov	r2, r7
 800d986:	6979      	ldr	r1, [r7, #20]
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
 800d98c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800d990:	463a      	mov	r2, r7
 800d992:	ca07      	ldmia	r2, {r0, r1, r2}
 800d994:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800d998:	bf00      	nop
 800d99a:	371c      	adds	r7, #28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd90      	pop	{r4, r7, pc}

0800d9a0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7fe f832 	bl	800ba14 <_ZN8touchgfx4RectC1Ev>
    }
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	78fa      	ldrb	r2, [r7, #3]
 800d9c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800d9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800d9e4:	687e      	ldr	r6, [r7, #4]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3334      	adds	r3, #52	; 0x34
 800d9ec:	681c      	ldr	r4, [r3, #0]
 800d9ee:	887d      	ldrh	r5, [r7, #2]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 f869 	bl	800dac8 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800d9fa:	4b1d      	ldr	r3, [pc, #116]	; (800da70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d105      	bne.n	800da0e <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800da02:	4b1c      	ldr	r3, [pc, #112]	; (800da74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800da04:	4a1c      	ldr	r2, [pc, #112]	; (800da78 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800da06:	216c      	movs	r1, #108	; 0x6c
 800da08:	481c      	ldr	r0, [pc, #112]	; (800da7c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800da0a:	f013 fa7d 	bl	8020f08 <__assert_func>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	889a      	ldrh	r2, [r3, #4]
 800da16:	4b1a      	ldr	r3, [pc, #104]	; (800da80 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800da18:	881b      	ldrh	r3, [r3, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	bf34      	ite	cc
 800da1e:	2301      	movcc	r3, #1
 800da20:	2300      	movcs	r3, #0
 800da22:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800da24:	2b00      	cmp	r3, #0
 800da26:	d105      	bne.n	800da34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800da28:	4b16      	ldr	r3, [pc, #88]	; (800da84 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800da2a:	4a13      	ldr	r2, [pc, #76]	; (800da78 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800da2c:	216d      	movs	r1, #109	; 0x6d
 800da2e:	4813      	ldr	r0, [pc, #76]	; (800da7c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800da30:	f013 fa6a 	bl	8020f08 <__assert_func>
 800da34:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800da36:	4b14      	ldr	r3, [pc, #80]	; (800da88 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4b0d      	ldr	r3, [pc, #52]	; (800da70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800da3c:	6819      	ldr	r1, [r3, #0]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	889b      	ldrh	r3, [r3, #4]
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	440b      	add	r3, r1
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	4413      	add	r3, r2
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	3230      	adds	r2, #48	; 0x30
 800da52:	6812      	ldr	r2, [r2, #0]
 800da54:	4618      	mov	r0, r3
 800da56:	4790      	blx	r2
 800da58:	4603      	mov	r3, r0
 800da5a:	1aeb      	subs	r3, r5, r3
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	b21b      	sxth	r3, r3
 800da60:	4619      	mov	r1, r3
 800da62:	4630      	mov	r0, r6
 800da64:	47a0      	blx	r4
    }
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6e:	bf00      	nop
 800da70:	20011b8c 	.word	0x20011b8c
 800da74:	08022734 	.word	0x08022734
 800da78:	08022778 	.word	0x08022778
 800da7c:	080227b4 	.word	0x080227b4
 800da80:	20011b90 	.word	0x20011b90
 800da84:	080227f8 	.word	0x080227f8
 800da88:	20011b94 	.word	0x20011b94

0800da8c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	807b      	strh	r3, [r7, #2]
 800da98:	4613      	mov	r3, r2
 800da9a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3330      	adds	r3, #48	; 0x30
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800daaa:	4610      	mov	r0, r2
 800daac:	4798      	blx	r3
        setBaselineY(baselineY);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	3364      	adds	r3, #100	; 0x64
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800daba:	4611      	mov	r1, r2
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	4798      	blx	r3
    }
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	3328      	adds	r3, #40	; 0x28
    }
 800dad4:	4618      	mov	r0, r3
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dae8:	2300      	movs	r3, #0
    }
 800daea:	4618      	mov	r0, r3
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af02      	add	r7, sp, #8
 800dafc:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f04f 33ff 	mov.w	r3, #4294967295
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	f04f 33ff 	mov.w	r3, #4294967295
 800db0a:	2200      	movs	r2, #0
 800db0c:	2100      	movs	r1, #0
 800db0e:	f7fd ff98 	bl	800ba42 <_ZN8touchgfx4RectC1Essss>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	609a      	str	r2, [r3, #8]
        {
        }
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	4a08      	ldr	r2, [pc, #32]	; (800db50 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	601a      	str	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	3328      	adds	r3, #40	; 0x28
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd fd7a 	bl	800b630 <_ZN8touchgfx9TypedTextD1Ev>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fe fc04 	bl	800c34c <_ZN8touchgfx6WidgetD1Ev>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	08023ec4 	.word	0x08023ec4

0800db54 <_ZN8touchgfx8TextAreaD0Ev>:
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff ffe1 	bl	800db24 <_ZN8touchgfx8TextAreaD1Ev>
 800db62:	2148      	movs	r1, #72	; 0x48
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f013 f9a0 	bl	8020eaa <_ZdlPvj>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4618      	mov	r0, r3
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
        : TextArea()
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff fe90 	bl	800d8a4 <_ZN8touchgfx8TextAreaC1Ev>
 800db84:	4a03      	ldr	r2, [pc, #12]	; (800db94 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	601a      	str	r2, [r3, #0]
    {
    }
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	08024030 	.word	0x08024030

0800db98 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fd ffbe 	bl	800bb24 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ff9b 	bl	800daf6 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	4a05      	ldr	r2, [pc, #20]	; (800dbe8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7ff ffa3 	bl	800db24 <_ZN8touchgfx8TextAreaD1Ev>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	08024030 	.word	0x08024030

0800dbec <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7ff ffe7 	bl	800dbc8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800dbfa:	2148      	movs	r1, #72	; 0x48
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f013 f954 	bl	8020eaa <_ZdlPvj>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4618      	mov	r0, r3
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff ffac 	bl	800db74 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800dc1c:	4a05      	ldr	r2, [pc, #20]	; (800dc34 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	0802327c 	.word	0x0802327c

0800dc38 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800dc60:	4618      	mov	r0, r3
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff ffdd 	bl	800dc38 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800dc7e:	bf00      	nop
 800dc80:	3708      	adds	r7, #8
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b082      	sub	sp, #8
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800dc8e:	f007 ff07 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800dc92:	4603      	mov	r3, r0
    }
 800dc94:	4618      	mov	r0, r3
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	4a05      	ldr	r2, [pc, #20]	; (800dcbc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	601a      	str	r2, [r3, #0]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7ff fccf 	bl	800d650 <_ZN8touchgfx6ScreenD1Ev>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	08023248 	.word	0x08023248

0800dcc0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7ff ffe7 	bl	800dc9c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800dcce:	2140      	movs	r1, #64	; 0x40
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f013 f8ea 	bl	8020eaa <_ZdlPvj>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b09d      	sub	sp, #116	; 0x74
 800dce4:	af02      	add	r7, sp, #8
 800dce6:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 f9e2 	bl	800e0b4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800dcf0:	4ab8      	ldr	r2, [pc, #736]	; (800dfd4 <_ZN15Screen1ViewBaseC1Ev+0x2f4>)
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	3340      	adds	r3, #64	; 0x40
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7ff fd10 	bl	800d720 <_ZN8touchgfx3BoxC1Ev>
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	336c      	adds	r3, #108	; 0x6c
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7ff fd0b 	bl	800d720 <_ZN8touchgfx3BoxC1Ev>
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	3398      	adds	r3, #152	; 0x98
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff fd8e 	bl	800d830 <_ZN8touchgfx6ButtonC1Ev>
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	33cc      	adds	r3, #204	; 0xcc
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7ff ff77 	bl	800dc0c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f503 709e 	add.w	r0, r3, #316	; 0x13c
 800dd24:	4bac      	ldr	r3, [pc, #688]	; (800dfd8 <_ZN15Screen1ViewBaseC1Ev+0x2f8>)
 800dd26:	623b      	str	r3, [r7, #32]
 800dd28:	2300      	movs	r3, #0
 800dd2a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd2c:	f107 0320 	add.w	r3, r7, #32
 800dd30:	cb0c      	ldmia	r3, {r2, r3}
 800dd32:	6979      	ldr	r1, [r7, #20]
 800dd34:	f000 f9e4 	bl	800e100 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800dd3e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800dd48:	2200      	movs	r2, #0
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	f7fd ff14 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800dd56:	2300      	movs	r3, #0
 800dd58:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800dd68:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800dd6c:	041b      	lsls	r3, r3, #16
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dd74:	021b      	lsls	r3, r3, #8
 800dd76:	431a      	orrs	r2, r3
 800dd78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800dd82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd86:	4611      	mov	r1, r2
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff fc31 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800dd8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd90:	4619      	mov	r1, r3
 800dd92:	4620      	mov	r0, r4
 800dd94:	f7ff fce8 	bl	800d768 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	3340      	adds	r3, #64	; 0x40
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f7ff fcad 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 272);
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800ddac:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	2100      	movs	r1, #0
 800ddba:	f7fd fedd 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(245, 17, 17));
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ddc4:	23f5      	movs	r3, #245	; 0xf5
 800ddc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800ddca:	2311      	movs	r3, #17
 800ddcc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800ddd0:	2311      	movs	r3, #17
 800ddd2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800ddd6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ddda:	041b      	lsls	r3, r3, #16
 800dddc:	461a      	mov	r2, r3
 800ddde:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800dde2:	021b      	lsls	r3, r3, #8
 800dde4:	431a      	orrs	r2, r3
 800dde6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800ddea:	4313      	orrs	r3, r2
 800ddec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ddf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7ff fbfa 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800ddfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddfe:	4619      	mov	r1, r3
 800de00:	4620      	mov	r0, r4
 800de02:	f7ff fcb1 	bl	800d768 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800de06:	697a      	ldr	r2, [r7, #20]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	336c      	adds	r3, #108	; 0x6c
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7ff fc76 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(120, 171);
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	3398      	adds	r3, #152	; 0x98
 800de18:	22ab      	movs	r2, #171	; 0xab
 800de1a:	2178      	movs	r1, #120	; 0x78
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fd fef7 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800de28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de2c:	2101      	movs	r1, #1
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff fbed 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800de34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800de38:	2102      	movs	r1, #2
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7ff fbe7 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800de40:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800de44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de48:	4619      	mov	r1, r3
 800de4a:	4620      	mov	r0, r4
 800de4c:	f005 ff5e 	bl	8013d0c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800de5c:	4619      	mov	r1, r3
 800de5e:	4610      	mov	r0, r2
 800de60:	f7ff fcb6 	bl	800d7d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800de64:	697a      	ldr	r2, [r7, #20]
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	3398      	adds	r3, #152	; 0x98
 800de6a:	4619      	mov	r1, r3
 800de6c:	4610      	mov	r0, r2
 800de6e:	f7ff fc47 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setPosition(18, 83, 448, 36);
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800de78:	2324      	movs	r3, #36	; 0x24
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800de80:	2253      	movs	r2, #83	; 0x53
 800de82:	2112      	movs	r1, #18
 800de84:	f7fd fe78 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800de8e:	2300      	movs	r3, #0
 800de90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800de94:	2300      	movs	r3, #0
 800de96:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800de9a:	2300      	movs	r3, #0
 800de9c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800dea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dea4:	041b      	lsls	r3, r3, #16
 800dea6:	461a      	mov	r2, r3
 800dea8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800deac:	021b      	lsls	r3, r3, #8
 800deae:	431a      	orrs	r2, r3
 800deb0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800deb4:	4313      	orrs	r3, r2
 800deb6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800deba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800debe:	4611      	mov	r1, r2
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7ff fb95 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800dec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec8:	65bc      	str	r4, [r7, #88]	; 0x58
 800deca:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800decc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dece:	69fa      	ldr	r2, [r7, #28]
 800ded0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ded2:	bf00      	nop
    textArea1.setLinespacing(0);
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	33cc      	adds	r3, #204	; 0xcc
 800ded8:	663b      	str	r3, [r7, #96]	; 0x60
 800deda:	2300      	movs	r3, #0
 800dedc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        linespace = space;
 800dee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800dee6:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800dee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3384      	adds	r3, #132	; 0x84
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800def2:	463a      	mov	r2, r7
 800def4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800def6:	4610      	mov	r0, r2
 800def8:	4798      	blx	r3
 800defa:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800defe:	463a      	mov	r2, r7
 800df00:	ca07      	ldmia	r2, {r0, r1, r2}
 800df02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800df06:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WNNF).getText());
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800df0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df12:	2101      	movs	r1, #1
 800df14:	4618      	mov	r0, r3
 800df16:	f7ff fcaf 	bl	800d878 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800df1a:	4b30      	ldr	r3, [pc, #192]	; (800dfdc <_ZN15Screen1ViewBaseC1Ev+0x2fc>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d105      	bne.n	800df2e <_ZN15Screen1ViewBaseC1Ev+0x24e>
 800df22:	4b2f      	ldr	r3, [pc, #188]	; (800dfe0 <_ZN15Screen1ViewBaseC1Ev+0x300>)
 800df24:	4a2f      	ldr	r2, [pc, #188]	; (800dfe4 <_ZN15Screen1ViewBaseC1Ev+0x304>)
 800df26:	2160      	movs	r1, #96	; 0x60
 800df28:	482f      	ldr	r0, [pc, #188]	; (800dfe8 <_ZN15Screen1ViewBaseC1Ev+0x308>)
 800df2a:	f012 ffed 	bl	8020f08 <__assert_func>
 800df2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df32:	667b      	str	r3, [r7, #100]	; 0x64
        return typedTextId < numberOfTypedTexts;
 800df34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df36:	889a      	ldrh	r2, [r3, #4]
 800df38:	4b2c      	ldr	r3, [pc, #176]	; (800dfec <_ZN15Screen1ViewBaseC1Ev+0x30c>)
 800df3a:	881b      	ldrh	r3, [r3, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	bf34      	ite	cc
 800df40:	2301      	movcc	r3, #1
 800df42:	2300      	movcs	r3, #0
 800df44:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800df46:	2b00      	cmp	r3, #0
 800df48:	d105      	bne.n	800df56 <_ZN15Screen1ViewBaseC1Ev+0x276>
 800df4a:	4b29      	ldr	r3, [pc, #164]	; (800dff0 <_ZN15Screen1ViewBaseC1Ev+0x310>)
 800df4c:	4a25      	ldr	r2, [pc, #148]	; (800dfe4 <_ZN15Screen1ViewBaseC1Ev+0x304>)
 800df4e:	2161      	movs	r1, #97	; 0x61
 800df50:	4825      	ldr	r0, [pc, #148]	; (800dfe8 <_ZN15Screen1ViewBaseC1Ev+0x308>)
 800df52:	f012 ffd9 	bl	8020f08 <__assert_func>
 800df56:	bf00      	nop
        return texts->getText(typedTextId);
 800df58:	4b26      	ldr	r3, [pc, #152]	; (800dff4 <_ZN15Screen1ViewBaseC1Ev+0x314>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800df5e:	4611      	mov	r1, r2
 800df60:	4618      	mov	r0, r3
 800df62:	f001 fc29 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 800df66:	4603      	mov	r3, r0
 800df68:	bf00      	nop
 800df6a:	4a23      	ldr	r2, [pc, #140]	; (800dff8 <_ZN15Screen1ViewBaseC1Ev+0x318>)
 800df6c:	2111      	movs	r1, #17
 800df6e:	4620      	mov	r0, r4
 800df70:	f00a fd60 	bl	8018a34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800df74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df78:	4618      	mov	r0, r3
 800df7a:	f7fd fb59 	bl	800b630 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800df8a:	4619      	mov	r1, r3
 800df8c:	4610      	mov	r0, r2
 800df8e:	f7ff fe6d 	bl	800dc6c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_B884));
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800df98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800df9c:	2102      	movs	r1, #2
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff fc6a 	bl	800d878 <_ZN8touchgfx9TypedTextC1Et>
 800dfa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f005 fe5c 	bl	8013c68 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800dfb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fd fb3b 	bl	800b630 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800dfba:	697a      	ldr	r2, [r7, #20]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	33cc      	adds	r3, #204	; 0xcc
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	f7ff fb9c 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	376c      	adds	r7, #108	; 0x6c
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd90      	pop	{r4, r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	080231fc 	.word	0x080231fc
 800dfd8:	0800e08b 	.word	0x0800e08b
 800dfdc:	20011b8c 	.word	0x20011b8c
 800dfe0:	08022734 	.word	0x08022734
 800dfe4:	08022838 	.word	0x08022838
 800dfe8:	080227b4 	.word	0x080227b4
 800dfec:	20011b90 	.word	0x20011b90
 800dff0:	080227f8 	.word	0x080227f8
 800dff4:	20011b98 	.word	0x20011b98
 800dff8:	08022870 	.word	0x08022870

0800dffc <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	4a12      	ldr	r2, [pc, #72]	; (800e050 <_ZN15Screen1ViewBaseD1Ev+0x54>)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	601a      	str	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e010:	4618      	mov	r0, r3
 800e012:	f000 f8b5 	bl	800e180 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	33cc      	adds	r3, #204	; 0xcc
 800e01a:	4618      	mov	r0, r3
 800e01c:	f000 f8d2 	bl	800e1c4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	3398      	adds	r3, #152	; 0x98
 800e024:	4618      	mov	r0, r3
 800e026:	f000 f933 	bl	800e290 <_ZN8touchgfx6ButtonD1Ev>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	336c      	adds	r3, #108	; 0x6c
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 f90c 	bl	800e24c <_ZN8touchgfx3BoxD1Ev>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	3340      	adds	r3, #64	; 0x40
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 f907 	bl	800e24c <_ZN8touchgfx3BoxD1Ev>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff fe2b 	bl	800dc9c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4618      	mov	r0, r3
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	080231fc 	.word	0x080231fc

0800e054 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
}
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff ffcd 	bl	800dffc <_ZN15Screen1ViewBaseD1Ev>
 800e062:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f012 ff1f 	bl	8020eaa <_ZdlPvj>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800e076:	b480      	push	{r7}
 800e078:	b083      	sub	sp, #12
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]

}
 800e07e:	bf00      	nop
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b082      	sub	sp, #8
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3398      	adds	r3, #152	; 0x98
 800e098:	683a      	ldr	r2, [r7, #0]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d106      	bne.n	800e0ac <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff fdf1 	bl	800dc86 <_ZN15Screen1ViewBase11applicationEv>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe fa5a 	bl	800c560 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
    }
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f008 fffa 	bl	80170b8 <_ZN8touchgfx6ScreenC1Ev>
 800e0c4:	4a05      	ldr	r2, [pc, #20]	; (800e0dc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	601a      	str	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	08023248 	.word	0x08023248

0800e0e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	4a04      	ldr	r2, [pc, #16]	; (800e0fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	0802330c 	.word	0x0802330c

0800e100 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	4639      	mov	r1, r7
 800e10c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	4618      	mov	r0, r3
 800e114:	f7ff ffe4 	bl	800e0e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e118:	4a08      	ldr	r2, [pc, #32]	; (800e13c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	605a      	str	r2, [r3, #4]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3308      	adds	r3, #8
 800e128:	463a      	mov	r2, r7
 800e12a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e12e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	08023230 	.word	0x08023230

0800e140 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
    }
 800e148:	4a04      	ldr	r2, [pc, #16]	; (800e15c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	0802330c 	.word	0x0802330c

0800e160 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
    }
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7ff ffe9 	bl	800e140 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e16e:	2104      	movs	r1, #4
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f012 fe9a 	bl	8020eaa <_ZdlPvj>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	4a05      	ldr	r2, [pc, #20]	; (800e1a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	601a      	str	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff ffd5 	bl	800e140 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	08023230 	.word	0x08023230

0800e1a4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff ffe7 	bl	800e180 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e1b2:	2110      	movs	r1, #16
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f012 fe78 	bl	8020eaa <_ZdlPvj>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	4a05      	ldr	r2, [pc, #20]	; (800e1e4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7ff fcf7 	bl	800dbc8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	0802327c 	.word	0x0802327c

0800e1e8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7ff ffe7 	bl	800e1c4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e1f6:	214c      	movs	r1, #76	; 0x4c
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f012 fe56 	bl	8020eaa <_ZdlPvj>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4618      	mov	r0, r3
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	4a05      	ldr	r2, [pc, #20]	; (800e228 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	601a      	str	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fd fc63 	bl	800bae4 <_ZN8touchgfx8DrawableD1Ev>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	08023b30 	.word	0x08023b30

0800e22c <_ZN8touchgfx9ContainerD0Ev>:
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7ff ffe7 	bl	800e208 <_ZN8touchgfx9ContainerD1Ev>
 800e23a:	212c      	movs	r1, #44	; 0x2c
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f012 fe34 	bl	8020eaa <_ZdlPvj>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4618      	mov	r0, r3
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	4a05      	ldr	r2, [pc, #20]	; (800e26c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fe f875 	bl	800c34c <_ZN8touchgfx6WidgetD1Ev>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4618      	mov	r0, r3
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	08023f54 	.word	0x08023f54

0800e270 <_ZN8touchgfx3BoxD0Ev>:
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff ffe7 	bl	800e24c <_ZN8touchgfx3BoxD1Ev>
 800e27e:	212c      	movs	r1, #44	; 0x2c
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f012 fe12 	bl	8020eaa <_ZdlPvj>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	4618      	mov	r0, r3
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	4a05      	ldr	r2, [pc, #20]	; (800e2b0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	601a      	str	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7ff faa3 	bl	800d7ec <_ZN8touchgfx14AbstractButtonD1Ev>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	08023fbc 	.word	0x08023fbc

0800e2b4 <_ZN8touchgfx6ButtonD0Ev>:
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff ffe7 	bl	800e290 <_ZN8touchgfx6ButtonD1Ev>
 800e2c2:	2134      	movs	r1, #52	; 0x34
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f012 fdf0 	bl	8020eaa <_ZdlPvj>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	68d2      	ldr	r2, [r2, #12]
 800e2e6:	1052      	asrs	r2, r2, #1
 800e2e8:	1898      	adds	r0, r3, r2
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	f003 0301 	and.w	r3, r3, #1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d102      	bne.n	800e2fc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	e00a      	b.n	800e312 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	68d2      	ldr	r2, [r2, #12]
 800e304:	1052      	asrs	r2, r2, #1
 800e306:	4413      	add	r3, r2
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	6892      	ldr	r2, [r2, #8]
 800e30e:	4413      	add	r3, r2
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	4798      	blx	r3
    }
 800e316:	bf00      	nop
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e31e:	b480      	push	{r7}
 800e320:	b083      	sub	sp, #12
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d010      	beq.n	800e350 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d107      	bne.n	800e346 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f003 0301 	and.w	r3, r3, #1
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e342:	2301      	movs	r3, #1
 800e344:	e000      	b.n	800e348 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e346:	2300      	movs	r3, #0
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d001      	beq.n	800e350 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e34c:	2301      	movs	r3, #1
 800e34e:	e000      	b.n	800e352 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e350:	2300      	movs	r3, #0
    }
 800e352:	4618      	mov	r0, r3
 800e354:	370c      	adds	r7, #12
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr

0800e35e <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800e35e:	b480      	push	{r7}
 800e360:	b083      	sub	sp, #12
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
        : color(0)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	601a      	str	r2, [r3, #0]
    }
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800e37a:	b480      	push	{r7}
 800e37c:	b083      	sub	sp, #12
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	791b      	ldrb	r3, [r3, #4]
    }
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
	...

0800e394 <_ZN8touchgfx9ContainerC1Ev>:
{
public:
    Container()
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fd fb70 	bl	800ba84 <_ZN8touchgfx8DrawableC1Ev>
 800e3a4:	4a05      	ldr	r2, [pc, #20]	; (800e3bc <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	601a      	str	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	08023b30 	.word	0x08023b30

0800e3c0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	78fa      	ldrb	r2, [r7, #3]
 800e3e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4618      	mov	r0, r3
 800e406:	2326      	movs	r3, #38	; 0x26
 800e408:	461a      	mov	r2, r3
 800e40a:	2100      	movs	r1, #0
 800e40c:	f012 ff02 	bl	8021214 <memset>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4618      	mov	r0, r3
 800e414:	f7fd ff88 	bl	800c328 <_ZN8touchgfx6WidgetC1Ev>
 800e418:	4a09      	ldr	r2, [pc, #36]	; (800e440 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	8812      	ldrh	r2, [r2, #0]
 800e424:	84da      	strh	r2, [r3, #38]	; 0x26
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	22ff      	movs	r2, #255	; 0xff
 800e42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800e42e:	6839      	ldr	r1, [r7, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f005 fe18 	bl	8014066 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	08024128 	.word	0x08024128

0800e444 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4618      	mov	r0, r3
 800e450:	f7ff ffa0 	bl	800e394 <_ZN8touchgfx9ContainerC1Ev>
 800e454:	4a0b      	ldr	r2, [pc, #44]	; (800e484 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	601a      	str	r2, [r3, #0]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	22ff      	movs	r2, #255	; 0xff
 800e466:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2200      	movs	r2, #0
 800e46e:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2101      	movs	r1, #1
 800e474:	4618      	mov	r0, r3
 800e476:	f7ff f8da 	bl	800d62e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	08023514 	.word	0x08023514

0800e488 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	460b      	mov	r3, r1
 800e492:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	78fa      	ldrb	r2, [r7, #3]
 800e498:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	338c      	adds	r3, #140	; 0x8c
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	4798      	blx	r3
    }
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800e4be:	4618      	mov	r0, r3
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800e4ca:	b480      	push	{r7}
 800e4cc:	b083      	sub	sp, #12
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	683a      	ldr	r2, [r7, #0]
 800e4f2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e4f4:	bf00      	nop
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00d      	beq.n	800e52c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	330c      	adds	r3, #12
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4610      	mov	r0, r2
 800e520:	4798      	blx	r3
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d001      	beq.n	800e52c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800e528:	2301      	movs	r3, #1
 800e52a:	e000      	b.n	800e52e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 800e52c:	2300      	movs	r3, #0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d009      	beq.n	800e546 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	3308      	adds	r3, #8
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6879      	ldr	r1, [r7, #4]
 800e542:	4610      	mov	r0, r2
 800e544:	4798      	blx	r3
        }
    }
 800e546:	bf00      	nop
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 800e54e:	b480      	push	{r7}
 800e550:	b083      	sub	sp, #12
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
    {
    }
 800e556:	bf00      	nop
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800e562:	b480      	push	{r7}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
    {
    }
 800e56a:	bf00      	nop
 800e56c:	370c      	adds	r7, #12
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
	...

0800e578 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	4a05      	ldr	r2, [pc, #20]	; (800e598 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	601a      	str	r2, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fd fedf 	bl	800c34c <_ZN8touchgfx6WidgetD1Ev>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	08024128 	.word	0x08024128

0800e59c <_ZN8touchgfx5ImageD0Ev>:
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff ffe7 	bl	800e578 <_ZN8touchgfx5ImageD1Ev>
 800e5aa:	212c      	movs	r1, #44	; 0x2c
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f012 fc7c 	bl	8020eaa <_ZdlPvj>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7ff f8aa 	bl	800d720 <_ZN8touchgfx3BoxC1Ev>
 800e5cc:	4a08      	ldr	r2, [pc, #32]	; (800e5f0 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	332c      	adds	r3, #44	; 0x2c
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff f809 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	080240c0 	.word	0x080240c0

0800e5f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	460b      	mov	r3, r1
 800e61a:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	887a      	ldrh	r2, [r7, #2]
 800e620:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800e622:	bf00      	nop
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e62e:	b580      	push	{r7, lr}
 800e630:	b084      	sub	sp, #16
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7ff ff38 	bl	800e4b0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800e644:	6838      	ldr	r0, [r7, #0]
 800e646:	f7ff fe98 	bl	800e37a <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	bf0c      	ite	eq
 800e650:	2301      	moveq	r3, #1
 800e652:	2300      	movne	r3, #0
 800e654:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800e656:	7bbb      	ldrb	r3, [r7, #14]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d005      	beq.n	800e668 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	f083 0301 	eor.w	r3, r3, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b00      	cmp	r3, #0
 800e666:	d108      	bne.n	800e67a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800e668:	7bbb      	ldrb	r3, [r7, #14]
 800e66a:	f083 0301 	eor.w	r3, r3, #1
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b00      	cmp	r3, #0
 800e672:	d00f      	beq.n	800e694 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 800e674:	7bfb      	ldrb	r3, [r7, #15]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00c      	beq.n	800e694 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	7bba      	ldrb	r2, [r7, #14]
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f7ff ff01 	bl	800e488 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3314      	adds	r3, #20
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4610      	mov	r0, r2
 800e692:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800e694:	7bfb      	ldrb	r3, [r7, #15]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d007      	beq.n	800e6aa <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800e69a:	6838      	ldr	r0, [r7, #0]
 800e69c:	f7ff fe6d 	bl	800e37a <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d101      	bne.n	800e6aa <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e000      	b.n	800e6ac <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d006      	beq.n	800e6be <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	3388      	adds	r3, #136	; 0x88
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4610      	mov	r0, r2
 800e6bc:	4798      	blx	r3
        }
    }
 800e6be:	bf00      	nop
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
	...

0800e6c8 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	4a05      	ldr	r2, [pc, #20]	; (800e6e8 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	601a      	str	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff fd95 	bl	800e208 <_ZN8touchgfx9ContainerD1Ev>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	08023514 	.word	0x08023514

0800e6ec <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f7ff ffe7 	bl	800e6c8 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800e6fa:	2134      	movs	r1, #52	; 0x34
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f012 fbd4 	bl	8020eaa <_ZdlPvj>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	4618      	mov	r0, r3
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <_ZN15Screen2ViewBase7SLIDERAEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SLIDERA()
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2
    }
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <_ZN15Screen2ViewBase7SLIDEREEv>:
    virtual void SLIDERE()
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2
    }
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <_ZN15Screen2ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800e73c:	f007 f9b0 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 800e740:	4603      	mov	r3, r0
    }
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	4a05      	ldr	r2, [pc, #20]	; (800e76c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe ff77 	bl	800d650 <_ZN8touchgfx6ScreenD1Ev>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	0802342c 	.word	0x0802342c

0800e770 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff ffe7 	bl	800e74c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 800e77e:	2140      	movs	r1, #64	; 0x40
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f012 fb92 	bl	8020eaa <_ZdlPvj>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 800e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	b0ac      	sub	sp, #176	; 0xb0
 800e796:	af02      	add	r7, sp, #8
 800e798:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f000 fb85 	bl	800eeac <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 800e7a2:	4ae0      	ldr	r2, [pc, #896]	; (800eb24 <_ZN15Screen2ViewBaseC1Ev+0x394>)
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	601a      	str	r2, [r3, #0]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	3340      	adds	r3, #64	; 0x40
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe ffb7 	bl	800d720 <_ZN8touchgfx3BoxC1Ev>
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e7b8:	f107 0320 	add.w	r3, r7, #32
 800e7bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fe ff24 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800e7c6:	f107 0320 	add.w	r3, r7, #32
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7ff fe13 	bl	800e3f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	3398      	adds	r3, #152	; 0x98
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7ff f82a 	bl	800d830 <_ZN8touchgfx6ButtonC1Ev>
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	33cc      	adds	r3, #204	; 0xcc
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f003 fe91 	bl	8012508 <_ZN8touchgfx6SliderC1Ev>
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f000 fbc9 	bl	800ef84 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f000 fbc3 	bl	800ef84 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff f84d 	bl	800d8a4 <_ZN8touchgfx8TextAreaC1Ev>
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f503 7040 	add.w	r0, r3, #768	; 0x300
 800e810:	4bc5      	ldr	r3, [pc, #788]	; (800eb28 <_ZN15Screen2ViewBaseC1Ev+0x398>)
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
 800e814:	2300      	movs	r3, #0
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28
 800e818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e81c:	cb0c      	ldmia	r3, {r2, r3}
 800e81e:	6979      	ldr	r1, [r7, #20]
 800e820:	f000 fbf0 	bl	800f004 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	f503 7044 	add.w	r0, r3, #784	; 0x310
 800e82a:	4bc0      	ldr	r3, [pc, #768]	; (800eb2c <_ZN15Screen2ViewBaseC1Ev+0x39c>)
 800e82c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e82e:	2300      	movs	r3, #0
 800e830:	633b      	str	r3, [r7, #48]	; 0x30
 800e832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e836:	cb0c      	ldmia	r3, {r2, r3}
 800e838:	6979      	ldr	r1, [r7, #20]
 800e83a:	f000 fc13 	bl	800f064 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e844:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800e84e:	2200      	movs	r2, #0
 800e850:	2100      	movs	r1, #0
 800e852:	f7fd f991 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 800e862:	2300      	movs	r3, #0
 800e864:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e868:	2300      	movs	r3, #0
 800e86a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800e86e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e872:	041b      	lsls	r3, r3, #16
 800e874:	461a      	mov	r2, r3
 800e876:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e87a:	021b      	lsls	r3, r3, #8
 800e87c:	431a      	orrs	r2, r3
 800e87e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e882:	4313      	orrs	r3, r2
 800e884:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e888:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e88c:	4611      	mov	r1, r2
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fe feae 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800e894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e896:	4619      	mov	r1, r3
 800e898:	4620      	mov	r0, r4
 800e89a:	f7fe ff65 	bl	800d768 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	3340      	adds	r3, #64	; 0x40
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	f7fe ff2a 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	336c      	adds	r3, #108	; 0x6c
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fd f9ab 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_GRADIENT_DARK_ID));
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e8c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fea1 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800e8cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f005 fbc7 	bl	8014066 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800e8d8:	697a      	ldr	r2, [r7, #20]
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	336c      	adds	r3, #108	; 0x6c
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	f7fe ff0d 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(120, 189);
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	3398      	adds	r3, #152	; 0x98
 800e8ea:	22bd      	movs	r2, #189	; 0xbd
 800e8ec:	2178      	movs	r1, #120	; 0x78
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fd f98e 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e8fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e8fe:	2101      	movs	r1, #1
 800e900:	4618      	mov	r0, r3
 800e902:	f7fe fe84 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800e906:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e90a:	2102      	movs	r1, #2
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fe7e 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800e912:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800e916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e91a:	4619      	mov	r1, r3
 800e91c:	4620      	mov	r0, r4
 800e91e:	f005 f9f5 	bl	8013d0c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e92e:	4619      	mov	r1, r3
 800e930:	4610      	mov	r0, r2
 800e932:	f7fe ff4d 	bl	800d7d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	3398      	adds	r3, #152	; 0x98
 800e93c:	4619      	mov	r1, r3
 800e93e:	4610      	mov	r0, r2
 800e940:	f7fe fede 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    slider1.setXY(65, 80);
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	33cc      	adds	r3, #204	; 0xcc
 800e948:	2250      	movs	r2, #80	; 0x50
 800e94a:	2141      	movs	r1, #65	; 0x41
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fd f95f 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800e958:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e95c:	2105      	movs	r1, #5
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fe fe55 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800e964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e968:	2103      	movs	r1, #3
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fe fe4f 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800e970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e974:	2104      	movs	r1, #4
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe fe49 	bl	800d60e <_ZN8touchgfx6BitmapC1Et>
 800e97c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e980:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e984:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e988:	4620      	mov	r0, r4
 800e98a:	f003 fe19 	bl	80125c0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 300);
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800e994:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	2300      	movs	r3, #0
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	220b      	movs	r2, #11
 800e9a2:	2110      	movs	r1, #16
 800e9a4:	f003 fc9c 	bl	80122e0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider1.setValueRange(0, 300);
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	33cc      	adds	r3, #204	; 0xcc
 800e9ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f003 fc25 	bl	8012202 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(0);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	33cc      	adds	r3, #204	; 0xcc
 800e9bc:	2100      	movs	r1, #0
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f003 fba1 	bl	8012106 <_ZN8touchgfx6Slider8setValueEi>
    add(slider1);
 800e9c4:	697a      	ldr	r2, [r7, #20]
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	33cc      	adds	r3, #204	; 0xcc
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	f7fe fe97 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    BUTONA.setBoxWithBorderPosition(0, 0, 50, 50);
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 800e9d8:	2332      	movs	r3, #50	; 0x32
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	2332      	movs	r3, #50	; 0x32
 800e9de:	2200      	movs	r2, #0
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	f000 fb5f 	bl	800f0a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    BUTONA.setBorderSize(5);
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e9ec:	2105      	movs	r1, #5
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 fb78 	bl	800f0e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    BUTONA.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(41, 255, 13), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 800e9fa:	2329      	movs	r3, #41	; 0x29
 800e9fc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ea00:	23ff      	movs	r3, #255	; 0xff
 800ea02:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800ea06:	230d      	movs	r3, #13
 800ea08:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800ea0c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ea10:	041b      	lsls	r3, r3, #16
 800ea12:	461a      	mov	r2, r3
 800ea14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ea18:	021b      	lsls	r3, r3, #8
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ea20:	4313      	orrs	r3, r2
 800ea22:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ea26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fe fddf 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800ea32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea34:	461d      	mov	r5, r3
 800ea36:	2300      	movs	r3, #0
 800ea38:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ea3c:	2399      	movs	r3, #153	; 0x99
 800ea3e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 800ea42:	23cc      	movs	r3, #204	; 0xcc
 800ea44:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800ea48:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ea4c:	041b      	lsls	r3, r3, #16
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800ea54:	021b      	lsls	r3, r3, #8
 800ea56:	431a      	orrs	r2, r3
 800ea58:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ea62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ea66:	4611      	mov	r1, r2
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe fdc1 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800ea6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea70:	461e      	mov	r6, r3
 800ea72:	2300      	movs	r3, #0
 800ea74:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800ea78:	2333      	movs	r3, #51	; 0x33
 800ea7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
 800ea7e:	2366      	movs	r3, #102	; 0x66
 800ea80:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ea84:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ea88:	041b      	lsls	r3, r3, #16
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ea90:	021b      	lsls	r3, r3, #8
 800ea92:	431a      	orrs	r2, r3
 800ea94:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ea9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe fda3 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800eaaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaac:	4698      	mov	r8, r3
 800eaae:	2333      	movs	r3, #51	; 0x33
 800eab0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800eab4:	2366      	movs	r3, #102	; 0x66
 800eab6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800eaba:	2399      	movs	r3, #153	; 0x99
 800eabc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 800eac0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800eac4:	041b      	lsls	r3, r3, #16
 800eac6:	461a      	mov	r2, r3
 800eac8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800eacc:	021b      	lsls	r3, r3, #8
 800eace:	431a      	orrs	r2, r3
 800ead0:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800ead4:	4313      	orrs	r3, r2
 800ead6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800eada:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eade:	4611      	mov	r1, r2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fe fd85 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800eae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	4643      	mov	r3, r8
 800eaec:	4632      	mov	r2, r6
 800eaee:	4629      	mov	r1, r5
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f000 fb09 	bl	800f108 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BUTONA.setAction(flexButtonCallback);
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f7ff fced 	bl	800e4e4 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    BUTONA.setPosition(405, 71, 50, 50);
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 800eb10:	2332      	movs	r3, #50	; 0x32
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	2332      	movs	r3, #50	; 0x32
 800eb16:	2247      	movs	r2, #71	; 0x47
 800eb18:	f240 1195 	movw	r1, #405	; 0x195
 800eb1c:	f7fd f82c 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
 800eb20:	e006      	b.n	800eb30 <_ZN15Screen2ViewBaseC1Ev+0x3a0>
 800eb22:	bf00      	nop
 800eb24:	08023324 	.word	0x08023324
 800eb28:	0800ee3f 	.word	0x0800ee3f
 800eb2c:	0800ee69 	.word	0x0800ee69
    add(BUTONA);
 800eb30:	697a      	ldr	r2, [r7, #20]
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eb38:	4619      	mov	r1, r3
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	f7fe fde0 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    BUTONE.setBoxWithBorderPosition(0, 0, 50, 50);
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800eb46:	2332      	movs	r3, #50	; 0x32
 800eb48:	9300      	str	r3, [sp, #0]
 800eb4a:	2332      	movs	r3, #50	; 0x32
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	2100      	movs	r1, #0
 800eb50:	f000 faa8 	bl	800f0a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    BUTONE.setBorderSize(5);
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800eb5a:	2105      	movs	r1, #5
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 fac1 	bl	800f0e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    BUTONE.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(237, 24, 24), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	f503 7410 	add.w	r4, r3, #576	; 0x240
 800eb68:	23ed      	movs	r3, #237	; 0xed
 800eb6a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800eb6e:	2318      	movs	r3, #24
 800eb70:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800eb74:	2318      	movs	r3, #24
 800eb76:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800eb7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800eb7e:	041b      	lsls	r3, r3, #16
 800eb80:	461a      	mov	r2, r3
 800eb82:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800eb86:	021b      	lsls	r3, r3, #8
 800eb88:	431a      	orrs	r2, r3
 800eb8a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800eb94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eb98:	4611      	mov	r1, r2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fe fd28 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800eba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eba2:	461d      	mov	r5, r3
 800eba4:	2300      	movs	r3, #0
 800eba6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800ebaa:	2399      	movs	r3, #153	; 0x99
 800ebac:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 800ebb0:	23cc      	movs	r3, #204	; 0xcc
 800ebb2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 800ebb6:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800ebba:	041b      	lsls	r3, r3, #16
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800ebc2:	021b      	lsls	r3, r3, #8
 800ebc4:	431a      	orrs	r2, r3
 800ebc6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ebd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe fd0a 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800ebdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ebde:	461e      	mov	r6, r3
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800ebe6:	2333      	movs	r3, #51	; 0x33
 800ebe8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800ebec:	2366      	movs	r3, #102	; 0x66
 800ebee:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800ebf2:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800ebf6:	041b      	lsls	r3, r3, #16
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800ebfe:	021b      	lsls	r3, r3, #8
 800ec00:	431a      	orrs	r2, r3
 800ec02:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800ec06:	4313      	orrs	r3, r2
 800ec08:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ec0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe fcec 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800ec18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec1a:	4698      	mov	r8, r3
 800ec1c:	2333      	movs	r3, #51	; 0x33
 800ec1e:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 800ec22:	2366      	movs	r3, #102	; 0x66
 800ec24:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ec28:	2399      	movs	r3, #153	; 0x99
 800ec2a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ec2e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ec32:	041b      	lsls	r3, r3, #16
 800ec34:	461a      	mov	r2, r3
 800ec36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ec3a:	021b      	lsls	r3, r3, #8
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800ec42:	4313      	orrs	r3, r2
 800ec44:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ec48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fe fcce 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800ec54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	4643      	mov	r3, r8
 800ec5a:	4632      	mov	r2, r6
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 fa52 	bl	800f108 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BUTONE.setAction(flexButtonCallback);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800ec70:	4619      	mov	r1, r3
 800ec72:	4610      	mov	r0, r2
 800ec74:	f7ff fc36 	bl	800e4e4 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    BUTONE.setPosition(6, 71, 50, 50);
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800ec7e:	2332      	movs	r3, #50	; 0x32
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	2332      	movs	r3, #50	; 0x32
 800ec84:	2247      	movs	r2, #71	; 0x47
 800ec86:	2106      	movs	r1, #6
 800ec88:	f7fc ff76 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(BUTONE);
 800ec8c:	697a      	ldr	r2, [r7, #20]
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800ec94:	4619      	mov	r1, r3
 800ec96:	4610      	mov	r0, r2
 800ec98:	f7fe fd32 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(119, 46);
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800eca2:	222e      	movs	r2, #46	; 0x2e
 800eca4:	2177      	movs	r1, #119	; 0x77
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fc ffb2 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800ecc4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ecc8:	041b      	lsls	r3, r3, #16
 800ecca:	461a      	mov	r2, r3
 800eccc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800ecd0:	021b      	lsls	r3, r3, #8
 800ecd2:	431a      	orrs	r2, r3
 800ecd4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ecde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ece2:	4611      	mov	r1, r2
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe fc83 	bl	800d5f0 <_ZN8touchgfx9colortypeC1Em>
 800ecea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecec:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 800ecf0:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800ecf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ecf6:	69fa      	ldr	r2, [r7, #28]
 800ecf8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ecfa:	bf00      	nop
    textArea1.setLinespacing(0);
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800ed02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ed06:	2300      	movs	r3, #0
 800ed08:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        linespace = space;
 800ed0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed10:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800ed14:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800ed16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	3384      	adds	r3, #132	; 0x84
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800ed24:	463a      	mov	r2, r7
 800ed26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ed2a:	4610      	mov	r0, r2
 800ed2c:	4798      	blx	r3
 800ed2e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ed32:	463a      	mov	r2, r7
 800ed34:	ca07      	ldmia	r2, {r0, r1, r2}
 800ed36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ed3a:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9OBR));
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 800ed42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed46:	2100      	movs	r1, #0
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fe fd95 	bl	800d878 <_ZN8touchgfx9TypedTextC1Et>
 800ed4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed52:	4619      	mov	r1, r3
 800ed54:	4620      	mov	r0, r4
 800ed56:	f004 ff87 	bl	8013c68 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800ed5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fc fc66 	bl	800b630 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4610      	mov	r0, r2
 800ed70:	f7fe fcc6 	bl	800d700 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	4618      	mov	r0, r3
 800ed78:	37a8      	adds	r7, #168	; 0xa8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed80 <_ZN15Screen2ViewBaseD1Ev>:

Screen2ViewBase::~Screen2ViewBase()
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	4a1e      	ldr	r2, [pc, #120]	; (800ee04 <_ZN15Screen2ViewBaseD1Ev+0x84>)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 fa27 	bl	800f1e8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800eda0:	4618      	mov	r0, r3
 800eda2:	f000 fa43 	bl	800f22c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800edac:	4618      	mov	r0, r3
 800edae:	f7fe feb9 	bl	800db24 <_ZN8touchgfx8TextAreaD1Ev>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 fa59 	bl	800f270 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 fa53 	bl	800f270 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	33cc      	adds	r3, #204	; 0xcc
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 fa76 	bl	800f2c0 <_ZN8touchgfx6SliderD1Ev>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	3398      	adds	r3, #152	; 0x98
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff fa59 	bl	800e290 <_ZN8touchgfx6ButtonD1Ev>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	336c      	adds	r3, #108	; 0x6c
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7ff fbc8 	bl	800e578 <_ZN8touchgfx5ImageD1Ev>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	3340      	adds	r3, #64	; 0x40
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff fa2d 	bl	800e24c <_ZN8touchgfx3BoxD1Ev>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff fca9 	bl	800e74c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
{

}
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4618      	mov	r0, r3
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	08023324 	.word	0x08023324

0800ee08 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
}
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff ffb5 	bl	800ed80 <_ZN15Screen2ViewBaseD1Ev>
 800ee16:	f44f 7148 	mov.w	r1, #800	; 0x320
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f012 f845 	bl	8020eaa <_ZdlPvj>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	4618      	mov	r0, r3
 800ee24:	3708      	adds	r7, #8
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 800ee2a:	b480      	push	{r7}
 800ee2c:	b083      	sub	sp, #12
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]

}
 800ee32:	bf00      	nop
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	3398      	adds	r3, #152	; 0x98
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d106      	bne.n	800ee60 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff fc6e 	bl	800e734 <_ZN15Screen2ViewBase11applicationEv>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fd fb3a 	bl	800c4d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
    if (&src == &BUTONA)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ee78:	683a      	ldr	r2, [r7, #0]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d105      	bne.n	800ee8a <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction2
        //When BUTONA clicked call virtual function
        //Call SLIDERA
        SLIDERA();
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	332c      	adds	r3, #44	; 0x2c
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	4798      	blx	r3
    }
    if (&src == &BUTONE)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d105      	bne.n	800eea2 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3a>
    {
        //Interaction3
        //When BUTONE clicked call virtual function
        //Call SLIDERE
        SLIDERE();
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	3330      	adds	r3, #48	; 0x30
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	4798      	blx	r3
    }
}
 800eea2:	bf00      	nop
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
	...

0800eeac <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f008 f8fe 	bl	80170b8 <_ZN8touchgfx6ScreenC1Ev>
 800eebc:	4a05      	ldr	r2, [pc, #20]	; (800eed4 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	601a      	str	r2, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	0802342c 	.word	0x0802342c

0800eed8 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7ff faae 	bl	800e444 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800eee8:	4a03      	ldr	r2, [pc, #12]	; (800eef8 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	08023460 	.word	0x08023460

0800eefc <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	4a05      	ldr	r2, [pc, #20]	; (800ef1c <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fbdb 	bl	800e6c8 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4618      	mov	r0, r3
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	08023460 	.word	0x08023460

0800ef20 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff ffe7 	bl	800eefc <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800ef2e:	2134      	movs	r1, #52	; 0x34
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f011 ffba 	bl	8020eaa <_ZdlPvj>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	4a05      	ldr	r2, [pc, #20]	; (800ef60 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7ff f97b 	bl	800e24c <_ZN8touchgfx3BoxD1Ev>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	080240c0 	.word	0x080240c0

0800ef64 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7ff ffe7 	bl	800ef40 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800ef72:	2134      	movs	r1, #52	; 0x34
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f011 ff98 	bl	8020eaa <_ZdlPvj>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
 */
template <class T>
class BoxWithBorderButtonStyle : public T
{
public:
    BoxWithBorderButtonStyle()
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	2334      	movs	r3, #52	; 0x34
 800ef92:	461a      	mov	r2, r3
 800ef94:	2100      	movs	r1, #0
 800ef96:	f012 f93d 	bl	8021214 <memset>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7ff ff9b 	bl	800eed8 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 800efa2:	4a17      	ldr	r2, [pc, #92]	; (800f000 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	601a      	str	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	3334      	adds	r3, #52	; 0x34
 800efac:	4618      	mov	r0, r3
 800efae:	f7ff fb05 	bl	800e5bc <_ZN8touchgfx13BoxWithBorderC1Ev>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3368      	adds	r3, #104	; 0x68
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff f9d1 	bl	800e35e <_ZN8touchgfx9colortypeC1Ev>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	336c      	adds	r3, #108	; 0x6c
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff f9cc 	bl	800e35e <_ZN8touchgfx9colortypeC1Ev>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3370      	adds	r3, #112	; 0x70
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff f9c7 	bl	800e35e <_ZN8touchgfx9colortypeC1Ev>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	3374      	adds	r3, #116	; 0x74
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff f9c2 	bl	800e35e <_ZN8touchgfx9colortypeC1Ev>
    {
        borderBox.setXY(0, 0);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3334      	adds	r3, #52	; 0x34
 800efde:	2200      	movs	r2, #0
 800efe0:	2100      	movs	r1, #0
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fc fe14 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	3334      	adds	r3, #52	; 0x34
 800efee:	4619      	mov	r1, r3
 800eff0:	4610      	mov	r0, r2
 800eff2:	f002 fdfd 	bl	8011bf0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	4618      	mov	r0, r3
 800effa:	3708      	adds	r7, #8
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	08023390 	.word	0x08023390

0800f004 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	4639      	mov	r1, r7
 800f010:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	4618      	mov	r0, r3
 800f018:	f7ff f862 	bl	800e0e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f01c:	4a08      	ldr	r2, [pc, #32]	; (800f040 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	605a      	str	r2, [r3, #4]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3308      	adds	r3, #8
 800f02c:	463a      	mov	r2, r7
 800f02e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f032:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	08023378 	.word	0x08023378

0800f044 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	4a04      	ldr	r2, [pc, #16]	; (800f060 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	080234fc 	.word	0x080234fc

0800f064 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	4639      	mov	r1, r7
 800f070:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff ffe4 	bl	800f044 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 800f07c:	4a08      	ldr	r2, [pc, #32]	; (800f0a0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	601a      	str	r2, [r3, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	605a      	str	r2, [r3, #4]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3308      	adds	r3, #8
 800f08c:	463a      	mov	r2, r7
 800f08e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f092:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	4618      	mov	r0, r3
 800f09a:	3710      	adds	r7, #16
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	08023360 	.word	0x08023360

0800f0a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f0a4:	b590      	push	{r4, r7, lr}
 800f0a6:	b087      	sub	sp, #28
 800f0a8:	af02      	add	r7, sp, #8
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	4608      	mov	r0, r1
 800f0ae:	4611      	mov	r1, r2
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	817b      	strh	r3, [r7, #10]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	813b      	strh	r3, [r7, #8]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f0c4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800f0c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f0cc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f0d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	f7fc fd4e 	bl	800bb78 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800f0dc:	bf00      	nop
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd90      	pop	{r4, r7, pc}

0800f0e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3334      	adds	r3, #52	; 0x34
 800f0f4:	78fa      	ldrb	r2, [r7, #3]
 800f0f6:	b292      	uxth	r2, r2
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fa88 	bl	800e610 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 800f100:	bf00      	nop
 800f102:	3708      	adds	r7, #8
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	683a      	ldr	r2, [r7, #0]
 800f126:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	69ba      	ldr	r2, [r7, #24]
 800f12c:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	338c      	adds	r3, #140	; 0x8c
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	4798      	blx	r3
    }
 800f13a:	bf00      	nop
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
	...

0800f144 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
    }
 800f14c:	4a04      	ldr	r2, [pc, #16]	; (800f160 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4618      	mov	r0, r3
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr
 800f160:	080234fc 	.word	0x080234fc

0800f164 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
    }
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f7ff ffe9 	bl	800f144 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800f172:	2104      	movs	r1, #4
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f011 fe98 	bl	8020eaa <_ZdlPvj>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800f184:	b590      	push	{r4, r7, lr}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff f98b 	bl	800e4b0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d002      	beq.n	800f1a6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	336c      	adds	r3, #108	; 0x6c
 800f1a4:	e001      	b.n	800f1aa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	3368      	adds	r3, #104	; 0x68
 800f1aa:	6819      	ldr	r1, [r3, #0]
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f7fe fadb 	bl	800d768 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff f978 	bl	800e4b0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3374      	adds	r3, #116	; 0x74
 800f1ca:	e001      	b.n	800f1d0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	3370      	adds	r3, #112	; 0x70
 800f1d0:	6819      	ldr	r1, [r3, #0]
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f7ff fa0e 	bl	800e5f4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7ff f9b7 	bl	800e54e <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800f1e0:	bf00      	nop
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd90      	pop	{r4, r7, pc}

0800f1e8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	4a05      	ldr	r2, [pc, #20]	; (800f208 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7ff ffa3 	bl	800f144 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4618      	mov	r0, r3
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	08023360 	.word	0x08023360

0800f20c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff ffe7 	bl	800f1e8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800f21a:	2110      	movs	r1, #16
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f011 fe44 	bl	8020eaa <_ZdlPvj>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	4a05      	ldr	r2, [pc, #20]	; (800f24c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fe ff7f 	bl	800e140 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	08023378 	.word	0x08023378

0800f250 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff ffe7 	bl	800f22c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f25e:	2110      	movs	r1, #16
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f011 fe22 	bl	8020eaa <_ZdlPvj>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	4a08      	ldr	r2, [pc, #32]	; (800f29c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	601a      	str	r2, [r3, #0]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	3334      	adds	r3, #52	; 0x34
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff fe5c 	bl	800ef40 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff fe36 	bl	800eefc <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4618      	mov	r0, r3
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	08023390 	.word	0x08023390

0800f2a0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff ffe1 	bl	800f270 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800f2ae:	2178      	movs	r1, #120	; 0x78
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f011 fdfa 	bl	8020eaa <_ZdlPvj>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <_ZN8touchgfx6SliderD1Ev>:
 * indicator. The other is used on the other side. They can be used in indicating the
 * part of the slider value range that is currently selected.
 *
 * The slider operates on an integer value range that can be set by the user.
 */
class Slider : public Container
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	4a0f      	ldr	r2, [pc, #60]	; (800f308 <_ZN8touchgfx6SliderD1Ev+0x48>)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	601a      	str	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	33c0      	adds	r3, #192	; 0xc0
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe ff98 	bl	800e208 <_ZN8touchgfx9ContainerD1Ev>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3394      	adds	r3, #148	; 0x94
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7ff f94b 	bl	800e578 <_ZN8touchgfx5ImageD1Ev>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	3368      	adds	r3, #104	; 0x68
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7ff f946 	bl	800e578 <_ZN8touchgfx5ImageD1Ev>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	333c      	adds	r3, #60	; 0x3c
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff f941 	bl	800e578 <_ZN8touchgfx5ImageD1Ev>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fe ff85 	bl	800e208 <_ZN8touchgfx9ContainerD1Ev>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4618      	mov	r0, r3
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	08023bc0 	.word	0x08023bc0

0800f30c <_ZN8touchgfx6SliderD0Ev>:
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7ff ffd3 	bl	800f2c0 <_ZN8touchgfx6SliderD1Ev>
 800f31a:	21fc      	movs	r1, #252	; 0xfc
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f011 fdc4 	bl	8020eaa <_ZdlPvj>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	68d2      	ldr	r2, [r2, #12]
 800f33e:	1052      	asrs	r2, r2, #1
 800f340:	1898      	adds	r0, r3, r2
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	f003 0301 	and.w	r3, r3, #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d102      	bne.n	800f354 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	e00a      	b.n	800f36a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	68d2      	ldr	r2, [r2, #12]
 800f35c:	1052      	asrs	r2, r2, #1
 800f35e:	4413      	add	r3, r2
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	6892      	ldr	r2, [r2, #8]
 800f366:	4413      	add	r3, r2
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	4798      	blx	r3
    }
 800f36e:	bf00      	nop
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d010      	beq.n	800f3a8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d107      	bne.n	800f39e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	f003 0301 	and.w	r3, r3, #1
 800f396:	2b00      	cmp	r3, #0
 800f398:	d101      	bne.n	800f39e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800f39a:	2301      	movs	r3, #1
 800f39c:	e000      	b.n	800f3a0 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d001      	beq.n	800f3a8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 800f3a8:	2300      	movs	r3, #0
    }
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	370c      	adds	r7, #12
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b082      	sub	sp, #8
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
 800f3be:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	68d2      	ldr	r2, [r2, #12]
 800f3c8:	1052      	asrs	r2, r2, #1
 800f3ca:	1898      	adds	r0, r3, r2
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	f003 0301 	and.w	r3, r3, #1
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d102      	bne.n	800f3de <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	e00a      	b.n	800f3f4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	68d2      	ldr	r2, [r2, #12]
 800f3e6:	1052      	asrs	r2, r2, #1
 800f3e8:	4413      	add	r3, r2
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	6892      	ldr	r2, [r2, #8]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	4798      	blx	r3
    }
 800f3f8:	bf00      	nop
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d010      	beq.n	800f432 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d107      	bne.n	800f428 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	f003 0301 	and.w	r3, r3, #1
 800f420:	2b00      	cmp	r3, #0
 800f422:	d101      	bne.n	800f428 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f424:	2301      	movs	r3, #1
 800f426:	e000      	b.n	800f42a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f428:	2300      	movs	r3, #0
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d001      	beq.n	800f432 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f42e:	2301      	movs	r3, #1
 800f430:	e000      	b.n	800f434 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f432:	2300      	movs	r3, #0
    }
 800f434:	4618      	mov	r0, r3
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800f440:	b590      	push	{r4, r7, lr}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff f83a 	bl	800e4ca <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800f456:	4603      	mov	r3, r0
 800f458:	4619      	mov	r1, r3
 800f45a:	4620      	mov	r0, r4
 800f45c:	f7fe ffbc 	bl	800e3d8 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	4618      	mov	r0, r3
 800f464:	f7ff f87d 	bl	800e562 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd90      	pop	{r4, r7, pc}

0800f470 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f470:	b480      	push	{r7}
 800f472:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f474:	4b02      	ldr	r3, [pc, #8]	; (800f480 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f476:	4618      	mov	r0, r3
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr
 800f480:	080235a8 	.word	0x080235a8

0800f484 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f484:	b480      	push	{r7}
 800f486:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f488:	2306      	movs	r3, #6
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f494:	b480      	push	{r7}
 800f496:	b085      	sub	sp, #20
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	460b      	mov	r3, r1
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800f4a2:	2300      	movs	r3, #0
    }
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3714      	adds	r7, #20
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f4b8:	2300      	movs	r3, #0
    }
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	370c      	adds	r7, #12
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr

0800f4c6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f4c6:	b480      	push	{r7}
 800f4c8:	b083      	sub	sp, #12
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f4ce:	2300      	movs	r3, #0
    }
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800f4ea:	4a07      	ldr	r2, [pc, #28]	; (800f508 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f4f0:	4a06      	ldr	r2, [pc, #24]	; (800f50c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f4f6:	4a06      	ldr	r2, [pc, #24]	; (800f510 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f4f8:	88fb      	ldrh	r3, [r7, #6]
 800f4fa:	8013      	strh	r3, [r2, #0]
    }
 800f4fc:	bf00      	nop
 800f4fe:	3714      	adds	r7, #20
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr
 800f508:	20011b8c 	.word	0x20011b8c
 800f50c:	20011b94 	.word	0x20011b94
 800f510:	20011b90 	.word	0x20011b90

0800f514 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f514:	b40e      	push	{r1, r2, r3}
 800f516:	b580      	push	{r7, lr}
 800f518:	b085      	sub	sp, #20
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f51e:	f107 0320 	add.w	r3, r7, #32
 800f522:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	69fa      	ldr	r2, [r7, #28]
 800f528:	2100      	movs	r1, #0
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f007 f9fa 	bl	8016924 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f530:	4603      	mov	r3, r0
 800f532:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f534:	89fb      	ldrh	r3, [r7, #14]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f540:	b003      	add	sp, #12
 800f542:	4770      	bx	lr

0800f544 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f544:	b40c      	push	{r2, r3}
 800f546:	b580      	push	{r7, lr}
 800f548:	b084      	sub	sp, #16
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	460b      	mov	r3, r1
 800f550:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f552:	f107 031c 	add.w	r3, r7, #28
 800f556:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f558:	78f9      	ldrb	r1, [r7, #3]
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	69ba      	ldr	r2, [r7, #24]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f007 f9e0 	bl	8016924 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f564:	4603      	mov	r3, r0
 800f566:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f568:	89fb      	ldrh	r3, [r7, #14]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f574:	b002      	add	sp, #8
 800f576:	4770      	bx	lr

0800f578 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b08a      	sub	sp, #40	; 0x28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	460b      	mov	r3, r1
 800f582:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d016      	beq.n	800f5ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	3322      	adds	r3, #34	; 0x22
 800f590:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800f592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f594:	8adb      	ldrh	r3, [r3, #22]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d105      	bne.n	800f5a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800f59a:	4b43      	ldr	r3, [pc, #268]	; (800f6a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f59c:	4a43      	ldr	r2, [pc, #268]	; (800f6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f59e:	21c5      	movs	r1, #197	; 0xc5
 800f5a0:	4843      	ldr	r0, [pc, #268]	; (800f6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f5a2:	f011 fcb1 	bl	8020f08 <__assert_func>
            return buffer[pos];
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	8a9b      	ldrh	r3, [r3, #20]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	e000      	b.n	800f5bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d06a      	beq.n	800f696 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f008 fc89 	bl	8017ed8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	3322      	adds	r3, #34	; 0x22
 800f5ca:	623b      	str	r3, [r7, #32]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800f5d0:	6a3b      	ldr	r3, [r7, #32]
 800f5d2:	8adb      	ldrh	r3, [r3, #22]
 800f5d4:	8bfa      	ldrh	r2, [r7, #30]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d305      	bcc.n	800f5e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800f5da:	4b36      	ldr	r3, [pc, #216]	; (800f6b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800f5dc:	4a36      	ldr	r2, [pc, #216]	; (800f6b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800f5de:	21cb      	movs	r1, #203	; 0xcb
 800f5e0:	4833      	ldr	r0, [pc, #204]	; (800f6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f5e2:	f011 fc91 	bl	8020f08 <__assert_func>
            const uint16_t index = pos + offset;
 800f5e6:	6a3b      	ldr	r3, [r7, #32]
 800f5e8:	8a9a      	ldrh	r2, [r3, #20]
 800f5ea:	8bfb      	ldrh	r3, [r7, #30]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800f5f0:	8bbb      	ldrh	r3, [r7, #28]
 800f5f2:	2b09      	cmp	r3, #9
 800f5f4:	d801      	bhi.n	800f5fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800f5f6:	8bbb      	ldrh	r3, [r7, #28]
 800f5f8:	e001      	b.n	800f5fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800f5fa:	8bbb      	ldrh	r3, [r7, #28]
 800f5fc:	3b0a      	subs	r3, #10
 800f5fe:	6a3a      	ldr	r2, [r7, #32]
 800f600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f604:	f640 123f 	movw	r2, #2367	; 0x93f
 800f608:	4293      	cmp	r3, r2
 800f60a:	bf0c      	ite	eq
 800f60c:	2301      	moveq	r3, #1
 800f60e:	2300      	movne	r3, #0
 800f610:	b2db      	uxtb	r3, r3
 800f612:	2b00      	cmp	r3, #0
 800f614:	d03f      	beq.n	800f696 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	3322      	adds	r3, #34	; 0x22
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	3222      	adds	r2, #34	; 0x22
 800f61e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800f620:	68ba      	ldr	r2, [r7, #8]
 800f622:	8ad2      	ldrh	r2, [r2, #22]
 800f624:	2a00      	cmp	r2, #0
 800f626:	d105      	bne.n	800f634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800f628:	4b1f      	ldr	r3, [pc, #124]	; (800f6a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f62a:	4a20      	ldr	r2, [pc, #128]	; (800f6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f62c:	21c5      	movs	r1, #197	; 0xc5
 800f62e:	4820      	ldr	r0, [pc, #128]	; (800f6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f630:	f011 fc6a 	bl	8020f08 <__assert_func>
            return buffer[pos];
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	8a92      	ldrh	r2, [r2, #20]
 800f638:	4611      	mov	r1, r2
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800f640:	613b      	str	r3, [r7, #16]
 800f642:	4613      	mov	r3, r2
 800f644:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	8adb      	ldrh	r3, [r3, #22]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d806      	bhi.n	800f65c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800f64e:	4b1b      	ldr	r3, [pc, #108]	; (800f6bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800f650:	4a1b      	ldr	r2, [pc, #108]	; (800f6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800f652:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800f656:	4816      	ldr	r0, [pc, #88]	; (800f6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f658:	f011 fc56 	bl	8020f08 <__assert_func>
            const uint16_t index = pos + 1;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	8a9b      	ldrh	r3, [r3, #20]
 800f660:	3301      	adds	r3, #1
 800f662:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800f664:	89bb      	ldrh	r3, [r7, #12]
 800f666:	2b09      	cmp	r3, #9
 800f668:	d801      	bhi.n	800f66e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800f66a:	89bb      	ldrh	r3, [r7, #12]
 800f66c:	e000      	b.n	800f670 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800f66e:	2300      	movs	r3, #0
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	89f9      	ldrh	r1, [r7, #14]
 800f674:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800f678:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3322      	adds	r3, #34	; 0x22
 800f67e:	61bb      	str	r3, [r7, #24]
 800f680:	f640 133f 	movw	r3, #2367	; 0x93f
 800f684:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	8a9b      	ldrh	r3, [r3, #20]
 800f68a:	4619      	mov	r1, r3
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	8afa      	ldrh	r2, [r7, #22]
 800f690:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800f694:	bf00      	nop
        }
    }
    return getNextChar();
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f008 fb20 	bl	8017cdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f69c:	4603      	mov	r3, r0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3728      	adds	r7, #40	; 0x28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	08022874 	.word	0x08022874
 800f6ac:	08022880 	.word	0x08022880
 800f6b0:	0802292c 	.word	0x0802292c
 800f6b4:	08022974 	.word	0x08022974
 800f6b8:	08022984 	.word	0x08022984
 800f6bc:	08022a58 	.word	0x08022a58
 800f6c0:	08022a64 	.word	0x08022a64

0800f6c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f008 face 	bl	8017c6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800f6d2:	bf00      	nop
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b088      	sub	sp, #32
 800f6de:	af02      	add	r7, sp, #8
 800f6e0:	60f8      	str	r0, [r7, #12]
 800f6e2:	1d38      	adds	r0, r7, #4
 800f6e4:	e880 0006 	stmia.w	r0, {r1, r2}
 800f6e8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800f6ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6ee:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800f6f0:	1d39      	adds	r1, r7, #4
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	9301      	str	r3, [sp, #4]
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	6a3b      	ldr	r3, [r7, #32]
 800f6fc:	683a      	ldr	r2, [r7, #0]
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f005 fd96 	bl	8015230 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800f704:	bf00      	nop
 800f706:	3718      	adds	r7, #24
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f70c:	b590      	push	{r4, r7, lr}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f716:	2300      	movs	r3, #0
 800f718:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d127      	bne.n	800f770 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800f720:	88fb      	ldrh	r3, [r7, #6]
 800f722:	4a1e      	ldr	r2, [pc, #120]	; (800f79c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d016      	beq.n	800f75a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f72c:	88fb      	ldrh	r3, [r7, #6]
 800f72e:	4a1b      	ldr	r2, [pc, #108]	; (800f79c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f734:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	4413      	add	r3, r2
 800f73e:	4a18      	ldr	r2, [pc, #96]	; (800f7a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f740:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	68ba      	ldr	r2, [r7, #8]
 800f748:	4413      	add	r3, r2
 800f74a:	4a16      	ldr	r2, [pc, #88]	; (800f7a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f74c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	4413      	add	r3, r2
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	e00a      	b.n	800f770 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f75a:	4b11      	ldr	r3, [pc, #68]	; (800f7a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f75c:	4a12      	ldr	r2, [pc, #72]	; (800f7a8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f75e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f760:	4a12      	ldr	r2, [pc, #72]	; (800f7ac <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f762:	4b10      	ldr	r3, [pc, #64]	; (800f7a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f764:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f766:	88fb      	ldrh	r3, [r7, #6]
 800f768:	4a11      	ldr	r2, [pc, #68]	; (800f7b0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f76e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00d      	beq.n	800f792 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800f776:	4a0f      	ldr	r2, [pc, #60]	; (800f7b4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f778:	88fb      	ldrh	r3, [r7, #6]
 800f77a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f77c:	f000 f83e 	bl	800f7fc <_ZN17TypedTextDatabase8getFontsEv>
 800f780:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f782:	f000 f833 	bl	800f7ec <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f786:	4603      	mov	r3, r0
 800f788:	461a      	mov	r2, r3
 800f78a:	4621      	mov	r1, r4
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f7ff fea5 	bl	800f4dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f792:	bf00      	nop
 800f794:	3714      	adds	r7, #20
 800f796:	46bd      	mov	sp, r7
 800f798:	bd90      	pop	{r4, r7, pc}
 800f79a:	bf00      	nop
 800f79c:	20010784 	.word	0x20010784
 800f7a0:	2001078c 	.word	0x2001078c
 800f7a4:	20010790 	.word	0x20010790
 800f7a8:	080a4810 	.word	0x080a4810
 800f7ac:	080a4804 	.word	0x080a4804
 800f7b0:	080a4850 	.word	0x080a4850
 800f7b4:	20010788 	.word	0x20010788

0800f7b8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800f7c4:	4b07      	ldr	r3, [pc, #28]	; (800f7e4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	4b07      	ldr	r3, [pc, #28]	; (800f7e8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800f7ca:	6819      	ldr	r1, [r3, #0]
 800f7cc:	887b      	ldrh	r3, [r7, #2]
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	440b      	add	r3, r1
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	005b      	lsls	r3, r3, #1
 800f7d6:	4413      	add	r3, r2
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr
 800f7e4:	2001078c 	.word	0x2001078c
 800f7e8:	20010790 	.word	0x20010790

0800f7ec <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800f7f0:	2303      	movs	r3, #3
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800f800:	4b02      	ldr	r3, [pc, #8]	; (800f80c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800f802:	4618      	mov	r0, r3
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	20010794 	.word	0x20010794

0800f810 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d113      	bne.n	800f848 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f826:	4293      	cmp	r3, r2
 800f828:	d10e      	bne.n	800f848 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800f82a:	f7fc f83b 	bl	800b8a4 <_Z23getFont_verdana_20_4bppv>
 800f82e:	4603      	mov	r3, r0
};
 800f830:	4a07      	ldr	r2, [pc, #28]	; (800f850 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f832:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800f834:	f7fc f890 	bl	800b958 <_Z23getFont_verdana_40_4bppv>
 800f838:	4603      	mov	r3, r0
};
 800f83a:	4a05      	ldr	r2, [pc, #20]	; (800f850 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f83c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800f83e:	f7fb ffd7 	bl	800b7f0 <_Z23getFont_verdana_10_4bppv>
 800f842:	4603      	mov	r3, r0
};
 800f844:	4a02      	ldr	r2, [pc, #8]	; (800f850 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f846:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800f848:	bf00      	nop
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	20010794 	.word	0x20010794

0800f854 <_GLOBAL__sub_I_touchgfx_fonts>:
 800f854:	b580      	push	{r7, lr}
 800f856:	af00      	add	r7, sp, #0
 800f858:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f85c:	2001      	movs	r0, #1
 800f85e:	f7ff ffd7 	bl	800f810 <_Z41__static_initialization_and_destruction_0ii>
 800f862:	bd80      	pop	{r7, pc}

0800f864 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	4a05      	ldr	r2, [pc, #20]	; (800f884 <_ZN19FrontendApplicationD1Ev+0x20>)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	f7fc fd07 	bl	800c288 <_ZN23FrontendApplicationBaseD1Ev>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	08023684 	.word	0x08023684

0800f888 <_ZN19FrontendApplicationD0Ev>:
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7ff ffe7 	bl	800f864 <_ZN19FrontendApplicationD1Ev>
 800f896:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f011 fb05 	bl	8020eaa <_ZdlPvj>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b082      	sub	sp, #8
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f000 f82d 	bl	800f918 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f006 f997 	bl	8015bf4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800f8c6:	bf00      	nop
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
	...

0800f8d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	68b9      	ldr	r1, [r7, #8]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fc fd54 	bl	800c390 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800f8e8:	4a03      	ldr	r2, [pc, #12]	; (800f8f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	601a      	str	r2, [r3, #0]
{

}
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	08023684 	.word	0x08023684

0800f8fc <_ZN5ModelC1Ev>:
extern osSemaphoreId binarySemUartMsgHandle;
//extern int MainBuf;



Model::Model() : modelListener(0)
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	601a      	str	r2, [r3, #0]
{

}
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4618      	mov	r0, r3
 800f90e:	370c      	adds	r7, #12
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr

0800f918 <_ZN5Model4tickEv>:

void Model::tick()
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
    if (binarySemUartMsgHandle != NULL)
 800f920:	4b09      	ldr	r3, [pc, #36]	; (800f948 <_ZN5Model4tickEv+0x30>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00a      	beq.n	800f93e <_ZN5Model4tickEv+0x26>
    {
       if(xSemaphoreTake(binarySemUartMsgHandle, (TickType_t)10)==pdTRUE);
 800f928:	4b07      	ldr	r3, [pc, #28]	; (800f948 <_ZN5Model4tickEv+0x30>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	210a      	movs	r1, #10
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f9 fcde 	bl	80092f0 <xQueueSemaphoreTake>
 800f934:	4603      	mov	r3, r0
 800f936:	2b01      	cmp	r3, #1
       {
    	   uartMsgRdy();
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 f807 	bl	800f94c <_ZN5Model10uartMsgRdyEv>
       }
    }
}
 800f93e:	bf00      	nop
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	200004e4 	.word	0x200004e4

0800f94c <_ZN5Model10uartMsgRdyEv>:
void Model::uartMsgRdy()
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
    modelListener->uartMsgRdy();
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3308      	adds	r3, #8
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4610      	mov	r0, r2
 800f964:	4798      	blx	r3

}
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
    {
    }
 800f976:	bf00      	nop
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800f982:	b480      	push	{r7}
 800f984:	b083      	sub	sp, #12
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
    {
    }
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
	...

0800f998 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
    {
 800f9a0:	4a04      	ldr	r2, [pc, #16]	; (800f9b4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	601a      	str	r2, [r3, #0]
    }
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr
 800f9b4:	08023714 	.word	0x08023714

0800f9b8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
    }
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7ff ffe9 	bl	800f998 <_ZN8touchgfx9PresenterD1Ev>
 800f9c6:	2104      	movs	r1, #4
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f011 fa6e 	bl	8020eaa <_ZdlPvj>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
    {
 800f9e0:	4a04      	ldr	r2, [pc, #16]	; (800f9f4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	601a      	str	r2, [r3, #0]
    }
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr
 800f9f4:	08023714 	.word	0x08023714

0800f9f8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	4a06      	ldr	r2, [pc, #24]	; (800fa1c <_ZN13ModelListenerC1Ev+0x24>)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	605a      	str	r2, [r3, #4]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	370c      	adds	r7, #12
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	08023700 	.word	0x08023700

0800fa20 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	4a04      	ldr	r2, [pc, #16]	; (800fa3c <_ZN13ModelListenerD1Ev+0x1c>)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4618      	mov	r0, r3
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	08023700 	.word	0x08023700

0800fa40 <_ZN13ModelListenerD0Ev>:
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff ffe9 	bl	800fa20 <_ZN13ModelListenerD1Ev>
 800fa4e:	2108      	movs	r1, #8
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f011 fa2a 	bl	8020eaa <_ZdlPvj>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <_ZN13ModelListener10uartMsgRdyEv>:
    virtual void uartMsgRdy() {};
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	4a09      	ldr	r2, [pc, #36]	; (800faa4 <_ZN16Screen1PresenterD1Ev+0x30>)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	4a09      	ldr	r2, [pc, #36]	; (800faa8 <_ZN16Screen1PresenterD1Ev+0x34>)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	605a      	str	r2, [r3, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7ff ffc7 	bl	800fa20 <_ZN13ModelListenerD1Ev>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7ff ff7f 	bl	800f998 <_ZN8touchgfx9PresenterD1Ev>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	080236d0 	.word	0x080236d0
 800faa8:	080236ec 	.word	0x080236ec

0800faac <_ZThn4_N16Screen1PresenterD1Ev>:
 800faac:	f1a0 0004 	sub.w	r0, r0, #4
 800fab0:	e7e0      	b.n	800fa74 <_ZN16Screen1PresenterD1Ev>
 800fab2:	bf00      	nop

0800fab4 <_ZN16Screen1PresenterD0Ev>:
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7ff ffd9 	bl	800fa74 <_ZN16Screen1PresenterD1Ev>
 800fac2:	2110      	movs	r1, #16
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f011 f9f0 	bl	8020eaa <_ZdlPvj>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4618      	mov	r0, r3
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <_ZThn4_N16Screen1PresenterD0Ev>:
 800fad4:	f1a0 0004 	sub.w	r0, r0, #4
 800fad8:	e7ec      	b.n	800fab4 <_ZN16Screen1PresenterD0Ev>
	...

0800fadc <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
    : view(v)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4618      	mov	r0, r3
 800faea:	f7ff ff75 	bl	800f9d8 <_ZN8touchgfx9PresenterC1Ev>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	3304      	adds	r3, #4
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7ff ff80 	bl	800f9f8 <_ZN13ModelListenerC1Ev>
 800faf8:	4a06      	ldr	r2, [pc, #24]	; (800fb14 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	4a06      	ldr	r2, [pc, #24]	; (800fb18 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	605a      	str	r2, [r3, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	683a      	ldr	r2, [r7, #0]
 800fb08:	60da      	str	r2, [r3, #12]
{

}
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	080236d0 	.word	0x080236d0
 800fb18:	080236ec 	.word	0x080236ec

0800fb1c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]

}
 800fb24:	bf00      	nop
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]

}
 800fb38:	bf00      	nop
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <_ZN16Screen1Presenter10uartMsgRdyEv>:


void Screen1Presenter::uartMsgRdy()
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
	view.uartMsgRdy();
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	68da      	ldr	r2, [r3, #12]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	332c      	adds	r3, #44	; 0x2c
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	4798      	blx	r3
}
 800fb5e:	bf00      	nop
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <_ZThn4_N16Screen1Presenter10uartMsgRdyEv>:

    virtual void uartMsgRdy();
 800fb66:	f1a0 0004 	sub.w	r0, r0, #4
 800fb6a:	f7ff bfeb 	b.w	800fb44 <_ZN16Screen1Presenter10uartMsgRdyEv>
	...

0800fb70 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	4a05      	ldr	r2, [pc, #20]	; (800fb90 <_ZN11Screen1ViewD1Ev+0x20>)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	601a      	str	r2, [r3, #0]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fe fa3b 	bl	800dffc <_ZN15Screen1ViewBaseD1Ev>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	0802372c 	.word	0x0802372c

0800fb94 <_ZN11Screen1ViewD0Ev>:
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7ff ffe7 	bl	800fb70 <_ZN11Screen1ViewD1Ev>
 800fba2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f011 f97f 	bl	8020eaa <_ZdlPvj>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3708      	adds	r7, #8
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
	...

0800fbb8 <_ZN11Screen1ViewC1Ev>:
#include "string.h"
#include "PollingRoutines.h"

extern uint8_t uartMsgBuf[UART_BUF_SIZE];

Screen1View::Screen1View()
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fe f88c 	bl	800dce0 <_ZN15Screen1ViewBaseC1Ev>
 800fbc8:	4a03      	ldr	r2, [pc, #12]	; (800fbd8 <_ZN11Screen1ViewC1Ev+0x20>)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	601a      	str	r2, [r3, #0]
{

}
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	0802372c 	.word	0x0802372c

0800fbdc <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe fa45 	bl	800e076 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800fbec:	bf00      	nop
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fd fd5e 	bl	800d6c0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800fc04:	bf00      	nop
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <_ZN11Screen1View10uartMsgRdyEv>:
	textArea1.invalidate();
	memset(RxBuf, 0,  sizeof(RxBuf));
}*/

void Screen1View::uartMsgRdy()
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  if(uartMsgBuf[0]==0)return;
 800fc14:	4b10      	ldr	r3, [pc, #64]	; (800fc58 <_ZN11Screen1View10uartMsgRdyEv+0x4c>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d019      	beq.n	800fc50 <_ZN11Screen1View10uartMsgRdyEv+0x44>

  memset(&textArea1Buffer,0,TEXTAREA1_SIZE);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800fc22:	2211      	movs	r2, #17
 800fc24:	2100      	movs	r1, #0
 800fc26:	4618      	mov	r0, r3
 800fc28:	f011 faf4 	bl	8021214 <memset>
  Unicode::strncpy(textArea1Buffer, (char *)uartMsgBuf, TEXTAREA1_SIZE-1);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800fc32:	2210      	movs	r2, #16
 800fc34:	4908      	ldr	r1, [pc, #32]	; (800fc58 <_ZN11Screen1View10uartMsgRdyEv+0x4c>)
 800fc36:	4618      	mov	r0, r3
 800fc38:	f008 fb97 	bl	801836a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
  textArea1Buffer[16]='\0';
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
  textArea1.invalidate();
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	33cc      	adds	r3, #204	; 0xcc
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f006 ff96 	bl	8016b7a <_ZNK8touchgfx8Drawable10invalidateEv>
 800fc4e:	e000      	b.n	800fc52 <_ZN11Screen1View10uartMsgRdyEv+0x46>
  if(uartMsgBuf[0]==0)return;
 800fc50:	bf00      	nop
}
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	20000124 	.word	0x20000124

0800fc5c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	4a09      	ldr	r2, [pc, #36]	; (800fc8c <_ZN16Screen2PresenterD1Ev+0x30>)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	601a      	str	r2, [r3, #0]
 800fc6a:	4a09      	ldr	r2, [pc, #36]	; (800fc90 <_ZN16Screen2PresenterD1Ev+0x34>)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	605a      	str	r2, [r3, #4]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	3304      	adds	r3, #4
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff fed3 	bl	800fa20 <_ZN13ModelListenerD1Ev>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff fe8b 	bl	800f998 <_ZN8touchgfx9PresenterD1Ev>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	08023764 	.word	0x08023764
 800fc90:	0802377c 	.word	0x0802377c

0800fc94 <_ZThn4_N16Screen2PresenterD1Ev>:
 800fc94:	f1a0 0004 	sub.w	r0, r0, #4
 800fc98:	e7e0      	b.n	800fc5c <_ZN16Screen2PresenterD1Ev>
 800fc9a:	bf00      	nop

0800fc9c <_ZN16Screen2PresenterD0Ev>:
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff ffd9 	bl	800fc5c <_ZN16Screen2PresenterD1Ev>
 800fcaa:	2110      	movs	r1, #16
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f011 f8fc 	bl	8020eaa <_ZdlPvj>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <_ZThn4_N16Screen2PresenterD0Ev>:
 800fcbc:	f1a0 0004 	sub.w	r0, r0, #4
 800fcc0:	e7ec      	b.n	800fc9c <_ZN16Screen2PresenterD0Ev>
	...

0800fcc4 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
    : view(v)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7ff fe81 	bl	800f9d8 <_ZN8touchgfx9PresenterC1Ev>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	3304      	adds	r3, #4
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff fe8c 	bl	800f9f8 <_ZN13ModelListenerC1Ev>
 800fce0:	4a06      	ldr	r2, [pc, #24]	; (800fcfc <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	4a06      	ldr	r2, [pc, #24]	; (800fd00 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	605a      	str	r2, [r3, #4]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	683a      	ldr	r2, [r7, #0]
 800fcf0:	60da      	str	r2, [r3, #12]
{

}
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	08023764 	.word	0x08023764
 800fd00:	0802377c 	.word	0x0802377c

0800fd04 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]

}
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]

}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	4a05      	ldr	r2, [pc, #20]	; (800fd4c <_ZN11Screen2ViewD1Ev+0x20>)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff f81f 	bl	800ed80 <_ZN15Screen2ViewBaseD1Ev>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4618      	mov	r0, r3
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	08023790 	.word	0x08023790

0800fd50 <_ZN11Screen2ViewD0Ev>:
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff ffe7 	bl	800fd2c <_ZN11Screen2ViewD1Ev>
 800fd5e:	f44f 7148 	mov.w	r1, #800	; 0x320
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f011 f8a1 	bl	8020eaa <_ZdlPvj>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
	...

0800fd74 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>
extern  int counter;
Screen2View::Screen2View()
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fe fd06 	bl	800e790 <_ZN15Screen2ViewBaseC1Ev>
 800fd84:	4a03      	ldr	r2, [pc, #12]	; (800fd94 <_ZN11Screen2ViewC1Ev+0x20>)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	601a      	str	r2, [r3, #0]
{

}
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	08023790 	.word	0x08023790

0800fd98 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7ff f841 	bl	800ee2a <_ZN15Screen2ViewBase11setupScreenEv>
}
 800fda8:	bf00      	nop
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fd fc80 	bl	800d6c0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800fdc0:	bf00      	nop
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <_ZN11Screen2View7SLIDERAEv>:
 void Screen2View::SLIDERA()
    {
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
        // Override and implement this function in Screen2
	counter +=20;
 800fdd0:	4b08      	ldr	r3, [pc, #32]	; (800fdf4 <_ZN11Screen2View7SLIDERAEv+0x2c>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3314      	adds	r3, #20
 800fdd6:	4a07      	ldr	r2, [pc, #28]	; (800fdf4 <_ZN11Screen2View7SLIDERAEv+0x2c>)
 800fdd8:	6013      	str	r3, [r2, #0]
	slider1.setValue(counter);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	33cc      	adds	r3, #204	; 0xcc
 800fdde:	4a05      	ldr	r2, [pc, #20]	; (800fdf4 <_ZN11Screen2View7SLIDERAEv+0x2c>)
 800fde0:	6812      	ldr	r2, [r2, #0]
 800fde2:	4611      	mov	r1, r2
 800fde4:	4618      	mov	r0, r3
 800fde6:	f002 f98e 	bl	8012106 <_ZN8touchgfx6Slider8setValueEi>

    }
 800fdea:	bf00      	nop
 800fdec:	3708      	adds	r7, #8
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	200004f8 	.word	0x200004f8

0800fdf8 <_ZN11Screen2View7SLIDEREEv>:
    void Screen2View::SLIDERE()
    {
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
        // Override and implement this function in Screen2
    	counter -=20;
 800fe00:	4b08      	ldr	r3, [pc, #32]	; (800fe24 <_ZN11Screen2View7SLIDEREEv+0x2c>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	3b14      	subs	r3, #20
 800fe06:	4a07      	ldr	r2, [pc, #28]	; (800fe24 <_ZN11Screen2View7SLIDEREEv+0x2c>)
 800fe08:	6013      	str	r3, [r2, #0]
    	slider1.setValue(counter);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	33cc      	adds	r3, #204	; 0xcc
 800fe0e:	4a05      	ldr	r2, [pc, #20]	; (800fe24 <_ZN11Screen2View7SLIDEREEv+0x2c>)
 800fe10:	6812      	ldr	r2, [r2, #0]
 800fe12:	4611      	mov	r1, r2
 800fe14:	4618      	mov	r0, r3
 800fe16:	f002 f976 	bl	8012106 <_ZN8touchgfx6Slider8setValueEi>

        }
 800fe1a:	bf00      	nop
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	200004f8 	.word	0x200004f8

0800fe28 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
    {
 800fe30:	4a04      	ldr	r2, [pc, #16]	; (800fe44 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	601a      	str	r2, [r3, #0]
    }
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr
 800fe44:	080237e4 	.word	0x080237e4

0800fe48 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
    }
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff ffe9 	bl	800fe28 <_ZN8touchgfx15TouchControllerD1Ev>
 800fe56:	2104      	movs	r1, #4
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f011 f826 	bl	8020eaa <_ZdlPvj>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4618      	mov	r0, r3
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <_ZN20STM32TouchController4initEv>:
static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;


void STM32TouchController::init()
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]

    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fe70:	4b05      	ldr	r3, [pc, #20]	; (800fe88 <_ZN20STM32TouchController4initEv+0x20>)
 800fe72:	4a06      	ldr	r2, [pc, #24]	; (800fe8c <_ZN20STM32TouchController4initEv+0x24>)
 800fe74:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 800fe76:	4b04      	ldr	r3, [pc, #16]	; (800fe88 <_ZN20STM32TouchController4initEv+0x20>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	2070      	movs	r0, #112	; 0x70
 800fe7e:	4798      	blx	r3


}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	200107a0 	.word	0x200107a0
 800fe8c:	20000004 	.word	0x20000004

0800fe90 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
    if (tsDriver)
 800fe9c:	4b0f      	ldr	r3, [pc, #60]	; (800fedc <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d015      	beq.n	800fed0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 800fea4:	4b0d      	ldr	r3, [pc, #52]	; (800fedc <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	2070      	movs	r0, #112	; 0x70
 800feac:	4798      	blx	r3
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	bf14      	ite	ne
 800feb4:	2301      	movne	r3, #1
 800feb6:	2300      	moveq	r3, #0
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d008      	beq.n	800fed0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 800febe:	4b07      	ldr	r3, [pc, #28]	; (800fedc <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	695b      	ldr	r3, [r3, #20]
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	6879      	ldr	r1, [r7, #4]
 800fec8:	2070      	movs	r0, #112	; 0x70
 800feca:	4798      	blx	r3
            return true;
 800fecc:	2301      	movs	r3, #1
 800fece:	e000      	b.n	800fed2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	200107a0 	.word	0x200107a0

0800fee0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	4a05      	ldr	r2, [pc, #20]	; (800ff00 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7ff ff99 	bl	800fe28 <_ZN8touchgfx15TouchControllerD1Ev>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4618      	mov	r0, r3
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	080237cc 	.word	0x080237cc

0800ff04 <_ZN20STM32TouchControllerD0Ev>:
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7ff ffe7 	bl	800fee0 <_ZN20STM32TouchControllerD1Ev>
 800ff12:	2104      	movs	r1, #4
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f010 ffc8 	bl	8020eaa <_ZdlPvj>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800ff24:	b480      	push	{r7}
 800ff26:	af00      	add	r7, sp, #0

}
 800ff28:	bf00      	nop
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
	...

0800ff34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ff3e:	79fb      	ldrb	r3, [r7, #7]
 800ff40:	2b03      	cmp	r3, #3
 800ff42:	d80c      	bhi.n	800ff5e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800ff44:	a201      	add	r2, pc, #4	; (adr r2, 800ff4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800ff46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4a:	bf00      	nop
 800ff4c:	0800ff5d 	.word	0x0800ff5d
 800ff50:	0800ff5d 	.word	0x0800ff5d
 800ff54:	0800ff5d 	.word	0x0800ff5d
 800ff58:	0800ff5d 	.word	0x0800ff5d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800ff5c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800ff5e:	bf00      	nop
 800ff60:	370c      	adds	r7, #12
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop

0800ff6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	4603      	mov	r3, r0
 800ff74:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ff76:	79fb      	ldrb	r3, [r7, #7]
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d80c      	bhi.n	800ff96 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800ff7c:	a201      	add	r2, pc, #4	; (adr r2, 800ff84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800ff7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff82:	bf00      	nop
 800ff84:	0800ff95 	.word	0x0800ff95
 800ff88:	0800ff95 	.word	0x0800ff95
 800ff8c:	0800ff95 	.word	0x0800ff95
 800ff90:	0800ff95 	.word	0x0800ff95
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800ff94:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800ff96:	bf00      	nop
 800ff98:	370c      	adds	r7, #12
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop

0800ffa4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	4603      	mov	r3, r0
 800ffac:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ffae:	79fb      	ldrb	r3, [r7, #7]
 800ffb0:	2b03      	cmp	r3, #3
 800ffb2:	d80c      	bhi.n	800ffce <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800ffb4:	a201      	add	r2, pc, #4	; (adr r2, 800ffbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800ffb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffba:	bf00      	nop
 800ffbc:	0800ffcd 	.word	0x0800ffcd
 800ffc0:	0800ffcd 	.word	0x0800ffcd
 800ffc4:	0800ffcd 	.word	0x0800ffcd
 800ffc8:	0800ffcd 	.word	0x0800ffcd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800ffcc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800ffce:	bf00      	nop
 800ffd0:	370c      	adds	r7, #12
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop

0800ffdc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
    {
 800ffe4:	4a04      	ldr	r2, [pc, #16]	; (800fff8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	601a      	str	r2, [r3, #0]
    }
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4618      	mov	r0, r3
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	08023c98 	.word	0x08023c98

0800fffc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
    }
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7ff ffe9 	bl	800ffdc <_ZN8touchgfx3HALD1Ev>
 801000a:	217c      	movs	r1, #124	; 0x7c
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f010 ff4c 	bl	8020eaa <_ZdlPvj>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4618      	mov	r0, r3
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	460b      	mov	r3, r1
 8010026:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	78fa      	ldrb	r2, [r7, #3]
 801002c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2201      	movs	r2, #1
 8010034:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8010038:	bf00      	nop
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	460b      	mov	r3, r1
 801004e:	807b      	strh	r3, [r7, #2]
 8010050:	4613      	mov	r3, r2
 8010052:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8010054:	4b0c      	ldr	r3, [pc, #48]	; (8010088 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	887a      	ldrh	r2, [r7, #2]
 801005a:	429a      	cmp	r2, r3
 801005c:	d304      	bcc.n	8010068 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801005e:	4b0b      	ldr	r3, [pc, #44]	; (801008c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	883a      	ldrh	r2, [r7, #0]
 8010064:	429a      	cmp	r2, r3
 8010066:	d205      	bcs.n	8010074 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8010068:	4b09      	ldr	r3, [pc, #36]	; (8010090 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801006a:	4a0a      	ldr	r2, [pc, #40]	; (8010094 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 801006c:	219e      	movs	r1, #158	; 0x9e
 801006e:	480a      	ldr	r0, [pc, #40]	; (8010098 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8010070:	f010 ff4a 	bl	8020f08 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8010074:	4a09      	ldr	r2, [pc, #36]	; (801009c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8010076:	887b      	ldrh	r3, [r7, #2]
 8010078:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 801007a:	4a09      	ldr	r2, [pc, #36]	; (80100a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 801007c:	883b      	ldrh	r3, [r7, #0]
 801007e:	8013      	strh	r3, [r2, #0]
    }
 8010080:	bf00      	nop
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	20011b2e 	.word	0x20011b2e
 801008c:	20011b30 	.word	0x20011b30
 8010090:	08022b18 	.word	0x08022b18
 8010094:	08022b7c 	.word	0x08022b7c
 8010098:	08022bc0 	.word	0x08022bc0
 801009c:	20011b34 	.word	0x20011b34
 80100a0:	20011b36 	.word	0x20011b36

080100a4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d009      	beq.n	80100ca <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	685a      	ldr	r2, [r3, #4]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4610      	mov	r0, r2
 80100c4:	4798      	blx	r3
 80100c6:	4603      	mov	r3, r0
 80100c8:	e000      	b.n	80100cc <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80100ca:	2300      	movs	r3, #0
    }
 80100cc:	4618      	mov	r0, r3
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f003 f833 	bl	8013148 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	33ac      	adds	r3, #172	; 0xac
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	4798      	blx	r3
    }
 80100ee:	bf00      	nop
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80100f6:	b480      	push	{r7}
 80100f8:	b083      	sub	sp, #12
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8010100:	2300      	movs	r3, #0
    }
 8010102:	4618      	mov	r0, r3
 8010104:	370c      	adds	r7, #12
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
	...

08010110 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
 801011c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d106      	bne.n	8010132 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010124:	4b0f      	ldr	r3, [pc, #60]	; (8010164 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8010126:	4a10      	ldr	r2, [pc, #64]	; (8010168 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8010128:	f240 21d2 	movw	r1, #722	; 0x2d2
 801012c:	480f      	ldr	r0, [pc, #60]	; (801016c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801012e:	f010 feeb 	bl	8020f08 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	68ba      	ldr	r2, [r7, #8]
 8010136:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2b00      	cmp	r3, #0
 8010142:	bf14      	ite	ne
 8010144:	2301      	movne	r3, #1
 8010146:	2300      	moveq	r3, #0
 8010148:	b2da      	uxtb	r2, r3
 801014a:	4b09      	ldr	r3, [pc, #36]	; (8010170 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801014c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	338c      	adds	r3, #140	; 0x8c
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6839      	ldr	r1, [r7, #0]
 8010158:	68f8      	ldr	r0, [r7, #12]
 801015a:	4798      	blx	r3
    }
 801015c:	bf00      	nop
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}
 8010164:	08022c04 	.word	0x08022c04
 8010168:	08022c3c 	.word	0x08022c3c
 801016c:	08022bc0 	.word	0x08022bc0
 8010170:	20011b38 	.word	0x20011b38

08010174 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	bf14      	ite	ne
 801018a:	2301      	movne	r3, #1
 801018c:	2300      	moveq	r3, #0
 801018e:	b2da      	uxtb	r2, r3
 8010190:	4b03      	ldr	r3, [pc, #12]	; (80101a0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8010192:	701a      	strb	r2, [r3, #0]
    }
 8010194:	bf00      	nop
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	20011b39 	.word	0x20011b39

080101a4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80101ac:	2300      	movs	r3, #0
    }
 80101ae:	4618      	mov	r0, r3
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	460b      	mov	r3, r1
 80101c4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d004      	beq.n	80101d8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d2:	887a      	ldrh	r2, [r7, #2]
 80101d4:	4610      	mov	r0, r2
 80101d6:	4798      	blx	r3
        }
    }
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80101e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80101ec:	4618      	mov	r0, r3
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3318      	adds	r3, #24
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4610      	mov	r0, r2
 8010210:	4798      	blx	r3
 8010212:	4603      	mov	r3, r0
    }
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801021c:	b480      	push	{r7}
 801021e:	b085      	sub	sp, #20
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010230:	429a      	cmp	r2, r3
 8010232:	d011      	beq.n	8010258 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8010234:	4b14      	ldr	r3, [pc, #80]	; (8010288 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d11e      	bne.n	801027a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 801023c:	4b13      	ldr	r3, [pc, #76]	; (801028c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801023e:	881b      	ldrh	r3, [r3, #0]
 8010240:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8010242:	4b13      	ldr	r3, [pc, #76]	; (8010290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010244:	881a      	ldrh	r2, [r3, #0]
 8010246:	4b11      	ldr	r3, [pc, #68]	; (801028c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010248:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801024a:	4a11      	ldr	r2, [pc, #68]	; (8010290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801024c:	89bb      	ldrh	r3, [r7, #12]
 801024e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010250:	4b0d      	ldr	r3, [pc, #52]	; (8010288 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010252:	2201      	movs	r2, #1
 8010254:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8010256:	e010      	b.n	801027a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8010258:	4b0b      	ldr	r3, [pc, #44]	; (8010288 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00c      	beq.n	801027a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8010260:	4b0a      	ldr	r3, [pc, #40]	; (801028c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8010266:	4b0a      	ldr	r3, [pc, #40]	; (8010290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010268:	881a      	ldrh	r2, [r3, #0]
 801026a:	4b08      	ldr	r3, [pc, #32]	; (801028c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801026c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 801026e:	4a08      	ldr	r2, [pc, #32]	; (8010290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010270:	89fb      	ldrh	r3, [r7, #14]
 8010272:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8010274:	4b04      	ldr	r3, [pc, #16]	; (8010288 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010276:	2200      	movs	r2, #0
 8010278:	701a      	strb	r2, [r3, #0]
    }
 801027a:	bf00      	nop
 801027c:	3714      	adds	r7, #20
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop
 8010288:	20011b32 	.word	0x20011b32
 801028c:	20011b30 	.word	0x20011b30
 8010290:	20011b2e 	.word	0x20011b2e

08010294 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4618      	mov	r0, r3
 80102a0:	f002 f9b5 	bl	801260e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80102a4:	bf00      	nop
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	4a05      	ldr	r2, [pc, #20]	; (80102cc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	601a      	str	r2, [r3, #0]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	f7ff fe8d 	bl	800ffdc <_ZN8touchgfx3HALD1Ev>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4618      	mov	r0, r3
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	08023a24 	.word	0x08023a24

080102d0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f7ff ffe7 	bl	80102ac <_ZN20TouchGFXGeneratedHALD1Ev>
 80102de:	217c      	movs	r1, #124	; 0x7c
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f010 fde2 	bl	8020eaa <_ZdlPvj>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7ff ffca 	bl	8010294 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8010300:	bf00      	nop
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4618      	mov	r0, r3
 8010314:	f001 fad4 	bl	80118c0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8010318:	bf00      	nop
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4618      	mov	r0, r3
 801032c:	f001 fb6a 	bl	8011a04 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8010330:	4603      	mov	r3, r0
}
 8010332:	4618      	mov	r0, r3
 8010334:	3708      	adds	r7, #8
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b082      	sub	sp, #8
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
 8010342:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6839      	ldr	r1, [r7, #0]
 8010348:	4618      	mov	r0, r3
 801034a:	f001 fb69 	bl	8011a20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801034e:	bf00      	nop
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b082      	sub	sp, #8
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
 801035e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	4618      	mov	r0, r3
 8010366:	f001 fb71 	bl	8011a4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801036a:	bf00      	nop
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b084      	sub	sp, #16
 8010376:	af00      	add	r7, sp, #0
 8010378:	60f8      	str	r0, [r7, #12]
 801037a:	60b9      	str	r1, [r7, #8]
 801037c:	607a      	str	r2, [r7, #4]
 801037e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	68b9      	ldr	r1, [r7, #8]
 8010388:	f001 fb6e 	bl	8011a68 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 801038c:	4603      	mov	r3, r0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3710      	adds	r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}

08010396 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8010396:	b580      	push	{r7, lr}
 8010398:	b082      	sub	sp, #8
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f001 fab1 	bl	8011908 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80103a6:	bf00      	nop
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b082      	sub	sp, #8
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f001 fab5 	bl	8011928 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80103be:	bf00      	nop
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b082      	sub	sp, #8
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f001 fab7 	bl	8011944 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80103d6:	bf00      	nop
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b082      	sub	sp, #8
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4618      	mov	r0, r3
 80103ea:	f001 fab9 	bl	8011960 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80103ee:	bf00      	nop
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b082      	sub	sp, #8
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4618      	mov	r0, r3
 8010402:	f001 fadb 	bl	80119bc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8010406:	4603      	mov	r3, r0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4618      	mov	r0, r3
 801041c:	f001 fadc 	bl	80119d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	4a05      	ldr	r2, [pc, #20]	; (8010448 <_ZN11TouchGFXHALD1Ev+0x20>)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	601a      	str	r2, [r3, #0]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff ff37 	bl	80102ac <_ZN20TouchGFXGeneratedHALD1Ev>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4618      	mov	r0, r3
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	080237fc 	.word	0x080237fc

0801044c <_ZN11TouchGFXHALD0Ev>:
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff ffe7 	bl	8010428 <_ZN11TouchGFXHALD1Ev>
 801045a:	217c      	movs	r1, #124	; 0x7c
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f010 fd24 	bl	8020eaa <_ZdlPvj>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 801046c:	b580      	push	{r7, lr}
 801046e:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8010470:	2101      	movs	r1, #1
 8010472:	4811      	ldr	r0, [pc, #68]	; (80104b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8010474:	f7f8 fb46 	bl	8008b04 <osSemaphoreCreate>
 8010478:	4603      	mov	r3, r0
 801047a:	4a10      	ldr	r2, [pc, #64]	; (80104bc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801047c:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 801047e:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d105      	bne.n	8010492 <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8010486:	4b0e      	ldr	r3, [pc, #56]	; (80104c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8010488:	4a0e      	ldr	r2, [pc, #56]	; (80104c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801048a:	2127      	movs	r1, #39	; 0x27
 801048c:	480e      	ldr	r0, [pc, #56]	; (80104c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801048e:	f010 fd3b 	bl	8020f08 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 8010492:	2101      	movs	r1, #1
 8010494:	480d      	ldr	r0, [pc, #52]	; (80104cc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8010496:	f7f8 fb35 	bl	8008b04 <osSemaphoreCreate>
 801049a:	4603      	mov	r3, r0
 801049c:	4a0c      	ldr	r2, [pc, #48]	; (80104d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801049e:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 80104a0:	4b0b      	ldr	r3, [pc, #44]	; (80104d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d105      	bne.n	80104b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 80104a8:	4b0a      	ldr	r3, [pc, #40]	; (80104d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 80104aa:	4a06      	ldr	r2, [pc, #24]	; (80104c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80104ac:	212a      	movs	r1, #42	; 0x2a
 80104ae:	4806      	ldr	r0, [pc, #24]	; (80104c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80104b0:	f010 fd2a 	bl	8020f08 <__assert_func>
}
 80104b4:	bf00      	nop
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	080238cc 	.word	0x080238cc
 80104bc:	200107a4 	.word	0x200107a4
 80104c0:	08022c8c 	.word	0x08022c8c
 80104c4:	08022cd8 	.word	0x08022cd8
 80104c8:	08022d08 	.word	0x08022d08
 80104cc:	080238d0 	.word	0x080238d0
 80104d0:	200107a8 	.word	0x200107a8
 80104d4:	08022d34 	.word	0x08022d34

080104d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 80104dc:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f04f 31ff 	mov.w	r1, #4294967295
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f8 fb31 	bl	8008b4c <osSemaphoreWait>
}
 80104ea:	bf00      	nop
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	200107a4 	.word	0x200107a4

080104f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80104f8:	4b03      	ldr	r3, [pc, #12]	; (8010508 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7f8 fb73 	bl	8008be8 <osSemaphoreRelease>
}
 8010502:	bf00      	nop
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	200107a4 	.word	0x200107a4

0801050c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801050c:	b580      	push	{r7, lr}
 801050e:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8010510:	4b03      	ldr	r3, [pc, #12]	; (8010520 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2100      	movs	r1, #0
 8010516:	4618      	mov	r0, r3
 8010518:	f7f8 fb18 	bl	8008b4c <osSemaphoreWait>
}
 801051c:	bf00      	nop
 801051e:	bd80      	pop	{r7, pc}
 8010520:	200107a4 	.word	0x200107a4

08010524 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010524:	b580      	push	{r7, lr}
 8010526:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8010528:	4b03      	ldr	r3, [pc, #12]	; (8010538 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4618      	mov	r0, r3
 801052e:	f7f8 fb5b 	bl	8008be8 <osSemaphoreRelease>
}
 8010532:	bf00      	nop
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	200107a4 	.word	0x200107a4

0801053c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 801053c:	b580      	push	{r7, lr}
 801053e:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8010540:	4b03      	ldr	r3, [pc, #12]	; (8010550 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4618      	mov	r0, r3
 8010546:	f7f8 fb4f 	bl	8008be8 <osSemaphoreRelease>
}
 801054a:	bf00      	nop
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	200107a8 	.word	0x200107a8

08010554 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8010554:	b580      	push	{r7, lr}
 8010556:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8010558:	4b07      	ldr	r3, [pc, #28]	; (8010578 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2100      	movs	r1, #0
 801055e:	4618      	mov	r0, r3
 8010560:	f7f8 faf4 	bl	8008b4c <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8010564:	4b04      	ldr	r3, [pc, #16]	; (8010578 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f04f 31ff 	mov.w	r1, #4294967295
 801056c:	4618      	mov	r0, r3
 801056e:	f7f8 faed 	bl	8008b4c <osSemaphoreWait>
}
 8010572:	bf00      	nop
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	200107a8 	.word	0x200107a8

0801057c <__NVIC_EnableIRQ>:
{
 801057c:	b480      	push	{r7}
 801057e:	b083      	sub	sp, #12
 8010580:	af00      	add	r7, sp, #0
 8010582:	4603      	mov	r3, r0
 8010584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801058a:	2b00      	cmp	r3, #0
 801058c:	db0b      	blt.n	80105a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801058e:	79fb      	ldrb	r3, [r7, #7]
 8010590:	f003 021f 	and.w	r2, r3, #31
 8010594:	4907      	ldr	r1, [pc, #28]	; (80105b4 <__NVIC_EnableIRQ+0x38>)
 8010596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801059a:	095b      	lsrs	r3, r3, #5
 801059c:	2001      	movs	r0, #1
 801059e:	fa00 f202 	lsl.w	r2, r0, r2
 80105a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80105a6:	bf00      	nop
 80105a8:	370c      	adds	r7, #12
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop
 80105b4:	e000e100 	.word	0xe000e100

080105b8 <__NVIC_DisableIRQ>:
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	4603      	mov	r3, r0
 80105c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80105c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	db12      	blt.n	80105f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80105ca:	79fb      	ldrb	r3, [r7, #7]
 80105cc:	f003 021f 	and.w	r2, r3, #31
 80105d0:	490a      	ldr	r1, [pc, #40]	; (80105fc <__NVIC_DisableIRQ+0x44>)
 80105d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105d6:	095b      	lsrs	r3, r3, #5
 80105d8:	2001      	movs	r0, #1
 80105da:	fa00 f202 	lsl.w	r2, r0, r2
 80105de:	3320      	adds	r3, #32
 80105e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80105e4:	f3bf 8f4f 	dsb	sy
}
 80105e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80105ea:	f3bf 8f6f 	isb	sy
}
 80105ee:	bf00      	nop
}
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	e000e100 	.word	0xe000e100

08010600 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
        return color;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
    }
 801060c:	4618      	mov	r0, r3
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
    {
 8010620:	4a04      	ldr	r2, [pc, #16]	; (8010634 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	601a      	str	r2, [r3, #0]
    }
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr
 8010634:	0802392c 	.word	0x0802392c

08010638 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
    }
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7ff ffe9 	bl	8010618 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010646:	2104      	movs	r1, #4
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f010 fc2e 	bl	8020eaa <_ZdlPvj>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4618      	mov	r0, r3
 8010652:	3708      	adds	r7, #8
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	3344      	adds	r3, #68	; 0x44
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	4798      	blx	r3
    }
 801066c:	bf00      	nop
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
    {
 801067c:	4a04      	ldr	r2, [pc, #16]	; (8010690 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	601a      	str	r2, [r3, #0]
    }
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4618      	mov	r0, r3
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	08023d70 	.word	0x08023d70

08010694 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
    }
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7ff ffe9 	bl	8010674 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80106a2:	210c      	movs	r1, #12
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f010 fc00 	bl	8020eaa <_ZdlPvj>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4618      	mov	r0, r3
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80106b4:	b480      	push	{r7}
 80106b6:	b083      	sub	sp, #12
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80106be:	4a09      	ldr	r2, [pc, #36]	; (80106e4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	683a      	ldr	r2, [r7, #0]
 80106c8:	605a      	str	r2, [r3, #4]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2200      	movs	r2, #0
 80106ce:	721a      	strb	r2, [r3, #8]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	725a      	strb	r2, [r3, #9]
    {
    }
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4618      	mov	r0, r3
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr
 80106e4:	08023d70 	.word	0x08023d70

080106e8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80106f0:	2301      	movs	r3, #1
    }
 80106f2:	4618      	mov	r0, r3
 80106f4:	370c      	adds	r7, #12
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80106fe:	b580      	push	{r7, lr}
 8010700:	b082      	sub	sp, #8
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3328      	adds	r3, #40	; 0x28
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4610      	mov	r0, r2
 8010712:	4798      	blx	r3
    }
 8010714:	bf00      	nop
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	685a      	ldr	r2, [r3, #4]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	3314      	adds	r3, #20
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4610      	mov	r0, r2
 8010734:	4798      	blx	r3
    }
 8010736:	bf00      	nop
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}

0801073e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 801073e:	b580      	push	{r7, lr}
 8010740:	b082      	sub	sp, #8
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8010746:	f7fb fc11 	bl	800bf6c <_ZN8touchgfx3HAL11getInstanceEv>
 801074a:	4603      	mov	r3, r0
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff ffe5 	bl	801071c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8010752:	bf00      	nop
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	330c      	adds	r3, #12
 8010766:	4618      	mov	r0, r3
 8010768:	f7fd fdf9 	bl	800e35e <_ZN8touchgfx9colortypeC1Ev>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
	...

08010778 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8010778:	b5b0      	push	{r4, r5, r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	330c      	adds	r3, #12
 8010786:	4619      	mov	r1, r3
 8010788:	4610      	mov	r0, r2
 801078a:	f7ff ff93 	bl	80106b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801078e:	4a0e      	ldr	r2, [pc, #56]	; (80107c8 <_ZN8STM32DMAC1Ev+0x50>)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	601a      	str	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f103 000c 	add.w	r0, r3, #12
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	3320      	adds	r3, #32
 801079e:	2260      	movs	r2, #96	; 0x60
 80107a0:	4619      	mov	r1, r3
 80107a2:	f002 fe0b 	bl	80133bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	3320      	adds	r3, #32
 80107aa:	245f      	movs	r4, #95	; 0x5f
 80107ac:	461d      	mov	r5, r3
 80107ae:	2c00      	cmp	r4, #0
 80107b0:	db05      	blt.n	80107be <_ZN8STM32DMAC1Ev+0x46>
 80107b2:	4628      	mov	r0, r5
 80107b4:	f7ff ffd1 	bl	801075a <_ZN8touchgfx6BlitOpC1Ev>
 80107b8:	3524      	adds	r5, #36	; 0x24
 80107ba:	3c01      	subs	r4, #1
 80107bc:	e7f7      	b.n	80107ae <_ZN8STM32DMAC1Ev+0x36>
{
}
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4618      	mov	r0, r3
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bdb0      	pop	{r4, r5, r7, pc}
 80107c8:	080238dc 	.word	0x080238dc

080107cc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	4a09      	ldr	r2, [pc, #36]	; (80107fc <_ZN8STM32DMAD1Ev+0x30>)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80107da:	205a      	movs	r0, #90	; 0x5a
 80107dc:	f7ff feec 	bl	80105b8 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	330c      	adds	r3, #12
 80107e4:	4618      	mov	r0, r3
 80107e6:	f000 faaf 	bl	8010d48 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ff ff41 	bl	8010674 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4618      	mov	r0, r3
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	080238dc 	.word	0x080238dc

08010800 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
}
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff ffdf 	bl	80107cc <_ZN8STM32DMAD1Ev>
 801080e:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f010 fb49 	bl	8020eaa <_ZdlPvj>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4618      	mov	r0, r3
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
	...

08010824 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801082c:	4b10      	ldr	r3, [pc, #64]	; (8010870 <_ZN8STM32DMA10initializeEv+0x4c>)
 801082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010830:	4a0f      	ldr	r2, [pc, #60]	; (8010870 <_ZN8STM32DMA10initializeEv+0x4c>)
 8010832:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010836:	6313      	str	r3, [r2, #48]	; 0x30
 8010838:	4b0d      	ldr	r3, [pc, #52]	; (8010870 <_ZN8STM32DMA10initializeEv+0x4c>)
 801083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801083c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010840:	60fb      	str	r3, [r7, #12]
 8010842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8010844:	4b0a      	ldr	r3, [pc, #40]	; (8010870 <_ZN8STM32DMA10initializeEv+0x4c>)
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	4a09      	ldr	r2, [pc, #36]	; (8010870 <_ZN8STM32DMA10initializeEv+0x4c>)
 801084a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801084e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8010850:	4b07      	ldr	r3, [pc, #28]	; (8010870 <_ZN8STM32DMA10initializeEv+0x4c>)
 8010852:	691b      	ldr	r3, [r3, #16]
 8010854:	4a06      	ldr	r2, [pc, #24]	; (8010870 <_ZN8STM32DMA10initializeEv+0x4c>)
 8010856:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801085a:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801085c:	4b05      	ldr	r3, [pc, #20]	; (8010874 <_ZN8STM32DMA10initializeEv+0x50>)
 801085e:	4a06      	ldr	r2, [pc, #24]	; (8010878 <_ZN8STM32DMA10initializeEv+0x54>)
 8010860:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8010862:	205a      	movs	r0, #90	; 0x5a
 8010864:	f7ff fe8a 	bl	801057c <__NVIC_EnableIRQ>
}
 8010868:	bf00      	nop
 801086a:	3710      	adds	r7, #16
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	40023800 	.word	0x40023800
 8010874:	2000015c 	.word	0x2000015c
 8010878:	0801073f 	.word	0x0801073f

0801087c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	460b      	mov	r3, r1
 8010886:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8010888:	2300      	movs	r3, #0
 801088a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801088c:	78fb      	ldrb	r3, [r7, #3]
 801088e:	2b0b      	cmp	r3, #11
 8010890:	d826      	bhi.n	80108e0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8010892:	a201      	add	r2, pc, #4	; (adr r2, 8010898 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8010894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010898:	080108d5 	.word	0x080108d5
 801089c:	080108cf 	.word	0x080108cf
 80108a0:	080108c9 	.word	0x080108c9
 80108a4:	080108e1 	.word	0x080108e1
 80108a8:	080108e1 	.word	0x080108e1
 80108ac:	080108e1 	.word	0x080108e1
 80108b0:	080108e1 	.word	0x080108e1
 80108b4:	080108db 	.word	0x080108db
 80108b8:	080108db 	.word	0x080108db
 80108bc:	080108db 	.word	0x080108db
 80108c0:	080108db 	.word	0x080108db
 80108c4:	080108db 	.word	0x080108db
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80108c8:	2300      	movs	r3, #0
 80108ca:	60fb      	str	r3, [r7, #12]
        break;
 80108cc:	e00e      	b.n	80108ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80108ce:	2301      	movs	r3, #1
 80108d0:	60fb      	str	r3, [r7, #12]
        break;
 80108d2:	e00b      	b.n	80108ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80108d4:	2302      	movs	r3, #2
 80108d6:	60fb      	str	r3, [r7, #12]
        break;
 80108d8:	e008      	b.n	80108ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80108da:	2305      	movs	r3, #5
 80108dc:	60fb      	str	r3, [r7, #12]
        break;
 80108de:	e005      	b.n	80108ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80108e0:	4b05      	ldr	r3, [pc, #20]	; (80108f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80108e2:	4a06      	ldr	r2, [pc, #24]	; (80108fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80108e4:	2166      	movs	r1, #102	; 0x66
 80108e6:	4806      	ldr	r0, [pc, #24]	; (8010900 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80108e8:	f010 fb0e 	bl	8020f08 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80108ec:	68fb      	ldr	r3, [r7, #12]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	08022d70 	.word	0x08022d70
 80108fc:	08022d8c 	.word	0x08022d8c
 8010900:	08022dd8 	.word	0x08022dd8

08010904 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	460b      	mov	r3, r1
 801090e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010910:	2300      	movs	r3, #0
 8010912:	60fb      	str	r3, [r7, #12]

    switch (format)
 8010914:	78fb      	ldrb	r3, [r7, #3]
 8010916:	2b0a      	cmp	r3, #10
 8010918:	d821      	bhi.n	801095e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801091a:	a201      	add	r2, pc, #4	; (adr r2, 8010920 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010920:	08010959 	.word	0x08010959
 8010924:	08010953 	.word	0x08010953
 8010928:	0801094d 	.word	0x0801094d
 801092c:	0801095f 	.word	0x0801095f
 8010930:	0801095f 	.word	0x0801095f
 8010934:	0801095f 	.word	0x0801095f
 8010938:	0801095f 	.word	0x0801095f
 801093c:	08010953 	.word	0x08010953
 8010940:	08010953 	.word	0x08010953
 8010944:	08010953 	.word	0x08010953
 8010948:	08010953 	.word	0x08010953
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801094c:	2300      	movs	r3, #0
 801094e:	60fb      	str	r3, [r7, #12]
        break;
 8010950:	e00b      	b.n	801096a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8010952:	2301      	movs	r3, #1
 8010954:	60fb      	str	r3, [r7, #12]
        break;
 8010956:	e008      	b.n	801096a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8010958:	2302      	movs	r3, #2
 801095a:	60fb      	str	r3, [r7, #12]
        break;
 801095c:	e005      	b.n	801096a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801095e:	4b05      	ldr	r3, [pc, #20]	; (8010974 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8010960:	4a05      	ldr	r2, [pc, #20]	; (8010978 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8010962:	2187      	movs	r1, #135	; 0x87
 8010964:	4805      	ldr	r0, [pc, #20]	; (801097c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8010966:	f010 facf 	bl	8020f08 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801096a:	68fb      	ldr	r3, [r7, #12]
}
 801096c:	4618      	mov	r0, r3
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	08022d70 	.word	0x08022d70
 8010978:	08022e04 	.word	0x08022e04
 801097c:	08022dd8 	.word	0x08022dd8

08010980 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8010988:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 801098c:	4618      	mov	r0, r3
 801098e:	370c      	adds	r7, #12
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr

08010998 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8010998:	b590      	push	{r4, r7, lr}
 801099a:	b089      	sub	sp, #36	; 0x24
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	7f5b      	ldrb	r3, [r3, #29]
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff ff67 	bl	801087c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80109ae:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	7f9b      	ldrb	r3, [r3, #30]
 80109b4:	4619      	mov	r1, r3
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7ff ff60 	bl	801087c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80109bc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	7f9b      	ldrb	r3, [r3, #30]
 80109c2:	4619      	mov	r1, r3
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7ff ff9d 	bl	8010904 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80109ca:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	8b5b      	ldrh	r3, [r3, #26]
 80109d0:	461a      	mov	r2, r3
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	8a9b      	ldrh	r3, [r3, #20]
 80109d6:	1ad2      	subs	r2, r2, r3
 80109d8:	4b92      	ldr	r3, [pc, #584]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80109da:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	8b5b      	ldrh	r3, [r3, #26]
 80109e0:	461a      	mov	r2, r3
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	8a9b      	ldrh	r3, [r3, #20]
 80109e6:	1ad2      	subs	r2, r2, r3
 80109e8:	4b8e      	ldr	r3, [pc, #568]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80109ea:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	8b1b      	ldrh	r3, [r3, #24]
 80109f0:	461a      	mov	r2, r3
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	8a9b      	ldrh	r3, [r3, #20]
 80109f6:	1ad2      	subs	r2, r2, r3
 80109f8:	4b8a      	ldr	r3, [pc, #552]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80109fa:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80109fc:	4a89      	ldr	r2, [pc, #548]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	8adb      	ldrh	r3, [r3, #22]
 8010a06:	461a      	mov	r2, r3
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	8a9b      	ldrh	r3, [r3, #20]
 8010a0c:	041b      	lsls	r3, r3, #16
 8010a0e:	431a      	orrs	r2, r3
 8010a10:	4b84      	ldr	r3, [pc, #528]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	691a      	ldr	r2, [r3, #16]
 8010a18:	4b82      	ldr	r3, [pc, #520]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	685a      	ldr	r2, [r3, #4]
 8010a20:	4b80      	ldr	r3, [pc, #512]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a22:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a2c:	d037      	beq.n	8010a9e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8010a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a32:	f200 80e3 	bhi.w	8010bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8010a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a3a:	d015      	beq.n	8010a68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8010a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a40:	f200 80dc 	bhi.w	8010bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8010a44:	2b80      	cmp	r3, #128	; 0x80
 8010a46:	d045      	beq.n	8010ad4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8010a48:	2b80      	cmp	r3, #128	; 0x80
 8010a4a:	f200 80d7 	bhi.w	8010bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8010a4e:	2b40      	cmp	r3, #64	; 0x40
 8010a50:	f000 80bf 	beq.w	8010bd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8010a54:	2b40      	cmp	r3, #64	; 0x40
 8010a56:	f200 80d1 	bhi.w	8010bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8010a5a:	2b04      	cmp	r3, #4
 8010a5c:	f000 80a4 	beq.w	8010ba8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8010a60:	2b20      	cmp	r3, #32
 8010a62:	f000 80b6 	beq.w	8010bd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8010a66:	e0c9      	b.n	8010bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	7f1b      	ldrb	r3, [r3, #28]
 8010a6c:	061b      	lsls	r3, r3, #24
 8010a6e:	4619      	mov	r1, r3
 8010a70:	4a6c      	ldr	r2, [pc, #432]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a72:	4b6d      	ldr	r3, [pc, #436]	; (8010c28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a74:	430b      	orrs	r3, r1
 8010a76:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	330c      	adds	r3, #12
 8010a7c:	4c69      	ldr	r4, [pc, #420]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ff fdbe 	bl	8010600 <_ZNK8touchgfx9colortypecvmEv>
 8010a84:	4603      	mov	r3, r0
 8010a86:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010a88:	4a66      	ldr	r2, [pc, #408]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	691a      	ldr	r2, [r3, #16]
 8010a92:	4b64      	ldr	r3, [pc, #400]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a94:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010a96:	4b63      	ldr	r3, [pc, #396]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010a98:	4a64      	ldr	r2, [pc, #400]	; (8010c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010a9a:	601a      	str	r2, [r3, #0]
        break;
 8010a9c:	e0d9      	b.n	8010c52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	7f1b      	ldrb	r3, [r3, #28]
 8010aa2:	061b      	lsls	r3, r3, #24
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	4a5f      	ldr	r2, [pc, #380]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010aa8:	4b61      	ldr	r3, [pc, #388]	; (8010c30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010aaa:	430b      	orrs	r3, r1
 8010aac:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	330c      	adds	r3, #12
 8010ab2:	4c5c      	ldr	r4, [pc, #368]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff fda3 	bl	8010600 <_ZNK8touchgfx9colortypecvmEv>
 8010aba:	4603      	mov	r3, r0
 8010abc:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010abe:	4a59      	ldr	r2, [pc, #356]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	691a      	ldr	r2, [r3, #16]
 8010ac8:	4b56      	ldr	r3, [pc, #344]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010aca:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010acc:	4b55      	ldr	r3, [pc, #340]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010ace:	4a57      	ldr	r2, [pc, #348]	; (8010c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010ad0:	601a      	str	r2, [r3, #0]
        break;
 8010ad2:	e0be      	b.n	8010c52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8010ada:	2301      	movs	r3, #1
 8010adc:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	7f1b      	ldrb	r3, [r3, #28]
 8010ae2:	061b      	lsls	r3, r3, #24
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	4a4e      	ldr	r2, [pc, #312]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010af0:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010af2:	4a4c      	ldr	r2, [pc, #304]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	691a      	ldr	r2, [r3, #16]
 8010afc:	4b49      	ldr	r3, [pc, #292]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010afe:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	1d1a      	adds	r2, r3, #4
 8010b04:	4b47      	ldr	r3, [pc, #284]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b06:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	881b      	ldrh	r3, [r3, #0]
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d002      	beq.n	8010b18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d00d      	beq.n	8010b32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8010b16:	e020      	b.n	8010b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010b18:	4b42      	ldr	r3, [pc, #264]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b1a:	69da      	ldr	r2, [r3, #28]
 8010b1c:	4b45      	ldr	r3, [pc, #276]	; (8010c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010b1e:	4013      	ands	r3, r2
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	8852      	ldrh	r2, [r2, #2]
 8010b24:	3a01      	subs	r2, #1
 8010b26:	0212      	lsls	r2, r2, #8
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4a3e      	ldr	r2, [pc, #248]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b2c:	430b      	orrs	r3, r1
 8010b2e:	61d3      	str	r3, [r2, #28]
                break;
 8010b30:	e01a      	b.n	8010b68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	7f1b      	ldrb	r3, [r3, #28]
 8010b36:	2bff      	cmp	r3, #255	; 0xff
 8010b38:	d101      	bne.n	8010b3e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010b3e:	4b39      	ldr	r3, [pc, #228]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b40:	69da      	ldr	r2, [r3, #28]
 8010b42:	4b3c      	ldr	r3, [pc, #240]	; (8010c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010b44:	4013      	ands	r3, r2
 8010b46:	68fa      	ldr	r2, [r7, #12]
 8010b48:	8852      	ldrh	r2, [r2, #2]
 8010b4a:	3a01      	subs	r2, #1
 8010b4c:	0212      	lsls	r2, r2, #8
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	4a34      	ldr	r2, [pc, #208]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b52:	f043 0310 	orr.w	r3, r3, #16
 8010b56:	61d3      	str	r3, [r2, #28]
                break;
 8010b58:	e006      	b.n	8010b68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8010b5a:	4b37      	ldr	r3, [pc, #220]	; (8010c38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010b5c:	4a37      	ldr	r2, [pc, #220]	; (8010c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8010b5e:	f240 1101 	movw	r1, #257	; 0x101
 8010b62:	4837      	ldr	r0, [pc, #220]	; (8010c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8010b64:	f010 f9d0 	bl	8020f08 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8010b68:	4b2e      	ldr	r3, [pc, #184]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b6a:	69db      	ldr	r3, [r3, #28]
 8010b6c:	4a2d      	ldr	r2, [pc, #180]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b6e:	f043 0320 	orr.w	r3, r3, #32
 8010b72:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8010b74:	4b2b      	ldr	r3, [pc, #172]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b76:	69db      	ldr	r3, [r3, #28]
 8010b78:	f003 0320 	and.w	r3, r3, #32
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	bf14      	ite	ne
 8010b80:	2301      	movne	r3, #1
 8010b82:	2300      	moveq	r3, #0
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d000      	beq.n	8010b8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8010b8a:	e7f3      	b.n	8010b74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8010b8c:	4b25      	ldr	r3, [pc, #148]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b8e:	2210      	movs	r2, #16
 8010b90:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8010b92:	7ffb      	ldrb	r3, [r7, #31]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d003      	beq.n	8010ba0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010b98:	4b22      	ldr	r3, [pc, #136]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010b9a:	4a24      	ldr	r2, [pc, #144]	; (8010c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010b9c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8010b9e:	e058      	b.n	8010c52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8010ba0:	4b20      	ldr	r3, [pc, #128]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010ba2:	4a28      	ldr	r2, [pc, #160]	; (8010c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8010ba4:	601a      	str	r2, [r3, #0]
        break;
 8010ba6:	e054      	b.n	8010c52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	7f1b      	ldrb	r3, [r3, #28]
 8010bac:	061b      	lsls	r3, r3, #24
 8010bae:	461a      	mov	r2, r3
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	4a1b      	ldr	r2, [pc, #108]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010bba:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010bbc:	4a19      	ldr	r2, [pc, #100]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	691a      	ldr	r2, [r3, #16]
 8010bc6:	4b17      	ldr	r3, [pc, #92]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010bc8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010bca:	4b16      	ldr	r3, [pc, #88]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010bcc:	4a17      	ldr	r2, [pc, #92]	; (8010c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010bce:	601a      	str	r2, [r3, #0]
        break;
 8010bd0:	e03f      	b.n	8010c52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	7f1b      	ldrb	r3, [r3, #28]
 8010bd6:	061b      	lsls	r3, r3, #24
 8010bd8:	461a      	mov	r2, r3
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	4a11      	ldr	r2, [pc, #68]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010be4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010be6:	4a0f      	ldr	r2, [pc, #60]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	691a      	ldr	r2, [r3, #16]
 8010bf0:	4b0c      	ldr	r3, [pc, #48]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010bf2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010bf4:	4b0b      	ldr	r3, [pc, #44]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010bf6:	4a0d      	ldr	r2, [pc, #52]	; (8010c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010bf8:	601a      	str	r2, [r3, #0]
        break;
 8010bfa:	e02a      	b.n	8010c52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	7f1b      	ldrb	r3, [r3, #28]
 8010c00:	061b      	lsls	r3, r3, #24
 8010c02:	461a      	mov	r2, r3
 8010c04:	69bb      	ldr	r3, [r7, #24]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	4a06      	ldr	r2, [pc, #24]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c0e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	7f5a      	ldrb	r2, [r3, #29]
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	7f9b      	ldrb	r3, [r3, #30]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d015      	beq.n	8010c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8010c1c:	4b01      	ldr	r3, [pc, #4]	; (8010c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010c1e:	4a09      	ldr	r2, [pc, #36]	; (8010c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8010c20:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8010c22:	e015      	b.n	8010c50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8010c24:	4002b000 	.word	0x4002b000
 8010c28:	0002000a 	.word	0x0002000a
 8010c2c:	00020201 	.word	0x00020201
 8010c30:	00020009 	.word	0x00020009
 8010c34:	ffff00ef 	.word	0xffff00ef
 8010c38:	08022e50 	.word	0x08022e50
 8010c3c:	08022e6c 	.word	0x08022e6c
 8010c40:	08022dd8 	.word	0x08022dd8
 8010c44:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8010c48:	4b04      	ldr	r3, [pc, #16]	; (8010c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8010c4a:	f240 2201 	movw	r2, #513	; 0x201
 8010c4e:	601a      	str	r2, [r3, #0]
        break;
 8010c50:	bf00      	nop
    }
}
 8010c52:	bf00      	nop
 8010c54:	3724      	adds	r7, #36	; 0x24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd90      	pop	{r4, r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	4002b000 	.word	0x4002b000

08010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8010c60:	b590      	push	{r4, r7, lr}
 8010c62:	b085      	sub	sp, #20
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	7f9b      	ldrb	r3, [r3, #30]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7ff fe47 	bl	8010904 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010c76:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8010c78:	4a2f      	ldr	r2, [pc, #188]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	8adb      	ldrh	r3, [r3, #22]
 8010c82:	461a      	mov	r2, r3
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	8a9b      	ldrh	r3, [r3, #20]
 8010c88:	041b      	lsls	r3, r3, #16
 8010c8a:	431a      	orrs	r2, r3
 8010c8c:	4b2a      	ldr	r3, [pc, #168]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	691a      	ldr	r2, [r3, #16]
 8010c94:	4b28      	ldr	r3, [pc, #160]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010c96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	8b5b      	ldrh	r3, [r3, #26]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	8a9b      	ldrh	r3, [r3, #20]
 8010ca2:	1ad2      	subs	r2, r2, r3
 8010ca4:	4b24      	ldr	r3, [pc, #144]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010ca6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b08      	cmp	r3, #8
 8010cae:	d12e      	bne.n	8010d0e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	8b5b      	ldrh	r3, [r3, #26]
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	8a9b      	ldrh	r3, [r3, #20]
 8010cba:	1ad2      	subs	r2, r2, r3
 8010cbc:	4b1e      	ldr	r3, [pc, #120]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010cbe:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	8b5b      	ldrh	r3, [r3, #26]
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	8a9b      	ldrh	r3, [r3, #20]
 8010cca:	1ad2      	subs	r2, r2, r3
 8010ccc:	4b1a      	ldr	r3, [pc, #104]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010cce:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010cd0:	4a19      	ldr	r2, [pc, #100]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	7f1b      	ldrb	r3, [r3, #28]
 8010cda:	061b      	lsls	r3, r3, #24
 8010cdc:	4619      	mov	r1, r3
 8010cde:	4a16      	ldr	r2, [pc, #88]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010ce0:	4b16      	ldr	r3, [pc, #88]	; (8010d3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8010ce2:	430b      	orrs	r3, r1
 8010ce4:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	330c      	adds	r3, #12
 8010cea:	4c13      	ldr	r4, [pc, #76]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7ff fc87 	bl	8010600 <_ZNK8touchgfx9colortypecvmEv>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	691a      	ldr	r2, [r3, #16]
 8010cfa:	4b0f      	ldr	r3, [pc, #60]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010cfc:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	691a      	ldr	r2, [r3, #16]
 8010d02:	4b0d      	ldr	r3, [pc, #52]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010d04:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8010d06:	4b0c      	ldr	r3, [pc, #48]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010d08:	4a0d      	ldr	r2, [pc, #52]	; (8010d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8010d0a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8010d0c:	e010      	b.n	8010d30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8010d0e:	4a0a      	ldr	r2, [pc, #40]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8010d14:	4b08      	ldr	r3, [pc, #32]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010d16:	2200      	movs	r2, #0
 8010d18:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	330c      	adds	r3, #12
 8010d1e:	4c06      	ldr	r4, [pc, #24]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff fc6d 	bl	8010600 <_ZNK8touchgfx9colortypecvmEv>
 8010d26:	4603      	mov	r3, r0
 8010d28:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8010d2a:	4b03      	ldr	r3, [pc, #12]	; (8010d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8010d2c:	4a05      	ldr	r2, [pc, #20]	; (8010d44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8010d2e:	601a      	str	r2, [r3, #0]
}
 8010d30:	bf00      	nop
 8010d32:	3714      	adds	r7, #20
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd90      	pop	{r4, r7, pc}
 8010d38:	4002b000 	.word	0x4002b000
 8010d3c:	00010009 	.word	0x00010009
 8010d40:	00020201 	.word	0x00020201
 8010d44:	00030201 	.word	0x00030201

08010d48 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	4a05      	ldr	r2, [pc, #20]	; (8010d68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff fc5d 	bl	8010618 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4618      	mov	r0, r3
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	08023dc0 	.word	0x08023dc0

08010d6c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ff ffe7 	bl	8010d48 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010d7a:	2114      	movs	r1, #20
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f010 f894 	bl	8020eaa <_ZdlPvj>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	4618      	mov	r0, r3
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8010d94:	4a04      	ldr	r2, [pc, #16]	; (8010da8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6013      	str	r3, [r2, #0]
    }
 8010d9a:	bf00      	nop
 8010d9c:	370c      	adds	r7, #12
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	20011b98 	.word	0x20011b98

08010dac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8010dac:	b480      	push	{r7}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
 8010db8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8010dba:	4a0b      	ldr	r2, [pc, #44]	; (8010de8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	601a      	str	r2, [r3, #0]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	68ba      	ldr	r2, [r7, #8]
 8010dc4:	605a      	str	r2, [r3, #4]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	609a      	str	r2, [r3, #8]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	683a      	ldr	r2, [r7, #0]
 8010dd0:	60da      	str	r2, [r3, #12]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	69ba      	ldr	r2, [r7, #24]
 8010dd6:	611a      	str	r2, [r3, #16]
    {
    }
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3714      	adds	r7, #20
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr
 8010de6:	bf00      	nop
 8010de8:	08023a14 	.word	0x08023a14

08010dec <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
    {
 8010df4:	4a04      	ldr	r2, [pc, #16]	; (8010e08 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	601a      	str	r2, [r3, #0]
    }
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	370c      	adds	r7, #12
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	08023a14 	.word	0x08023a14

08010e0c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
    }
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff ffe9 	bl	8010dec <_ZN8touchgfx7MVPHeapD1Ev>
 8010e1a:	2114      	movs	r1, #20
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f010 f844 	bl	8020eaa <_ZdlPvj>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4618      	mov	r0, r3
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
    {
 8010e34:	4a04      	ldr	r2, [pc, #16]	; (8010e48 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	601a      	str	r2, [r3, #0]
    }
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	08024194 	.word	0x08024194

08010e4c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
    }
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff ffe9 	bl	8010e2c <_ZN8touchgfx3LCDD1Ev>
 8010e5a:	2108      	movs	r1, #8
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f010 f824 	bl	8020eaa <_ZdlPvj>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2200      	movs	r2, #0
 8010e78:	801a      	strh	r2, [r3, #0]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	805a      	strh	r2, [r3, #2]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	809a      	strh	r2, [r3, #4]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	80da      	strh	r2, [r3, #6]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	811a      	strh	r2, [r3, #8]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	815a      	strh	r2, [r3, #10]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	819a      	strh	r2, [r3, #12]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	739a      	strb	r2, [r3, #14]
        {
        }
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8010eb2:	b580      	push	{r7, lr}
 8010eb4:	b082      	sub	sp, #8
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff ffd5 	bl	8010e6c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	611a      	str	r2, [r3, #16]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	829a      	strh	r2, [r3, #20]
    {
    }
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3708      	adds	r7, #8
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	607a      	str	r2, [r7, #4]
 8010ee4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8010ee6:	4a55      	ldr	r2, [pc, #340]	; (801103c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	601a      	str	r2, [r3, #0]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	68ba      	ldr	r2, [r7, #8]
 8010ef0:	605a      	str	r2, [r3, #4]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	609a      	str	r2, [r3, #8]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	683a      	ldr	r2, [r7, #0]
 8010efc:	60da      	str	r2, [r3, #12]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2200      	movs	r2, #0
 8010f02:	611a      	str	r2, [r3, #16]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2200      	movs	r2, #0
 8010f08:	615a      	str	r2, [r3, #20]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	619a      	str	r2, [r3, #24]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	331c      	adds	r3, #28
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7ff ffcc 	bl	8010eb2 <_ZN8touchgfx8GesturesC1Ev>
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	2200      	movs	r2, #0
 8010f26:	639a      	str	r2, [r3, #56]	; 0x38
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2200      	movs	r2, #0
 8010f32:	641a      	str	r2, [r3, #64]	; 0x40
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2200      	movs	r2, #0
 8010f38:	645a      	str	r2, [r3, #68]	; 0x44
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2201      	movs	r2, #1
 8010f46:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2200      	movs	r2, #0
 8010f56:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	3350      	adds	r3, #80	; 0x50
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7fa fd55 	bl	800ba14 <_ZN8touchgfx4RectC1Ev>
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2200      	movs	r2, #0
 8010f74:	65da      	str	r2, [r3, #92]	; 0x5c
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	661a      	str	r2, [r3, #96]	; 0x60
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2201      	movs	r2, #1
 8010f80:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2200      	movs	r2, #0
 8010f88:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2201      	movs	r2, #1
 8010f98:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	671a      	str	r2, [r3, #112]	; 0x70
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2201      	movs	r2, #1
 8010fee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8010ff2:	4a13      	ldr	r2, [pc, #76]	; (8011040 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8010ff8:	4a12      	ldr	r2, [pc, #72]	; (8011044 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8010ffa:	8b3b      	ldrh	r3, [r7, #24]
 8010ffc:	8013      	strh	r3, [r2, #0]
 8010ffe:	4b11      	ldr	r3, [pc, #68]	; (8011044 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011000:	881a      	ldrh	r2, [r3, #0]
 8011002:	4b11      	ldr	r3, [pc, #68]	; (8011048 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8011004:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8011006:	4a11      	ldr	r2, [pc, #68]	; (801104c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011008:	8bbb      	ldrh	r3, [r7, #28]
 801100a:	8013      	strh	r3, [r2, #0]
 801100c:	4b0f      	ldr	r3, [pc, #60]	; (801104c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801100e:	881a      	ldrh	r2, [r3, #0]
 8011010:	4b0f      	ldr	r3, [pc, #60]	; (8011050 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8011012:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8011014:	4b0f      	ldr	r3, [pc, #60]	; (8011054 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8011016:	2200      	movs	r2, #0
 8011018:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801101a:	8b3a      	ldrh	r2, [r7, #24]
 801101c:	8bbb      	ldrh	r3, [r7, #28]
 801101e:	429a      	cmp	r2, r3
 8011020:	bf34      	ite	cc
 8011022:	2301      	movcc	r3, #1
 8011024:	2300      	movcs	r3, #0
 8011026:	b2db      	uxtb	r3, r3
 8011028:	461a      	mov	r2, r3
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	4618      	mov	r0, r3
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	08023c98 	.word	0x08023c98
 8011040:	20011b3c 	.word	0x20011b3c
 8011044:	20011b2e 	.word	0x20011b2e
 8011048:	20011b34 	.word	0x20011b34
 801104c:	20011b30 	.word	0x20011b30
 8011050:	20011b36 	.word	0x20011b36
 8011054:	20011b32 	.word	0x20011b32

08011058 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	4618      	mov	r0, r3
 8011066:	f7fb f9ef 	bl	800c448 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801106a:	bf00      	nop
 801106c:	3708      	adds	r7, #8
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011074:	b580      	push	{r7, lr}
 8011076:	b086      	sub	sp, #24
 8011078:	af02      	add	r7, sp, #8
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	60b9      	str	r1, [r7, #8]
 801107e:	607a      	str	r2, [r7, #4]
 8011080:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	68b9      	ldr	r1, [r7, #8]
 801108e:	f7ff fe8d 	bl	8010dac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8011092:	4a04      	ldr	r2, [pc, #16]	; (80110a4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	601a      	str	r2, [r3, #0]
    {

    }
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	4618      	mov	r0, r3
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	08023a00 	.word	0x08023a00

080110a8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80110a8:	b580      	push	{r7, lr}
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	4801      	ldr	r0, [pc, #4]	; (80110b4 <__tcf_0+0xc>)
 80110ae:	f000 f967 	bl	8011380 <_ZN12FrontendHeapD1Ev>
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	200107ac 	.word	0x200107ac

080110b8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80110bc:	4b12      	ldr	r3, [pc, #72]	; (8011108 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	f3bf 8f5b 	dmb	ish
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	f003 0301 	and.w	r3, r3, #1
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	bf0c      	ite	eq
 80110ce:	2301      	moveq	r3, #1
 80110d0:	2300      	movne	r3, #0
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d013      	beq.n	8011100 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80110d8:	480b      	ldr	r0, [pc, #44]	; (8011108 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80110da:	f00f fee8 	bl	8020eae <__cxa_guard_acquire>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	bf14      	ite	ne
 80110e4:	2301      	movne	r3, #1
 80110e6:	2300      	moveq	r3, #0
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d008      	beq.n	8011100 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80110ee:	4807      	ldr	r0, [pc, #28]	; (801110c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80110f0:	f000 f868 	bl	80111c4 <_ZN12FrontendHeapC1Ev>
 80110f4:	4806      	ldr	r0, [pc, #24]	; (8011110 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80110f6:	f00f ff25 	bl	8020f44 <atexit>
 80110fa:	4803      	ldr	r0, [pc, #12]	; (8011108 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80110fc:	f00f fee3 	bl	8020ec6 <__cxa_guard_release>
        return instance;
 8011100:	4b02      	ldr	r3, [pc, #8]	; (801110c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8011102:	4618      	mov	r0, r3
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	20010ca8 	.word	0x20010ca8
 801110c:	200107ac 	.word	0x200107ac
 8011110:	080110a9 	.word	0x080110a9

08011114 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	4a05      	ldr	r2, [pc, #20]	; (8011134 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	601a      	str	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff fe61 	bl	8010dec <_ZN8touchgfx7MVPHeapD1Ev>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	3708      	adds	r7, #8
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	08023a00 	.word	0x08023a00

08011138 <_ZN16FrontendHeapBaseD0Ev>:
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff ffe7 	bl	8011114 <_ZN16FrontendHeapBaseD1Ev>
 8011146:	2114      	movs	r1, #20
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f00f feae 	bl	8020eaa <_ZdlPvj>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	f000 fd32 	bl	8011bcc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011168:	4a03      	ldr	r2, [pc, #12]	; (8011178 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	601a      	str	r2, [r3, #0]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4618      	mov	r0, r3
 8011172:	3708      	adds	r7, #8
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	080239cc 	.word	0x080239cc

0801117c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4618      	mov	r0, r3
 8011188:	f000 fd20 	bl	8011bcc <_ZN8touchgfx17AbstractPartitionC1Ev>
 801118c:	4a03      	ldr	r2, [pc, #12]	; (801119c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	601a      	str	r2, [r3, #0]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	08023998 	.word	0x08023998

080111a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f000 fd0e 	bl	8011bcc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80111b0:	4a03      	ldr	r2, [pc, #12]	; (80111c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4618      	mov	r0, r3
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	08023964 	.word	0x08023964

080111c4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80111c4:	b590      	push	{r4, r7, lr}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af02      	add	r7, sp, #8
 80111ca:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f103 0114 	add.w	r1, r3, #20
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f503 7455 	add.w	r4, r3, #852	; 0x354
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
                     app(model, *this)
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	4623      	mov	r3, r4
 80111ea:	f7ff ff43 	bl	8011074 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80111ee:	4a18      	ldr	r2, [pc, #96]	; (8011250 <_ZN12FrontendHeapC1Ev+0x8c>)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	601a      	str	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	3314      	adds	r3, #20
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7ff ffad 	bl	8011158 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	332c      	adds	r3, #44	; 0x2c
 8011202:	4618      	mov	r0, r3
 8011204:	f7ff ffba 	bl	801117c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 801120e:	4618      	mov	r0, r3
 8011210:	f7ff ffc6 	bl	80111a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801121a:	4618      	mov	r0, r3
 801121c:	f7fe fb6e 	bl	800f8fc <_ZN5ModelC1Ev>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f503 7068 	add.w	r0, r3, #928	; 0x3a0
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	4619      	mov	r1, r3
 8011230:	f7fe fb4e 	bl	800f8d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 801123c:	4619      	mov	r1, r3
 801123e:	4610      	mov	r0, r2
 8011240:	f7ff ff0a 	bl	8011058 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4618      	mov	r0, r3
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	bd90      	pop	{r4, r7, pc}
 801124e:	bf00      	nop
 8011250:	08023950 	.word	0x08023950

08011254 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af02      	add	r7, sp, #8
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	8bbb      	ldrh	r3, [r7, #28]
 8011266:	9301      	str	r3, [sp, #4]
 8011268:	8b3b      	ldrh	r3, [r7, #24]
 801126a:	9300      	str	r3, [sp, #0]
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	68b9      	ldr	r1, [r7, #8]
 8011272:	f7ff fe31 	bl	8010ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011276:	4a04      	ldr	r2, [pc, #16]	; (8011288 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	601a      	str	r2, [r3, #0]
    }
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	4618      	mov	r0, r3
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	08023a24 	.word	0x08023a24

0801128c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801128c:	b580      	push	{r7, lr}
 801128e:	b086      	sub	sp, #24
 8011290:	af02      	add	r7, sp, #8
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
 8011298:	603b      	str	r3, [r7, #0]
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	8bbb      	ldrh	r3, [r7, #28]
 801129e:	9301      	str	r3, [sp, #4]
 80112a0:	8b3b      	ldrh	r3, [r7, #24]
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	68b9      	ldr	r1, [r7, #8]
 80112aa:	f7ff ffd3 	bl	8011254 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80112ae:	4a04      	ldr	r2, [pc, #16]	; (80112c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	601a      	str	r2, [r3, #0]
    }
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	4618      	mov	r0, r3
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	080237fc 	.word	0x080237fc

080112c4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	4a04      	ldr	r2, [pc, #16]	; (80112e0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	601a      	str	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr
 80112e0:	080237e4 	.word	0x080237e4

080112e4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7ff ffe8 	bl	80112c4 <_ZN8touchgfx15TouchControllerC1Ev>
 80112f4:	4a03      	ldr	r2, [pc, #12]	; (8011304 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	601a      	str	r2, [r3, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	4618      	mov	r0, r3
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	080237cc 	.word	0x080237cc

08011308 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	b085      	sub	sp, #20
 801130c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801130e:	f7fe f8af 	bl	800f470 <_ZN14BitmapDatabase11getInstanceEv>
 8011312:	4604      	mov	r4, r0
 8011314:	f7fe f8b6 	bl	800f484 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8011318:	4603      	mov	r3, r0
 801131a:	4619      	mov	r1, r3
 801131c:	2300      	movs	r3, #0
 801131e:	9300      	str	r3, [sp, #0]
 8011320:	2300      	movs	r3, #0
 8011322:	2200      	movs	r2, #0
 8011324:	4620      	mov	r0, r4
 8011326:	f007 fcdb 	bl	8018ce0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801132a:	4809      	ldr	r0, [pc, #36]	; (8011350 <touchgfx_init+0x48>)
 801132c:	f7ff fd2e 	bl	8010d8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8011330:	2000      	movs	r0, #0
 8011332:	f7fe f9eb 	bl	800f70c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8011336:	4807      	ldr	r0, [pc, #28]	; (8011354 <touchgfx_init+0x4c>)
 8011338:	f007 fb8a 	bl	8018a50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801133c:	f7ff febc 	bl	80110b8 <_ZN12FrontendHeap11getInstanceEv>
 8011340:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8011342:	4805      	ldr	r0, [pc, #20]	; (8011358 <touchgfx_init+0x50>)
 8011344:	f7fe ffe0 	bl	8010308 <_ZN11TouchGFXHAL10initializeEv>
}
 8011348:	bf00      	nop
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	bd90      	pop	{r4, r7, pc}
 8011350:	20011aa8 	.word	0x20011aa8
 8011354:	2000003c 	.word	0x2000003c
 8011358:	20011aac 	.word	0x20011aac

0801135c <touchgfx_components_init>:

void touchgfx_components_init()
{
 801135c:	b480      	push	{r7}
 801135e:	af00      	add	r7, sp, #0
}
 8011360:	bf00      	nop
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
	...

0801136c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 801136c:	b580      	push	{r7, lr}
 801136e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8011370:	4802      	ldr	r0, [pc, #8]	; (801137c <touchgfx_taskEntry+0x10>)
 8011372:	f001 f9b6 	bl	80126e2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8011376:	bf00      	nop
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	20011aac 	.word	0x20011aac

08011380 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	4a10      	ldr	r2, [pc, #64]	; (80113cc <_ZN12FrontendHeapD1Ev+0x4c>)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	601a      	str	r2, [r3, #0]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8011394:	4618      	mov	r0, r3
 8011396:	f7fe fa65 	bl	800f864 <_ZN19FrontendApplicationD1Ev>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80113a0:	4618      	mov	r0, r3
 80113a2:	f000 f827 	bl	80113f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	332c      	adds	r3, #44	; 0x2c
 80113aa:	4618      	mov	r0, r3
 80113ac:	f000 f844 	bl	8011438 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	3314      	adds	r3, #20
 80113b4:	4618      	mov	r0, r3
 80113b6:	f000 f863 	bl	8011480 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4618      	mov	r0, r3
 80113be:	f7ff fea9 	bl	8011114 <_ZN16FrontendHeapBaseD1Ev>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	08023950 	.word	0x08023950

080113d0 <_ZN12FrontendHeapD0Ev>:
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7ff ffd1 	bl	8011380 <_ZN12FrontendHeapD1Ev>
 80113de:	f240 41fc 	movw	r1, #1276	; 0x4fc
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f00f fd61 	bl	8020eaa <_ZdlPvj>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4618      	mov	r0, r3
 80113ec:	3708      	adds	r7, #8
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
	...

080113f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	4a05      	ldr	r2, [pc, #20]	; (8011414 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4618      	mov	r0, r3
 8011406:	f000 fbe0 	bl	8011bca <_ZN8touchgfx17AbstractPartitionD1Ev>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	4618      	mov	r0, r3
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	08023964 	.word	0x08023964

08011418 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7ff ffe7 	bl	80113f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8011426:	2148      	movs	r1, #72	; 0x48
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f00f fd3e 	bl	8020eaa <_ZdlPvj>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	4618      	mov	r0, r3
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	4a05      	ldr	r2, [pc, #20]	; (8011458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	601a      	str	r2, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4618      	mov	r0, r3
 801144a:	f000 fbbe 	bl	8011bca <_ZN8touchgfx17AbstractPartitionD1Ev>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4618      	mov	r0, r3
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	08023998 	.word	0x08023998

0801145c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7ff ffe7 	bl	8011438 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801146a:	f44f 714a 	mov.w	r1, #808	; 0x328
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f00f fd1b 	bl	8020eaa <_ZdlPvj>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
	...

08011480 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	4a05      	ldr	r2, [pc, #20]	; (80114a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4618      	mov	r0, r3
 8011492:	f000 fb9a 	bl	8011bca <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	080239cc 	.word	0x080239cc

080114a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7ff ffe7 	bl	8011480 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80114b2:	2118      	movs	r1, #24
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f00f fcf8 	bl	8020eaa <_ZdlPvj>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4618      	mov	r0, r3
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	4a05      	ldr	r2, [pc, #20]	; (80114e4 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	601a      	str	r2, [r3, #0]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7ff fca9 	bl	8010e2c <_ZN8touchgfx3LCDD1Ev>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4618      	mov	r0, r3
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	08024500 	.word	0x08024500

080114e8 <_ZN8touchgfx8LCD24bppD0Ev>:
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7ff ffe7 	bl	80114c4 <_ZN8touchgfx8LCD24bppD1Ev>
 80114f6:	2158      	movs	r1, #88	; 0x58
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f00f fcd6 	bl	8020eaa <_ZdlPvj>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4618      	mov	r0, r3
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <_Z41__static_initialization_and_destruction_0ii>:
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af02      	add	r7, sp, #8
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2b01      	cmp	r3, #1
 8011516:	d119      	bne.n	801154c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801151e:	4293      	cmp	r3, r2
 8011520:	d114      	bne.n	801154c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8011522:	4818      	ldr	r0, [pc, #96]	; (8011584 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011524:	f7ff fede 	bl	80112e4 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8011528:	4817      	ldr	r0, [pc, #92]	; (8011588 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801152a:	f7ff f925 	bl	8010778 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 801152e:	4817      	ldr	r0, [pc, #92]	; (801158c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011530:	f009 fde6 	bl	801b100 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8011534:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	4b10      	ldr	r3, [pc, #64]	; (8011584 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011542:	4a12      	ldr	r2, [pc, #72]	; (801158c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011544:	4910      	ldr	r1, [pc, #64]	; (8011588 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011546:	4812      	ldr	r0, [pc, #72]	; (8011590 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011548:	f7ff fea0 	bl	801128c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d113      	bne.n	801157a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011558:	4293      	cmp	r3, r2
 801155a:	d10e      	bne.n	801157a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801155c:	480c      	ldr	r0, [pc, #48]	; (8011590 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801155e:	f7fe ff63 	bl	8010428 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8011562:	480c      	ldr	r0, [pc, #48]	; (8011594 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8011564:	f7f9 ff70 	bl	800b448 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8011568:	4808      	ldr	r0, [pc, #32]	; (801158c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801156a:	f7ff ffab 	bl	80114c4 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 801156e:	4806      	ldr	r0, [pc, #24]	; (8011588 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011570:	f7ff f92c 	bl	80107cc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8011574:	4803      	ldr	r0, [pc, #12]	; (8011584 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011576:	f7fe fcb3 	bl	800fee0 <_ZN20STM32TouchControllerD1Ev>
}
 801157a:	bf00      	nop
 801157c:	3708      	adds	r7, #8
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	20010cac 	.word	0x20010cac
 8011588:	20010cb0 	.word	0x20010cb0
 801158c:	20011a50 	.word	0x20011a50
 8011590:	20011aac 	.word	0x20011aac
 8011594:	2000003c 	.word	0x2000003c

08011598 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80115a0:	2301      	movs	r3, #1
    }
 80115a2:	4618      	mov	r0, r3
 80115a4:	370c      	adds	r7, #12
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr

080115ae <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80115ae:	b480      	push	{r7}
 80115b0:	b083      	sub	sp, #12
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80115b6:	2340      	movs	r3, #64	; 0x40
    }
 80115b8:	4618      	mov	r0, r3
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	460b      	mov	r3, r1
 80115ce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80115d0:	887b      	ldrh	r3, [r7, #2]
 80115d2:	019b      	lsls	r3, r3, #6
 80115d4:	3308      	adds	r3, #8
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	4413      	add	r3, r2
    }
 80115da:	4618      	mov	r0, r3
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr

080115e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80115e6:	b480      	push	{r7}
 80115e8:	b083      	sub	sp, #12
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	6078      	str	r0, [r7, #4]
 80115ee:	460b      	mov	r3, r1
 80115f0:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80115f2:	887b      	ldrh	r3, [r7, #2]
 80115f4:	019b      	lsls	r3, r3, #6
 80115f6:	3308      	adds	r3, #8
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	4413      	add	r3, r2
    }
 80115fc:	4618      	mov	r0, r3
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr

08011608 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011610:	2301      	movs	r3, #1
    }
 8011612:	4618      	mov	r0, r3
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr

0801161e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801161e:	b480      	push	{r7}
 8011620:	b083      	sub	sp, #12
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011626:	f44f 7348 	mov.w	r3, #800	; 0x320
    }
 801162a:	4618      	mov	r0, r3
 801162c:	370c      	adds	r7, #12
 801162e:	46bd      	mov	sp, r7
 8011630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011634:	4770      	bx	lr

08011636 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011636:	b480      	push	{r7}
 8011638:	b083      	sub	sp, #12
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
 801163e:	460b      	mov	r3, r1
 8011640:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011642:	887b      	ldrh	r3, [r7, #2]
 8011644:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011648:	fb02 f303 	mul.w	r3, r2, r3
 801164c:	3308      	adds	r3, #8
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	4413      	add	r3, r2
    }
 8011652:	4618      	mov	r0, r3
 8011654:	370c      	adds	r7, #12
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr

0801165e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801165e:	b480      	push	{r7}
 8011660:	b083      	sub	sp, #12
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
 8011666:	460b      	mov	r3, r1
 8011668:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801166a:	887b      	ldrh	r3, [r7, #2]
 801166c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011670:	fb02 f303 	mul.w	r3, r2, r3
 8011674:	3308      	adds	r3, #8
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	4413      	add	r3, r2
    }
 801167a:	4618      	mov	r0, r3
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr

08011686 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011686:	b480      	push	{r7}
 8011688:	b083      	sub	sp, #12
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801168e:	2301      	movs	r3, #1
    }
 8011690:	4618      	mov	r0, r3
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801169c:	b480      	push	{r7}
 801169e:	b083      	sub	sp, #12
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80116a4:	2310      	movs	r3, #16
    }
 80116a6:	4618      	mov	r0, r3
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80116b2:	b480      	push	{r7}
 80116b4:	b083      	sub	sp, #12
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	460b      	mov	r3, r1
 80116bc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80116be:	887b      	ldrh	r3, [r7, #2]
 80116c0:	011b      	lsls	r3, r3, #4
 80116c2:	3308      	adds	r3, #8
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	4413      	add	r3, r2
    }
 80116c8:	4618      	mov	r0, r3
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	460b      	mov	r3, r1
 80116de:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80116e0:	887b      	ldrh	r3, [r7, #2]
 80116e2:	011b      	lsls	r3, r3, #4
 80116e4:	3308      	adds	r3, #8
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	4413      	add	r3, r2
    }
 80116ea:	4618      	mov	r0, r3
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <_GLOBAL__sub_I_touchgfx_init>:
 80116f6:	b580      	push	{r7, lr}
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80116fe:	2001      	movs	r0, #1
 8011700:	f7ff ff02 	bl	8011508 <_Z41__static_initialization_and_destruction_0ii>
 8011704:	bd80      	pop	{r7, pc}

08011706 <_GLOBAL__sub_D_touchgfx_init>:
 8011706:	b580      	push	{r7, lr}
 8011708:	af00      	add	r7, sp, #0
 801170a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801170e:	2000      	movs	r0, #0
 8011710:	f7ff fefa 	bl	8011508 <_Z41__static_initialization_and_destruction_0ii>
 8011714:	bd80      	pop	{r7, pc}

08011716 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8011716:	b580      	push	{r7, lr}
 8011718:	b082      	sub	sp, #8
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	3320      	adds	r3, #32
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	4798      	blx	r3
    }
 801172a:	bf00      	nop
 801172c:	3708      	adds	r7, #8
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}

08011732 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8011732:	b480      	push	{r7}
 8011734:	b083      	sub	sp, #12
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8011740:	3301      	adds	r3, #1
 8011742:	b2da      	uxtb	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801174a:	bf00      	nop
 801174c:	370c      	adds	r7, #12
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr
	...

08011758 <__NVIC_EnableIRQ>:
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
 801175e:	4603      	mov	r3, r0
 8011760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011766:	2b00      	cmp	r3, #0
 8011768:	db0b      	blt.n	8011782 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801176a:	79fb      	ldrb	r3, [r7, #7]
 801176c:	f003 021f 	and.w	r2, r3, #31
 8011770:	4907      	ldr	r1, [pc, #28]	; (8011790 <__NVIC_EnableIRQ+0x38>)
 8011772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011776:	095b      	lsrs	r3, r3, #5
 8011778:	2001      	movs	r0, #1
 801177a:	fa00 f202 	lsl.w	r2, r0, r2
 801177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011782:	bf00      	nop
 8011784:	370c      	adds	r7, #12
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop
 8011790:	e000e100 	.word	0xe000e100

08011794 <__NVIC_DisableIRQ>:
{
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	4603      	mov	r3, r0
 801179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	db12      	blt.n	80117cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117a6:	79fb      	ldrb	r3, [r7, #7]
 80117a8:	f003 021f 	and.w	r2, r3, #31
 80117ac:	490a      	ldr	r1, [pc, #40]	; (80117d8 <__NVIC_DisableIRQ+0x44>)
 80117ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117b2:	095b      	lsrs	r3, r3, #5
 80117b4:	2001      	movs	r0, #1
 80117b6:	fa00 f202 	lsl.w	r2, r0, r2
 80117ba:	3320      	adds	r3, #32
 80117bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80117c0:	f3bf 8f4f 	dsb	sy
}
 80117c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80117c6:	f3bf 8f6f 	isb	sy
}
 80117ca:	bf00      	nop
}
 80117cc:	bf00      	nop
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr
 80117d8:	e000e100 	.word	0xe000e100

080117dc <__NVIC_SetPriority>:
{
 80117dc:	b480      	push	{r7}
 80117de:	b083      	sub	sp, #12
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	4603      	mov	r3, r0
 80117e4:	6039      	str	r1, [r7, #0]
 80117e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80117e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	db0a      	blt.n	8011806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	490c      	ldr	r1, [pc, #48]	; (8011828 <__NVIC_SetPriority+0x4c>)
 80117f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117fa:	0112      	lsls	r2, r2, #4
 80117fc:	b2d2      	uxtb	r2, r2
 80117fe:	440b      	add	r3, r1
 8011800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011804:	e00a      	b.n	801181c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	b2da      	uxtb	r2, r3
 801180a:	4908      	ldr	r1, [pc, #32]	; (801182c <__NVIC_SetPriority+0x50>)
 801180c:	79fb      	ldrb	r3, [r7, #7]
 801180e:	f003 030f 	and.w	r3, r3, #15
 8011812:	3b04      	subs	r3, #4
 8011814:	0112      	lsls	r2, r2, #4
 8011816:	b2d2      	uxtb	r2, r2
 8011818:	440b      	add	r3, r1
 801181a:	761a      	strb	r2, [r3, #24]
}
 801181c:	bf00      	nop
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr
 8011828:	e000e100 	.word	0xe000e100
 801182c:	e000ed00 	.word	0xe000ed00

08011830 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8011836:	4b21      	ldr	r3, [pc, #132]	; (80118bc <SCB_CleanInvalidateDCache+0x8c>)
 8011838:	2200      	movs	r2, #0
 801183a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801183e:	f3bf 8f4f 	dsb	sy
}
 8011842:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8011844:	4b1d      	ldr	r3, [pc, #116]	; (80118bc <SCB_CleanInvalidateDCache+0x8c>)
 8011846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801184a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	0b5b      	lsrs	r3, r3, #13
 8011850:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011854:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	08db      	lsrs	r3, r3, #3
 801185a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801185e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	015a      	lsls	r2, r3, #5
 8011864:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011868:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801186a:	68ba      	ldr	r2, [r7, #8]
 801186c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801186e:	4913      	ldr	r1, [pc, #76]	; (80118bc <SCB_CleanInvalidateDCache+0x8c>)
 8011870:	4313      	orrs	r3, r2
 8011872:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	1e5a      	subs	r2, r3, #1
 801187a:	60ba      	str	r2, [r7, #8]
 801187c:	2b00      	cmp	r3, #0
 801187e:	bf14      	ite	ne
 8011880:	2301      	movne	r3, #1
 8011882:	2300      	moveq	r3, #0
 8011884:	b2db      	uxtb	r3, r3
 8011886:	2b00      	cmp	r3, #0
 8011888:	d000      	beq.n	801188c <SCB_CleanInvalidateDCache+0x5c>
      do {
 801188a:	e7e9      	b.n	8011860 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	1e5a      	subs	r2, r3, #1
 8011890:	60fa      	str	r2, [r7, #12]
 8011892:	2b00      	cmp	r3, #0
 8011894:	bf14      	ite	ne
 8011896:	2301      	movne	r3, #1
 8011898:	2300      	moveq	r3, #0
 801189a:	b2db      	uxtb	r3, r3
 801189c:	2b00      	cmp	r3, #0
 801189e:	d000      	beq.n	80118a2 <SCB_CleanInvalidateDCache+0x72>
    do {
 80118a0:	e7d9      	b.n	8011856 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80118a2:	f3bf 8f4f 	dsb	sy
}
 80118a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80118a8:	f3bf 8f6f 	isb	sy
}
 80118ac:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80118ae:	bf00      	nop
 80118b0:	3714      	adds	r7, #20
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	e000ed00 	.word	0xe000ed00

080118c0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80118c0:	b5b0      	push	{r4, r5, r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f000 fef5 	bl	80126ba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80118d0:	687d      	ldr	r5, [r7, #4]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	3364      	adds	r3, #100	; 0x64
 80118d8:	681c      	ldr	r4, [r3, #0]
 80118da:	f004 f8e1 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 80118de:	4603      	mov	r3, r0
 80118e0:	4619      	mov	r1, r3
 80118e2:	4628      	mov	r0, r5
 80118e4:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA00, (void*)0);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	3388      	adds	r3, #136	; 0x88
 80118ee:	681c      	ldr	r4, [r3, #0]
 80118f0:	2300      	movs	r3, #0
 80118f2:	4a04      	ldr	r2, [pc, #16]	; (8011904 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80118f4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80118f8:	47a0      	blx	r4
}
 80118fa:	bf00      	nop
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bdb0      	pop	{r4, r5, r7, pc}
 8011902:	bf00      	nop
 8011904:	c005fa00 	.word	0xc005fa00

08011908 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8011910:	2109      	movs	r1, #9
 8011912:	205a      	movs	r0, #90	; 0x5a
 8011914:	f7ff ff62 	bl	80117dc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8011918:	2109      	movs	r1, #9
 801191a:	2058      	movs	r0, #88	; 0x58
 801191c:	f7ff ff5e 	bl	80117dc <__NVIC_SetPriority>
}
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011930:	205a      	movs	r0, #90	; 0x5a
 8011932:	f7ff ff11 	bl	8011758 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8011936:	2058      	movs	r0, #88	; 0x58
 8011938:	f7ff ff0e 	bl	8011758 <__NVIC_EnableIRQ>
}
 801193c:	bf00      	nop
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801194c:	205a      	movs	r0, #90	; 0x5a
 801194e:	f7ff ff21 	bl	8011794 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8011952:	2058      	movs	r0, #88	; 0x58
 8011954:	f7ff ff1e 	bl	8011794 <__NVIC_DisableIRQ>
}
 8011958:	bf00      	nop
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8011968:	4b11      	ldr	r3, [pc, #68]	; (80119b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	b29b      	uxth	r3, r3
 801196e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011972:	b29b      	uxth	r3, r3
 8011974:	3b01      	subs	r3, #1
 8011976:	b29a      	uxth	r2, r3
 8011978:	4b0e      	ldr	r3, [pc, #56]	; (80119b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801197a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801197c:	4b0c      	ldr	r3, [pc, #48]	; (80119b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801197e:	691b      	ldr	r3, [r3, #16]
 8011980:	b29b      	uxth	r3, r3
 8011982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011986:	b29b      	uxth	r3, r3
 8011988:	3b01      	subs	r3, #1
 801198a:	b29a      	uxth	r2, r3
 801198c:	4b0a      	ldr	r3, [pc, #40]	; (80119b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801198e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8011990:	4b08      	ldr	r3, [pc, #32]	; (80119b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011992:	881a      	ldrh	r2, [r3, #0]
 8011994:	4b06      	ldr	r3, [pc, #24]	; (80119b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011996:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8011998:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801199c:	4a04      	ldr	r2, [pc, #16]	; (80119b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801199e:	f043 0301 	orr.w	r3, r3, #1
 80119a2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80119a4:	bf00      	nop
 80119a6:	370c      	adds	r7, #12
 80119a8:	46bd      	mov	sp, r7
 80119aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ae:	4770      	bx	lr
 80119b0:	40016800 	.word	0x40016800
 80119b4:	20011b2a 	.word	0x20011b2a
 80119b8:	20011b2c 	.word	0x20011b2c

080119bc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f000 fe5e 	bl	8012688 <_ZN8touchgfx3HAL10beginFrameEv>
 80119cc:	4603      	mov	r3, r0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
	...

080119d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d002      	beq.n	80119f0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 80119ea:	4b05      	ldr	r3, [pc, #20]	; (8011a00 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 80119ec:	2201      	movs	r2, #1
 80119ee:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	f000 fe54 	bl	80126a0 <_ZN8touchgfx3HAL8endFrameEv>
}
 80119f8:	bf00      	nop
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	20011b28 	.word	0x20011b28

08011a04 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8011a0c:	4b03      	ldr	r3, [pc, #12]	; (8011a1c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8011a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr
 8011a1c:	40016884 	.word	0x40016884

08011a20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8011a2a:	4a06      	ldr	r2, [pc, #24]	; (8011a44 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8011a30:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8011a32:	2201      	movs	r2, #1
 8011a34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011a36:	bf00      	nop
 8011a38:	370c      	adds	r7, #12
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	40016884 	.word	0x40016884
 8011a48:	40016800 	.word	0x40016800

08011a4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6839      	ldr	r1, [r7, #0]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f000 fddd 	bl	801261a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8011a60:	bf00      	nop
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
 8011a74:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	68b9      	ldr	r1, [r7, #8]
 8011a7e:	f000 ff38 	bl	80128f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8011a82:	4603      	mov	r3, r0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011a94:	4b08      	ldr	r3, [pc, #32]	; (8011ab8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8011a96:	695b      	ldr	r3, [r3, #20]
 8011a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bf14      	ite	ne
 8011aa0:	2301      	movne	r3, #1
 8011aa2:	2300      	moveq	r3, #0
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8011aaa:	f7ff fec1 	bl	8011830 <SCB_CleanInvalidateDCache>
    }
}
 8011aae:	bf00      	nop
 8011ab0:	3708      	adds	r7, #8
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	e000ed00 	.word	0xe000ed00

08011abc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011ac4:	4b08      	ldr	r3, [pc, #32]	; (8011ae8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8011ac6:	695b      	ldr	r3, [r3, #20]
 8011ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	bf14      	ite	ne
 8011ad0:	2301      	movne	r3, #1
 8011ad2:	2300      	moveq	r3, #0
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d001      	beq.n	8011ade <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8011ada:	f7ff fea9 	bl	8011830 <SCB_CleanInvalidateDCache>
    }
}
 8011ade:	bf00      	nop
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	e000ed00 	.word	0xe000ed00

08011aec <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8011af4:	f7fa fa3a 	bl	800bf6c <_ZN8touchgfx3HAL11getInstanceEv>
 8011af8:	4603      	mov	r3, r0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	bf0c      	ite	eq
 8011afe:	2301      	moveq	r3, #1
 8011b00:	2300      	movne	r3, #0
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d132      	bne.n	8011b6e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8011b08:	4b1b      	ldr	r3, [pc, #108]	; (8011b78 <HAL_LTDC_LineEventCallback+0x8c>)
 8011b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b0c:	4a1b      	ldr	r2, [pc, #108]	; (8011b7c <HAL_LTDC_LineEventCallback+0x90>)
 8011b0e:	8812      	ldrh	r2, [r2, #0]
 8011b10:	4293      	cmp	r3, r2
 8011b12:	bf0c      	ite	eq
 8011b14:	2301      	moveq	r3, #1
 8011b16:	2300      	movne	r3, #0
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d017      	beq.n	8011b4e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8011b1e:	4b18      	ldr	r3, [pc, #96]	; (8011b80 <HAL_LTDC_LineEventCallback+0x94>)
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	4619      	mov	r1, r3
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7f2 fdcd 	bl	80046c4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8011b2a:	f7fa fa1f 	bl	800bf6c <_ZN8touchgfx3HAL11getInstanceEv>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ff fdfe 	bl	8011732 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8011b36:	f7fe fd01 	bl	801053c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8011b3a:	f7fa fa17 	bl	800bf6c <_ZN8touchgfx3HAL11getInstanceEv>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	4618      	mov	r0, r3
 8011b42:	f001 fb01 	bl	8013148 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8011b46:	2000      	movs	r0, #0
 8011b48:	f7fe f9f4 	bl	800ff34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011b4c:	e010      	b.n	8011b70 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8011b4e:	4b0b      	ldr	r3, [pc, #44]	; (8011b7c <HAL_LTDC_LineEventCallback+0x90>)
 8011b50:	881b      	ldrh	r3, [r3, #0]
 8011b52:	4619      	mov	r1, r3
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7f2 fdb5 	bl	80046c4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8011b5a:	f7fa fa07 	bl	800bf6c <_ZN8touchgfx3HAL11getInstanceEv>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7ff fdd8 	bl	8011716 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8011b66:	2000      	movs	r0, #0
 8011b68:	f7fe fa00 	bl	800ff6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011b6c:	e000      	b.n	8011b70 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8011b6e:	bf00      	nop
        }
    }
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	40016800 	.word	0x40016800
 8011b7c:	20011b2a 	.word	0x20011b2a
 8011b80:	20011b2c 	.word	0x20011b2c

08011b84 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011b84:	8880      	ldrh	r0, [r0, #4]
 8011b86:	4770      	bx	lr

08011b88 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011b88:	b570      	push	{r4, r5, r6, lr}
 8011b8a:	6803      	ldr	r3, [r0, #0]
 8011b8c:	460c      	mov	r4, r1
 8011b8e:	2100      	movs	r1, #0
 8011b90:	4605      	mov	r5, r0
 8011b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b94:	4798      	blx	r3
 8011b96:	4606      	mov	r6, r0
 8011b98:	682b      	ldr	r3, [r5, #0]
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	1ba4      	subs	r4, r4, r6
 8011b9e:	6a1b      	ldr	r3, [r3, #32]
 8011ba0:	b2a4      	uxth	r4, r4
 8011ba2:	4798      	blx	r3
 8011ba4:	fbb4 f0f0 	udiv	r0, r4, r0
 8011ba8:	bd70      	pop	{r4, r5, r6, pc}

08011baa <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011baa:	2300      	movs	r3, #0
 8011bac:	8083      	strh	r3, [r0, #4]
 8011bae:	4770      	bx	lr

08011bb0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	6803      	ldr	r3, [r0, #0]
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	8881      	ldrh	r1, [r0, #4]
 8011bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bba:	4798      	blx	r3
 8011bbc:	88a3      	ldrh	r3, [r4, #4]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	80a3      	strh	r3, [r4, #4]
 8011bc2:	bd10      	pop	{r4, pc}

08011bc4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011bc4:	6803      	ldr	r3, [r0, #0]
 8011bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc8:	4718      	bx	r3

08011bca <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011bca:	4770      	bx	lr

08011bcc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011bcc:	4a02      	ldr	r2, [pc, #8]	; (8011bd8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011bce:	6002      	str	r2, [r0, #0]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	8082      	strh	r2, [r0, #4]
 8011bd4:	4770      	bx	lr
 8011bd6:	bf00      	nop
 8011bd8:	08023afc 	.word	0x08023afc

08011bdc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011bdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011bde:	2000      	movs	r0, #0
 8011be0:	b12b      	cbz	r3, 8011bee <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011be2:	b920      	cbnz	r0, 8011bee <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011be4:	1a5a      	subs	r2, r3, r1
 8011be6:	699b      	ldr	r3, [r3, #24]
 8011be8:	4250      	negs	r0, r2
 8011bea:	4150      	adcs	r0, r2
 8011bec:	e7f8      	b.n	8011be0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011bee:	4770      	bx	lr

08011bf0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	6148      	str	r0, [r1, #20]
 8011bf4:	618b      	str	r3, [r1, #24]
 8011bf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011bf8:	b913      	cbnz	r3, 8011c00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011bfa:	6281      	str	r1, [r0, #40]	; 0x28
 8011bfc:	4770      	bx	lr
 8011bfe:	4613      	mov	r3, r2
 8011c00:	699a      	ldr	r2, [r3, #24]
 8011c02:	2a00      	cmp	r2, #0
 8011c04:	d1fb      	bne.n	8011bfe <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011c06:	6199      	str	r1, [r3, #24]
 8011c08:	4770      	bx	lr

08011c0a <_ZN8touchgfx9Container9removeAllEv>:
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c0e:	b123      	cbz	r3, 8011c1a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011c10:	6999      	ldr	r1, [r3, #24]
 8011c12:	6281      	str	r1, [r0, #40]	; 0x28
 8011c14:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011c18:	e7f8      	b.n	8011c0c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011c1a:	4770      	bx	lr

08011c1c <_ZN8touchgfx9Container6unlinkEv>:
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	6283      	str	r3, [r0, #40]	; 0x28
 8011c20:	4770      	bx	lr

08011c22 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011c22:	2200      	movs	r2, #0
 8011c24:	8002      	strh	r2, [r0, #0]
 8011c26:	8042      	strh	r2, [r0, #2]
 8011c28:	8082      	strh	r2, [r0, #4]
 8011c2a:	80c2      	strh	r2, [r0, #6]
 8011c2c:	4770      	bx	lr

08011c2e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011c2e:	b570      	push	{r4, r5, r6, lr}
 8011c30:	460d      	mov	r5, r1
 8011c32:	4616      	mov	r6, r2
 8011c34:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011c36:	b13c      	cbz	r4, 8011c48 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	4632      	mov	r2, r6
 8011c3e:	4629      	mov	r1, r5
 8011c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c42:	4798      	blx	r3
 8011c44:	69a4      	ldr	r4, [r4, #24]
 8011c46:	e7f6      	b.n	8011c36 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011c48:	bd70      	pop	{r4, r5, r6, pc}

08011c4a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011c4a:	b538      	push	{r3, r4, r5, lr}
 8011c4c:	460d      	mov	r5, r1
 8011c4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011c50:	b134      	cbz	r4, 8011c60 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011c52:	682b      	ldr	r3, [r5, #0]
 8011c54:	4621      	mov	r1, r4
 8011c56:	4628      	mov	r0, r5
 8011c58:	689b      	ldr	r3, [r3, #8]
 8011c5a:	4798      	blx	r3
 8011c5c:	69a4      	ldr	r4, [r4, #24]
 8011c5e:	e7f7      	b.n	8011c50 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011c60:	bd38      	pop	{r3, r4, r5, pc}

08011c62 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011c62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c64:	b19b      	cbz	r3, 8011c8e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011c66:	428b      	cmp	r3, r1
 8011c68:	d109      	bne.n	8011c7e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011c6a:	699a      	ldr	r2, [r3, #24]
 8011c6c:	2100      	movs	r1, #0
 8011c6e:	6159      	str	r1, [r3, #20]
 8011c70:	6282      	str	r2, [r0, #40]	; 0x28
 8011c72:	b902      	cbnz	r2, 8011c76 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011c74:	4770      	bx	lr
 8011c76:	6199      	str	r1, [r3, #24]
 8011c78:	4770      	bx	lr
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	b13a      	cbz	r2, 8011c8e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011c7e:	699a      	ldr	r2, [r3, #24]
 8011c80:	428a      	cmp	r2, r1
 8011c82:	d1fa      	bne.n	8011c7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011c84:	698a      	ldr	r2, [r1, #24]
 8011c86:	619a      	str	r2, [r3, #24]
 8011c88:	2300      	movs	r3, #0
 8011c8a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011c8e:	4770      	bx	lr

08011c90 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011c90:	b410      	push	{r4}
 8011c92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c94:	4604      	mov	r4, r0
 8011c96:	b92b      	cbnz	r3, 8011ca4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011c98:	6803      	ldr	r3, [r0, #0]
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ca2:	4718      	bx	r3
 8011ca4:	b941      	cbnz	r1, 8011cb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011ca6:	6193      	str	r3, [r2, #24]
 8011ca8:	6282      	str	r2, [r0, #40]	; 0x28
 8011caa:	6154      	str	r4, [r2, #20]
 8011cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cb0:	4770      	bx	lr
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d0f9      	beq.n	8011cac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011cb8:	4299      	cmp	r1, r3
 8011cba:	6998      	ldr	r0, [r3, #24]
 8011cbc:	d1f9      	bne.n	8011cb2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011cbe:	6190      	str	r0, [r2, #24]
 8011cc0:	618a      	str	r2, [r1, #24]
 8011cc2:	e7f2      	b.n	8011caa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc8:	461f      	mov	r7, r3
 8011cca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011cce:	460d      	mov	r5, r1
 8011cd0:	4616      	mov	r6, r2
 8011cd2:	b103      	cbz	r3, 8011cd6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011cd4:	6038      	str	r0, [r7, #0]
 8011cd6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011cd8:	b314      	cbz	r4, 8011d20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011cda:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011cde:	b1eb      	cbz	r3, 8011d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ce0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011ce4:	428d      	cmp	r5, r1
 8011ce6:	db19      	blt.n	8011d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ce8:	b289      	uxth	r1, r1
 8011cea:	8923      	ldrh	r3, [r4, #8]
 8011cec:	440b      	add	r3, r1
 8011cee:	b21b      	sxth	r3, r3
 8011cf0:	429d      	cmp	r5, r3
 8011cf2:	da13      	bge.n	8011d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011cf4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011cf8:	4296      	cmp	r6, r2
 8011cfa:	db0f      	blt.n	8011d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011cfc:	b292      	uxth	r2, r2
 8011cfe:	8963      	ldrh	r3, [r4, #10]
 8011d00:	4413      	add	r3, r2
 8011d02:	b21b      	sxth	r3, r3
 8011d04:	429e      	cmp	r6, r3
 8011d06:	da09      	bge.n	8011d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011d08:	6823      	ldr	r3, [r4, #0]
 8011d0a:	1ab2      	subs	r2, r6, r2
 8011d0c:	1a69      	subs	r1, r5, r1
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011d14:	b212      	sxth	r2, r2
 8011d16:	463b      	mov	r3, r7
 8011d18:	b209      	sxth	r1, r1
 8011d1a:	47c0      	blx	r8
 8011d1c:	69a4      	ldr	r4, [r4, #24]
 8011d1e:	e7db      	b.n	8011cd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d28:	4c6d      	ldr	r4, [pc, #436]	; (8011ee0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011d2a:	b0a1      	sub	sp, #132	; 0x84
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	6824      	ldr	r4, [r4, #0]
 8011d30:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011d32:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011d36:	2400      	movs	r4, #0
 8011d38:	9303      	str	r3, [sp, #12]
 8011d3a:	802c      	strh	r4, [r5, #0]
 8011d3c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011d3e:	802c      	strh	r4, [r5, #0]
 8011d40:	601c      	str	r4, [r3, #0]
 8011d42:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011d46:	f7ff ffbd 	bl	8011cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011d4a:	f1b9 0f03 	cmp.w	r9, #3
 8011d4e:	f340 80c1 	ble.w	8011ed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011d52:	4631      	mov	r1, r6
 8011d54:	a80c      	add	r0, sp, #48	; 0x30
 8011d56:	f004 ffab 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d5a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011d5e:	9306      	str	r3, [sp, #24]
 8011d60:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011d64:	9307      	str	r3, [sp, #28]
 8011d66:	9b03      	ldr	r3, [sp, #12]
 8011d68:	f8d3 a000 	ldr.w	sl, [r3]
 8011d6c:	f1ba 0f00 	cmp.w	sl, #0
 8011d70:	f000 80b3 	beq.w	8011eda <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011d74:	4651      	mov	r1, sl
 8011d76:	a810      	add	r0, sp, #64	; 0x40
 8011d78:	f004 ff9a 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d7c:	2002      	movs	r0, #2
 8011d7e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011d82:	9b01      	ldr	r3, [sp, #4]
 8011d84:	9a06      	ldr	r2, [sp, #24]
 8011d86:	fb91 f1f0 	sdiv	r1, r1, r0
 8011d8a:	189d      	adds	r5, r3, r2
 8011d8c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011d90:	9a07      	ldr	r2, [sp, #28]
 8011d92:	4419      	add	r1, r3
 8011d94:	9b02      	ldr	r3, [sp, #8]
 8011d96:	4413      	add	r3, r2
 8011d98:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011d9c:	1a6d      	subs	r5, r5, r1
 8011d9e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011da2:	fb92 f2f0 	sdiv	r2, r2, r0
 8011da6:	440a      	add	r2, r1
 8011da8:	1a9b      	subs	r3, r3, r2
 8011daa:	435b      	muls	r3, r3
 8011dac:	fb05 3505 	mla	r5, r5, r5, r3
 8011db0:	4f4c      	ldr	r7, [pc, #304]	; (8011ee4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011db2:	ac10      	add	r4, sp, #64	; 0x40
 8011db4:	f1b9 0f0c 	cmp.w	r9, #12
 8011db8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dc4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011dcc:	f04f 0303 	mov.w	r3, #3
 8011dd0:	bfd8      	it	le
 8011dd2:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011dd6:	f04f 0400 	mov.w	r4, #0
 8011dda:	f8cd 9000 	str.w	r9, [sp]
 8011dde:	bfcc      	ite	gt
 8011de0:	4698      	movgt	r8, r3
 8011de2:	fb92 f8f3 	sdivle	r8, r2, r3
 8011de6:	1c63      	adds	r3, r4, #1
 8011de8:	aa10      	add	r2, sp, #64	; 0x40
 8011dea:	f004 0401 	and.w	r4, r4, #1
 8011dee:	f04f 0b00 	mov.w	fp, #0
 8011df2:	9308      	str	r3, [sp, #32]
 8011df4:	9b00      	ldr	r3, [sp, #0]
 8011df6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011dfa:	fb93 f3f8 	sdiv	r3, r3, r8
 8011dfe:	3404      	adds	r4, #4
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	9304      	str	r3, [sp, #16]
 8011e04:	9a04      	ldr	r2, [sp, #16]
 8011e06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011e0a:	fb13 f302 	smulbb	r3, r3, r2
 8011e0e:	9a01      	ldr	r2, [sp, #4]
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	1899      	adds	r1, r3, r2
 8011e14:	9305      	str	r3, [sp, #20]
 8011e16:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011e1a:	b209      	sxth	r1, r1
 8011e1c:	4299      	cmp	r1, r3
 8011e1e:	db4d      	blt.n	8011ebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e20:	8932      	ldrh	r2, [r6, #8]
 8011e22:	4413      	add	r3, r2
 8011e24:	b21b      	sxth	r3, r3
 8011e26:	4299      	cmp	r1, r3
 8011e28:	da48      	bge.n	8011ebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e2a:	9b04      	ldr	r3, [sp, #16]
 8011e2c:	6827      	ldr	r7, [r4, #0]
 8011e2e:	fb17 f703 	smulbb	r7, r7, r3
 8011e32:	9b02      	ldr	r3, [sp, #8]
 8011e34:	b2bf      	uxth	r7, r7
 8011e36:	18fa      	adds	r2, r7, r3
 8011e38:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011e3c:	b212      	sxth	r2, r2
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	db3c      	blt.n	8011ebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e42:	8970      	ldrh	r0, [r6, #10]
 8011e44:	4403      	add	r3, r0
 8011e46:	b21b      	sxth	r3, r3
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	da37      	bge.n	8011ebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	4630      	mov	r0, r6
 8011e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e52:	ab0b      	add	r3, sp, #44	; 0x2c
 8011e54:	f7ff ff36 	bl	8011cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e5a:	b37a      	cbz	r2, 8011ebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e5c:	4552      	cmp	r2, sl
 8011e5e:	d02d      	beq.n	8011ebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e60:	4611      	mov	r1, r2
 8011e62:	a80e      	add	r0, sp, #56	; 0x38
 8011e64:	9209      	str	r2, [sp, #36]	; 0x24
 8011e66:	f004 ff23 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011e6a:	f04f 0e02 	mov.w	lr, #2
 8011e6e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011e72:	9a06      	ldr	r2, [sp, #24]
 8011e74:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011e78:	9b01      	ldr	r3, [sp, #4]
 8011e7a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011e7e:	4413      	add	r3, r2
 8011e80:	9a07      	ldr	r2, [sp, #28]
 8011e82:	fb91 f1fe 	sdiv	r1, r1, lr
 8011e86:	fb9c fcfe 	sdiv	ip, ip, lr
 8011e8a:	4401      	add	r1, r0
 8011e8c:	1a58      	subs	r0, r3, r1
 8011e8e:	9b02      	ldr	r3, [sp, #8]
 8011e90:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011e94:	4413      	add	r3, r2
 8011e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e98:	448c      	add	ip, r1
 8011e9a:	eba3 030c 	sub.w	r3, r3, ip
 8011e9e:	435b      	muls	r3, r3
 8011ea0:	fb00 3300 	mla	r3, r0, r0, r3
 8011ea4:	42ab      	cmp	r3, r5
 8011ea6:	d208      	bcs.n	8011eba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011eaa:	461d      	mov	r5, r3
 8011eac:	9803      	ldr	r0, [sp, #12]
 8011eae:	6001      	str	r1, [r0, #0]
 8011eb0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011eb2:	9805      	ldr	r0, [sp, #20]
 8011eb4:	8008      	strh	r0, [r1, #0]
 8011eb6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011eb8:	800f      	strh	r7, [r1, #0]
 8011eba:	4692      	mov	sl, r2
 8011ebc:	f10b 0b01 	add.w	fp, fp, #1
 8011ec0:	3408      	adds	r4, #8
 8011ec2:	f1bb 0f04 	cmp.w	fp, #4
 8011ec6:	d19d      	bne.n	8011e04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011ec8:	9b00      	ldr	r3, [sp, #0]
 8011eca:	9c08      	ldr	r4, [sp, #32]
 8011ecc:	444b      	add	r3, r9
 8011ece:	4544      	cmp	r4, r8
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	d188      	bne.n	8011de6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011ed4:	b021      	add	sp, #132	; 0x84
 8011ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eda:	f04f 35ff 	mov.w	r5, #4294967295
 8011ede:	e767      	b.n	8011db0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011ee0:	20011b3c 	.word	0x20011b3c
 8011ee4:	08022eac 	.word	0x08022eac

08011ee8 <_ZN8touchgfx4RectaNERKS0_>:
 8011ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011eec:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011ef0:	888c      	ldrh	r4, [r1, #4]
 8011ef2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011ef6:	443c      	add	r4, r7
 8011ef8:	b2a4      	uxth	r4, r4
 8011efa:	fa0f f884 	sxth.w	r8, r4
 8011efe:	45c1      	cmp	r9, r8
 8011f00:	da2f      	bge.n	8011f62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011f02:	8882      	ldrh	r2, [r0, #4]
 8011f04:	444a      	add	r2, r9
 8011f06:	b292      	uxth	r2, r2
 8011f08:	fa0f fe82 	sxth.w	lr, r2
 8011f0c:	4577      	cmp	r7, lr
 8011f0e:	da28      	bge.n	8011f62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011f10:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011f14:	88cb      	ldrh	r3, [r1, #6]
 8011f16:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011f1a:	442b      	add	r3, r5
 8011f1c:	b21b      	sxth	r3, r3
 8011f1e:	429e      	cmp	r6, r3
 8011f20:	da1f      	bge.n	8011f62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011f22:	88c3      	ldrh	r3, [r0, #6]
 8011f24:	4433      	add	r3, r6
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	fa0f fc83 	sxth.w	ip, r3
 8011f2c:	4565      	cmp	r5, ip
 8011f2e:	da18      	bge.n	8011f62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011f30:	454f      	cmp	r7, r9
 8011f32:	bfb8      	it	lt
 8011f34:	464f      	movlt	r7, r9
 8011f36:	42b5      	cmp	r5, r6
 8011f38:	bfb8      	it	lt
 8011f3a:	4635      	movlt	r5, r6
 8011f3c:	45f0      	cmp	r8, lr
 8011f3e:	bfd8      	it	le
 8011f40:	4622      	movle	r2, r4
 8011f42:	1bd2      	subs	r2, r2, r7
 8011f44:	8082      	strh	r2, [r0, #4]
 8011f46:	884a      	ldrh	r2, [r1, #2]
 8011f48:	88c9      	ldrh	r1, [r1, #6]
 8011f4a:	8007      	strh	r7, [r0, #0]
 8011f4c:	440a      	add	r2, r1
 8011f4e:	8045      	strh	r5, [r0, #2]
 8011f50:	b292      	uxth	r2, r2
 8011f52:	b211      	sxth	r1, r2
 8011f54:	458c      	cmp	ip, r1
 8011f56:	bfa8      	it	ge
 8011f58:	4613      	movge	r3, r2
 8011f5a:	1b5b      	subs	r3, r3, r5
 8011f5c:	80c3      	strh	r3, [r0, #6]
 8011f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f62:	2300      	movs	r3, #0
 8011f64:	8003      	strh	r3, [r0, #0]
 8011f66:	8043      	strh	r3, [r0, #2]
 8011f68:	8083      	strh	r3, [r0, #4]
 8011f6a:	80c3      	strh	r3, [r0, #6]
 8011f6c:	e7f7      	b.n	8011f5e <_ZN8touchgfx4RectaNERKS0_+0x76>

08011f6e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011f6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	dd06      	ble.n	8011f84 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011f76:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	bfcc      	ite	gt
 8011f7e:	2000      	movgt	r0, #0
 8011f80:	2001      	movle	r0, #1
 8011f82:	4770      	bx	lr
 8011f84:	2001      	movs	r0, #1
 8011f86:	4770      	bx	lr

08011f88 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4604      	mov	r4, r0
 8011f90:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011f92:	8003      	strh	r3, [r0, #0]
 8011f94:	8043      	strh	r3, [r0, #2]
 8011f96:	8083      	strh	r3, [r0, #4]
 8011f98:	80c3      	strh	r3, [r0, #6]
 8011f9a:	2d00      	cmp	r5, #0
 8011f9c:	d040      	beq.n	8012020 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011f9e:	1d28      	adds	r0, r5, #4
 8011fa0:	f7ff ffe5 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011fa4:	b988      	cbnz	r0, 8011fca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f7ff ffe1 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011fac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011fb0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011fb4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011fb8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011fbc:	b138      	cbz	r0, 8011fce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011fbe:	8022      	strh	r2, [r4, #0]
 8011fc0:	8063      	strh	r3, [r4, #2]
 8011fc2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011fc6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011fca:	69ad      	ldr	r5, [r5, #24]
 8011fcc:	e7e5      	b.n	8011f9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011fce:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011fd2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011fd6:	4290      	cmp	r0, r2
 8011fd8:	4607      	mov	r7, r0
 8011fda:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011fde:	460e      	mov	r6, r1
 8011fe0:	bfa8      	it	ge
 8011fe2:	4617      	movge	r7, r2
 8011fe4:	4299      	cmp	r1, r3
 8011fe6:	4472      	add	r2, lr
 8011fe8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011fec:	bfa8      	it	ge
 8011fee:	461e      	movge	r6, r3
 8011ff0:	4440      	add	r0, r8
 8011ff2:	4471      	add	r1, lr
 8011ff4:	4463      	add	r3, ip
 8011ff6:	b200      	sxth	r0, r0
 8011ff8:	8027      	strh	r7, [r4, #0]
 8011ffa:	b212      	sxth	r2, r2
 8011ffc:	8066      	strh	r6, [r4, #2]
 8011ffe:	b209      	sxth	r1, r1
 8012000:	b21b      	sxth	r3, r3
 8012002:	4290      	cmp	r0, r2
 8012004:	bfac      	ite	ge
 8012006:	ebc7 0200 	rsbge	r2, r7, r0
 801200a:	ebc7 0202 	rsblt	r2, r7, r2
 801200e:	4299      	cmp	r1, r3
 8012010:	bfac      	ite	ge
 8012012:	ebc6 0301 	rsbge	r3, r6, r1
 8012016:	ebc6 0303 	rsblt	r3, r6, r3
 801201a:	80a2      	strh	r2, [r4, #4]
 801201c:	80e3      	strh	r3, [r4, #6]
 801201e:	e7d4      	b.n	8011fca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012020:	4620      	mov	r0, r4
 8012022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012026 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012026:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801202a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801202e:	b383      	cbz	r3, 8012092 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012030:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012032:	b374      	cbz	r4, 8012092 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012034:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012038:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801203c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012040:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012044:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012048:	b303      	cbz	r3, 801208c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801204a:	4668      	mov	r0, sp
 801204c:	1d21      	adds	r1, r4, #4
 801204e:	f8ad 5000 	strh.w	r5, [sp]
 8012052:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012056:	f8ad 7004 	strh.w	r7, [sp, #4]
 801205a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801205e:	f7ff ff43 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8012062:	4668      	mov	r0, sp
 8012064:	f7ff ff83 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012068:	b980      	cbnz	r0, 801208c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801206a:	f8bd 3000 	ldrh.w	r3, [sp]
 801206e:	4669      	mov	r1, sp
 8012070:	88a2      	ldrh	r2, [r4, #4]
 8012072:	4620      	mov	r0, r4
 8012074:	1a9b      	subs	r3, r3, r2
 8012076:	88e2      	ldrh	r2, [r4, #6]
 8012078:	f8ad 3000 	strh.w	r3, [sp]
 801207c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012080:	1a9b      	subs	r3, r3, r2
 8012082:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	689b      	ldr	r3, [r3, #8]
 801208a:	4798      	blx	r3
 801208c:	69a4      	ldr	r4, [r4, #24]
 801208e:	2c00      	cmp	r4, #0
 8012090:	d1d8      	bne.n	8012044 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012092:	b002      	add	sp, #8
 8012094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012098 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012098:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801209a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801209e:	460d      	mov	r5, r1
 80120a0:	4616      	mov	r6, r2
 80120a2:	b323      	cbz	r3, 80120ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80120a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80120a6:	b314      	cbz	r4, 80120ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80120a8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80120ac:	b1eb      	cbz	r3, 80120ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80120ae:	6828      	ldr	r0, [r5, #0]
 80120b0:	466b      	mov	r3, sp
 80120b2:	6869      	ldr	r1, [r5, #4]
 80120b4:	c303      	stmia	r3!, {r0, r1}
 80120b6:	4668      	mov	r0, sp
 80120b8:	1d21      	adds	r1, r4, #4
 80120ba:	f7ff ff15 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 80120be:	4668      	mov	r0, sp
 80120c0:	f7ff ff55 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80120c4:	b988      	cbnz	r0, 80120ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80120c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80120ca:	4669      	mov	r1, sp
 80120cc:	88a2      	ldrh	r2, [r4, #4]
 80120ce:	4620      	mov	r0, r4
 80120d0:	1a9b      	subs	r3, r3, r2
 80120d2:	88e2      	ldrh	r2, [r4, #6]
 80120d4:	f8ad 3000 	strh.w	r3, [sp]
 80120d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80120dc:	1a9b      	subs	r3, r3, r2
 80120de:	4632      	mov	r2, r6
 80120e0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80120e4:	6823      	ldr	r3, [r4, #0]
 80120e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120e8:	4798      	blx	r3
 80120ea:	69a4      	ldr	r4, [r4, #24]
 80120ec:	e7db      	b.n	80120a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80120ee:	b002      	add	sp, #8
 80120f0:	bd70      	pop	{r4, r5, r6, pc}

080120f2 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 80120f2:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	; 0xec
 80120f6:	4770      	bx	lr

080120f8 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 80120f8:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 80120fc:	4770      	bx	lr

080120fe <_ZNK8touchgfx6Slider11getMinValueEv>:
 80120fe:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8012100:	4770      	bx	lr

08012102 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8012102:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8012104:	4770      	bx	lr

08012106 <_ZN8touchgfx6Slider8setValueEi>:
 8012106:	b570      	push	{r4, r5, r6, lr}
 8012108:	6803      	ldr	r3, [r0, #0]
 801210a:	4604      	mov	r4, r0
 801210c:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8012110:	4798      	blx	r3
 8012112:	4601      	mov	r1, r0
 8012114:	462b      	mov	r3, r5
 8012116:	4620      	mov	r0, r4
 8012118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801211c:	4718      	bx	r3

0801211e <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801211e:	b538      	push	{r3, r4, r5, lr}
 8012120:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8012124:	4605      	mov	r5, r0
 8012126:	428c      	cmp	r4, r1
 8012128:	bfa8      	it	ge
 801212a:	460c      	movge	r4, r1
 801212c:	429c      	cmp	r4, r3
 801212e:	bfac      	ite	ge
 8012130:	ebc3 0404 	rsbge	r4, r3, r4
 8012134:	ebc3 0403 	rsblt	r4, r3, r3
 8012138:	6803      	ldr	r3, [r0, #0]
 801213a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801213e:	4798      	blx	r3
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	fb00 4404 	mla	r4, r0, r4, r4
 8012146:	4628      	mov	r0, r5
 8012148:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801214c:	4798      	blx	r3
 801214e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8012152:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 8012156:	2a01      	cmp	r2, #1
 8012158:	fb94 f0f0 	sdiv	r0, r4, r0
 801215c:	bf08      	it	eq
 801215e:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 8012162:	4418      	add	r0, r3
 8012164:	bf04      	itt	eq
 8012166:	1a10      	subeq	r0, r2, r0
 8012168:	18c0      	addeq	r0, r0, r3
 801216a:	b200      	sxth	r0, r0
 801216c:	bd38      	pop	{r3, r4, r5, pc}

0801216e <_ZNK8touchgfx6Slider15positionToValueEs>:
 801216e:	b570      	push	{r4, r5, r6, lr}
 8012170:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 8012174:	4605      	mov	r5, r0
 8012176:	460c      	mov	r4, r1
 8012178:	428b      	cmp	r3, r1
 801217a:	d109      	bne.n	8012190 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 801217c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801217e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012182:	2b01      	cmp	r3, #1
 8012184:	bf01      	itttt	eq
 8012186:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 8012188:	1a18      	subeq	r0, r3, r0
 801218a:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 801218c:	18c0      	addeq	r0, r0, r3
 801218e:	bd70      	pop	{r4, r5, r6, pc}
 8012190:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 8012194:	428b      	cmp	r3, r1
 8012196:	d101      	bne.n	801219c <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8012198:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801219a:	e7f0      	b.n	801217e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 801219c:	6803      	ldr	r3, [r0, #0]
 801219e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80121a2:	4798      	blx	r3
 80121a4:	682b      	ldr	r3, [r5, #0]
 80121a6:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 80121aa:	4606      	mov	r6, r0
 80121ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80121b0:	4628      	mov	r0, r5
 80121b2:	1a64      	subs	r4, r4, r1
 80121b4:	4798      	blx	r3
 80121b6:	2102      	movs	r1, #2
 80121b8:	682b      	ldr	r3, [r5, #0]
 80121ba:	fb96 f6f1 	sdiv	r6, r6, r1
 80121be:	fb00 6404 	mla	r4, r0, r4, r6
 80121c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80121c6:	4628      	mov	r0, r5
 80121c8:	4798      	blx	r3
 80121ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80121cc:	fb94 f0f0 	sdiv	r0, r4, r0
 80121d0:	4418      	add	r0, r3
 80121d2:	e7d4      	b.n	801217e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

080121d4 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 80121d4:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80121d8:	2302      	movs	r3, #2
 80121da:	b92a      	cbnz	r2, 80121e8 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 80121dc:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 80121e0:	fb90 f0f3 	sdiv	r0, r0, r3
 80121e4:	b280      	uxth	r0, r0
 80121e6:	4770      	bx	lr
 80121e8:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 80121ec:	e7f8      	b.n	80121e0 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

080121ee <_ZN8touchgfx6Slider13setValueRangeEiii>:
 80121ee:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 80121f2:	6802      	ldr	r2, [r0, #0]
 80121f4:	4619      	mov	r1, r3
 80121f6:	b410      	push	{r4}
 80121f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121fc:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8012200:	4710      	bx	r2

08012202 <_ZN8touchgfx6Slider13setValueRangeEii>:
 8012202:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012204:	428b      	cmp	r3, r1
 8012206:	b410      	push	{r4}
 8012208:	db09      	blt.n	801221e <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 801220a:	4293      	cmp	r3, r2
 801220c:	bfa8      	it	ge
 801220e:	4613      	movge	r3, r2
 8012210:	6804      	ldr	r4, [r0, #0]
 8012212:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 8012216:	46a4      	mov	ip, r4
 8012218:	f85d 4b04 	ldr.w	r4, [sp], #4
 801221c:	4760      	bx	ip
 801221e:	460b      	mov	r3, r1
 8012220:	e7f6      	b.n	8012210 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

08012222 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8012222:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 8012226:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 801222a:	1a10      	subs	r0, r2, r0
 801222c:	4770      	bx	lr

0801222e <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 801222e:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 8012232:	1a10      	subs	r0, r2, r0
 8012234:	4770      	bx	lr

08012236 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8012236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223a:	790b      	ldrb	r3, [r1, #4]
 801223c:	4604      	mov	r4, r0
 801223e:	460d      	mov	r5, r1
 8012240:	b323      	cbz	r3, 801228c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8012242:	2b01      	cmp	r3, #1
 8012244:	d135      	bne.n	80122b2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801224c:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 8012250:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012254:	2a00      	cmp	r2, #0
 8012256:	d12a      	bne.n	80122ae <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8012258:	88ee      	ldrh	r6, [r5, #6]
 801225a:	4620      	mov	r0, r4
 801225c:	4798      	blx	r3
 801225e:	1a31      	subs	r1, r6, r0
 8012260:	4620      	mov	r0, r4
 8012262:	b209      	sxth	r1, r1
 8012264:	47b8      	blx	r7
 8012266:	792b      	ldrb	r3, [r5, #4]
 8012268:	2b01      	cmp	r3, #1
 801226a:	d122      	bne.n	80122b2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801226c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8012270:	b1f8      	cbz	r0, 80122b2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8012272:	6803      	ldr	r3, [r0, #0]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	4798      	blx	r3
 8012278:	b1d8      	cbz	r0, 80122b2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801227a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801227e:	4621      	mov	r1, r4
 8012280:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012282:	6803      	ldr	r3, [r0, #0]
 8012284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012288:	689b      	ldr	r3, [r3, #8]
 801228a:	4718      	bx	r3
 801228c:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8012290:	2800      	cmp	r0, #0
 8012292:	d0d8      	beq.n	8012246 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8012294:	6803      	ldr	r3, [r0, #0]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	4798      	blx	r3
 801229a:	2800      	cmp	r0, #0
 801229c:	d0d3      	beq.n	8012246 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801229e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80122a2:	4621      	mov	r1, r4
 80122a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80122a6:	6803      	ldr	r3, [r0, #0]
 80122a8:	689b      	ldr	r3, [r3, #8]
 80122aa:	4798      	blx	r3
 80122ac:	e7cb      	b.n	8012246 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80122ae:	892e      	ldrh	r6, [r5, #8]
 80122b0:	e7d3      	b.n	801225a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 80122b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122b6 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 80122b6:	b570      	push	{r4, r5, r6, lr}
 80122b8:	6803      	ldr	r3, [r0, #0]
 80122ba:	4604      	mov	r4, r0
 80122bc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80122c0:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 80122c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80122c8:	b942      	cbnz	r2, 80122dc <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 80122ca:	894d      	ldrh	r5, [r1, #10]
 80122cc:	4798      	blx	r3
 80122ce:	1a29      	subs	r1, r5, r0
 80122d0:	4633      	mov	r3, r6
 80122d2:	4620      	mov	r0, r4
 80122d4:	b209      	sxth	r1, r1
 80122d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122da:	4718      	bx	r3
 80122dc:	898d      	ldrh	r5, [r1, #12]
 80122de:	e7f5      	b.n	80122cc <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>

080122e0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 80122e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	461d      	mov	r5, r3
 80122e6:	f04f 0a00 	mov.w	sl, #0
 80122ea:	b213      	sxth	r3, r2
 80122ec:	4604      	mov	r4, r0
 80122ee:	fa0f fb81 	sxth.w	fp, r1
 80122f2:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 80122f6:	4689      	mov	r9, r1
 80122f8:	4690      	mov	r8, r2
 80122fa:	4659      	mov	r1, fp
 80122fc:	461a      	mov	r2, r3
 80122fe:	303c      	adds	r0, #60	; 0x3c
 8012300:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 8012304:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8012308:	9301      	str	r3, [sp, #4]
 801230a:	f7f9 fc81 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 801230e:	9b01      	ldr	r3, [sp, #4]
 8012310:	4659      	mov	r1, fp
 8012312:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8012316:	461a      	mov	r2, r3
 8012318:	f7f9 fc7a 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 801231c:	4652      	mov	r2, sl
 801231e:	4651      	mov	r1, sl
 8012320:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012324:	f7f9 fc74 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 8012328:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801232c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8012330:	4620      	mov	r0, r4
 8012332:	4489      	add	r9, r1
 8012334:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8012338:	4490      	add	r8, r2
 801233a:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 801233e:	4431      	add	r1, r6
 8012340:	fa1f f989 	uxth.w	r9, r9
 8012344:	442a      	add	r2, r5
 8012346:	fa1f f888 	uxth.w	r8, r8
 801234a:	b289      	uxth	r1, r1
 801234c:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8012350:	b292      	uxth	r2, r2
 8012352:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8012356:	4589      	cmp	r9, r1
 8012358:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801235c:	bf8c      	ite	hi
 801235e:	fa0f f189 	sxthhi.w	r1, r9
 8012362:	b209      	sxthls	r1, r1
 8012364:	4590      	cmp	r8, r2
 8012366:	bf8c      	ite	hi
 8012368:	fa0f f288 	sxthhi.w	r2, r8
 801236c:	b212      	sxthls	r2, r2
 801236e:	f7f9 fcab 	bl	800bcc8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012372:	6823      	ldr	r3, [r4, #0]
 8012374:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012376:	4620      	mov	r0, r4
 8012378:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801237c:	b003      	add	sp, #12
 801237e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012382:	4718      	bx	r3

08012384 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8012384:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012388:	461d      	mov	r5, r3
 801238a:	fa0f fa81 	sxth.w	sl, r1
 801238e:	2301      	movs	r3, #1
 8012390:	fa0f fb82 	sxth.w	fp, r2
 8012394:	4604      	mov	r4, r0
 8012396:	4689      	mov	r9, r1
 8012398:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801239c:	4651      	mov	r1, sl
 801239e:	4690      	mov	r8, r2
 80123a0:	303c      	adds	r0, #60	; 0x3c
 80123a2:	465a      	mov	r2, fp
 80123a4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 80123a8:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 80123ac:	f7f9 fc30 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 80123b0:	465a      	mov	r2, fp
 80123b2:	4651      	mov	r1, sl
 80123b4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80123b8:	f7f9 fc2a 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 80123bc:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80123c0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80123c4:	4620      	mov	r0, r4
 80123c6:	4489      	add	r9, r1
 80123c8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80123cc:	4490      	add	r8, r2
 80123ce:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80123d2:	4429      	add	r1, r5
 80123d4:	fa1f f989 	uxth.w	r9, r9
 80123d8:	4432      	add	r2, r6
 80123da:	fa1f f888 	uxth.w	r8, r8
 80123de:	b289      	uxth	r1, r1
 80123e0:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80123e4:	b292      	uxth	r2, r2
 80123e6:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 80123ea:	4589      	cmp	r9, r1
 80123ec:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 80123f0:	bf8c      	ite	hi
 80123f2:	fa0f f189 	sxthhi.w	r1, r9
 80123f6:	b209      	sxthls	r1, r1
 80123f8:	4590      	cmp	r8, r2
 80123fa:	bf8c      	ite	hi
 80123fc:	fa0f f288 	sxthhi.w	r2, r8
 8012400:	b212      	sxthls	r2, r2
 8012402:	f7f9 fc61 	bl	800bcc8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012406:	6823      	ldr	r3, [r4, #0]
 8012408:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801240a:	4620      	mov	r0, r4
 801240c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012410:	b001      	add	sp, #4
 8012412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012416:	4718      	bx	r3

08012418 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8012418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801241c:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	; 0xec
 8012420:	4604      	mov	r4, r0
 8012422:	3094      	adds	r0, #148	; 0x94
 8012424:	4588      	cmp	r8, r1
 8012426:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801242a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801242e:	bfb8      	it	lt
 8012430:	4688      	movlt	r8, r1
 8012432:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 8012436:	4588      	cmp	r8, r1
 8012438:	bfa8      	it	ge
 801243a:	4688      	movge	r8, r1
 801243c:	fa1f f788 	uxth.w	r7, r8
 8012440:	2b00      	cmp	r3, #0
 8012442:	d12f      	bne.n	80124a4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 8012444:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8012448:	4641      	mov	r1, r8
 801244a:	f7f9 fc8a 	bl	800bd62 <_ZN8touchgfx8Drawable6moveToEss>
 801244e:	4630      	mov	r0, r6
 8012450:	f004 fb93 	bl	8016b7a <_ZNK8touchgfx8Drawable10invalidateEv>
 8012454:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8012458:	6823      	ldr	r3, [r4, #0]
 801245a:	4620      	mov	r0, r4
 801245c:	1abf      	subs	r7, r7, r2
 801245e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012462:	b2bf      	uxth	r7, r7
 8012464:	4798      	blx	r3
 8012466:	4407      	add	r7, r0
 8012468:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
 801246c:	4630      	mov	r0, r6
 801246e:	f004 fb84 	bl	8016b7a <_ZNK8touchgfx8Drawable10invalidateEv>
 8012472:	6823      	ldr	r3, [r4, #0]
 8012474:	4641      	mov	r1, r8
 8012476:	4620      	mov	r0, r4
 8012478:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801247c:	4798      	blx	r3
 801247e:	6320      	str	r0, [r4, #48]	; 0x30
 8012480:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8012484:	2800      	cmp	r0, #0
 8012486:	d03d      	beq.n	8012504 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8012488:	6803      	ldr	r3, [r0, #0]
 801248a:	68db      	ldr	r3, [r3, #12]
 801248c:	4798      	blx	r3
 801248e:	2800      	cmp	r0, #0
 8012490:	d038      	beq.n	8012504 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8012492:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8012496:	4621      	mov	r1, r4
 8012498:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801249a:	6803      	ldr	r3, [r0, #0]
 801249c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	4718      	bx	r3
 80124a4:	4642      	mov	r2, r8
 80124a6:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 80124aa:	f7f9 fc5a 	bl	800bd62 <_ZN8touchgfx8Drawable6moveToEss>
 80124ae:	4630      	mov	r0, r6
 80124b0:	f004 fb63 	bl	8016b7a <_ZNK8touchgfx8Drawable10invalidateEv>
 80124b4:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 80124b8:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	4405      	add	r5, r0
 80124c0:	4620      	mov	r0, r4
 80124c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80124c6:	b2ad      	uxth	r5, r5
 80124c8:	4798      	blx	r3
 80124ca:	6823      	ldr	r3, [r4, #0]
 80124cc:	1bed      	subs	r5, r5, r7
 80124ce:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
 80124d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80124d6:	1a2d      	subs	r5, r5, r0
 80124d8:	4620      	mov	r0, r4
 80124da:	4798      	blx	r3
 80124dc:	4438      	add	r0, r7
 80124de:	b2ad      	uxth	r5, r5
 80124e0:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	; 0xc8
 80124e4:	b202      	sxth	r2, r0
 80124e6:	4651      	mov	r1, sl
 80124e8:	4630      	mov	r0, r6
 80124ea:	f7f9 fb91 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 80124ee:	4630      	mov	r0, r6
 80124f0:	b22a      	sxth	r2, r5
 80124f2:	4649      	mov	r1, r9
 80124f4:	f7f9 fbe8 	bl	800bcc8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80124f8:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 80124fc:	1a2d      	subs	r5, r5, r0
 80124fe:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 8012502:	e7b3      	b.n	801246c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 8012504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012508 <_ZN8touchgfx6SliderC1Ev>:
 8012508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801250c:	4604      	mov	r4, r0
 801250e:	2500      	movs	r5, #0
 8012510:	f7f9 fab8 	bl	800ba84 <_ZN8touchgfx8DrawableC1Ev>
 8012514:	ae02      	add	r6, sp, #8
 8012516:	4b28      	ldr	r3, [pc, #160]	; (80125b8 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8012518:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801251c:	f04f 0b01 	mov.w	fp, #1
 8012520:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 8012524:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	f826 7d04 	strh.w	r7, [r6, #-4]!
 801252e:	4648      	mov	r0, r9
 8012530:	4631      	mov	r1, r6
 8012532:	62a5      	str	r5, [r4, #40]	; 0x28
 8012534:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8012538:	f104 0894 	add.w	r8, r4, #148	; 0x94
 801253c:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8012540:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8012544:	f7fb ff58 	bl	800e3f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012548:	4631      	mov	r1, r6
 801254a:	4650      	mov	r0, sl
 801254c:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012550:	f7fb ff52 	bl	800e3f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012554:	4631      	mov	r1, r6
 8012556:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801255a:	4640      	mov	r0, r8
 801255c:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012560:	f7fb ff4a 	bl	800e3f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012564:	4630      	mov	r0, r6
 8012566:	f7f9 fa8d 	bl	800ba84 <_ZN8touchgfx8DrawableC1Ev>
 801256a:	4b14      	ldr	r3, [pc, #80]	; (80125bc <_ZN8touchgfx6SliderC1Ev+0xb4>)
 801256c:	4651      	mov	r1, sl
 801256e:	4630      	mov	r0, r6
 8012570:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8012574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012578:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 801257c:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8012580:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8012584:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8012588:	f7ff fb32 	bl	8011bf0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801258c:	4649      	mov	r1, r9
 801258e:	4620      	mov	r0, r4
 8012590:	f7ff fb2e 	bl	8011bf0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012594:	4631      	mov	r1, r6
 8012596:	4620      	mov	r0, r4
 8012598:	f7ff fb2a 	bl	8011bf0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801259c:	4641      	mov	r1, r8
 801259e:	4620      	mov	r0, r4
 80125a0:	f7ff fb26 	bl	8011bf0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80125a4:	4620      	mov	r0, r4
 80125a6:	2264      	movs	r2, #100	; 0x64
 80125a8:	4629      	mov	r1, r5
 80125aa:	f7ff fe2a 	bl	8012202 <_ZN8touchgfx6Slider13setValueRangeEii>
 80125ae:	4620      	mov	r0, r4
 80125b0:	b003      	add	sp, #12
 80125b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b6:	bf00      	nop
 80125b8:	08023bc0 	.word	0x08023bc0
 80125bc:	08023b30 	.word	0x08023b30

080125c0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80125c0:	b570      	push	{r4, r5, r6, lr}
 80125c2:	4604      	mov	r4, r0
 80125c4:	4616      	mov	r6, r2
 80125c6:	461d      	mov	r5, r3
 80125c8:	303c      	adds	r0, #60	; 0x3c
 80125ca:	f001 fd4c 	bl	8014066 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80125ce:	4631      	mov	r1, r6
 80125d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80125d4:	f001 fd47 	bl	8014066 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80125d8:	4629      	mov	r1, r5
 80125da:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80125de:	f001 fd42 	bl	8014066 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80125e2:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
 80125e6:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	; 0x70
 80125ea:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80125ee:	f7f9 fb6b 	bl	800bcc8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80125f2:	bd70      	pop	{r4, r5, r6, pc}

080125f4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80125f4:	4770      	bx	lr

080125f6 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80125f6:	4770      	bx	lr

080125f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80125f8:	6803      	ldr	r3, [r0, #0]
 80125fa:	b513      	push	{r0, r1, r4, lr}
 80125fc:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8012600:	2300      	movs	r3, #0
 8012602:	e9cd 3300 	strd	r3, r3, [sp]
 8012606:	466b      	mov	r3, sp
 8012608:	47a0      	blx	r4
 801260a:	b002      	add	sp, #8
 801260c:	bd10      	pop	{r4, pc}

0801260e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801260e:	2301      	movs	r3, #1
 8012610:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012614:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012618:	4770      	bx	lr

0801261a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801261a:	2301      	movs	r3, #1
 801261c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012620:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012624:	4770      	bx	lr

08012626 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012626:	6843      	ldr	r3, [r0, #4]
 8012628:	2201      	movs	r2, #1
 801262a:	725a      	strb	r2, [r3, #9]
 801262c:	6840      	ldr	r0, [r0, #4]
 801262e:	6803      	ldr	r3, [r0, #0]
 8012630:	691b      	ldr	r3, [r3, #16]
 8012632:	4718      	bx	r3

08012634 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012634:	6840      	ldr	r0, [r0, #4]
 8012636:	6803      	ldr	r3, [r0, #0]
 8012638:	689b      	ldr	r3, [r3, #8]
 801263a:	4718      	bx	r3

0801263c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801263c:	b530      	push	{r4, r5, lr}
 801263e:	b08b      	sub	sp, #44	; 0x2c
 8012640:	6804      	ldr	r4, [r0, #0]
 8012642:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8012646:	9509      	str	r5, [sp, #36]	; 0x24
 8012648:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801264c:	9508      	str	r5, [sp, #32]
 801264e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8012652:	9507      	str	r5, [sp, #28]
 8012654:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012658:	9506      	str	r5, [sp, #24]
 801265a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801265e:	9505      	str	r5, [sp, #20]
 8012660:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8012664:	9504      	str	r5, [sp, #16]
 8012666:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801266a:	9503      	str	r5, [sp, #12]
 801266c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012670:	9502      	str	r5, [sp, #8]
 8012672:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012676:	e9cd 3500 	strd	r3, r5, [sp]
 801267a:	4613      	mov	r3, r2
 801267c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801267e:	2200      	movs	r2, #0
 8012680:	47a0      	blx	r4
 8012682:	b00b      	add	sp, #44	; 0x2c
 8012684:	bd30      	pop	{r4, r5, pc}
	...

08012688 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012688:	4b04      	ldr	r3, [pc, #16]	; (801269c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	b123      	cbz	r3, 8012698 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801268e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8012692:	f080 0001 	eor.w	r0, r0, #1
 8012696:	4770      	bx	lr
 8012698:	2001      	movs	r0, #1
 801269a:	4770      	bx	lr
 801269c:	20011b38 	.word	0x20011b38

080126a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80126a0:	b510      	push	{r4, lr}
 80126a2:	4604      	mov	r4, r0
 80126a4:	6840      	ldr	r0, [r0, #4]
 80126a6:	6803      	ldr	r3, [r0, #0]
 80126a8:	689b      	ldr	r3, [r3, #8]
 80126aa:	4798      	blx	r3
 80126ac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80126b0:	b113      	cbz	r3, 80126b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80126b2:	2301      	movs	r3, #1
 80126b4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80126b8:	bd10      	pop	{r4, pc}

080126ba <_ZN8touchgfx3HAL10initializeEv>:
 80126ba:	b510      	push	{r4, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	f7fd fed5 	bl	801046c <_ZN8touchgfx10OSWrappers10initializeEv>
 80126c2:	f7fd fc2f 	bl	800ff24 <_ZN8touchgfx4GPIO4initEv>
 80126c6:	6860      	ldr	r0, [r4, #4]
 80126c8:	6803      	ldr	r3, [r0, #0]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	4798      	blx	r3
 80126ce:	68e0      	ldr	r0, [r4, #12]
 80126d0:	6803      	ldr	r3, [r0, #0]
 80126d2:	689b      	ldr	r3, [r3, #8]
 80126d4:	4798      	blx	r3
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	4620      	mov	r0, r4
 80126da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126e0:	4718      	bx	r3

080126e2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80126e2:	b508      	push	{r3, lr}
 80126e4:	6803      	ldr	r3, [r0, #0]
 80126e6:	4604      	mov	r4, r0
 80126e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80126ec:	4798      	blx	r3
 80126ee:	6823      	ldr	r3, [r4, #0]
 80126f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126f2:	4620      	mov	r0, r4
 80126f4:	4798      	blx	r3
 80126f6:	f7fd ff2d 	bl	8010554 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80126fa:	6823      	ldr	r3, [r4, #0]
 80126fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126fe:	e7f8      	b.n	80126f2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08012700 <_ZN8touchgfx3HAL4tickEv>:
 8012700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012702:	6803      	ldr	r3, [r0, #0]
 8012704:	4604      	mov	r4, r0
 8012706:	4d5b      	ldr	r5, [pc, #364]	; (8012874 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8012708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801270c:	4798      	blx	r3
 801270e:	2800      	cmp	r0, #0
 8012710:	f000 8095 	beq.w	801283e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8012714:	2001      	movs	r0, #1
 8012716:	2600      	movs	r6, #0
 8012718:	f7fd fc0c 	bl	800ff34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801271c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8012720:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8012724:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012728:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801272c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8012730:	b133      	cbz	r3, 8012740 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	4620      	mov	r0, r4
 8012736:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801273a:	4798      	blx	r3
 801273c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8012740:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012744:	2601      	movs	r6, #1
 8012746:	6862      	ldr	r2, [r4, #4]
 8012748:	f083 0301 	eor.w	r3, r3, #1
 801274c:	702e      	strb	r6, [r5, #0]
 801274e:	7253      	strb	r3, [r2, #9]
 8012750:	f003 f9a6 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 8012754:	6803      	ldr	r3, [r0, #0]
 8012756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012758:	4798      	blx	r3
 801275a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801275e:	b90b      	cbnz	r3, 8012764 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012760:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8012764:	f003 f99c 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 8012768:	6803      	ldr	r3, [r0, #0]
 801276a:	695b      	ldr	r3, [r3, #20]
 801276c:	4798      	blx	r3
 801276e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012770:	6803      	ldr	r3, [r0, #0]
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	4798      	blx	r3
 8012776:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801277a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801277e:	3b01      	subs	r3, #1
 8012780:	b2db      	uxtb	r3, r3
 8012782:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012786:	b10a      	cbz	r2, 801278c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1eb      	bne.n	8012764 <_ZN8touchgfx3HAL4tickEv+0x64>
 801278c:	4a3a      	ldr	r2, [pc, #232]	; (8012878 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801278e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8012792:	7813      	ldrb	r3, [r2, #0]
 8012794:	3301      	adds	r3, #1
 8012796:	b25b      	sxtb	r3, r3
 8012798:	4299      	cmp	r1, r3
 801279a:	7013      	strb	r3, [r2, #0]
 801279c:	dc10      	bgt.n	80127c0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801279e:	2300      	movs	r3, #0
 80127a0:	68e0      	ldr	r0, [r4, #12]
 80127a2:	a902      	add	r1, sp, #8
 80127a4:	7013      	strb	r3, [r2, #0]
 80127a6:	aa03      	add	r2, sp, #12
 80127a8:	6803      	ldr	r3, [r0, #0]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	4798      	blx	r3
 80127ae:	6823      	ldr	r3, [r4, #0]
 80127b0:	2800      	cmp	r0, #0
 80127b2:	d050      	beq.n	8012856 <_ZN8touchgfx3HAL4tickEv+0x156>
 80127b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80127b8:	4620      	mov	r0, r4
 80127ba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80127be:	4798      	blx	r3
 80127c0:	2300      	movs	r3, #0
 80127c2:	6960      	ldr	r0, [r4, #20]
 80127c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80127c8:	b158      	cbz	r0, 80127e2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	f10d 0107 	add.w	r1, sp, #7
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	4798      	blx	r3
 80127d4:	b128      	cbz	r0, 80127e2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80127d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80127dc:	6803      	ldr	r3, [r0, #0]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	4798      	blx	r3
 80127e2:	f104 001c 	add.w	r0, r4, #28
 80127e6:	f00e faab 	bl	8020d40 <_ZN8touchgfx8Gestures4tickEv>
 80127ea:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80127ee:	b30b      	cbz	r3, 8012834 <_ZN8touchgfx3HAL4tickEv+0x134>
 80127f0:	6920      	ldr	r0, [r4, #16]
 80127f2:	6803      	ldr	r3, [r0, #0]
 80127f4:	691b      	ldr	r3, [r3, #16]
 80127f6:	4798      	blx	r3
 80127f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80127fa:	4606      	mov	r6, r0
 80127fc:	b903      	cbnz	r3, 8012800 <_ZN8touchgfx3HAL4tickEv+0x100>
 80127fe:	6720      	str	r0, [r4, #112]	; 0x70
 8012800:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012802:	4a1e      	ldr	r2, [pc, #120]	; (801287c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012804:	1af3      	subs	r3, r6, r3
 8012806:	4293      	cmp	r3, r2
 8012808:	d914      	bls.n	8012834 <_ZN8touchgfx3HAL4tickEv+0x134>
 801280a:	6920      	ldr	r0, [r4, #16]
 801280c:	6803      	ldr	r3, [r0, #0]
 801280e:	699b      	ldr	r3, [r3, #24]
 8012810:	4798      	blx	r3
 8012812:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012814:	2264      	movs	r2, #100	; 0x64
 8012816:	1af3      	subs	r3, r6, r3
 8012818:	fbb3 f3f2 	udiv	r3, r3, r2
 801281c:	fbb0 f0f3 	udiv	r0, r0, r3
 8012820:	2800      	cmp	r0, #0
 8012822:	dc1d      	bgt.n	8012860 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012824:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8012828:	6920      	ldr	r0, [r4, #16]
 801282a:	2100      	movs	r1, #0
 801282c:	6803      	ldr	r3, [r0, #0]
 801282e:	69db      	ldr	r3, [r3, #28]
 8012830:	4798      	blx	r3
 8012832:	6726      	str	r6, [r4, #112]	; 0x70
 8012834:	f003 f934 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 8012838:	6803      	ldr	r3, [r0, #0]
 801283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801283c:	4798      	blx	r3
 801283e:	6823      	ldr	r3, [r4, #0]
 8012840:	4620      	mov	r0, r4
 8012842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012846:	4798      	blx	r3
 8012848:	2001      	movs	r0, #1
 801284a:	f7fd fb8f 	bl	800ff6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801284e:	2300      	movs	r3, #0
 8012850:	702b      	strb	r3, [r5, #0]
 8012852:	b004      	add	sp, #16
 8012854:	bd70      	pop	{r4, r5, r6, pc}
 8012856:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801285a:	4620      	mov	r0, r4
 801285c:	4798      	blx	r3
 801285e:	e7af      	b.n	80127c0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012860:	2863      	cmp	r0, #99	; 0x63
 8012862:	bfcb      	itete	gt
 8012864:	2300      	movgt	r3, #0
 8012866:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801286a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801286e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8012872:	e7d9      	b.n	8012828 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012874:	20011b40 	.word	0x20011b40
 8012878:	20011b41 	.word	0x20011b41
 801287c:	05f5e100 	.word	0x05f5e100

08012880 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012880:	f7fd be38 	b.w	80104f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012884 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012884:	6581      	str	r1, [r0, #88]	; 0x58
 8012886:	301c      	adds	r0, #28
 8012888:	f00e ba58 	b.w	8020d3c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801288c <_ZN8touchgfx3HAL5touchEll>:
 801288c:	b530      	push	{r4, r5, lr}
 801288e:	b087      	sub	sp, #28
 8012890:	4604      	mov	r4, r0
 8012892:	a804      	add	r0, sp, #16
 8012894:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012898:	f002 ff0c 	bl	80156b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801289c:	9b04      	ldr	r3, [sp, #16]
 801289e:	a906      	add	r1, sp, #24
 80128a0:	a803      	add	r0, sp, #12
 80128a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80128a6:	9b05      	ldr	r3, [sp, #20]
 80128a8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80128ac:	f002 ff54 	bl	8015758 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80128b0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80128b4:	f104 001c 	add.w	r0, r4, #28
 80128b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80128bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80128c0:	b189      	cbz	r1, 80128e6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80128c2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80128c6:	9300      	str	r3, [sp, #0]
 80128c8:	4613      	mov	r3, r2
 80128ca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80128ce:	462a      	mov	r2, r5
 80128d0:	f00e fa44 	bl	8020d5c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80128d4:	b128      	cbz	r0, 80128e2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80128d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80128da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80128dc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80128e0:	6623      	str	r3, [r4, #96]	; 0x60
 80128e2:	b007      	add	sp, #28
 80128e4:	bd30      	pop	{r4, r5, pc}
 80128e6:	f00e fa79 	bl	8020ddc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80128ea:	2301      	movs	r3, #1
 80128ec:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80128f0:	e7f1      	b.n	80128d6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080128f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80128f2:	b510      	push	{r4, lr}
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d046      	beq.n	8012986 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80128f8:	ea81 0002 	eor.w	r0, r1, r2
 80128fc:	07c4      	lsls	r4, r0, #31
 80128fe:	d508      	bpl.n	8012912 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012900:	440b      	add	r3, r1
 8012902:	3a01      	subs	r2, #1
 8012904:	428b      	cmp	r3, r1
 8012906:	d93e      	bls.n	8012986 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012908:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801290c:	f801 0b01 	strb.w	r0, [r1], #1
 8012910:	e7f8      	b.n	8012904 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012912:	07d0      	lsls	r0, r2, #31
 8012914:	bf42      	ittt	mi
 8012916:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801291a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801291e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012922:	2b01      	cmp	r3, #1
 8012924:	d911      	bls.n	801294a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012926:	ea81 0402 	eor.w	r4, r1, r2
 801292a:	4610      	mov	r0, r2
 801292c:	07a4      	lsls	r4, r4, #30
 801292e:	d022      	beq.n	8012976 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012930:	f023 0401 	bic.w	r4, r3, #1
 8012934:	440c      	add	r4, r1
 8012936:	428c      	cmp	r4, r1
 8012938:	4602      	mov	r2, r0
 801293a:	d904      	bls.n	8012946 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801293c:	8812      	ldrh	r2, [r2, #0]
 801293e:	3002      	adds	r0, #2
 8012940:	f821 2b02 	strh.w	r2, [r1], #2
 8012944:	e7f7      	b.n	8012936 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	f023 0003 	bic.w	r0, r3, #3
 801294e:	4408      	add	r0, r1
 8012950:	4288      	cmp	r0, r1
 8012952:	4614      	mov	r4, r2
 8012954:	d904      	bls.n	8012960 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012956:	6824      	ldr	r4, [r4, #0]
 8012958:	3204      	adds	r2, #4
 801295a:	f841 4b04 	str.w	r4, [r1], #4
 801295e:	e7f7      	b.n	8012950 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012960:	f003 0303 	and.w	r3, r3, #3
 8012964:	3a01      	subs	r2, #1
 8012966:	440b      	add	r3, r1
 8012968:	428b      	cmp	r3, r1
 801296a:	d90c      	bls.n	8012986 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801296c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012970:	f801 0b01 	strb.w	r0, [r1], #1
 8012974:	e7f8      	b.n	8012968 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012976:	0790      	lsls	r0, r2, #30
 8012978:	d0e7      	beq.n	801294a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801297a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801297e:	3b02      	subs	r3, #2
 8012980:	f821 0b02 	strh.w	r0, [r1], #2
 8012984:	e7e1      	b.n	801294a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012986:	2001      	movs	r0, #1
 8012988:	bd10      	pop	{r4, pc}

0801298a <_ZN8touchgfx3HAL7noTouchEv>:
 801298a:	b510      	push	{r4, lr}
 801298c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8012990:	4604      	mov	r4, r0
 8012992:	b153      	cbz	r3, 80129aa <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012994:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8012998:	2101      	movs	r1, #1
 801299a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801299e:	301c      	adds	r0, #28
 80129a0:	f00e fa1c 	bl	8020ddc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80129a4:	2300      	movs	r3, #0
 80129a6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80129aa:	bd10      	pop	{r4, pc}

080129ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80129ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129b0:	b085      	sub	sp, #20
 80129b2:	4604      	mov	r4, r0
 80129b4:	2000      	movs	r0, #0
 80129b6:	4699      	mov	r9, r3
 80129b8:	ad04      	add	r5, sp, #16
 80129ba:	460f      	mov	r7, r1
 80129bc:	4690      	mov	r8, r2
 80129be:	f845 0d04 	str.w	r0, [r5, #-4]!
 80129c2:	69a0      	ldr	r0, [r4, #24]
 80129c4:	6806      	ldr	r6, [r0, #0]
 80129c6:	9501      	str	r5, [sp, #4]
 80129c8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80129cc:	9500      	str	r5, [sp, #0]
 80129ce:	6835      	ldr	r5, [r6, #0]
 80129d0:	47a8      	blx	r5
 80129d2:	4d10      	ldr	r5, [pc, #64]	; (8012a14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80129d4:	4606      	mov	r6, r0
 80129d6:	f8a5 9000 	strh.w	r9, [r5]
 80129da:	f7f9 fad3 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 80129de:	6803      	ldr	r3, [r0, #0]
 80129e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e2:	4798      	blx	r3
 80129e4:	b128      	cbz	r0, 80129f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80129e6:	2801      	cmp	r0, #1
 80129e8:	d00b      	beq.n	8012a02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80129ea:	4630      	mov	r0, r6
 80129ec:	b005      	add	sp, #20
 80129ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129f2:	882b      	ldrh	r3, [r5, #0]
 80129f4:	fb08 7203 	mla	r2, r8, r3, r7
 80129f8:	9b03      	ldr	r3, [sp, #12]
 80129fa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80129fe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012a00:	e7f3      	b.n	80129ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012a02:	882a      	ldrh	r2, [r5, #0]
 8012a04:	9b03      	ldr	r3, [sp, #12]
 8012a06:	fb08 7202 	mla	r2, r8, r2, r7
 8012a0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a0e:	1a9a      	subs	r2, r3, r2
 8012a10:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012a12:	e7ea      	b.n	80129ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012a14:	20011b34 	.word	0x20011b34

08012a18 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a1a:	b08b      	sub	sp, #44	; 0x2c
 8012a1c:	4617      	mov	r7, r2
 8012a1e:	4604      	mov	r4, r0
 8012a20:	460e      	mov	r6, r1
 8012a22:	461d      	mov	r5, r3
 8012a24:	f7f9 faae 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8012a28:	6803      	ldr	r3, [r0, #0]
 8012a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2c:	4798      	blx	r3
 8012a2e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012a32:	9007      	str	r0, [sp, #28]
 8012a34:	4631      	mov	r1, r6
 8012a36:	6822      	ldr	r2, [r4, #0]
 8012a38:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012a3c:	4b0c      	ldr	r3, [pc, #48]	; (8012a70 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012a3e:	4620      	mov	r0, r4
 8012a40:	881b      	ldrh	r3, [r3, #0]
 8012a42:	9306      	str	r3, [sp, #24]
 8012a44:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012a48:	9305      	str	r3, [sp, #20]
 8012a4a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012a4e:	9304      	str	r3, [sp, #16]
 8012a50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012a54:	9303      	str	r3, [sp, #12]
 8012a56:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012a5a:	9302      	str	r3, [sp, #8]
 8012a5c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012a60:	e9cd 5300 	strd	r5, r3, [sp]
 8012a64:	463b      	mov	r3, r7
 8012a66:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8012a68:	2200      	movs	r2, #0
 8012a6a:	47a8      	blx	r5
 8012a6c:	b00b      	add	sp, #44	; 0x2c
 8012a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a70:	20011b34 	.word	0x20011b34

08012a74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a78:	4698      	mov	r8, r3
 8012a7a:	6803      	ldr	r3, [r0, #0]
 8012a7c:	b08b      	sub	sp, #44	; 0x2c
 8012a7e:	4617      	mov	r7, r2
 8012a80:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8012a82:	460e      	mov	r6, r1
 8012a84:	4b13      	ldr	r3, [pc, #76]	; (8012ad4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012a86:	4604      	mov	r4, r0
 8012a88:	f8b3 9000 	ldrh.w	r9, [r3]
 8012a8c:	f7f9 fa7a 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8012a90:	6803      	ldr	r3, [r0, #0]
 8012a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a94:	4798      	blx	r3
 8012a96:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	4631      	mov	r1, r6
 8012a9e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012aa2:	2302      	movs	r3, #2
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012aaa:	2301      	movs	r3, #1
 8012aac:	9305      	str	r3, [sp, #20]
 8012aae:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012ab2:	9304      	str	r3, [sp, #16]
 8012ab4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012ab8:	9303      	str	r3, [sp, #12]
 8012aba:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012abe:	9302      	str	r3, [sp, #8]
 8012ac0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012ac4:	e9cd 8300 	strd	r8, r3, [sp]
 8012ac8:	463b      	mov	r3, r7
 8012aca:	47a8      	blx	r5
 8012acc:	b00b      	add	sp, #44	; 0x2c
 8012ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad2:	bf00      	nop
 8012ad4:	20011b34 	.word	0x20011b34

08012ad8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012adc:	4698      	mov	r8, r3
 8012ade:	6803      	ldr	r3, [r0, #0]
 8012ae0:	b087      	sub	sp, #28
 8012ae2:	460e      	mov	r6, r1
 8012ae4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8012ae6:	4617      	mov	r7, r2
 8012ae8:	4b0f      	ldr	r3, [pc, #60]	; (8012b28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012aea:	4604      	mov	r4, r0
 8012aec:	f8b3 9000 	ldrh.w	r9, [r3]
 8012af0:	f7f9 fa48 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8012af4:	6803      	ldr	r3, [r0, #0]
 8012af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af8:	4798      	blx	r3
 8012afa:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8012afe:	463a      	mov	r2, r7
 8012b00:	4631      	mov	r1, r6
 8012b02:	f8cd 900c 	str.w	r9, [sp, #12]
 8012b06:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8012b0a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8012b0e:	4620      	mov	r0, r4
 8012b10:	9302      	str	r3, [sp, #8]
 8012b12:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012b16:	9301      	str	r3, [sp, #4]
 8012b18:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012b1c:	9300      	str	r3, [sp, #0]
 8012b1e:	4643      	mov	r3, r8
 8012b20:	47a8      	blx	r5
 8012b22:	b007      	add	sp, #28
 8012b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b28:	20011b34 	.word	0x20011b34

08012b2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b30:	4604      	mov	r4, r0
 8012b32:	b08f      	sub	sp, #60	; 0x3c
 8012b34:	4610      	mov	r0, r2
 8012b36:	460d      	mov	r5, r1
 8012b38:	4691      	mov	r9, r2
 8012b3a:	461e      	mov	r6, r3
 8012b3c:	f005 ffa0 	bl	8018a80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	f000 809d 	beq.w	8012c80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f8df b198 	ldr.w	fp, [pc, #408]	; 8012ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8012b4e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b54:	4798      	blx	r3
 8012b56:	6823      	ldr	r3, [r4, #0]
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8012ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8012b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b60:	4798      	blx	r3
 8012b62:	f8bb 3000 	ldrh.w	r3, [fp]
 8012b66:	4f5c      	ldr	r7, [pc, #368]	; (8012cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012b68:	9301      	str	r3, [sp, #4]
 8012b6a:	f8ba 3000 	ldrh.w	r3, [sl]
 8012b6e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012b72:	4640      	mov	r0, r8
 8012b74:	9302      	str	r3, [sp, #8]
 8012b76:	883b      	ldrh	r3, [r7, #0]
 8012b78:	9303      	str	r3, [sp, #12]
 8012b7a:	4b58      	ldr	r3, [pc, #352]	; (8012cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012b7c:	881a      	ldrh	r2, [r3, #0]
 8012b7e:	9305      	str	r3, [sp, #20]
 8012b80:	9204      	str	r2, [sp, #16]
 8012b82:	f006 f8c1 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012b86:	8038      	strh	r0, [r7, #0]
 8012b88:	4640      	mov	r0, r8
 8012b8a:	f006 f8f1 	bl	8018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012b8e:	9b05      	ldr	r3, [sp, #20]
 8012b90:	b280      	uxth	r0, r0
 8012b92:	8018      	strh	r0, [r3, #0]
 8012b94:	4b52      	ldr	r3, [pc, #328]	; (8012ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d174      	bne.n	8012c86 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012b9c:	883b      	ldrh	r3, [r7, #0]
 8012b9e:	f8aa 0000 	strh.w	r0, [sl]
 8012ba2:	f8ab 3000 	strh.w	r3, [fp]
 8012ba6:	4648      	mov	r0, r9
 8012ba8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8012bac:	f005 ff68 	bl	8018a80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012bb6:	4611      	mov	r1, r2
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012bbe:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012bc2:	f7f9 f825 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8012bcc:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012bd0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	dd5c      	ble.n	8012c92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012bd8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	dd58      	ble.n	8012c92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012be0:	462a      	mov	r2, r5
 8012be2:	ab0a      	add	r3, sp, #40	; 0x28
 8012be4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012be8:	6851      	ldr	r1, [r2, #4]
 8012bea:	c303      	stmia	r3!, {r0, r1}
 8012bec:	4631      	mov	r1, r6
 8012bee:	a80a      	add	r0, sp, #40	; 0x28
 8012bf0:	f7ff f97a 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8012bf4:	4b38      	ldr	r3, [pc, #224]	; (8012cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012bf6:	2100      	movs	r1, #0
 8012bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012bfc:	4b37      	ldr	r3, [pc, #220]	; (8012cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012bfe:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012c02:	aa0a      	add	r2, sp, #40	; 0x28
 8012c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c08:	910c      	str	r1, [sp, #48]	; 0x30
 8012c0a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012c0e:	ab08      	add	r3, sp, #32
 8012c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c14:	e883 0003 	stmia.w	r3, {r0, r1}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	a90c      	add	r1, sp, #48	; 0x30
 8012c1c:	f7ff f964 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8012c20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d13c      	bne.n	8012ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012c26:	2000      	movs	r0, #0
 8012c28:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8012c2c:	2600      	movs	r6, #0
 8012c2e:	696b      	ldr	r3, [r5, #20]
 8012c30:	a908      	add	r1, sp, #32
 8012c32:	682a      	ldr	r2, [r5, #0]
 8012c34:	4628      	mov	r0, r5
 8012c36:	9305      	str	r3, [sp, #20]
 8012c38:	616e      	str	r6, [r5, #20]
 8012c3a:	6892      	ldr	r2, [r2, #8]
 8012c3c:	4790      	blx	r2
 8012c3e:	9b05      	ldr	r3, [sp, #20]
 8012c40:	4652      	mov	r2, sl
 8012c42:	4649      	mov	r1, r9
 8012c44:	616b      	str	r3, [r5, #20]
 8012c46:	4628      	mov	r0, r5
 8012c48:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8012c4c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8012c50:	f7f8 ffde 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 8012c54:	9a01      	ldr	r2, [sp, #4]
 8012c56:	4b23      	ldr	r3, [pc, #140]	; (8012ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8012c58:	4620      	mov	r0, r4
 8012c5a:	801a      	strh	r2, [r3, #0]
 8012c5c:	9a02      	ldr	r2, [sp, #8]
 8012c5e:	4b22      	ldr	r3, [pc, #136]	; (8012ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8012c60:	801a      	strh	r2, [r3, #0]
 8012c62:	9a03      	ldr	r2, [sp, #12]
 8012c64:	4b1c      	ldr	r3, [pc, #112]	; (8012cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012c66:	801a      	strh	r2, [r3, #0]
 8012c68:	4b1c      	ldr	r3, [pc, #112]	; (8012cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012c6a:	9a04      	ldr	r2, [sp, #16]
 8012c6c:	801a      	strh	r2, [r3, #0]
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8012c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c76:	4798      	blx	r3
 8012c78:	6823      	ldr	r3, [r4, #0]
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7e:	4798      	blx	r3
 8012c80:	b00f      	add	sp, #60	; 0x3c
 8012c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c86:	883b      	ldrh	r3, [r7, #0]
 8012c88:	f8ab 0000 	strh.w	r0, [fp]
 8012c8c:	f8aa 3000 	strh.w	r3, [sl]
 8012c90:	e789      	b.n	8012ba6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012c92:	462a      	mov	r2, r5
 8012c94:	ab0a      	add	r3, sp, #40	; 0x28
 8012c96:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012c9a:	6851      	ldr	r1, [r2, #4]
 8012c9c:	c303      	stmia	r3!, {r0, r1}
 8012c9e:	e7a9      	b.n	8012bf4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012ca0:	a807      	add	r0, sp, #28
 8012ca2:	f006 f969 	bl	8018f78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012ca6:	4606      	mov	r6, r0
 8012ca8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012caa:	6803      	ldr	r3, [r0, #0]
 8012cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cae:	4798      	blx	r3
 8012cb0:	4286      	cmp	r6, r0
 8012cb2:	d1b8      	bne.n	8012c26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012cb4:	f7f9 f966 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8012cb8:	6803      	ldr	r3, [r0, #0]
 8012cba:	4606      	mov	r6, r0
 8012cbc:	a807      	add	r0, sp, #28
 8012cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cc0:	9305      	str	r3, [sp, #20]
 8012cc2:	f006 f959 	bl	8018f78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012cc6:	9b05      	ldr	r3, [sp, #20]
 8012cc8:	4601      	mov	r1, r0
 8012cca:	4630      	mov	r0, r6
 8012ccc:	4798      	blx	r3
 8012cce:	f080 0001 	eor.w	r0, r0, #1
 8012cd2:	b2c0      	uxtb	r0, r0
 8012cd4:	e7a8      	b.n	8012c28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012cd6:	bf00      	nop
 8012cd8:	20011b2e 	.word	0x20011b2e
 8012cdc:	20011b30 	.word	0x20011b30
 8012ce0:	20011b32 	.word	0x20011b32
 8012ce4:	20011b34 	.word	0x20011b34
 8012ce8:	20011b36 	.word	0x20011b36

08012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012cec:	4b07      	ldr	r3, [pc, #28]	; (8012d0c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012cee:	b510      	push	{r4, lr}
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	4604      	mov	r4, r0
 8012cf4:	b13b      	cbz	r3, 8012d06 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012cf6:	6803      	ldr	r3, [r0, #0]
 8012cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cfa:	4798      	blx	r3
 8012cfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012cfe:	4283      	cmp	r3, r0
 8012d00:	d101      	bne.n	8012d06 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012d02:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012d04:	bd10      	pop	{r4, pc}
 8012d06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012d08:	e7fc      	b.n	8012d04 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012d0a:	bf00      	nop
 8012d0c:	20011b38 	.word	0x20011b38

08012d10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d14:	461d      	mov	r5, r3
 8012d16:	b08a      	sub	sp, #40	; 0x28
 8012d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d1c:	4690      	mov	r8, r2
 8012d1e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8012d22:	2400      	movs	r4, #0
 8012d24:	4607      	mov	r7, r0
 8012d26:	fb06 8505 	mla	r5, r6, r5, r8
 8012d2a:	9404      	str	r4, [sp, #16]
 8012d2c:	f88d 4020 	strb.w	r4, [sp, #32]
 8012d30:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012d34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012d38:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012d3c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012d40:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012d44:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012d48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012d4c:	f7ff ffce 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012d50:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012d5a:	a901      	add	r1, sp, #4
 8012d5c:	9505      	str	r5, [sp, #20]
 8012d5e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012d62:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8012d66:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012d6a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012d6e:	6803      	ldr	r3, [r0, #0]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	4798      	blx	r3
 8012d74:	b00a      	add	sp, #40	; 0x28
 8012d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d7a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012d7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d7e:	b08b      	sub	sp, #44	; 0x2c
 8012d80:	2400      	movs	r4, #0
 8012d82:	4691      	mov	r9, r2
 8012d84:	461d      	mov	r5, r3
 8012d86:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d8e:	4688      	mov	r8, r1
 8012d90:	4607      	mov	r7, r0
 8012d92:	9404      	str	r4, [sp, #16]
 8012d94:	fb06 9505 	mla	r5, r6, r5, r9
 8012d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d9c:	f7ff ffa6 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012da0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012da4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012dae:	a901      	add	r1, sp, #4
 8012db0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012db4:	9505      	str	r5, [sp, #20]
 8012db6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012dba:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012dbe:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012dc2:	f8cd 8010 	str.w	r8, [sp, #16]
 8012dc6:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012dca:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012dce:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012dd2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012dd6:	6803      	ldr	r3, [r0, #0]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	4798      	blx	r3
 8012ddc:	b00b      	add	sp, #44	; 0x2c
 8012dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012de4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de8:	b08a      	sub	sp, #40	; 0x28
 8012dea:	4698      	mov	r8, r3
 8012dec:	2300      	movs	r3, #0
 8012dee:	4606      	mov	r6, r0
 8012df0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012df4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8012df8:	2d0b      	cmp	r5, #11
 8012dfa:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012dfe:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8012e02:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8012e06:	9304      	str	r3, [sp, #16]
 8012e08:	d137      	bne.n	8012e7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8012e0a:	2380      	movs	r3, #128	; 0x80
 8012e0c:	f88d 0020 	strb.w	r0, [sp, #32]
 8012e10:	4630      	mov	r0, r6
 8012e12:	9203      	str	r2, [sp, #12]
 8012e14:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012e18:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012e1c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012e20:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012e24:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012e28:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012e2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012e30:	f7ff ff5c 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012e34:	2c0b      	cmp	r4, #11
 8012e36:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8012e3a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8012e3e:	bf94      	ite	ls
 8012e40:	4b19      	ldrls	r3, [pc, #100]	; (8012ea8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8012e42:	2100      	movhi	r1, #0
 8012e44:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012e48:	bf98      	it	ls
 8012e4a:	5d19      	ldrbls	r1, [r3, r4]
 8012e4c:	fb02 8307 	mla	r3, r2, r7, r8
 8012e50:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012e54:	10c9      	asrs	r1, r1, #3
 8012e56:	fb01 0003 	mla	r0, r1, r3, r0
 8012e5a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8012e5e:	a901      	add	r1, sp, #4
 8012e60:	9005      	str	r0, [sp, #20]
 8012e62:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012e66:	2300      	movs	r3, #0
 8012e68:	6870      	ldr	r0, [r6, #4]
 8012e6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012e6e:	6803      	ldr	r3, [r0, #0]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	4798      	blx	r3
 8012e74:	b00a      	add	sp, #40	; 0x28
 8012e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e7a:	2d02      	cmp	r5, #2
 8012e7c:	d109      	bne.n	8012e92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8012e7e:	28ff      	cmp	r0, #255	; 0xff
 8012e80:	d105      	bne.n	8012e8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8012e82:	f1bc 0f00 	cmp.w	ip, #0
 8012e86:	bf14      	ite	ne
 8012e88:	2340      	movne	r3, #64	; 0x40
 8012e8a:	2320      	moveq	r3, #32
 8012e8c:	e7be      	b.n	8012e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012e8e:	2340      	movs	r3, #64	; 0x40
 8012e90:	e7bc      	b.n	8012e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012e92:	28ff      	cmp	r0, #255	; 0xff
 8012e94:	d105      	bne.n	8012ea2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8012e96:	f1bc 0f00 	cmp.w	ip, #0
 8012e9a:	bf14      	ite	ne
 8012e9c:	2304      	movne	r3, #4
 8012e9e:	2301      	moveq	r3, #1
 8012ea0:	e7b4      	b.n	8012e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012ea2:	2304      	movs	r3, #4
 8012ea4:	e7b2      	b.n	8012e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012ea6:	bf00      	nop
 8012ea8:	08023c84 	.word	0x08023c84

08012eac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb0:	b08b      	sub	sp, #44	; 0x2c
 8012eb2:	461d      	mov	r5, r3
 8012eb4:	2400      	movs	r4, #0
 8012eb6:	4688      	mov	r8, r1
 8012eb8:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8012ebc:	4693      	mov	fp, r2
 8012ebe:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8012ec2:	4607      	mov	r7, r0
 8012ec4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012ec8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8012ecc:	9404      	str	r4, [sp, #16]
 8012ece:	bf14      	ite	ne
 8012ed0:	2308      	movne	r3, #8
 8012ed2:	2302      	moveq	r3, #2
 8012ed4:	fb05 b50a 	mla	r5, r5, sl, fp
 8012ed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012edc:	f7ff ff06 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012ee0:	2e0b      	cmp	r6, #11
 8012ee2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012ee6:	a901      	add	r1, sp, #4
 8012ee8:	bf98      	it	ls
 8012eea:	4b13      	ldrls	r3, [pc, #76]	; (8012f38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8012eec:	f8ad a01e 	strh.w	sl, [sp, #30]
 8012ef0:	bf98      	it	ls
 8012ef2:	5d9c      	ldrbls	r4, [r3, r6]
 8012ef4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012ef8:	10e4      	asrs	r4, r4, #3
 8012efa:	f8cd 8010 	str.w	r8, [sp, #16]
 8012efe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012f02:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012f06:	fb04 0405 	mla	r4, r4, r5, r0
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012f10:	2300      	movs	r3, #0
 8012f12:	9405      	str	r4, [sp, #20]
 8012f14:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012f18:	f88d 9020 	strb.w	r9, [sp, #32]
 8012f1c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8012f20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012f24:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8012f28:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8012f2c:	6803      	ldr	r3, [r0, #0]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	4798      	blx	r3
 8012f32:	b00b      	add	sp, #44	; 0x2c
 8012f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f38:	08023c84 	.word	0x08023c84

08012f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f40:	461e      	mov	r6, r3
 8012f42:	4b0a      	ldr	r3, [pc, #40]	; (8012f6c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8012f44:	460f      	mov	r7, r1
 8012f46:	4690      	mov	r8, r2
 8012f48:	881d      	ldrh	r5, [r3, #0]
 8012f4a:	f7f9 f81b 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8012f4e:	6803      	ldr	r3, [r0, #0]
 8012f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f52:	4798      	blx	r3
 8012f54:	280b      	cmp	r0, #11
 8012f56:	bf96      	itet	ls
 8012f58:	4b05      	ldrls	r3, [pc, #20]	; (8012f70 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8012f5a:	2400      	movhi	r4, #0
 8012f5c:	5c1c      	ldrbls	r4, [r3, r0]
 8012f5e:	fb08 7005 	mla	r0, r8, r5, r7
 8012f62:	10e4      	asrs	r4, r4, #3
 8012f64:	fb04 6000 	mla	r0, r4, r0, r6
 8012f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f6c:	20011b34 	.word	0x20011b34
 8012f70:	08023c84 	.word	0x08023c84

08012f74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8012f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f76:	b08b      	sub	sp, #44	; 0x2c
 8012f78:	461f      	mov	r7, r3
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	4616      	mov	r6, r2
 8012f7e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012f82:	2500      	movs	r5, #0
 8012f84:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012f88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012f8c:	9504      	str	r5, [sp, #16]
 8012f8e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012f92:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012f96:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012f9a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012f9e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012fa2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012fa6:	f88d 3020 	strb.w	r3, [sp, #32]
 8012faa:	f7ff fe9f 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012fae:	463a      	mov	r2, r7
 8012fb0:	4631      	mov	r1, r6
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f7ff ffc1 	bl	8012f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012fba:	4b0e      	ldr	r3, [pc, #56]	; (8012ff4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8012fbc:	9005      	str	r0, [sp, #20]
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012fc4:	f7f8 ffde 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8012fc8:	6803      	ldr	r3, [r0, #0]
 8012fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fcc:	4798      	blx	r3
 8012fce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012fd0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8012fd4:	a901      	add	r1, sp, #4
 8012fd6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8012fda:	9304      	str	r3, [sp, #16]
 8012fdc:	6860      	ldr	r0, [r4, #4]
 8012fde:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012fe2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8012fe6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012fea:	6803      	ldr	r3, [r0, #0]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	4798      	blx	r3
 8012ff0:	b00b      	add	sp, #44	; 0x2c
 8012ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ff4:	20011b34 	.word	0x20011b34

08012ff8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ffa:	b08d      	sub	sp, #52	; 0x34
 8012ffc:	2501      	movs	r5, #1
 8012ffe:	4604      	mov	r4, r0
 8013000:	466b      	mov	r3, sp
 8013002:	9503      	str	r5, [sp, #12]
 8013004:	e883 0006 	stmia.w	r3, {r1, r2}
 8013008:	2300      	movs	r3, #0
 801300a:	f8bd 6000 	ldrh.w	r6, [sp]
 801300e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013012:	9306      	str	r3, [sp, #24]
 8013014:	6803      	ldr	r3, [r0, #0]
 8013016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013018:	4798      	blx	r3
 801301a:	463a      	mov	r2, r7
 801301c:	4631      	mov	r1, r6
 801301e:	4603      	mov	r3, r0
 8013020:	4620      	mov	r0, r4
 8013022:	f7ff ff8b 	bl	8012f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013026:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013028:	9004      	str	r0, [sp, #16]
 801302a:	9307      	str	r3, [sp, #28]
 801302c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013030:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013034:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013038:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801303c:	4b0e      	ldr	r3, [pc, #56]	; (8013078 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013044:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013048:	f7f8 ff9c 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 801304c:	6803      	ldr	r3, [r0, #0]
 801304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013050:	4798      	blx	r3
 8013052:	23ff      	movs	r3, #255	; 0xff
 8013054:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013058:	a903      	add	r1, sp, #12
 801305a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801305e:	6860      	ldr	r0, [r4, #4]
 8013060:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013064:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013068:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801306c:	6803      	ldr	r3, [r0, #0]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	4798      	blx	r3
 8013072:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013074:	b00d      	add	sp, #52	; 0x34
 8013076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013078:	20011b34 	.word	0x20011b34

0801307c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013080:	b08c      	sub	sp, #48	; 0x30
 8013082:	461e      	mov	r6, r3
 8013084:	2300      	movs	r3, #0
 8013086:	4604      	mov	r4, r0
 8013088:	466d      	mov	r5, sp
 801308a:	9306      	str	r3, [sp, #24]
 801308c:	6803      	ldr	r3, [r0, #0]
 801308e:	e885 0006 	stmia.w	r5, {r1, r2}
 8013092:	2501      	movs	r5, #1
 8013094:	f8bd 7000 	ldrh.w	r7, [sp]
 8013098:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801309c:	9503      	str	r5, [sp, #12]
 801309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130a0:	4798      	blx	r3
 80130a2:	4642      	mov	r2, r8
 80130a4:	4639      	mov	r1, r7
 80130a6:	4603      	mov	r3, r0
 80130a8:	4620      	mov	r0, r4
 80130aa:	f7ff ff47 	bl	8012f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80130ae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80130b2:	9004      	str	r0, [sp, #16]
 80130b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80130b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80130bc:	9607      	str	r6, [sp, #28]
 80130be:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80130c2:	4b10      	ldr	r3, [pc, #64]	; (8013104 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80130ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80130cc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80130d0:	f7f8 ff58 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 80130d4:	6803      	ldr	r3, [r0, #0]
 80130d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d8:	4798      	blx	r3
 80130da:	23ff      	movs	r3, #255	; 0xff
 80130dc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80130e0:	a903      	add	r1, sp, #12
 80130e2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80130e6:	6860      	ldr	r0, [r4, #4]
 80130e8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80130ec:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80130f0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80130f4:	6803      	ldr	r3, [r0, #0]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	4798      	blx	r3
 80130fa:	4630      	mov	r0, r6
 80130fc:	b00c      	add	sp, #48	; 0x30
 80130fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013102:	bf00      	nop
 8013104:	20011b34 	.word	0x20011b34

08013108 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801310a:	b085      	sub	sp, #20
 801310c:	4605      	mov	r5, r0
 801310e:	ac02      	add	r4, sp, #8
 8013110:	e884 0006 	stmia.w	r4, {r1, r2}
 8013114:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013118:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801311c:	f7ff fde6 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013120:	4631      	mov	r1, r6
 8013122:	4603      	mov	r3, r0
 8013124:	463a      	mov	r2, r7
 8013126:	4628      	mov	r0, r5
 8013128:	f7ff ff08 	bl	8012f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801312c:	4a05      	ldr	r2, [pc, #20]	; (8013144 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801312e:	682b      	ldr	r3, [r5, #0]
 8013130:	8812      	ldrh	r2, [r2, #0]
 8013132:	9200      	str	r2, [sp, #0]
 8013134:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013136:	4603      	mov	r3, r0
 8013138:	4628      	mov	r0, r5
 801313a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801313e:	47b0      	blx	r6
 8013140:	b005      	add	sp, #20
 8013142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013144:	20011b34 	.word	0x20011b34

08013148 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013148:	b570      	push	{r4, r5, r6, lr}
 801314a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801314e:	4604      	mov	r4, r0
 8013150:	b19b      	cbz	r3, 801317a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013152:	2002      	movs	r0, #2
 8013154:	f7fc ff26 	bl	800ffa4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013158:	2300      	movs	r3, #0
 801315a:	4620      	mov	r0, r4
 801315c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013160:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013164:	6823      	ldr	r3, [r4, #0]
 8013166:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801316a:	f7ff fdbf 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801316e:	4601      	mov	r1, r0
 8013170:	4620      	mov	r0, r4
 8013172:	462b      	mov	r3, r5
 8013174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013178:	4718      	bx	r3
 801317a:	bd70      	pop	{r4, r5, r6, pc}

0801317c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801317c:	b538      	push	{r3, r4, r5, lr}
 801317e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8013182:	4604      	mov	r4, r0
 8013184:	460d      	mov	r5, r1
 8013186:	428b      	cmp	r3, r1
 8013188:	d006      	beq.n	8013198 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801318a:	6803      	ldr	r3, [r0, #0]
 801318c:	b929      	cbnz	r1, 801319a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801318e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013192:	4798      	blx	r3
 8013194:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013198:	bd38      	pop	{r3, r4, r5, pc}
 801319a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801319e:	e7f8      	b.n	8013192 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080131a0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80131a0:	4b0d      	ldr	r3, [pc, #52]	; (80131d8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80131a2:	b510      	push	{r4, lr}
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	4604      	mov	r4, r0
 80131a8:	b95b      	cbnz	r3, 80131c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80131aa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80131ae:	2b02      	cmp	r3, #2
 80131b0:	d007      	beq.n	80131c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80131b2:	6840      	ldr	r0, [r0, #4]
 80131b4:	f000 f90e 	bl	80133d4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80131b8:	b118      	cbz	r0, 80131c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80131ba:	6862      	ldr	r2, [r4, #4]
 80131bc:	7a53      	ldrb	r3, [r2, #9]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d0fc      	beq.n	80131bc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80131c2:	f7fd f989 	bl	80104d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80131c6:	4620      	mov	r0, r4
 80131c8:	2100      	movs	r1, #0
 80131ca:	f7ff ffd7 	bl	801317c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80131ce:	4620      	mov	r0, r4
 80131d0:	f7ff fd8c 	bl	8012cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80131d4:	bd10      	pop	{r4, pc}
 80131d6:	bf00      	nop
 80131d8:	20011b38 	.word	0x20011b38

080131dc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80131dc:	4770      	bx	lr

080131de <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80131de:	2000      	movs	r0, #0
 80131e0:	4770      	bx	lr

080131e2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80131e2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80131e6:	1a13      	subs	r3, r2, r0
 80131e8:	4258      	negs	r0, r3
 80131ea:	4158      	adcs	r0, r3
 80131ec:	4770      	bx	lr

080131ee <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80131ee:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80131f2:	1a9b      	subs	r3, r3, r2
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	bfdc      	itt	le
 80131f8:	6882      	ldrle	r2, [r0, #8]
 80131fa:	189b      	addle	r3, r3, r2
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	bfcc      	ite	gt
 8013200:	2000      	movgt	r0, #0
 8013202:	2001      	movle	r0, #1
 8013204:	4770      	bx	lr

08013206 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013206:	6902      	ldr	r2, [r0, #16]
 8013208:	6843      	ldr	r3, [r0, #4]
 801320a:	2024      	movs	r0, #36	; 0x24
 801320c:	fb00 3002 	mla	r0, r0, r2, r3
 8013210:	4770      	bx	lr

08013212 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013212:	6803      	ldr	r3, [r0, #0]
 8013214:	691b      	ldr	r3, [r3, #16]
 8013216:	4718      	bx	r3

08013218 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013218:	2301      	movs	r3, #1
 801321a:	b570      	push	{r4, r5, r6, lr}
 801321c:	7203      	strb	r3, [r0, #8]
 801321e:	4604      	mov	r4, r0
 8013220:	6840      	ldr	r0, [r0, #4]
 8013222:	6803      	ldr	r3, [r0, #0]
 8013224:	699b      	ldr	r3, [r3, #24]
 8013226:	4798      	blx	r3
 8013228:	6803      	ldr	r3, [r0, #0]
 801322a:	4605      	mov	r5, r0
 801322c:	2b40      	cmp	r3, #64	; 0x40
 801322e:	d00c      	beq.n	801324a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013230:	d810      	bhi.n	8013254 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013232:	2b04      	cmp	r3, #4
 8013234:	d01d      	beq.n	8013272 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013236:	d804      	bhi.n	8013242 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013238:	2b01      	cmp	r3, #1
 801323a:	d006      	beq.n	801324a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801323c:	2b02      	cmp	r3, #2
 801323e:	d02c      	beq.n	801329a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013240:	bd70      	pop	{r4, r5, r6, pc}
 8013242:	2b08      	cmp	r3, #8
 8013244:	d01d      	beq.n	8013282 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013246:	2b20      	cmp	r3, #32
 8013248:	d1fa      	bne.n	8013240 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801324a:	6823      	ldr	r3, [r4, #0]
 801324c:	4620      	mov	r0, r4
 801324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013250:	4798      	blx	r3
 8013252:	e013      	b.n	801327c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013258:	d0f7      	beq.n	801324a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801325a:	d804      	bhi.n	8013266 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801325c:	2b80      	cmp	r3, #128	; 0x80
 801325e:	d0f4      	beq.n	801324a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013264:	e7f0      	b.n	8013248 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801326a:	d0ee      	beq.n	801324a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801326c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013270:	e7e5      	b.n	801323e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013272:	6823      	ldr	r3, [r4, #0]
 8013274:	7f01      	ldrb	r1, [r0, #28]
 8013276:	4620      	mov	r0, r4
 8013278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801327a:	4798      	blx	r3
 801327c:	6823      	ldr	r3, [r4, #0]
 801327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013280:	e006      	b.n	8013290 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	7f01      	ldrb	r1, [r0, #28]
 8013286:	4620      	mov	r0, r4
 8013288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801328a:	4798      	blx	r3
 801328c:	6823      	ldr	r3, [r4, #0]
 801328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013290:	4629      	mov	r1, r5
 8013292:	4620      	mov	r0, r4
 8013294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013298:	4718      	bx	r3
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	4620      	mov	r0, r4
 801329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132a0:	4798      	blx	r3
 80132a2:	e7f3      	b.n	801328c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080132a4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80132a4:	4770      	bx	lr

080132a6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80132a6:	4770      	bx	lr

080132a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80132a8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80132ac:	b510      	push	{r4, lr}
 80132ae:	1ad2      	subs	r2, r2, r3
 80132b0:	2a00      	cmp	r2, #0
 80132b2:	bfdc      	itt	le
 80132b4:	6884      	ldrle	r4, [r0, #8]
 80132b6:	1912      	addle	r2, r2, r4
 80132b8:	2a01      	cmp	r2, #1
 80132ba:	dd16      	ble.n	80132ea <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80132bc:	6842      	ldr	r2, [r0, #4]
 80132be:	2424      	movs	r4, #36	; 0x24
 80132c0:	fb04 2303 	mla	r3, r4, r3, r2
 80132c4:	f101 0220 	add.w	r2, r1, #32
 80132c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80132cc:	4291      	cmp	r1, r2
 80132ce:	f843 4b04 	str.w	r4, [r3], #4
 80132d2:	d1f9      	bne.n	80132c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80132d4:	780a      	ldrb	r2, [r1, #0]
 80132d6:	701a      	strb	r2, [r3, #0]
 80132d8:	68c3      	ldr	r3, [r0, #12]
 80132da:	6882      	ldr	r2, [r0, #8]
 80132dc:	f3bf 8f5b 	dmb	ish
 80132e0:	3301      	adds	r3, #1
 80132e2:	429a      	cmp	r2, r3
 80132e4:	bfd8      	it	le
 80132e6:	1a9b      	suble	r3, r3, r2
 80132e8:	60c3      	str	r3, [r0, #12]
 80132ea:	bd10      	pop	{r4, pc}

080132ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80132ec:	6903      	ldr	r3, [r0, #16]
 80132ee:	6882      	ldr	r2, [r0, #8]
 80132f0:	f3bf 8f5b 	dmb	ish
 80132f4:	3301      	adds	r3, #1
 80132f6:	429a      	cmp	r2, r3
 80132f8:	bfd8      	it	le
 80132fa:	1a9b      	suble	r3, r3, r2
 80132fc:	6103      	str	r3, [r0, #16]
 80132fe:	4770      	bx	lr

08013300 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013300:	b570      	push	{r4, r5, r6, lr}
 8013302:	4604      	mov	r4, r0
 8013304:	460e      	mov	r6, r1
 8013306:	6860      	ldr	r0, [r4, #4]
 8013308:	6803      	ldr	r3, [r0, #0]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	4798      	blx	r3
 801330e:	2800      	cmp	r0, #0
 8013310:	d1f9      	bne.n	8013306 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013312:	4d0d      	ldr	r5, [pc, #52]	; (8013348 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013314:	6828      	ldr	r0, [r5, #0]
 8013316:	6803      	ldr	r3, [r0, #0]
 8013318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801331a:	4798      	blx	r3
 801331c:	f7fd f8f6 	bl	801050c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013320:	6828      	ldr	r0, [r5, #0]
 8013322:	2101      	movs	r1, #1
 8013324:	f7ff ff2a 	bl	801317c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013328:	6860      	ldr	r0, [r4, #4]
 801332a:	4631      	mov	r1, r6
 801332c:	6803      	ldr	r3, [r0, #0]
 801332e:	689b      	ldr	r3, [r3, #8]
 8013330:	4798      	blx	r3
 8013332:	6823      	ldr	r3, [r4, #0]
 8013334:	4620      	mov	r0, r4
 8013336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013338:	4798      	blx	r3
 801333a:	6828      	ldr	r0, [r5, #0]
 801333c:	6803      	ldr	r3, [r0, #0]
 801333e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013344:	4718      	bx	r3
 8013346:	bf00      	nop
 8013348:	20011b3c 	.word	0x20011b3c

0801334c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801334c:	b508      	push	{r3, lr}
 801334e:	f7fd f8c3 	bl	80104d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013356:	f7fd b8cd 	b.w	80104f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801335a <_ZN8touchgfx13DMA_Interface5startEv>:
 801335a:	b510      	push	{r4, lr}
 801335c:	4604      	mov	r4, r0
 801335e:	6840      	ldr	r0, [r0, #4]
 8013360:	6803      	ldr	r3, [r0, #0]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	4798      	blx	r3
 8013366:	b948      	cbnz	r0, 801337c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013368:	7a63      	ldrb	r3, [r4, #9]
 801336a:	b13b      	cbz	r3, 801337c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801336c:	7a23      	ldrb	r3, [r4, #8]
 801336e:	b92b      	cbnz	r3, 801337c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013370:	6823      	ldr	r3, [r4, #0]
 8013372:	4620      	mov	r0, r4
 8013374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801337a:	4718      	bx	r3
 801337c:	bd10      	pop	{r4, pc}

0801337e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801337e:	b570      	push	{r4, r5, r6, lr}
 8013380:	4604      	mov	r4, r0
 8013382:	6840      	ldr	r0, [r0, #4]
 8013384:	6803      	ldr	r3, [r0, #0]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4798      	blx	r3
 801338a:	4605      	mov	r5, r0
 801338c:	b930      	cbnz	r0, 801339c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801338e:	7a23      	ldrb	r3, [r4, #8]
 8013390:	b123      	cbz	r3, 801339c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013392:	6860      	ldr	r0, [r4, #4]
 8013394:	6803      	ldr	r3, [r0, #0]
 8013396:	695b      	ldr	r3, [r3, #20]
 8013398:	4798      	blx	r3
 801339a:	7225      	strb	r5, [r4, #8]
 801339c:	6860      	ldr	r0, [r4, #4]
 801339e:	6803      	ldr	r3, [r0, #0]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	4798      	blx	r3
 80133a4:	b928      	cbnz	r0, 80133b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80133a6:	6823      	ldr	r3, [r4, #0]
 80133a8:	4620      	mov	r0, r4
 80133aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133b0:	4718      	bx	r3
 80133b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133b6:	f7fd b8b5 	b.w	8010524 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080133bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80133bc:	b510      	push	{r4, lr}
 80133be:	6082      	str	r2, [r0, #8]
 80133c0:	2200      	movs	r2, #0
 80133c2:	4c03      	ldr	r4, [pc, #12]	; (80133d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80133c4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80133c8:	e9c0 4100 	strd	r4, r1, [r0]
 80133cc:	bd10      	pop	{r4, pc}
 80133ce:	bf00      	nop
 80133d0:	08023dc0 	.word	0x08023dc0

080133d4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80133d4:	6840      	ldr	r0, [r0, #4]
 80133d6:	6803      	ldr	r3, [r0, #0]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4718      	bx	r3

080133dc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80133dc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80133e0:	4770      	bx	lr

080133e2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80133e2:	b510      	push	{r4, lr}
 80133e4:	4604      	mov	r4, r0
 80133e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80133e8:	b150      	cbz	r0, 8013400 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80133ea:	6803      	ldr	r3, [r0, #0]
 80133ec:	68db      	ldr	r3, [r3, #12]
 80133ee:	4798      	blx	r3
 80133f0:	b130      	cbz	r0, 8013400 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80133f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80133f4:	4621      	mov	r1, r4
 80133f6:	6803      	ldr	r3, [r0, #0]
 80133f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133fc:	689b      	ldr	r3, [r3, #8]
 80133fe:	4718      	bx	r3
 8013400:	bd10      	pop	{r4, pc}

08013402 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8013402:	790b      	ldrb	r3, [r1, #4]
 8013404:	2b00      	cmp	r3, #0
 8013406:	bf0c      	ite	eq
 8013408:	2301      	moveq	r3, #1
 801340a:	2300      	movne	r3, #0
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	4604      	mov	r4, r0
 8013410:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013414:	460e      	mov	r6, r1
 8013416:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801341a:	d109      	bne.n	8013430 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801341c:	b14d      	cbz	r5, 8013432 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801341e:	7933      	ldrb	r3, [r6, #4]
 8013420:	2b01      	cmp	r3, #1
 8013422:	d10c      	bne.n	801343e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013424:	6823      	ldr	r3, [r4, #0]
 8013426:	4620      	mov	r0, r4
 8013428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801342a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801342e:	4718      	bx	r3
 8013430:	b12d      	cbz	r5, 801343e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013432:	6823      	ldr	r3, [r4, #0]
 8013434:	4620      	mov	r0, r4
 8013436:	695b      	ldr	r3, [r3, #20]
 8013438:	4798      	blx	r3
 801343a:	2d00      	cmp	r5, #0
 801343c:	d1ef      	bne.n	801341e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801343e:	bd70      	pop	{r4, r5, r6, pc}

08013440 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8013440:	b508      	push	{r3, lr}
 8013442:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8013446:	b10b      	cbz	r3, 801344c <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8013448:	f7f8 fb6c 	bl	800bb24 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801344c:	bd08      	pop	{r3, pc}

0801344e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801344e:	6803      	ldr	r3, [r0, #0]
 8013450:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8013454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013456:	4718      	bx	r3

08013458 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8013458:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801345c:	2bff      	cmp	r3, #255	; 0xff
 801345e:	b510      	push	{r4, lr}
 8013460:	d104      	bne.n	801346c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8013462:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8013464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013468:	429a      	cmp	r2, r3
 801346a:	d105      	bne.n	8013478 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801346c:	2300      	movs	r3, #0
 801346e:	8003      	strh	r3, [r0, #0]
 8013470:	8043      	strh	r3, [r0, #2]
 8013472:	8083      	strh	r3, [r0, #4]
 8013474:	80c3      	strh	r3, [r0, #6]
 8013476:	bd10      	pop	{r4, pc}
 8013478:	2300      	movs	r3, #0
 801347a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801347e:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8013482:	8003      	strh	r3, [r0, #0]
 8013484:	8043      	strh	r3, [r0, #2]
 8013486:	8084      	strh	r4, [r0, #4]
 8013488:	80c2      	strh	r2, [r0, #6]
 801348a:	e7f4      	b.n	8013476 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801348c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801348c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013490:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8013494:	b087      	sub	sp, #28
 8013496:	4604      	mov	r4, r0
 8013498:	4689      	mov	r9, r1
 801349a:	b363      	cbz	r3, 80134f6 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801349c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801349e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d027      	beq.n	80134f6 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80134a6:	ad06      	add	r5, sp, #24
 80134a8:	2700      	movs	r7, #0
 80134aa:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 80134ae:	4628      	mov	r0, r5
 80134b0:	f005 fc2a 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80134b4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80134b8:	a904      	add	r1, sp, #16
 80134ba:	f8ad 0014 	strh.w	r0, [sp, #20]
 80134be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80134c2:	4620      	mov	r0, r4
 80134c4:	6823      	ldr	r3, [r4, #0]
 80134c6:	9704      	str	r7, [sp, #16]
 80134c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ca:	4798      	blx	r3
 80134cc:	f7f8 fd5a 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 80134d0:	6803      	ldr	r3, [r0, #0]
 80134d2:	4606      	mov	r6, r0
 80134d4:	4628      	mov	r0, r5
 80134d6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80134da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80134dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80134e0:	f005 fcc6 	bl	8018e70 <_ZNK8touchgfx6Bitmap7getDataEv>
 80134e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80134e8:	4601      	mov	r1, r0
 80134ea:	9701      	str	r7, [sp, #4]
 80134ec:	aa04      	add	r2, sp, #16
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	4630      	mov	r0, r6
 80134f2:	464b      	mov	r3, r9
 80134f4:	47c0      	blx	r8
 80134f6:	b007      	add	sp, #28
 80134f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080134fc <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 80134fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80134fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013502:	460d      	mov	r5, r1
 8013504:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8013508:	2100      	movs	r1, #0
 801350a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801350e:	4604      	mov	r4, r0
 8013510:	6803      	ldr	r3, [r0, #0]
 8013512:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013518:	9100      	str	r1, [sp, #0]
 801351a:	4669      	mov	r1, sp
 801351c:	4798      	blx	r3
 801351e:	4621      	mov	r1, r4
 8013520:	a802      	add	r0, sp, #8
 8013522:	f003 fbc5 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013526:	f7f8 fd2d 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 801352a:	6803      	ldr	r3, [r0, #0]
 801352c:	aa02      	add	r2, sp, #8
 801352e:	4669      	mov	r1, sp
 8013530:	695e      	ldr	r6, [r3, #20]
 8013532:	462b      	mov	r3, r5
 8013534:	47b0      	blx	r6
 8013536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801353a:	2800      	cmp	r0, #0
 801353c:	bf08      	it	eq
 801353e:	461d      	moveq	r5, r3
 8013540:	84e5      	strh	r5, [r4, #38]	; 0x26
 8013542:	b004      	add	sp, #16
 8013544:	bd70      	pop	{r4, r5, r6, pc}
	...

08013548 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8013548:	2200      	movs	r2, #0
 801354a:	8082      	strh	r2, [r0, #4]
 801354c:	80c2      	strh	r2, [r0, #6]
 801354e:	8102      	strh	r2, [r0, #8]
 8013550:	8142      	strh	r2, [r0, #10]
 8013552:	8182      	strh	r2, [r0, #12]
 8013554:	81c2      	strh	r2, [r0, #14]
 8013556:	8202      	strh	r2, [r0, #16]
 8013558:	8242      	strh	r2, [r0, #18]
 801355a:	61c2      	str	r2, [r0, #28]
 801355c:	8402      	strh	r2, [r0, #32]
 801355e:	8442      	strh	r2, [r0, #34]	; 0x22
 8013560:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8013564:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013568:	2201      	movs	r2, #1
 801356a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801356e:	4a04      	ldr	r2, [pc, #16]	; (8013580 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8013570:	6002      	str	r2, [r0, #0]
 8013572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013576:	84c2      	strh	r2, [r0, #38]	; 0x26
 8013578:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	08023e54 	.word	0x08023e54

08013584 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013584:	2000      	movs	r0, #0
 8013586:	4770      	bx	lr

08013588 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8013588:	4b07      	ldr	r3, [pc, #28]	; (80135a8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801358a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801358c:	881b      	ldrh	r3, [r3, #0]
 801358e:	4293      	cmp	r3, r2
 8013590:	bf81      	itttt	hi
 8013592:	4b06      	ldrhi	r3, [pc, #24]	; (80135ac <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013594:	681b      	ldrhi	r3, [r3, #0]
 8013596:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801359a:	7858      	ldrbhi	r0, [r3, #1]
 801359c:	bf8c      	ite	hi
 801359e:	f000 0003 	andhi.w	r0, r0, #3
 80135a2:	2000      	movls	r0, #0
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	20011b90 	.word	0x20011b90
 80135ac:	20011b8c 	.word	0x20011b8c

080135b0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80135b0:	4b11      	ldr	r3, [pc, #68]	; (80135f8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80135b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80135b8:	4604      	mov	r4, r0
 80135ba:	881b      	ldrh	r3, [r3, #0]
 80135bc:	428b      	cmp	r3, r1
 80135be:	d918      	bls.n	80135f2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80135c0:	6803      	ldr	r3, [r0, #0]
 80135c2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80135c4:	4b0d      	ldr	r3, [pc, #52]	; (80135fc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80135c6:	6818      	ldr	r0, [r3, #0]
 80135c8:	f7fc f8f6 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 80135cc:	6823      	ldr	r3, [r4, #0]
 80135ce:	4606      	mov	r6, r0
 80135d0:	4620      	mov	r0, r4
 80135d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135d4:	4798      	blx	r3
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	4607      	mov	r7, r0
 80135da:	4620      	mov	r0, r4
 80135dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135e0:	4798      	blx	r3
 80135e2:	463a      	mov	r2, r7
 80135e4:	4603      	mov	r3, r0
 80135e6:	4631      	mov	r1, r6
 80135e8:	4620      	mov	r0, r4
 80135ea:	46ac      	mov	ip, r5
 80135ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135f0:	4760      	bx	ip
 80135f2:	2000      	movs	r0, #0
 80135f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135f8:	20011b90 	.word	0x20011b90
 80135fc:	20011b98 	.word	0x20011b98

08013600 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013600:	4b18      	ldr	r3, [pc, #96]	; (8013664 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013602:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013606:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013608:	4604      	mov	r4, r0
 801360a:	881b      	ldrh	r3, [r3, #0]
 801360c:	428b      	cmp	r3, r1
 801360e:	d926      	bls.n	801365e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013610:	4b15      	ldr	r3, [pc, #84]	; (8013668 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013618:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801361c:	4b13      	ldr	r3, [pc, #76]	; (801366c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801361e:	7855      	ldrb	r5, [r2, #1]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8013626:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801362a:	6833      	ldr	r3, [r6, #0]
 801362c:	69df      	ldr	r7, [r3, #28]
 801362e:	4b10      	ldr	r3, [pc, #64]	; (8013670 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013630:	6818      	ldr	r0, [r3, #0]
 8013632:	f7fc f8c1 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 8013636:	6823      	ldr	r3, [r4, #0]
 8013638:	4680      	mov	r8, r0
 801363a:	4620      	mov	r0, r4
 801363c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801363e:	4798      	blx	r3
 8013640:	6823      	ldr	r3, [r4, #0]
 8013642:	4681      	mov	r9, r0
 8013644:	4620      	mov	r0, r4
 8013646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801364a:	4798      	blx	r3
 801364c:	464b      	mov	r3, r9
 801364e:	9000      	str	r0, [sp, #0]
 8013650:	4642      	mov	r2, r8
 8013652:	4629      	mov	r1, r5
 8013654:	4630      	mov	r0, r6
 8013656:	47b8      	blx	r7
 8013658:	b003      	add	sp, #12
 801365a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801365e:	2000      	movs	r0, #0
 8013660:	e7fa      	b.n	8013658 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8013662:	bf00      	nop
 8013664:	20011b90 	.word	0x20011b90
 8013668:	20011b8c 	.word	0x20011b8c
 801366c:	20011b94 	.word	0x20011b94
 8013670:	20011b98 	.word	0x20011b98

08013674 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8013674:	b40e      	push	{r1, r2, r3}
 8013676:	4b30      	ldr	r3, [pc, #192]	; (8013738 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801367c:	881a      	ldrh	r2, [r3, #0]
 801367e:	b09d      	sub	sp, #116	; 0x74
 8013680:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8013682:	4604      	mov	r4, r0
 8013684:	429a      	cmp	r2, r3
 8013686:	d954      	bls.n	8013732 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013688:	aa26      	add	r2, sp, #152	; 0x98
 801368a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801373c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801368e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013740 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013692:	9202      	str	r2, [sp, #8]
 8013694:	f8d9 2000 	ldr.w	r2, [r9]
 8013698:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801369c:	f8d8 3000 	ldr.w	r3, [r8]
 80136a0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80136a4:	682b      	ldr	r3, [r5, #0]
 80136a6:	4628      	mov	r0, r5
 80136a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136aa:	4798      	blx	r3
 80136ac:	4606      	mov	r6, r0
 80136ae:	b207      	sxth	r7, r0
 80136b0:	a803      	add	r0, sp, #12
 80136b2:	f003 fee6 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 80136b6:	682b      	ldr	r3, [r5, #0]
 80136b8:	4628      	mov	r0, r5
 80136ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136bc:	4798      	blx	r3
 80136be:	682b      	ldr	r3, [r5, #0]
 80136c0:	4682      	mov	sl, r0
 80136c2:	4628      	mov	r0, r5
 80136c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136c6:	4798      	blx	r3
 80136c8:	4653      	mov	r3, sl
 80136ca:	9000      	str	r0, [sp, #0]
 80136cc:	a803      	add	r0, sp, #12
 80136ce:	9a02      	ldr	r2, [sp, #8]
 80136d0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80136d2:	f003 ff31 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80136d6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80136d8:	f8d9 3000 	ldr.w	r3, [r9]
 80136dc:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80136e0:	8925      	ldrh	r5, [r4, #8]
 80136e2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80136e6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80136ea:	eba5 050c 	sub.w	r5, r5, ip
 80136ee:	784a      	ldrb	r2, [r1, #1]
 80136f0:	f8d8 3000 	ldr.w	r3, [r8]
 80136f4:	b22d      	sxth	r5, r5
 80136f6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80136fa:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80136fe:	9500      	str	r5, [sp, #0]
 8013700:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013704:	a803      	add	r0, sp, #12
 8013706:	f001 fd63 	bl	80151d0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801370a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801370e:	b203      	sxth	r3, r0
 8013710:	18b9      	adds	r1, r7, r2
 8013712:	2900      	cmp	r1, #0
 8013714:	dd0b      	ble.n	801372e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8013716:	3b01      	subs	r3, #1
 8013718:	fb13 f302 	smulbb	r3, r3, r2
 801371c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013720:	b21f      	sxth	r7, r3
 8013722:	4638      	mov	r0, r7
 8013724:	b01d      	add	sp, #116	; 0x74
 8013726:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801372a:	b003      	add	sp, #12
 801372c:	4770      	bx	lr
 801372e:	2b00      	cmp	r3, #0
 8013730:	dcf7      	bgt.n	8013722 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013732:	2700      	movs	r7, #0
 8013734:	e7f5      	b.n	8013722 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013736:	bf00      	nop
 8013738:	20011b90 	.word	0x20011b90
 801373c:	20011b8c 	.word	0x20011b8c
 8013740:	20011b94 	.word	0x20011b94

08013744 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8013744:	4bbd      	ldr	r3, [pc, #756]	; (8013a3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8013746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801374a:	460c      	mov	r4, r1
 801374c:	881b      	ldrh	r3, [r3, #0]
 801374e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8013750:	b0a9      	sub	sp, #164	; 0xa4
 8013752:	4680      	mov	r8, r0
 8013754:	428b      	cmp	r3, r1
 8013756:	d809      	bhi.n	801376c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8013758:	2300      	movs	r3, #0
 801375a:	f04f 32ff 	mov.w	r2, #4294967295
 801375e:	6083      	str	r3, [r0, #8]
 8013760:	e9c0 3200 	strd	r3, r2, [r0]
 8013764:	4640      	mov	r0, r8
 8013766:	b029      	add	sp, #164	; 0xa4
 8013768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801376c:	4eb4      	ldr	r6, [pc, #720]	; (8013a40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801376e:	6833      	ldr	r3, [r6, #0]
 8013770:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8013774:	4bb3      	ldr	r3, [pc, #716]	; (8013a44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801377c:	4bb2      	ldr	r3, [pc, #712]	; (8013a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801377e:	6818      	ldr	r0, [r3, #0]
 8013780:	f7fc f81a 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 8013784:	682b      	ldr	r3, [r5, #0]
 8013786:	4681      	mov	r9, r0
 8013788:	4628      	mov	r0, r5
 801378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801378c:	4798      	blx	r3
 801378e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8013790:	b203      	sxth	r3, r0
 8013792:	4682      	mov	sl, r0
 8013794:	4407      	add	r7, r0
 8013796:	a80f      	add	r0, sp, #60	; 0x3c
 8013798:	9304      	str	r3, [sp, #16]
 801379a:	b2bb      	uxth	r3, r7
 801379c:	9303      	str	r3, [sp, #12]
 801379e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f040 80a5 	bne.w	80138f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80137a8:	f003 fe6b 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	4628      	mov	r0, r5
 80137b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137b2:	4798      	blx	r3
 80137b4:	682b      	ldr	r3, [r5, #0]
 80137b6:	4606      	mov	r6, r0
 80137b8:	4628      	mov	r0, r5
 80137ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137bc:	4798      	blx	r3
 80137be:	6823      	ldr	r3, [r4, #0]
 80137c0:	4607      	mov	r7, r0
 80137c2:	4620      	mov	r0, r4
 80137c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137c6:	4798      	blx	r3
 80137c8:	6823      	ldr	r3, [r4, #0]
 80137ca:	4683      	mov	fp, r0
 80137cc:	4620      	mov	r0, r4
 80137ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137d2:	4798      	blx	r3
 80137d4:	463b      	mov	r3, r7
 80137d6:	4649      	mov	r1, r9
 80137d8:	4632      	mov	r2, r6
 80137da:	2600      	movs	r6, #0
 80137dc:	e9cd b000 	strd	fp, r0, [sp]
 80137e0:	a80f      	add	r0, sp, #60	; 0x3c
 80137e2:	4637      	mov	r7, r6
 80137e4:	f003 febd 	bl	8017562 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80137e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80137ec:	f8df b250 	ldr.w	fp, [pc, #592]	; 8013a40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80137f0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80137f4:	bf0c      	ite	eq
 80137f6:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80137fa:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80137fe:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013800:	4629      	mov	r1, r5
 8013802:	f8db 3000 	ldr.w	r3, [fp]
 8013806:	a80f      	add	r0, sp, #60	; 0x3c
 8013808:	3701      	adds	r7, #1
 801380a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801380e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013812:	b2bf      	uxth	r7, r7
 8013814:	785b      	ldrb	r3, [r3, #1]
 8013816:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801381a:	f001 f9f4 	bl	8014c06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801381e:	9b03      	ldr	r3, [sp, #12]
 8013820:	4286      	cmp	r6, r0
 8013822:	eba9 0903 	sub.w	r9, r9, r3
 8013826:	bfb8      	it	lt
 8013828:	4606      	movlt	r6, r0
 801382a:	a80f      	add	r0, sp, #60	; 0x3c
 801382c:	fa0f f989 	sxth.w	r9, r9
 8013830:	b236      	sxth	r6, r6
 8013832:	f003 fe4d 	bl	80174d0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8013836:	b918      	cbnz	r0, 8013840 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013838:	7a2b      	ldrb	r3, [r5, #8]
 801383a:	444b      	add	r3, r9
 801383c:	2b00      	cmp	r3, #0
 801383e:	dcde      	bgt.n	80137fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8013840:	9b03      	ldr	r3, [sp, #12]
 8013842:	4620      	mov	r0, r4
 8013844:	9a04      	ldr	r2, [sp, #16]
 8013846:	fb13 f707 	smulbb	r7, r3, r7
 801384a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801384c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8013850:	1aff      	subs	r7, r7, r3
 8013852:	b2bf      	uxth	r7, r7
 8013854:	b23b      	sxth	r3, r7
 8013856:	429a      	cmp	r2, r3
 8013858:	bfa8      	it	ge
 801385a:	4657      	movge	r7, sl
 801385c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013860:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013864:	6823      	ldr	r3, [r4, #0]
 8013866:	444f      	add	r7, r9
 8013868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801386a:	bf08      	it	eq
 801386c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013870:	fa1f f987 	uxth.w	r9, r7
 8013874:	bf18      	it	ne
 8013876:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801387a:	4798      	blx	r3
 801387c:	2801      	cmp	r0, #1
 801387e:	fa0f f789 	sxth.w	r7, r9
 8013882:	b2b3      	uxth	r3, r6
 8013884:	f000 80e2 	beq.w	8013a4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8013888:	2802      	cmp	r0, #2
 801388a:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 801388e:	f000 80e3 	beq.w	8013a58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8013892:	7aea      	ldrb	r2, [r5, #11]
 8013894:	b236      	sxth	r6, r6
 8013896:	7b2d      	ldrb	r5, [r5, #12]
 8013898:	1ab6      	subs	r6, r6, r2
 801389a:	442a      	add	r2, r5
 801389c:	fa1f fa86 	uxth.w	sl, r6
 80138a0:	4413      	add	r3, r2
 80138a2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80138a6:	fa0f fb8a 	sxth.w	fp, sl
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	2a02      	cmp	r2, #2
 80138ae:	b21e      	sxth	r6, r3
 80138b0:	f000 80d6 	beq.w	8013a60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80138b4:	2a03      	cmp	r2, #3
 80138b6:	f000 80de 	beq.w	8013a76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80138ba:	2a01      	cmp	r2, #1
 80138bc:	f040 80e6 	bne.w	8013a8c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80138c0:	8925      	ldrh	r5, [r4, #8]
 80138c2:	4633      	mov	r3, r6
 80138c4:	463e      	mov	r6, r7
 80138c6:	eba5 0909 	sub.w	r9, r5, r9
 80138ca:	461f      	mov	r7, r3
 80138cc:	465d      	mov	r5, fp
 80138ce:	fa0f fb89 	sxth.w	fp, r9
 80138d2:	4b5d      	ldr	r3, [pc, #372]	; (8013a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80138d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80138d6:	6818      	ldr	r0, [r3, #0]
 80138d8:	f7fb ff6e 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 80138dc:	f8a8 b000 	strh.w	fp, [r8]
 80138e0:	f8a8 5002 	strh.w	r5, [r8, #2]
 80138e4:	f8a8 6004 	strh.w	r6, [r8, #4]
 80138e8:	f8a8 7006 	strh.w	r7, [r8, #6]
 80138ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80138f0:	e738      	b.n	8013764 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80138f2:	f003 fdc6 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 80138f6:	682b      	ldr	r3, [r5, #0]
 80138f8:	4628      	mov	r0, r5
 80138fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138fc:	4798      	blx	r3
 80138fe:	682b      	ldr	r3, [r5, #0]
 8013900:	4607      	mov	r7, r0
 8013902:	4628      	mov	r0, r5
 8013904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013906:	4798      	blx	r3
 8013908:	6823      	ldr	r3, [r4, #0]
 801390a:	4683      	mov	fp, r0
 801390c:	4620      	mov	r0, r4
 801390e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013910:	4798      	blx	r3
 8013912:	6822      	ldr	r2, [r4, #0]
 8013914:	9005      	str	r0, [sp, #20]
 8013916:	4620      	mov	r0, r4
 8013918:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801391c:	4790      	blx	r2
 801391e:	9b05      	ldr	r3, [sp, #20]
 8013920:	463a      	mov	r2, r7
 8013922:	4649      	mov	r1, r9
 8013924:	9001      	str	r0, [sp, #4]
 8013926:	a80f      	add	r0, sp, #60	; 0x3c
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	465b      	mov	r3, fp
 801392c:	f003 fe19 	bl	8017562 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013930:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013934:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8013938:	af0f      	add	r7, sp, #60	; 0x3c
 801393a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801393e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013942:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013944:	bf0a      	itet	eq
 8013946:	464a      	moveq	r2, r9
 8013948:	461a      	movne	r2, r3
 801394a:	4699      	moveq	r9, r3
 801394c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8013950:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8013954:	1ad2      	subs	r2, r2, r3
 8013956:	6833      	ldr	r3, [r6, #0]
 8013958:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 801395c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013960:	7859      	ldrb	r1, [r3, #1]
 8013962:	2300      	movs	r3, #0
 8013964:	9707      	str	r7, [sp, #28]
 8013966:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801396a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801396e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013972:	f88d 1020 	strb.w	r1, [sp, #32]
 8013976:	9509      	str	r5, [sp, #36]	; 0x24
 8013978:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801397c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8013980:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8013984:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013988:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801398c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013990:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013994:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013998:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801399c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80139a0:	b350      	cbz	r0, 80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80139a2:	682b      	ldr	r3, [r5, #0]
 80139a4:	4628      	mov	r0, r5
 80139a6:	695b      	ldr	r3, [r3, #20]
 80139a8:	4798      	blx	r3
 80139aa:	4607      	mov	r7, r0
 80139ac:	b320      	cbz	r0, 80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80139ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139b0:	4639      	mov	r1, r7
 80139b2:	6803      	ldr	r3, [r0, #0]
 80139b4:	68db      	ldr	r3, [r3, #12]
 80139b6:	4798      	blx	r3
 80139b8:	4606      	mov	r6, r0
 80139ba:	b1e8      	cbz	r0, 80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80139bc:	7b43      	ldrb	r3, [r0, #13]
 80139be:	7a82      	ldrb	r2, [r0, #10]
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139c6:	4313      	orrs	r3, r2
 80139c8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80139cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80139d0:	2b06      	cmp	r3, #6
 80139d2:	d111      	bne.n	80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80139d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139d6:	4632      	mov	r2, r6
 80139d8:	4639      	mov	r1, r7
 80139da:	6803      	ldr	r3, [r0, #0]
 80139dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139de:	4798      	blx	r3
 80139e0:	7b73      	ldrb	r3, [r6, #13]
 80139e2:	005b      	lsls	r3, r3, #1
 80139e4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80139e8:	7ab3      	ldrb	r3, [r6, #10]
 80139ea:	4313      	orrs	r3, r2
 80139ec:	4418      	add	r0, r3
 80139ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80139f2:	4418      	add	r0, r3
 80139f4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80139f8:	2600      	movs	r6, #0
 80139fa:	4637      	mov	r7, r6
 80139fc:	a806      	add	r0, sp, #24
 80139fe:	3701      	adds	r7, #1
 8013a00:	f001 fae3 	bl	8014fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013a04:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8013a08:	9b03      	ldr	r3, [sp, #12]
 8013a0a:	b2bf      	uxth	r7, r7
 8013a0c:	4286      	cmp	r6, r0
 8013a0e:	eba9 0903 	sub.w	r9, r9, r3
 8013a12:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013a16:	bfb8      	it	lt
 8013a18:	4606      	movlt	r6, r0
 8013a1a:	fa0f f989 	sxth.w	r9, r9
 8013a1e:	b236      	sxth	r6, r6
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	f43f af0d 	beq.w	8013840 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013a26:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	f47f af08 	bne.w	8013840 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013a30:	7a2b      	ldrb	r3, [r5, #8]
 8013a32:	444b      	add	r3, r9
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	dce1      	bgt.n	80139fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8013a38:	e702      	b.n	8013840 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013a3a:	bf00      	nop
 8013a3c:	20011b90 	.word	0x20011b90
 8013a40:	20011b8c 	.word	0x20011b8c
 8013a44:	20011b94 	.word	0x20011b94
 8013a48:	20011b98 	.word	0x20011b98
 8013a4c:	ebaa 0606 	sub.w	r6, sl, r6
 8013a50:	2002      	movs	r0, #2
 8013a52:	fb96 f6f0 	sdiv	r6, r6, r0
 8013a56:	e71c      	b.n	8013892 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013a58:	441e      	add	r6, r3
 8013a5a:	ebaa 0606 	sub.w	r6, sl, r6
 8013a5e:	e718      	b.n	8013892 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013a60:	8925      	ldrh	r5, [r4, #8]
 8013a62:	1aed      	subs	r5, r5, r3
 8013a64:	eba5 050a 	sub.w	r5, r5, sl
 8013a68:	fa0f fb85 	sxth.w	fp, r5
 8013a6c:	8965      	ldrh	r5, [r4, #10]
 8013a6e:	eba5 0509 	sub.w	r5, r5, r9
 8013a72:	b22d      	sxth	r5, r5
 8013a74:	e72d      	b.n	80138d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013a76:	8965      	ldrh	r5, [r4, #10]
 8013a78:	f04f 0b00 	mov.w	fp, #0
 8013a7c:	1aed      	subs	r5, r5, r3
 8013a7e:	4633      	mov	r3, r6
 8013a80:	463e      	mov	r6, r7
 8013a82:	eba5 050a 	sub.w	r5, r5, sl
 8013a86:	461f      	mov	r7, r3
 8013a88:	b22d      	sxth	r5, r5
 8013a8a:	e722      	b.n	80138d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013a8c:	2500      	movs	r5, #0
 8013a8e:	e720      	b.n	80138d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08013a90 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013a90:	b513      	push	{r0, r1, r4, lr}
 8013a92:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8013a96:	4604      	mov	r4, r0
 8013a98:	b1fb      	cbz	r3, 8013ada <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013a9a:	4b16      	ldr	r3, [pc, #88]	; (8013af4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013a9c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013a9e:	881b      	ldrh	r3, [r3, #0]
 8013aa0:	428b      	cmp	r3, r1
 8013aa2:	d91a      	bls.n	8013ada <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013aa4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	dd16      	ble.n	8013ada <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013aac:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	dd12      	ble.n	8013ada <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013ab4:	4b10      	ldr	r3, [pc, #64]	; (8013af8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013ab6:	6818      	ldr	r0, [r3, #0]
 8013ab8:	f7fb fe7e 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 8013abc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013ac0:	6822      	ldr	r2, [r4, #0]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	db06      	blt.n	8013ad4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013ac6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	db02      	blt.n	8013ad4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013ace:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013ad0:	4298      	cmp	r0, r3
 8013ad2:	d004      	beq.n	8013ade <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013ad4:	6953      	ldr	r3, [r2, #20]
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	4798      	blx	r3
 8013ada:	b002      	add	sp, #8
 8013adc:	bd10      	pop	{r4, pc}
 8013ade:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8013ae2:	466b      	mov	r3, sp
 8013ae4:	6912      	ldr	r2, [r2, #16]
 8013ae6:	c903      	ldmia	r1, {r0, r1}
 8013ae8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013aec:	4619      	mov	r1, r3
 8013aee:	4620      	mov	r0, r4
 8013af0:	4790      	blx	r2
 8013af2:	e7f2      	b.n	8013ada <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013af4:	20011b90 	.word	0x20011b90
 8013af8:	20011b98 	.word	0x20011b98

08013afc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013afc:	4b45      	ldr	r3, [pc, #276]	; (8013c14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b02:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013b04:	b08e      	sub	sp, #56	; 0x38
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	4604      	mov	r4, r0
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d97e      	bls.n	8013c0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013b0e:	6808      	ldr	r0, [r1, #0]
 8013b10:	ab05      	add	r3, sp, #20
 8013b12:	6849      	ldr	r1, [r1, #4]
 8013b14:	4d40      	ldr	r5, [pc, #256]	; (8013c18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8013b16:	c303      	stmia	r3!, {r0, r1}
 8013b18:	4611      	mov	r1, r2
 8013b1a:	6828      	ldr	r0, [r5, #0]
 8013b1c:	f7fb fe4c 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 8013b20:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	db11      	blt.n	8013b4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013b28:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	db0d      	blt.n	8013b4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013b30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013b32:	4298      	cmp	r0, r3
 8013b34:	d10a      	bne.n	8013b4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013b36:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8013b3a:	ab09      	add	r3, sp, #36	; 0x24
 8013b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b40:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b44:	4619      	mov	r1, r3
 8013b46:	a805      	add	r0, sp, #20
 8013b48:	f7fe f9ce 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8013b4c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	dd5b      	ble.n	8013c0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013b54:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	dd57      	ble.n	8013c0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013b5c:	4f2f      	ldr	r7, [pc, #188]	; (8013c1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013b5e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013b66:	4b2e      	ldr	r3, [pc, #184]	; (8013c20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013b6e:	2e00      	cmp	r6, #0
 8013b70:	d04c      	beq.n	8013c0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013b72:	6823      	ldr	r3, [r4, #0]
 8013b74:	4620      	mov	r0, r4
 8013b76:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8013b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b7c:	4798      	blx	r3
 8013b7e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8013b86:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013b8a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8013b8e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8013b92:	785b      	ldrb	r3, [r3, #1]
 8013b94:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8013b98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013b9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013b9e:	9609      	str	r6, [sp, #36]	; 0x24
 8013ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ba4:	4b1f      	ldr	r3, [pc, #124]	; (8013c24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013ba6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8013bb0:	910b      	str	r1, [sp, #44]	; 0x2c
 8013bb2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8013bb6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8013bba:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8013bbe:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8013bc2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013bc6:	b10a      	cbz	r2, 8013bcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013bc8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8013bca:	b906      	cbnz	r6, 8013bce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013bcc:	689e      	ldr	r6, [r3, #8]
 8013bce:	af07      	add	r7, sp, #28
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	4638      	mov	r0, r7
 8013bd4:	f003 f86c 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013bd8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013bda:	6828      	ldr	r0, [r5, #0]
 8013bdc:	f7fb fdec 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 8013be0:	6823      	ldr	r3, [r4, #0]
 8013be2:	4605      	mov	r5, r0
 8013be4:	4620      	mov	r0, r4
 8013be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013be8:	4798      	blx	r3
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	4680      	mov	r8, r0
 8013bee:	4620      	mov	r0, r4
 8013bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bf4:	4798      	blx	r3
 8013bf6:	ab09      	add	r3, sp, #36	; 0x24
 8013bf8:	9501      	str	r5, [sp, #4]
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	ab05      	add	r3, sp, #20
 8013bfe:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013c02:	4630      	mov	r0, r6
 8013c04:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013c08:	f7fb fd67 	bl	800f6da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013c0c:	b00e      	add	sp, #56	; 0x38
 8013c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c12:	bf00      	nop
 8013c14:	20011b90 	.word	0x20011b90
 8013c18:	20011b98 	.word	0x20011b98
 8013c1c:	20011b8c 	.word	0x20011b8c
 8013c20:	20011b94 	.word	0x20011b94
 8013c24:	20011b3c 	.word	0x20011b3c

08013c28 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013c28:	b538      	push	{r3, r4, r5, lr}
 8013c2a:	4b0e      	ldr	r3, [pc, #56]	; (8013c64 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013c2c:	4604      	mov	r4, r0
 8013c2e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013c30:	881b      	ldrh	r3, [r3, #0]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d214      	bcs.n	8013c60 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013c36:	6803      	ldr	r3, [r0, #0]
 8013c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c3a:	4798      	blx	r3
 8013c3c:	6823      	ldr	r3, [r4, #0]
 8013c3e:	4605      	mov	r5, r0
 8013c40:	4620      	mov	r0, r4
 8013c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c44:	4798      	blx	r3
 8013c46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013c4a:	b22d      	sxth	r5, r5
 8013c4c:	4601      	mov	r1, r0
 8013c4e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013c52:	bf06      	itte	eq
 8013c54:	4602      	moveq	r2, r0
 8013c56:	4629      	moveq	r1, r5
 8013c58:	462a      	movne	r2, r5
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f7f8 f834 	bl	800bcc8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013c60:	bd38      	pop	{r3, r4, r5, pc}
 8013c62:	bf00      	nop
 8013c64:	20011b90 	.word	0x20011b90

08013c68 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013c68:	b530      	push	{r4, r5, lr}
 8013c6a:	888b      	ldrh	r3, [r1, #4]
 8013c6c:	b085      	sub	sp, #20
 8013c6e:	4604      	mov	r4, r0
 8013c70:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013c72:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013c76:	b923      	cbnz	r3, 8013c82 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013c78:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013c7c:	b90b      	cbnz	r3, 8013c82 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013c7e:	f7ff ffd3 	bl	8013c28 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013c82:	6823      	ldr	r3, [r4, #0]
 8013c84:	466d      	mov	r5, sp
 8013c86:	4621      	mov	r1, r4
 8013c88:	343c      	adds	r4, #60	; 0x3c
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c90:	4798      	blx	r3
 8013c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013c9a:	b005      	add	sp, #20
 8013c9c:	bd30      	pop	{r4, r5, pc}

08013c9e <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	8083      	strh	r3, [r0, #4]
 8013ca2:	80c3      	strh	r3, [r0, #6]
 8013ca4:	8003      	strh	r3, [r0, #0]
 8013ca6:	8043      	strh	r3, [r0, #2]
 8013ca8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013cac:	2bff      	cmp	r3, #255	; 0xff
 8013cae:	bf01      	itttt	eq
 8013cb0:	890b      	ldrheq	r3, [r1, #8]
 8013cb2:	8083      	strheq	r3, [r0, #4]
 8013cb4:	894b      	ldrheq	r3, [r1, #10]
 8013cb6:	80c3      	strheq	r3, [r0, #6]
 8013cb8:	4770      	bx	lr
	...

08013cbc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	466b      	mov	r3, sp
 8013cc2:	6808      	ldr	r0, [r1, #0]
 8013cc4:	6849      	ldr	r1, [r1, #4]
 8013cc6:	c303      	stmia	r3!, {r0, r1}
 8013cc8:	6823      	ldr	r3, [r4, #0]
 8013cca:	4669      	mov	r1, sp
 8013ccc:	4620      	mov	r0, r4
 8013cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cd0:	4798      	blx	r3
 8013cd2:	4b08      	ldr	r3, [pc, #32]	; (8013cf4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013cda:	b10a      	cbz	r2, 8013ce0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013cdc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013cde:	b900      	cbnz	r0, 8013ce2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013ce0:	6898      	ldr	r0, [r3, #8]
 8013ce2:	6803      	ldr	r3, [r0, #0]
 8013ce4:	4669      	mov	r1, sp
 8013ce6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013ce8:	6a1d      	ldr	r5, [r3, #32]
 8013cea:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013cee:	47a8      	blx	r5
 8013cf0:	b003      	add	sp, #12
 8013cf2:	bd30      	pop	{r4, r5, pc}
 8013cf4:	20011b3c 	.word	0x20011b3c

08013cf8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013cf8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013cfc:	b12a      	cbz	r2, 8013d0a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013cfe:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013d02:	b112      	cbz	r2, 8013d0a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013d04:	6803      	ldr	r3, [r0, #0]
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	4718      	bx	r3
 8013d0a:	4770      	bx	lr

08013d0c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013d0c:	b570      	push	{r4, r5, r6, lr}
 8013d0e:	880b      	ldrh	r3, [r1, #0]
 8013d10:	4605      	mov	r5, r0
 8013d12:	4604      	mov	r4, r0
 8013d14:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013d16:	8813      	ldrh	r3, [r2, #0]
 8013d18:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	f004 fff3 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013d22:	4606      	mov	r6, r0
 8013d24:	4628      	mov	r0, r5
 8013d26:	f005 f823 	bl	8018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013d2a:	6823      	ldr	r3, [r4, #0]
 8013d2c:	4605      	mov	r5, r0
 8013d2e:	4631      	mov	r1, r6
 8013d30:	4620      	mov	r0, r4
 8013d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d34:	4798      	blx	r3
 8013d36:	6823      	ldr	r3, [r4, #0]
 8013d38:	4629      	mov	r1, r5
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d42:	4718      	bx	r3

08013d44 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8013d44:	b510      	push	{r4, lr}
 8013d46:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	2bff      	cmp	r3, #255	; 0xff
 8013d4e:	d006      	beq.n	8013d5e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013d50:	2300      	movs	r3, #0
 8013d52:	8003      	strh	r3, [r0, #0]
 8013d54:	8043      	strh	r3, [r0, #2]
 8013d56:	8083      	strh	r3, [r0, #4]
 8013d58:	80c3      	strh	r3, [r0, #6]
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	bd10      	pop	{r4, pc}
 8013d5e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8013d62:	b11b      	cbz	r3, 8013d6c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8013d64:	3130      	adds	r1, #48	; 0x30
 8013d66:	f005 f837 	bl	8018dd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013d6a:	e7f6      	b.n	8013d5a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013d6c:	312e      	adds	r1, #46	; 0x2e
 8013d6e:	e7fa      	b.n	8013d66 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08013d70 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8013d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013d78:	b08a      	sub	sp, #40	; 0x28
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	4688      	mov	r8, r1
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d066      	beq.n	8013e50 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8013d82:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013d84:	a805      	add	r0, sp, #20
 8013d86:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d8a:	f004 ffbd 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013d8e:	4607      	mov	r7, r0
 8013d90:	a805      	add	r0, sp, #20
 8013d92:	f004 ffed 	bl	8018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013d96:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013d9a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8013d9e:	2300      	movs	r3, #0
 8013da0:	4432      	add	r2, r6
 8013da2:	9306      	str	r3, [sp, #24]
 8013da4:	b292      	uxth	r2, r2
 8013da6:	fa0f fc82 	sxth.w	ip, r2
 8013daa:	459c      	cmp	ip, r3
 8013dac:	dd52      	ble.n	8013e54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013dae:	42b7      	cmp	r7, r6
 8013db0:	dd50      	ble.n	8013e54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013db2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013db6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013dba:	442b      	add	r3, r5
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	b219      	sxth	r1, r3
 8013dc0:	2900      	cmp	r1, #0
 8013dc2:	dd47      	ble.n	8013e54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013dc4:	42a8      	cmp	r0, r5
 8013dc6:	dd45      	ble.n	8013e54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013dc8:	4567      	cmp	r7, ip
 8013dca:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013dce:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8013dd2:	bfb8      	it	lt
 8013dd4:	b2ba      	uxthlt	r2, r7
 8013dd6:	4288      	cmp	r0, r1
 8013dd8:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013ddc:	bfb8      	it	lt
 8013dde:	b283      	uxthlt	r3, r0
 8013de0:	1b92      	subs	r2, r2, r6
 8013de2:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013de6:	1b5b      	subs	r3, r3, r5
 8013de8:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013dec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013df0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d026      	beq.n	8013e4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013dfc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	dd22      	ble.n	8013e4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013e04:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	dd1e      	ble.n	8013e4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	a908      	add	r1, sp, #32
 8013e10:	4620      	mov	r0, r4
 8013e12:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013e16:	6823      	ldr	r3, [r4, #0]
 8013e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e1a:	4798      	blx	r3
 8013e1c:	4b0f      	ldr	r3, [pc, #60]	; (8013e5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013e24:	b10a      	cbz	r2, 8013e2a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013e26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013e28:	b900      	cbnz	r0, 8013e2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013e2a:	6898      	ldr	r0, [r3, #8]
 8013e2c:	2501      	movs	r5, #1
 8013e2e:	6801      	ldr	r1, [r0, #0]
 8013e30:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013e34:	9502      	str	r5, [sp, #8]
 8013e36:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8013e3a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013e3e:	9401      	str	r4, [sp, #4]
 8013e40:	ac06      	add	r4, sp, #24
 8013e42:	9400      	str	r4, [sp, #0]
 8013e44:	688c      	ldr	r4, [r1, #8]
 8013e46:	a905      	add	r1, sp, #20
 8013e48:	47a0      	blx	r4
 8013e4a:	b00a      	add	sp, #40	; 0x28
 8013e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e50:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013e52:	e797      	b.n	8013d84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013e54:	2300      	movs	r3, #0
 8013e56:	9307      	str	r3, [sp, #28]
 8013e58:	e7ca      	b.n	8013df0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013e5a:	bf00      	nop
 8013e5c:	20011b3c 	.word	0x20011b3c

08013e60 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013e60:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8013e64:	b12a      	cbz	r2, 8013e72 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013e66:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013e6a:	b112      	cbz	r2, 8013e72 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013e6c:	6803      	ldr	r3, [r0, #0]
 8013e6e:	695b      	ldr	r3, [r3, #20]
 8013e70:	4718      	bx	r3
 8013e72:	4770      	bx	lr

08013e74 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8013e74:	4b30      	ldr	r3, [pc, #192]	; (8013f38 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8013e76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e7a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013e7c:	b08d      	sub	sp, #52	; 0x34
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	4604      	mov	r4, r0
 8013e82:	460f      	mov	r7, r1
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d954      	bls.n	8013f32 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013e88:	4b2c      	ldr	r3, [pc, #176]	; (8013f3c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8013e8a:	6819      	ldr	r1, [r3, #0]
 8013e8c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013e90:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013e94:	4a2a      	ldr	r2, [pc, #168]	; (8013f40 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8013e96:	6812      	ldr	r2, [r2, #0]
 8013e98:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013e9c:	2900      	cmp	r1, #0
 8013e9e:	d048      	beq.n	8013f32 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013ea0:	785a      	ldrb	r2, [r3, #1]
 8013ea2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8013ea6:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8013eaa:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013eae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013eb2:	4b24      	ldr	r3, [pc, #144]	; (8013f44 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013eb4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8013ebe:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8013ec2:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8013ec6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8013ec8:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8013ecc:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8013ed0:	9107      	str	r1, [sp, #28]
 8013ed2:	f88d 8020 	strb.w	r8, [sp, #32]
 8013ed6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8013eda:	9609      	str	r6, [sp, #36]	; 0x24
 8013edc:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8013ee0:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013ee4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8013ee8:	b10b      	cbz	r3, 8013eee <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013eea:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8013eec:	b905      	cbnz	r5, 8013ef0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8013eee:	6895      	ldr	r5, [r2, #8]
 8013ef0:	ae05      	add	r6, sp, #20
 8013ef2:	4621      	mov	r1, r4
 8013ef4:	4630      	mov	r0, r6
 8013ef6:	f002 fedb 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013efa:	4b13      	ldr	r3, [pc, #76]	; (8013f48 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013efc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013efe:	6818      	ldr	r0, [r3, #0]
 8013f00:	f7fb fc5a 	bl	800f7b8 <_ZNK8touchgfx5Texts7getTextEt>
 8013f04:	6823      	ldr	r3, [r4, #0]
 8013f06:	4680      	mov	r8, r0
 8013f08:	4620      	mov	r0, r4
 8013f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f0c:	4798      	blx	r3
 8013f0e:	6823      	ldr	r3, [r4, #0]
 8013f10:	4681      	mov	r9, r0
 8013f12:	4620      	mov	r0, r4
 8013f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f18:	4798      	blx	r3
 8013f1a:	ab07      	add	r3, sp, #28
 8013f1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013f20:	9300      	str	r3, [sp, #0]
 8013f22:	463b      	mov	r3, r7
 8013f24:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013f28:	4628      	mov	r0, r5
 8013f2a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013f2e:	f7fb fbd4 	bl	800f6da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013f32:	b00d      	add	sp, #52	; 0x34
 8013f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f38:	20011b90 	.word	0x20011b90
 8013f3c:	20011b8c 	.word	0x20011b8c
 8013f40:	20011b94 	.word	0x20011b94
 8013f44:	20011b3c 	.word	0x20011b3c
 8013f48:	20011b98 	.word	0x20011b98

08013f4c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8013f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f50:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013f52:	4604      	mov	r4, r0
 8013f54:	460e      	mov	r6, r1
 8013f56:	b08e      	sub	sp, #56	; 0x38
 8013f58:	b218      	sxth	r0, r3
 8013f5a:	8921      	ldrh	r1, [r4, #8]
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	8962      	ldrh	r2, [r4, #10]
 8013f60:	f8ad 0000 	strh.w	r0, [sp]
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	f8ad 0002 	strh.w	r0, [sp, #2]
 8013f6a:	1ac9      	subs	r1, r1, r3
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	b209      	sxth	r1, r1
 8013f70:	b21b      	sxth	r3, r3
 8013f72:	2900      	cmp	r1, #0
 8013f74:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013f78:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f7c:	dd5e      	ble.n	801403c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	dd5c      	ble.n	801403c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013f82:	6830      	ldr	r0, [r6, #0]
 8013f84:	ab02      	add	r3, sp, #8
 8013f86:	6871      	ldr	r1, [r6, #4]
 8013f88:	c303      	stmia	r3!, {r0, r1}
 8013f8a:	4669      	mov	r1, sp
 8013f8c:	a802      	add	r0, sp, #8
 8013f8e:	f7fd ffab 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8013f92:	4620      	mov	r0, r4
 8013f94:	a902      	add	r1, sp, #8
 8013f96:	f7ff fe91 	bl	8013cbc <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8013f9a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	d05f      	beq.n	8014060 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013fa0:	8963      	ldrh	r3, [r4, #10]
 8013fa2:	b202      	sxth	r2, r0
 8013fa4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013fa8:	2500      	movs	r5, #0
 8013faa:	1a1f      	subs	r7, r3, r0
 8013fac:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8013fb0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013fb4:	b21b      	sxth	r3, r3
 8013fb6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013fba:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8013fbe:	af04      	add	r7, sp, #16
 8013fc0:	1a09      	subs	r1, r1, r0
 8013fc2:	9506      	str	r5, [sp, #24]
 8013fc4:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013fc8:	f8ad 5020 	strh.w	r5, [sp, #32]
 8013fcc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8013fd0:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8013fd4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013fd8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013fdc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013fe0:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8013fe4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8013fe8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013fec:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013ff0:	ab06      	add	r3, sp, #24
 8013ff2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013ff6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ffa:	e887 0003 	stmia.w	r7, {r0, r1}
 8013ffe:	4631      	mov	r1, r6
 8014000:	4638      	mov	r0, r7
 8014002:	f7fd ff71 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8014006:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801400a:	2b00      	cmp	r3, #0
 801400c:	dd12      	ble.n	8014034 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801400e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014012:	2b00      	cmp	r3, #0
 8014014:	dd0e      	ble.n	8014034 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8014016:	6823      	ldr	r3, [r4, #0]
 8014018:	4639      	mov	r1, r7
 801401a:	4620      	mov	r0, r4
 801401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801401e:	4798      	blx	r3
 8014020:	f7f7 ffb0 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8014024:	6803      	ldr	r3, [r0, #0]
 8014026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014028:	4639      	mov	r1, r7
 801402a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801402e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014032:	47c0      	blx	r8
 8014034:	3501      	adds	r5, #1
 8014036:	2d04      	cmp	r5, #4
 8014038:	d1da      	bne.n	8013ff0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801403a:	e011      	b.n	8014060 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801403c:	6830      	ldr	r0, [r6, #0]
 801403e:	ab06      	add	r3, sp, #24
 8014040:	6871      	ldr	r1, [r6, #4]
 8014042:	c303      	stmia	r3!, {r0, r1}
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	a906      	add	r1, sp, #24
 8014048:	4620      	mov	r0, r4
 801404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801404c:	4798      	blx	r3
 801404e:	f7f7 ff99 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8014052:	6803      	ldr	r3, [r0, #0]
 8014054:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014056:	a906      	add	r1, sp, #24
 8014058:	6a1d      	ldr	r5, [r3, #32]
 801405a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801405e:	47a8      	blx	r5
 8014060:	b00e      	add	sp, #56	; 0x38
 8014062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014066 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014066:	b570      	push	{r4, r5, r6, lr}
 8014068:	880b      	ldrh	r3, [r1, #0]
 801406a:	460d      	mov	r5, r1
 801406c:	4604      	mov	r4, r0
 801406e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014070:	4608      	mov	r0, r1
 8014072:	f004 fe49 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014076:	4606      	mov	r6, r0
 8014078:	4628      	mov	r0, r5
 801407a:	f004 fe79 	bl	8018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801407e:	6823      	ldr	r3, [r4, #0]
 8014080:	4605      	mov	r5, r0
 8014082:	4631      	mov	r1, r6
 8014084:	4620      	mov	r0, r4
 8014086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014088:	4798      	blx	r3
 801408a:	6823      	ldr	r3, [r4, #0]
 801408c:	4629      	mov	r1, r5
 801408e:	4620      	mov	r0, r4
 8014090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014096:	4718      	bx	r3

08014098 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014098:	b510      	push	{r4, lr}
 801409a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801409e:	4604      	mov	r4, r0
 80140a0:	2bff      	cmp	r3, #255	; 0xff
 80140a2:	d006      	beq.n	80140b2 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80140a4:	2300      	movs	r3, #0
 80140a6:	8003      	strh	r3, [r0, #0]
 80140a8:	8043      	strh	r3, [r0, #2]
 80140aa:	8083      	strh	r3, [r0, #4]
 80140ac:	80c3      	strh	r3, [r0, #6]
 80140ae:	4620      	mov	r0, r4
 80140b0:	bd10      	pop	{r4, pc}
 80140b2:	3126      	adds	r1, #38	; 0x26
 80140b4:	f004 fe90 	bl	8018dd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80140b8:	e7f9      	b.n	80140ae <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080140ba <_ZNK8touchgfx5Image17invalidateContentEv>:
 80140ba:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80140be:	b12a      	cbz	r2, 80140cc <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80140c0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80140c4:	b112      	cbz	r2, 80140cc <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80140c6:	6803      	ldr	r3, [r0, #0]
 80140c8:	695b      	ldr	r3, [r3, #20]
 80140ca:	4718      	bx	r3
 80140cc:	4770      	bx	lr
	...

080140d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80140d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d4:	4604      	mov	r4, r0
 80140d6:	b088      	sub	sp, #32
 80140d8:	2500      	movs	r5, #0
 80140da:	460f      	mov	r7, r1
 80140dc:	f854 3b26 	ldr.w	r3, [r4], #38
 80140e0:	a904      	add	r1, sp, #16
 80140e2:	4606      	mov	r6, r0
 80140e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80140ea:	4798      	blx	r3
 80140ec:	4620      	mov	r0, r4
 80140ee:	f004 fe0b 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80140f2:	4680      	mov	r8, r0
 80140f4:	4620      	mov	r0, r4
 80140f6:	f004 fe3b 	bl	8018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80140fa:	9506      	str	r5, [sp, #24]
 80140fc:	ad06      	add	r5, sp, #24
 80140fe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014102:	4639      	mov	r1, r7
 8014104:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014108:	4628      	mov	r0, r5
 801410a:	f7fd feed 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 801410e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014112:	2b00      	cmp	r3, #0
 8014114:	dd19      	ble.n	801414a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014116:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801411a:	2b00      	cmp	r3, #0
 801411c:	dd15      	ble.n	801414a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801411e:	4b0c      	ldr	r3, [pc, #48]	; (8014150 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014126:	b10a      	cbz	r2, 801412c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8014128:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801412a:	b900      	cbnz	r0, 801412e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801412c:	6898      	ldr	r0, [r3, #8]
 801412e:	2701      	movs	r7, #1
 8014130:	6801      	ldr	r1, [r0, #0]
 8014132:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014136:	9702      	str	r7, [sp, #8]
 8014138:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801413c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014140:	e9cd 5600 	strd	r5, r6, [sp]
 8014144:	688d      	ldr	r5, [r1, #8]
 8014146:	4621      	mov	r1, r4
 8014148:	47a8      	blx	r5
 801414a:	b008      	add	sp, #32
 801414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014150:	20011b3c 	.word	0x20011b3c

08014154 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014154:	b510      	push	{r4, lr}
 8014156:	6803      	ldr	r3, [r0, #0]
 8014158:	460c      	mov	r4, r1
 801415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801415c:	4798      	blx	r3
 801415e:	1b03      	subs	r3, r0, r4
 8014160:	4258      	negs	r0, r3
 8014162:	4158      	adcs	r0, r3
 8014164:	bd10      	pop	{r4, pc}
	...

08014168 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014168:	4b01      	ldr	r3, [pc, #4]	; (8014170 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801416a:	6019      	str	r1, [r3, #0]
 801416c:	4770      	bx	lr
 801416e:	bf00      	nop
 8014170:	20011b44 	.word	0x20011b44

08014174 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014178:	4696      	mov	lr, r2
 801417a:	b097      	sub	sp, #92	; 0x5c
 801417c:	4605      	mov	r5, r0
 801417e:	4614      	mov	r4, r2
 8014180:	460e      	mov	r6, r1
 8014182:	461f      	mov	r7, r3
 8014184:	f10d 0c1c 	add.w	ip, sp, #28
 8014188:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801418c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8014190:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8014194:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801419c:	f8de 3000 	ldr.w	r3, [lr]
 80141a0:	f104 0e14 	add.w	lr, r4, #20
 80141a4:	f8cc 3000 	str.w	r3, [ip]
 80141a8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80141ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80141b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141b4:	f8de 3000 	ldr.w	r3, [lr]
 80141b8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80141bc:	f8cc 3000 	str.w	r3, [ip]
 80141c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80141c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80141c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141cc:	f8de 3000 	ldr.w	r3, [lr]
 80141d0:	4631      	mov	r1, r6
 80141d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80141d4:	4628      	mov	r0, r5
 80141d6:	f8cc 3000 	str.w	r3, [ip]
 80141da:	682b      	ldr	r3, [r5, #0]
 80141dc:	9201      	str	r2, [sp, #4]
 80141de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80141e4:	9200      	str	r2, [sp, #0]
 80141e6:	aa07      	add	r2, sp, #28
 80141e8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80141ec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80141f0:	463b      	mov	r3, r7
 80141f2:	47d8      	blx	fp
 80141f4:	46a6      	mov	lr, r4
 80141f6:	f10d 0c1c 	add.w	ip, sp, #28
 80141fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80141fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014202:	f8de 3000 	ldr.w	r3, [lr]
 8014206:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801420a:	343c      	adds	r4, #60	; 0x3c
 801420c:	f8cc 3000 	str.w	r3, [ip]
 8014210:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014214:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014218:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801421c:	f8de 3000 	ldr.w	r3, [lr]
 8014220:	f8cc 3000 	str.w	r3, [ip]
 8014224:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801422a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	4631      	mov	r1, r6
 8014232:	4628      	mov	r0, r5
 8014234:	f8cc 3000 	str.w	r3, [ip]
 8014238:	682b      	ldr	r3, [r5, #0]
 801423a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801423e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014240:	f8cd 8008 	str.w	r8, [sp, #8]
 8014244:	9201      	str	r2, [sp, #4]
 8014246:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014248:	9200      	str	r2, [sp, #0]
 801424a:	aa07      	add	r2, sp, #28
 801424c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801424e:	463b      	mov	r3, r7
 8014250:	47a0      	blx	r4
 8014252:	b017      	add	sp, #92	; 0x5c
 8014254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014258 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014258:	2000      	movs	r0, #0
 801425a:	4770      	bx	lr

0801425c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014260:	b08d      	sub	sp, #52	; 0x34
 8014262:	4688      	mov	r8, r1
 8014264:	f8d3 c000 	ldr.w	ip, [r3]
 8014268:	9916      	ldr	r1, [sp, #88]	; 0x58
 801426a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801426e:	680f      	ldr	r7, [r1, #0]
 8014270:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014274:	eba7 070c 	sub.w	r7, r7, ip
 8014278:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801427c:	edd3 6a07 	vldr	s13, [r3, #28]
 8014280:	42bc      	cmp	r4, r7
 8014282:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014284:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014288:	bfa8      	it	ge
 801428a:	463c      	movge	r4, r7
 801428c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014290:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014294:	ee07 4a90 	vmov	s15, r4
 8014298:	eb09 0e0c 	add.w	lr, r9, ip
 801429c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80142a0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80142a4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80142a8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80142ac:	4571      	cmp	r1, lr
 80142ae:	ee25 4a04 	vmul.f32	s8, s10, s8
 80142b2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80142b6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80142ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142be:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80142c2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80142c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80142ca:	ee36 0a84 	vadd.f32	s0, s13, s8
 80142ce:	ee61 1a87 	vmul.f32	s3, s3, s14
 80142d2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80142d6:	f340 808c 	ble.w	80143f2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80142da:	eba1 060e 	sub.w	r6, r1, lr
 80142de:	fb96 f5f4 	sdiv	r5, r6, r4
 80142e2:	ee07 5a10 	vmov	s14, r5
 80142e6:	2d00      	cmp	r5, #0
 80142e8:	fb04 6615 	mls	r6, r4, r5, r6
 80142ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142f0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80142f4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80142f8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80142fc:	dd12      	ble.n	8014324 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80142fe:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014302:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014306:	ee31 2a45 	vsub.f32	s4, s2, s10
 801430a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014312:	bf14      	ite	ne
 8014314:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014318:	eeb0 7a67 	vmoveq.f32	s14, s15
 801431c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014320:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014324:	fb05 f204 	mul.w	r2, r5, r4
 8014328:	1abf      	subs	r7, r7, r2
 801432a:	4494      	add	ip, r2
 801432c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014330:	4411      	add	r1, r2
 8014332:	eb09 020c 	add.w	r2, r9, ip
 8014336:	b209      	sxth	r1, r1
 8014338:	443a      	add	r2, r7
 801433a:	428a      	cmp	r2, r1
 801433c:	bfc4      	itt	gt
 801433e:	eba1 0209 	subgt.w	r2, r1, r9
 8014342:	eba2 070c 	subgt.w	r7, r2, ip
 8014346:	2f00      	cmp	r7, #0
 8014348:	dd50      	ble.n	80143ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801434a:	fb97 f1f4 	sdiv	r1, r7, r4
 801434e:	fb04 7211 	mls	r2, r4, r1, r7
 8014352:	b90a      	cbnz	r2, 8014358 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014354:	3901      	subs	r1, #1
 8014356:	4622      	mov	r2, r4
 8014358:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801435c:	6840      	ldr	r0, [r0, #4]
 801435e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014362:	44b6      	add	lr, r6
 8014364:	f8d0 a000 	ldr.w	sl, [r0]
 8014368:	2900      	cmp	r1, #0
 801436a:	bfcc      	ite	gt
 801436c:	46a1      	movgt	r9, r4
 801436e:	4691      	movle	r9, r2
 8014370:	900b      	str	r0, [sp, #44]	; 0x2c
 8014372:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014374:	fb04 e505 	mla	r5, r4, r5, lr
 8014378:	eef0 6a42 	vmov.f32	s13, s4
 801437c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014380:	9008      	str	r0, [sp, #32]
 8014382:	eeb0 7a61 	vmov.f32	s14, s3
 8014386:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014388:	695b      	ldr	r3, [r3, #20]
 801438a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801438e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014392:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014396:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014398:	445b      	add	r3, fp
 801439a:	9307      	str	r3, [sp, #28]
 801439c:	ee16 3a90 	vmov	r3, s13
 80143a0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80143a4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80143a8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80143ac:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80143b0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80143b4:	ee17 7a90 	vmov	r7, s15
 80143b8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80143bc:	fb97 f7f4 	sdiv	r7, r7, r4
 80143c0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80143c4:	ee17 ca90 	vmov	ip, s15
 80143c8:	fb9c fcf4 	sdiv	ip, ip, r4
 80143cc:	fb0c 3306 	mla	r3, ip, r6, r3
 80143d0:	9302      	str	r3, [sp, #8]
 80143d2:	ee17 3a10 	vmov	r3, s14
 80143d6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80143da:	fb07 3706 	mla	r7, r7, r6, r3
 80143de:	eba9 0306 	sub.w	r3, r9, r6
 80143e2:	e9cd 4700 	strd	r4, r7, [sp]
 80143e6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80143ea:	47a0      	blx	r4
 80143ec:	b00d      	add	sp, #52	; 0x34
 80143ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f2:	2500      	movs	r5, #0
 80143f4:	462e      	mov	r6, r5
 80143f6:	e799      	b.n	801432c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080143f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80143f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143fc:	b0db      	sub	sp, #364	; 0x16c
 80143fe:	461d      	mov	r5, r3
 8014400:	4614      	mov	r4, r2
 8014402:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014406:	910f      	str	r1, [sp, #60]	; 0x3c
 8014408:	4629      	mov	r1, r5
 801440a:	930a      	str	r3, [sp, #40]	; 0x28
 801440c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014410:	9009      	str	r0, [sp, #36]	; 0x24
 8014412:	930b      	str	r3, [sp, #44]	; 0x2c
 8014414:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014418:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801441c:	9310      	str	r3, [sp, #64]	; 0x40
 801441e:	6803      	ldr	r3, [r0, #0]
 8014420:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014422:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014426:	47b8      	blx	r7
 8014428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801442a:	6058      	str	r0, [r3, #4]
 801442c:	2800      	cmp	r0, #0
 801442e:	f000 83a1 	beq.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014432:	682b      	ldr	r3, [r5, #0]
 8014434:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014438:	ed94 7a02 	vldr	s14, [r4, #8]
 801443c:	9314      	str	r3, [sp, #80]	; 0x50
 801443e:	686b      	ldr	r3, [r5, #4]
 8014440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014444:	9315      	str	r3, [sp, #84]	; 0x54
 8014446:	4bc1      	ldr	r3, [pc, #772]	; (801474c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014448:	7819      	ldrb	r1, [r3, #0]
 801444a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801444e:	2900      	cmp	r1, #0
 8014450:	bf16      	itet	ne
 8014452:	4619      	movne	r1, r3
 8014454:	4611      	moveq	r1, r2
 8014456:	4613      	movne	r3, r2
 8014458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445c:	9116      	str	r1, [sp, #88]	; 0x58
 801445e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014462:	f240 8387 	bls.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014466:	ed94 7a07 	vldr	s14, [r4, #28]
 801446a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014472:	f240 837f 	bls.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014476:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801447a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014482:	f240 8377 	bls.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014486:	6822      	ldr	r2, [r4, #0]
 8014488:	4bb1      	ldr	r3, [pc, #708]	; (8014750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801448a:	429a      	cmp	r2, r3
 801448c:	f2c0 8372 	blt.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014490:	49b0      	ldr	r1, [pc, #704]	; (8014754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014492:	6963      	ldr	r3, [r4, #20]
 8014494:	428a      	cmp	r2, r1
 8014496:	f300 836d 	bgt.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801449a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801449e:	48ae      	ldr	r0, [pc, #696]	; (8014758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80144a0:	33ff      	adds	r3, #255	; 0xff
 80144a2:	4283      	cmp	r3, r0
 80144a4:	f200 8366 	bhi.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80144a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80144aa:	4dac      	ldr	r5, [pc, #688]	; (801475c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80144ac:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80144b0:	33ff      	adds	r3, #255	; 0xff
 80144b2:	42ab      	cmp	r3, r5
 80144b4:	f200 835e 	bhi.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80144b8:	6862      	ldr	r2, [r4, #4]
 80144ba:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80144be:	33ff      	adds	r3, #255	; 0xff
 80144c0:	4283      	cmp	r3, r0
 80144c2:	f200 8357 	bhi.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80144c6:	69a1      	ldr	r1, [r4, #24]
 80144c8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80144cc:	33ff      	adds	r3, #255	; 0xff
 80144ce:	4283      	cmp	r3, r0
 80144d0:	f200 8350 	bhi.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80144d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80144d6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80144da:	30ff      	adds	r0, #255	; 0xff
 80144dc:	42a8      	cmp	r0, r5
 80144de:	f200 8349 	bhi.w	8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80144e2:	428a      	cmp	r2, r1
 80144e4:	f280 8110 	bge.w	8014708 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80144e8:	429a      	cmp	r2, r3
 80144ea:	f300 8119 	bgt.w	8014720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80144ee:	4299      	cmp	r1, r3
 80144f0:	f280 811d 	bge.w	801472e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80144f4:	2502      	movs	r5, #2
 80144f6:	2701      	movs	r7, #1
 80144f8:	46a9      	mov	r9, r5
 80144fa:	46b8      	mov	r8, r7
 80144fc:	f04f 0a00 	mov.w	sl, #0
 8014500:	4621      	mov	r1, r4
 8014502:	a849      	add	r0, sp, #292	; 0x124
 8014504:	f003 fd08 	bl	8017f18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014508:	4622      	mov	r2, r4
 801450a:	4653      	mov	r3, sl
 801450c:	a949      	add	r1, sp, #292	; 0x124
 801450e:	f8cd 9000 	str.w	r9, [sp]
 8014512:	a819      	add	r0, sp, #100	; 0x64
 8014514:	f003 fe30 	bl	8018178 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014518:	4622      	mov	r2, r4
 801451a:	4653      	mov	r3, sl
 801451c:	a949      	add	r1, sp, #292	; 0x124
 801451e:	f8cd 8000 	str.w	r8, [sp]
 8014522:	a829      	add	r0, sp, #164	; 0xa4
 8014524:	f003 fe28 	bl	8018178 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014528:	4643      	mov	r3, r8
 801452a:	4622      	mov	r2, r4
 801452c:	a949      	add	r1, sp, #292	; 0x124
 801452e:	f8cd 9000 	str.w	r9, [sp]
 8014532:	a839      	add	r0, sp, #228	; 0xe4
 8014534:	f003 fe20 	bl	8018178 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014538:	42af      	cmp	r7, r5
 801453a:	af12      	add	r7, sp, #72	; 0x48
 801453c:	bfb7      	itett	lt
 801453e:	2300      	movlt	r3, #0
 8014540:	2301      	movge	r3, #1
 8014542:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014544:	ac19      	addlt	r4, sp, #100	; 0x64
 8014546:	bfb1      	iteee	lt
 8014548:	930e      	strlt	r3, [sp, #56]	; 0x38
 801454a:	ad19      	addge	r5, sp, #100	; 0x64
 801454c:	930e      	strge	r3, [sp, #56]	; 0x38
 801454e:	ac29      	addge	r4, sp, #164	; 0xa4
 8014550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014552:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014556:	e887 0003 	stmia.w	r7, {r0, r1}
 801455a:	b928      	cbnz	r0, 8014568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801455c:	4b80      	ldr	r3, [pc, #512]	; (8014760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801455e:	6818      	ldr	r0, [r3, #0]
 8014560:	6803      	ldr	r3, [r0, #0]
 8014562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014564:	4798      	blx	r3
 8014566:	6038      	str	r0, [r7, #0]
 8014568:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801456a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801456e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014572:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014574:	930c      	str	r3, [sp, #48]	; 0x30
 8014576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014578:	6963      	ldr	r3, [r4, #20]
 801457a:	440b      	add	r3, r1
 801457c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014580:	4408      	add	r0, r1
 8014582:	b200      	sxth	r0, r0
 8014584:	4283      	cmp	r3, r0
 8014586:	900d      	str	r0, [sp, #52]	; 0x34
 8014588:	f280 80dd 	bge.w	8014746 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801458c:	428b      	cmp	r3, r1
 801458e:	da08      	bge.n	80145a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014590:	2a00      	cmp	r2, #0
 8014592:	dd06      	ble.n	80145a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014594:	1acb      	subs	r3, r1, r3
 8014596:	429a      	cmp	r2, r3
 8014598:	f2c0 80e4 	blt.w	8014764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801459c:	2b00      	cmp	r3, #0
 801459e:	f300 80e2 	bgt.w	8014766 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80145a2:	6967      	ldr	r7, [r4, #20]
 80145a4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80145a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145aa:	443b      	add	r3, r7
 80145ac:	461f      	mov	r7, r3
 80145ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145b0:	1bdf      	subs	r7, r3, r7
 80145b2:	4297      	cmp	r7, r2
 80145b4:	bfa8      	it	ge
 80145b6:	4617      	movge	r7, r2
 80145b8:	2f00      	cmp	r7, #0
 80145ba:	f340 8166 	ble.w	801488a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80145be:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80145c0:	6829      	ldr	r1, [r5, #0]
 80145c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80145c6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80145ca:	4411      	add	r1, r2
 80145cc:	6820      	ldr	r0, [r4, #0]
 80145ce:	4299      	cmp	r1, r3
 80145d0:	dd1a      	ble.n	8014608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80145d2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80145d6:	4402      	add	r2, r0
 80145d8:	440b      	add	r3, r1
 80145da:	b21b      	sxth	r3, r3
 80145dc:	429a      	cmp	r2, r3
 80145de:	dc13      	bgt.n	8014608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80145e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80145e2:	a912      	add	r1, sp, #72	; 0x48
 80145e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	9206      	str	r2, [sp, #24]
 80145ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80145ee:	9500      	str	r5, [sp, #0]
 80145f0:	9205      	str	r2, [sp, #20]
 80145f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145f4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80145f8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80145fa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80145fe:	aa49      	add	r2, sp, #292	; 0x124
 8014600:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014604:	4623      	mov	r3, r4
 8014606:	47c8      	blx	r9
 8014608:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801460c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014610:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014618:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801461c:	68a1      	ldr	r1, [r4, #8]
 801461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014622:	ed94 6a08 	vldr	s12, [r4, #32]
 8014626:	edd4 6a07 	vldr	s13, [r4, #28]
 801462a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801462e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014632:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014636:	e9d4 2300 	ldrd	r2, r3, [r4]
 801463a:	edc4 6a07 	vstr	s13, [r4, #28]
 801463e:	441a      	add	r2, r3
 8014640:	6963      	ldr	r3, [r4, #20]
 8014642:	3301      	adds	r3, #1
 8014644:	6022      	str	r2, [r4, #0]
 8014646:	6163      	str	r3, [r4, #20]
 8014648:	69a3      	ldr	r3, [r4, #24]
 801464a:	3b01      	subs	r3, #1
 801464c:	61a3      	str	r3, [r4, #24]
 801464e:	6923      	ldr	r3, [r4, #16]
 8014650:	440b      	add	r3, r1
 8014652:	68e1      	ldr	r1, [r4, #12]
 8014654:	428b      	cmp	r3, r1
 8014656:	6123      	str	r3, [r4, #16]
 8014658:	db15      	blt.n	8014686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801465a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801465e:	3201      	adds	r2, #1
 8014660:	1a5b      	subs	r3, r3, r1
 8014662:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014666:	6022      	str	r2, [r4, #0]
 8014668:	6123      	str	r3, [r4, #16]
 801466a:	edc4 6a07 	vstr	s13, [r4, #28]
 801466e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014672:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014676:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801467a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801467e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014682:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014686:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801468a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801468e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014696:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801469a:	68a9      	ldr	r1, [r5, #8]
 801469c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146a0:	ed95 6a08 	vldr	s12, [r5, #32]
 80146a4:	edd5 6a07 	vldr	s13, [r5, #28]
 80146a8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80146ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80146b0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80146b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80146b8:	edc5 6a07 	vstr	s13, [r5, #28]
 80146bc:	441a      	add	r2, r3
 80146be:	696b      	ldr	r3, [r5, #20]
 80146c0:	3301      	adds	r3, #1
 80146c2:	602a      	str	r2, [r5, #0]
 80146c4:	616b      	str	r3, [r5, #20]
 80146c6:	69ab      	ldr	r3, [r5, #24]
 80146c8:	3b01      	subs	r3, #1
 80146ca:	61ab      	str	r3, [r5, #24]
 80146cc:	692b      	ldr	r3, [r5, #16]
 80146ce:	440b      	add	r3, r1
 80146d0:	68e9      	ldr	r1, [r5, #12]
 80146d2:	428b      	cmp	r3, r1
 80146d4:	612b      	str	r3, [r5, #16]
 80146d6:	db15      	blt.n	8014704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80146d8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80146dc:	3201      	adds	r2, #1
 80146de:	1a5b      	subs	r3, r3, r1
 80146e0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80146e4:	602a      	str	r2, [r5, #0]
 80146e6:	612b      	str	r3, [r5, #16]
 80146e8:	edc5 6a07 	vstr	s13, [r5, #28]
 80146ec:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80146f0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80146f4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80146f8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80146fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014700:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014704:	3f01      	subs	r7, #1
 8014706:	e757      	b.n	80145b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014708:	4299      	cmp	r1, r3
 801470a:	dc13      	bgt.n	8014734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801470c:	429a      	cmp	r2, r3
 801470e:	da14      	bge.n	801473a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014710:	2502      	movs	r5, #2
 8014712:	2703      	movs	r7, #3
 8014714:	f04f 0800 	mov.w	r8, #0
 8014718:	46a9      	mov	r9, r5
 801471a:	f04f 0a01 	mov.w	sl, #1
 801471e:	e6ef      	b.n	8014500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014720:	2501      	movs	r5, #1
 8014722:	2700      	movs	r7, #0
 8014724:	46a9      	mov	r9, r5
 8014726:	46b8      	mov	r8, r7
 8014728:	f04f 0a02 	mov.w	sl, #2
 801472c:	e6e8      	b.n	8014500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801472e:	2501      	movs	r5, #1
 8014730:	2702      	movs	r7, #2
 8014732:	e6e1      	b.n	80144f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014734:	2500      	movs	r5, #0
 8014736:	2701      	movs	r7, #1
 8014738:	e7f4      	b.n	8014724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801473a:	2702      	movs	r7, #2
 801473c:	2503      	movs	r5, #3
 801473e:	f04f 0900 	mov.w	r9, #0
 8014742:	46b8      	mov	r8, r7
 8014744:	e7e9      	b.n	801471a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014746:	4613      	mov	r3, r2
 8014748:	e728      	b.n	801459c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801474a:	bf00      	nop
 801474c:	20011b32 	.word	0x20011b32
 8014750:	fffd8f01 	.word	0xfffd8f01
 8014754:	00027100 	.word	0x00027100
 8014758:	0004e1ff 	.word	0x0004e1ff
 801475c:	0004e1fe 	.word	0x0004e1fe
 8014760:	20011b3c 	.word	0x20011b3c
 8014764:	4613      	mov	r3, r2
 8014766:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014768:	469e      	mov	lr, r3
 801476a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801476c:	469c      	mov	ip, r3
 801476e:	9111      	str	r1, [sp, #68]	; 0x44
 8014770:	f04f 0900 	mov.w	r9, #0
 8014774:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014778:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801477c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014780:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014784:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014788:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801478c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014790:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014794:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014798:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801479c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80147a0:	f1bc 0f00 	cmp.w	ip, #0
 80147a4:	d147      	bne.n	8014836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80147a6:	eb03 0c07 	add.w	ip, r3, r7
 80147aa:	1ad7      	subs	r7, r2, r3
 80147ac:	f1b9 0f00 	cmp.w	r9, #0
 80147b0:	d009      	beq.n	80147c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80147b2:	9029      	str	r0, [sp, #164]	; 0xa4
 80147b4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80147b8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80147bc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80147c0:	912d      	str	r1, [sp, #180]	; 0xb4
 80147c2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80147c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80147c8:	f04f 0800 	mov.w	r8, #0
 80147cc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80147d0:	9111      	str	r1, [sp, #68]	; 0x44
 80147d2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80147d6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80147da:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80147de:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80147e2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80147e6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80147ea:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80147ee:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80147f2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80147f6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80147fa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80147fe:	f1be 0f00 	cmp.w	lr, #0
 8014802:	d031      	beq.n	8014868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014804:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014806:	4450      	add	r0, sl
 8014808:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801480c:	4431      	add	r1, r6
 801480e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014812:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014816:	4549      	cmp	r1, r9
 8014818:	db08      	blt.n	801482c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801481a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801481e:	3001      	adds	r0, #1
 8014820:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014824:	eba1 0109 	sub.w	r1, r1, r9
 8014828:	ee37 7a06 	vadd.f32	s14, s14, s12
 801482c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014830:	f04f 0801 	mov.w	r8, #1
 8014834:	e7e3      	b.n	80147fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014836:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014838:	4450      	add	r0, sl
 801483a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801483e:	4431      	add	r1, r6
 8014840:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014844:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014848:	4541      	cmp	r1, r8
 801484a:	db08      	blt.n	801485e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801484c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014850:	3001      	adds	r0, #1
 8014852:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014856:	eba1 0108 	sub.w	r1, r1, r8
 801485a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801485e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014862:	f04f 0901 	mov.w	r9, #1
 8014866:	e79b      	b.n	80147a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014868:	449c      	add	ip, r3
 801486a:	1aff      	subs	r7, r7, r3
 801486c:	f1b8 0f00 	cmp.w	r8, #0
 8014870:	d009      	beq.n	8014886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8014872:	9019      	str	r0, [sp, #100]	; 0x64
 8014874:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014878:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801487c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014880:	911d      	str	r1, [sp, #116]	; 0x74
 8014882:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014886:	1ad2      	subs	r2, r2, r3
 8014888:	e68b      	b.n	80145a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801488a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801488c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801488e:	2b00      	cmp	r3, #0
 8014890:	f000 80d1 	beq.w	8014a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014894:	ad19      	add	r5, sp, #100	; 0x64
 8014896:	ac39      	add	r4, sp, #228	; 0xe4
 8014898:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801489a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801489e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80148a2:	930c      	str	r3, [sp, #48]	; 0x30
 80148a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80148a6:	6963      	ldr	r3, [r4, #20]
 80148a8:	440b      	add	r3, r1
 80148aa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80148ae:	4408      	add	r0, r1
 80148b0:	b200      	sxth	r0, r0
 80148b2:	4283      	cmp	r3, r0
 80148b4:	900d      	str	r0, [sp, #52]	; 0x34
 80148b6:	f280 80c1 	bge.w	8014a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80148ba:	428b      	cmp	r3, r1
 80148bc:	da08      	bge.n	80148d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80148be:	2a00      	cmp	r2, #0
 80148c0:	dd06      	ble.n	80148d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80148c2:	1acb      	subs	r3, r1, r3
 80148c4:	429a      	cmp	r2, r3
 80148c6:	f2c0 80bb 	blt.w	8014a40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	f300 80b9 	bgt.w	8014a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80148d0:	6967      	ldr	r7, [r4, #20]
 80148d2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80148d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148d8:	443b      	add	r3, r7
 80148da:	461f      	mov	r7, r3
 80148dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148de:	1bdf      	subs	r7, r3, r7
 80148e0:	4297      	cmp	r7, r2
 80148e2:	bfa8      	it	ge
 80148e4:	4617      	movge	r7, r2
 80148e6:	2f00      	cmp	r7, #0
 80148e8:	f340 813c 	ble.w	8014b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80148ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80148ee:	6829      	ldr	r1, [r5, #0]
 80148f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80148f4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80148f8:	4411      	add	r1, r2
 80148fa:	6820      	ldr	r0, [r4, #0]
 80148fc:	4299      	cmp	r1, r3
 80148fe:	dd1a      	ble.n	8014936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014900:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014904:	4402      	add	r2, r0
 8014906:	440b      	add	r3, r1
 8014908:	b21b      	sxth	r3, r3
 801490a:	429a      	cmp	r2, r3
 801490c:	dc13      	bgt.n	8014936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801490e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014910:	a912      	add	r1, sp, #72	; 0x48
 8014912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	9206      	str	r2, [sp, #24]
 801491a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801491c:	9500      	str	r5, [sp, #0]
 801491e:	9205      	str	r2, [sp, #20]
 8014920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014922:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014926:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014928:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801492c:	aa49      	add	r2, sp, #292	; 0x124
 801492e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014932:	4623      	mov	r3, r4
 8014934:	47c8      	blx	r9
 8014936:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801493a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801493e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014946:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801494a:	68a1      	ldr	r1, [r4, #8]
 801494c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014950:	ed94 6a08 	vldr	s12, [r4, #32]
 8014954:	edd4 6a07 	vldr	s13, [r4, #28]
 8014958:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801495c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014960:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014964:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014968:	edc4 6a07 	vstr	s13, [r4, #28]
 801496c:	441a      	add	r2, r3
 801496e:	6963      	ldr	r3, [r4, #20]
 8014970:	3301      	adds	r3, #1
 8014972:	6022      	str	r2, [r4, #0]
 8014974:	6163      	str	r3, [r4, #20]
 8014976:	69a3      	ldr	r3, [r4, #24]
 8014978:	3b01      	subs	r3, #1
 801497a:	61a3      	str	r3, [r4, #24]
 801497c:	6923      	ldr	r3, [r4, #16]
 801497e:	440b      	add	r3, r1
 8014980:	68e1      	ldr	r1, [r4, #12]
 8014982:	428b      	cmp	r3, r1
 8014984:	6123      	str	r3, [r4, #16]
 8014986:	db15      	blt.n	80149b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014988:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801498c:	3201      	adds	r2, #1
 801498e:	1a5b      	subs	r3, r3, r1
 8014990:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014994:	6022      	str	r2, [r4, #0]
 8014996:	6123      	str	r3, [r4, #16]
 8014998:	edc4 6a07 	vstr	s13, [r4, #28]
 801499c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80149a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80149a4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80149a8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80149ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149b0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80149b4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80149b8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80149bc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80149c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80149c4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80149c8:	68a9      	ldr	r1, [r5, #8]
 80149ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149ce:	ed95 6a08 	vldr	s12, [r5, #32]
 80149d2:	edd5 6a07 	vldr	s13, [r5, #28]
 80149d6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80149da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80149de:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80149e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80149e6:	edc5 6a07 	vstr	s13, [r5, #28]
 80149ea:	441a      	add	r2, r3
 80149ec:	696b      	ldr	r3, [r5, #20]
 80149ee:	3301      	adds	r3, #1
 80149f0:	602a      	str	r2, [r5, #0]
 80149f2:	616b      	str	r3, [r5, #20]
 80149f4:	69ab      	ldr	r3, [r5, #24]
 80149f6:	3b01      	subs	r3, #1
 80149f8:	61ab      	str	r3, [r5, #24]
 80149fa:	692b      	ldr	r3, [r5, #16]
 80149fc:	440b      	add	r3, r1
 80149fe:	68e9      	ldr	r1, [r5, #12]
 8014a00:	428b      	cmp	r3, r1
 8014a02:	612b      	str	r3, [r5, #16]
 8014a04:	db15      	blt.n	8014a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014a06:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014a0a:	3201      	adds	r2, #1
 8014a0c:	1a5b      	subs	r3, r3, r1
 8014a0e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014a12:	602a      	str	r2, [r5, #0]
 8014a14:	612b      	str	r3, [r5, #16]
 8014a16:	edc5 6a07 	vstr	s13, [r5, #28]
 8014a1a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014a1e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014a22:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014a26:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a2e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014a32:	3f01      	subs	r7, #1
 8014a34:	e757      	b.n	80148e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8014a36:	ad39      	add	r5, sp, #228	; 0xe4
 8014a38:	ac19      	add	r4, sp, #100	; 0x64
 8014a3a:	e72d      	b.n	8014898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8014a3c:	4613      	mov	r3, r2
 8014a3e:	e744      	b.n	80148ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8014a40:	4613      	mov	r3, r2
 8014a42:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8014a44:	469e      	mov	lr, r3
 8014a46:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8014a4a:	461f      	mov	r7, r3
 8014a4c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8014a50:	f04f 0900 	mov.w	r9, #0
 8014a54:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8014a58:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8014a5c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8014a60:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8014a64:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8014a68:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8014a6a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8014a6e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8014a72:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8014a76:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8014a7a:	960e      	str	r6, [sp, #56]	; 0x38
 8014a7c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8014a80:	2f00      	cmp	r7, #0
 8014a82:	d146      	bne.n	8014b12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014a84:	449c      	add	ip, r3
 8014a86:	1ad7      	subs	r7, r2, r3
 8014a88:	f1b9 0f00 	cmp.w	r9, #0
 8014a8c:	d009      	beq.n	8014aa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8014a8e:	9039      	str	r0, [sp, #228]	; 0xe4
 8014a90:	913d      	str	r1, [sp, #244]	; 0xf4
 8014a92:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8014a96:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8014a9a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014a9e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8014aa2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014aa4:	f04f 0800 	mov.w	r8, #0
 8014aa8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014aac:	910e      	str	r1, [sp, #56]	; 0x38
 8014aae:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014ab2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014ab6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014aba:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014abe:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014ac2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014ac6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014aca:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014ace:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014ad2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014ad6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014ada:	f1be 0f00 	cmp.w	lr, #0
 8014ade:	d030      	beq.n	8014b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8014ae0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014ae2:	4450      	add	r0, sl
 8014ae4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014ae8:	4431      	add	r1, r6
 8014aea:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014aee:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014af2:	4549      	cmp	r1, r9
 8014af4:	db08      	blt.n	8014b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014af6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014afa:	3001      	adds	r0, #1
 8014afc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014b00:	eba1 0109 	sub.w	r1, r1, r9
 8014b04:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014b08:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014b0c:	f04f 0801 	mov.w	r8, #1
 8014b10:	e7e3      	b.n	8014ada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014b12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014b14:	4450      	add	r0, sl
 8014b16:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014b1a:	4431      	add	r1, r6
 8014b1c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014b20:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014b24:	4541      	cmp	r1, r8
 8014b26:	db08      	blt.n	8014b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014b28:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014b32:	eba1 0108 	sub.w	r1, r1, r8
 8014b36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014b3a:	3f01      	subs	r7, #1
 8014b3c:	f04f 0901 	mov.w	r9, #1
 8014b40:	e79e      	b.n	8014a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8014b42:	449c      	add	ip, r3
 8014b44:	1aff      	subs	r7, r7, r3
 8014b46:	f1b8 0f00 	cmp.w	r8, #0
 8014b4a:	d009      	beq.n	8014b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8014b4c:	9019      	str	r0, [sp, #100]	; 0x64
 8014b4e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014b52:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014b56:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014b5a:	911d      	str	r1, [sp, #116]	; 0x74
 8014b5c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014b60:	1ad2      	subs	r2, r2, r3
 8014b62:	e6b5      	b.n	80148d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	b923      	cbnz	r3, 8014b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b6a:	4b04      	ldr	r3, [pc, #16]	; (8014b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8014b6c:	6818      	ldr	r0, [r3, #0]
 8014b6e:	6803      	ldr	r3, [r0, #0]
 8014b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b72:	4798      	blx	r3
 8014b74:	b05b      	add	sp, #364	; 0x16c
 8014b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7a:	bf00      	nop
 8014b7c:	20011b3c 	.word	0x20011b3c

08014b80 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8014b80:	b570      	push	{r4, r5, r6, lr}
 8014b82:	4604      	mov	r4, r0
 8014b84:	2500      	movs	r5, #0
 8014b86:	9805      	ldr	r0, [sp, #20]
 8014b88:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8014b8c:	6061      	str	r1, [r4, #4]
 8014b8e:	8263      	strh	r3, [r4, #18]
 8014b90:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8014b94:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014b98:	8025      	strh	r5, [r4, #0]
 8014b9a:	7221      	strb	r1, [r4, #8]
 8014b9c:	7266      	strb	r6, [r4, #9]
 8014b9e:	60e0      	str	r0, [r4, #12]
 8014ba0:	8222      	strh	r2, [r4, #16]
 8014ba2:	82a3      	strh	r3, [r4, #20]
 8014ba4:	82e5      	strh	r5, [r4, #22]
 8014ba6:	8325      	strh	r5, [r4, #24]
 8014ba8:	8365      	strh	r5, [r4, #26]
 8014baa:	83a5      	strh	r5, [r4, #28]
 8014bac:	83e5      	strh	r5, [r4, #30]
 8014bae:	8425      	strh	r5, [r4, #32]
 8014bb0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8014bb4:	b32e      	cbz	r6, 8014c02 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014bb6:	6803      	ldr	r3, [r0, #0]
 8014bb8:	695b      	ldr	r3, [r3, #20]
 8014bba:	4798      	blx	r3
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	b300      	cbz	r0, 8014c02 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014bc0:	68e0      	ldr	r0, [r4, #12]
 8014bc2:	4631      	mov	r1, r6
 8014bc4:	6803      	ldr	r3, [r0, #0]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	4798      	blx	r3
 8014bca:	4605      	mov	r5, r0
 8014bcc:	b1c8      	cbz	r0, 8014c02 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014bce:	7b43      	ldrb	r3, [r0, #13]
 8014bd0:	7a82      	ldrb	r2, [r0, #10]
 8014bd2:	005b      	lsls	r3, r3, #1
 8014bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014bd8:	4313      	orrs	r3, r2
 8014bda:	8423      	strh	r3, [r4, #32]
 8014bdc:	7a63      	ldrb	r3, [r4, #9]
 8014bde:	2b06      	cmp	r3, #6
 8014be0:	d10f      	bne.n	8014c02 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014be2:	68e0      	ldr	r0, [r4, #12]
 8014be4:	462a      	mov	r2, r5
 8014be6:	4631      	mov	r1, r6
 8014be8:	6803      	ldr	r3, [r0, #0]
 8014bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bec:	4798      	blx	r3
 8014bee:	7b6b      	ldrb	r3, [r5, #13]
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014bf6:	7aab      	ldrb	r3, [r5, #10]
 8014bf8:	4313      	orrs	r3, r2
 8014bfa:	4418      	add	r0, r3
 8014bfc:	8c23      	ldrh	r3, [r4, #32]
 8014bfe:	4418      	add	r0, r3
 8014c00:	8420      	strh	r0, [r4, #32]
 8014c02:	4620      	mov	r0, r4
 8014c04:	bd70      	pop	{r4, r5, r6, pc}

08014c06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0a:	2400      	movs	r4, #0
 8014c0c:	b085      	sub	sp, #20
 8014c0e:	4681      	mov	r9, r0
 8014c10:	4688      	mov	r8, r1
 8014c12:	4692      	mov	sl, r2
 8014c14:	469b      	mov	fp, r3
 8014c16:	4627      	mov	r7, r4
 8014c18:	4625      	mov	r5, r4
 8014c1a:	4626      	mov	r6, r4
 8014c1c:	4554      	cmp	r4, sl
 8014c1e:	da2a      	bge.n	8014c76 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014c20:	2300      	movs	r3, #0
 8014c22:	9303      	str	r3, [sp, #12]
 8014c24:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014c28:	429d      	cmp	r5, r3
 8014c2a:	d004      	beq.n	8014c36 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8014c2c:	f242 030b 	movw	r3, #8203	; 0x200b
 8014c30:	429d      	cmp	r5, r3
 8014c32:	bf18      	it	ne
 8014c34:	462f      	movne	r7, r5
 8014c36:	ab03      	add	r3, sp, #12
 8014c38:	4642      	mov	r2, r8
 8014c3a:	4659      	mov	r1, fp
 8014c3c:	4648      	mov	r0, r9
 8014c3e:	f002 ff81 	bl	8017b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014c42:	4605      	mov	r5, r0
 8014c44:	b1b8      	cbz	r0, 8014c76 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014c46:	280a      	cmp	r0, #10
 8014c48:	d015      	beq.n	8014c76 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014c4a:	9a03      	ldr	r2, [sp, #12]
 8014c4c:	b18a      	cbz	r2, 8014c72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8014c4e:	7b50      	ldrb	r0, [r2, #13]
 8014c50:	4639      	mov	r1, r7
 8014c52:	7a93      	ldrb	r3, [r2, #10]
 8014c54:	0040      	lsls	r0, r0, #1
 8014c56:	8895      	ldrh	r5, [r2, #4]
 8014c58:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014c5c:	4303      	orrs	r3, r0
 8014c5e:	4640      	mov	r0, r8
 8014c60:	9301      	str	r3, [sp, #4]
 8014c62:	f8d8 3000 	ldr.w	r3, [r8]
 8014c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c68:	4798      	blx	r3
 8014c6a:	9b01      	ldr	r3, [sp, #4]
 8014c6c:	4418      	add	r0, r3
 8014c6e:	4406      	add	r6, r0
 8014c70:	b2b6      	uxth	r6, r6
 8014c72:	3401      	adds	r4, #1
 8014c74:	e7d2      	b.n	8014c1c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8014c76:	4630      	mov	r0, r6
 8014c78:	b005      	add	sp, #20
 8014c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c7e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8014c7e:	2a02      	cmp	r2, #2
 8014c80:	b530      	push	{r4, r5, lr}
 8014c82:	d011      	beq.n	8014ca8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8014c84:	2a03      	cmp	r2, #3
 8014c86:	d01c      	beq.n	8014cc2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8014c88:	2a01      	cmp	r2, #1
 8014c8a:	d10c      	bne.n	8014ca6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014c8c:	888b      	ldrh	r3, [r1, #4]
 8014c8e:	8801      	ldrh	r1, [r0, #0]
 8014c90:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014c94:	1a5b      	subs	r3, r3, r1
 8014c96:	8844      	ldrh	r4, [r0, #2]
 8014c98:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014c9c:	1a9b      	subs	r3, r3, r2
 8014c9e:	8004      	strh	r4, [r0, #0]
 8014ca0:	8081      	strh	r1, [r0, #4]
 8014ca2:	8043      	strh	r3, [r0, #2]
 8014ca4:	80c2      	strh	r2, [r0, #6]
 8014ca6:	bd30      	pop	{r4, r5, pc}
 8014ca8:	88cb      	ldrh	r3, [r1, #6]
 8014caa:	8842      	ldrh	r2, [r0, #2]
 8014cac:	1a9b      	subs	r3, r3, r2
 8014cae:	88c2      	ldrh	r2, [r0, #6]
 8014cb0:	1a9b      	subs	r3, r3, r2
 8014cb2:	888a      	ldrh	r2, [r1, #4]
 8014cb4:	8801      	ldrh	r1, [r0, #0]
 8014cb6:	8043      	strh	r3, [r0, #2]
 8014cb8:	1a52      	subs	r2, r2, r1
 8014cba:	8881      	ldrh	r1, [r0, #4]
 8014cbc:	1a52      	subs	r2, r2, r1
 8014cbe:	8002      	strh	r2, [r0, #0]
 8014cc0:	e7f1      	b.n	8014ca6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014cc2:	88cb      	ldrh	r3, [r1, #6]
 8014cc4:	8841      	ldrh	r1, [r0, #2]
 8014cc6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014cca:	1a5b      	subs	r3, r3, r1
 8014ccc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014cd0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014cd4:	1a9b      	subs	r3, r3, r2
 8014cd6:	8045      	strh	r5, [r0, #2]
 8014cd8:	8082      	strh	r2, [r0, #4]
 8014cda:	8003      	strh	r3, [r0, #0]
 8014cdc:	80c4      	strh	r4, [r0, #6]
 8014cde:	e7e2      	b.n	8014ca6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08014ce0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce4:	b09f      	sub	sp, #124	; 0x7c
 8014ce6:	9116      	str	r1, [sp, #88]	; 0x58
 8014ce8:	9317      	str	r3, [sp, #92]	; 0x5c
 8014cea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014cec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014cee:	8809      	ldrh	r1, [r1, #0]
 8014cf0:	889b      	ldrh	r3, [r3, #4]
 8014cf2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014cf6:	440b      	add	r3, r1
 8014cf8:	9212      	str	r2, [sp, #72]	; 0x48
 8014cfa:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014cfe:	b21b      	sxth	r3, r3
 8014d00:	9011      	str	r0, [sp, #68]	; 0x44
 8014d02:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014d06:	9310      	str	r3, [sp, #64]	; 0x40
 8014d08:	f8d8 3000 	ldr.w	r3, [r8]
 8014d0c:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8014d10:	7b19      	ldrb	r1, [r3, #12]
 8014d12:	7adb      	ldrb	r3, [r3, #11]
 8014d14:	9114      	str	r1, [sp, #80]	; 0x50
 8014d16:	9315      	str	r3, [sp, #84]	; 0x54
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	d06a      	beq.n	8014df2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014d1c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8014d20:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014d22:	2b06      	cmp	r3, #6
 8014d24:	bf14      	ite	ne
 8014d26:	2301      	movne	r3, #1
 8014d28:	2302      	moveq	r3, #2
 8014d2a:	4413      	add	r3, r2
 8014d2c:	f04f 0900 	mov.w	r9, #0
 8014d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d32:	464c      	mov	r4, r9
 8014d34:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014d38:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8014d3c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8014d40:	4293      	cmp	r3, r2
 8014d42:	f280 808f 	bge.w	8014e64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014d46:	2300      	movs	r3, #0
 8014d48:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8014d4c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8014d50:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014d54:	429c      	cmp	r4, r3
 8014d56:	d006      	beq.n	8014d66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d5a:	f242 020b 	movw	r2, #8203	; 0x200b
 8014d5e:	4294      	cmp	r4, r2
 8014d60:	bf18      	it	ne
 8014d62:	4623      	movne	r3, r4
 8014d64:	930d      	str	r3, [sp, #52]	; 0x34
 8014d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d68:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8014d6a:	f8d8 2000 	ldr.w	r2, [r8]
 8014d6e:	428b      	cmp	r3, r1
 8014d70:	db41      	blt.n	8014df6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8014d72:	6813      	ldr	r3, [r2, #0]
 8014d74:	4610      	mov	r0, r2
 8014d76:	695b      	ldr	r3, [r3, #20]
 8014d78:	4798      	blx	r3
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	f8d8 0000 	ldr.w	r0, [r8]
 8014d80:	aa1d      	add	r2, sp, #116	; 0x74
 8014d82:	4621      	mov	r1, r4
 8014d84:	6803      	ldr	r3, [r0, #0]
 8014d86:	689d      	ldr	r5, [r3, #8]
 8014d88:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014d8c:	47a8      	blx	r5
 8014d8e:	901c      	str	r0, [sp, #112]	; 0x70
 8014d90:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014d94:	429c      	cmp	r4, r3
 8014d96:	f000 80ec 	beq.w	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014d9a:	f242 030b 	movw	r3, #8203	; 0x200b
 8014d9e:	429c      	cmp	r4, r3
 8014da0:	f000 80e7 	beq.w	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014da4:	2c00      	cmp	r4, #0
 8014da6:	f000 80f9 	beq.w	8014f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8014daa:	2c0a      	cmp	r4, #10
 8014dac:	d060      	beq.n	8014e70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014dae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014db0:	b36a      	cbz	r2, 8014e0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8014db2:	8894      	ldrh	r4, [r2, #4]
 8014db4:	f1bb 0f00 	cmp.w	fp, #0
 8014db8:	d03b      	beq.n	8014e32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014dba:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014dbe:	f1bb 0f01 	cmp.w	fp, #1
 8014dc2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014dc6:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014dca:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014dce:	ea49 0903 	orr.w	r9, r9, r3
 8014dd2:	d134      	bne.n	8014e3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8014dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dd6:	eba6 0609 	sub.w	r6, r6, r9
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d14f      	bne.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014dde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014de0:	eb09 0306 	add.w	r3, r9, r6
 8014de4:	4413      	add	r3, r2
 8014de6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014de8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014dec:	4293      	cmp	r3, r2
 8014dee:	da51      	bge.n	8014e94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014df0:	e038      	b.n	8014e64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014df2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014df4:	e79a      	b.n	8014d2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8014df6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014dfa:	4659      	mov	r1, fp
 8014dfc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014dfe:	9301      	str	r3, [sp, #4]
 8014e00:	ab1d      	add	r3, sp, #116	; 0x74
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	ab1c      	add	r3, sp, #112	; 0x70
 8014e06:	f002 fee6 	bl	8017bd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	e7c0      	b.n	8014d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8014e0e:	f8d8 0000 	ldr.w	r0, [r8]
 8014e12:	6803      	ldr	r3, [r0, #0]
 8014e14:	691b      	ldr	r3, [r3, #16]
 8014e16:	4798      	blx	r3
 8014e18:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014e1c:	4298      	cmp	r0, r3
 8014e1e:	f000 80a8 	beq.w	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014e22:	f242 030b 	movw	r3, #8203	; 0x200b
 8014e26:	4298      	cmp	r0, r3
 8014e28:	f000 80a3 	beq.w	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014e2c:	f1bb 0f00 	cmp.w	fp, #0
 8014e30:	d100      	bne.n	8014e34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014e32:	444e      	add	r6, r9
 8014e34:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014e36:	2a00      	cmp	r2, #0
 8014e38:	d1bf      	bne.n	8014dba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014e3a:	4691      	mov	r9, r2
 8014e3c:	e099      	b.n	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	f000 80ad 	beq.w	8014fa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8014e46:	f1bb 0f00 	cmp.w	fp, #0
 8014e4a:	d118      	bne.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014e4c:	f8d8 0000 	ldr.w	r0, [r8]
 8014e50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e52:	6803      	ldr	r3, [r0, #0]
 8014e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e56:	4798      	blx	r3
 8014e58:	4406      	add	r6, r0
 8014e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e5e:	1af3      	subs	r3, r6, r3
 8014e60:	4293      	cmp	r3, r2
 8014e62:	dd17      	ble.n	8014e94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014e64:	2c00      	cmp	r4, #0
 8014e66:	f000 8099 	beq.w	8014f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8014e6a:	2c0a      	cmp	r4, #10
 8014e6c:	f040 8087 	bne.w	8014f7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8014e70:	240a      	movs	r4, #10
 8014e72:	fab4 f084 	clz	r0, r4
 8014e76:	0940      	lsrs	r0, r0, #5
 8014e78:	b01f      	add	sp, #124	; 0x7c
 8014e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e7e:	f8d8 0000 	ldr.w	r0, [r8]
 8014e82:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e84:	6803      	ldr	r3, [r0, #0]
 8014e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e88:	4798      	blx	r3
 8014e8a:	f1bb 0f01 	cmp.w	fp, #1
 8014e8e:	eba6 0600 	sub.w	r6, r6, r0
 8014e92:	d0a4      	beq.n	8014dde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8014e94:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014e96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014e98:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014e9c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8014ea0:	7b43      	ldrb	r3, [r0, #13]
 8014ea2:	4431      	add	r1, r6
 8014ea4:	015b      	lsls	r3, r3, #5
 8014ea6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014eaa:	7983      	ldrb	r3, [r0, #6]
 8014eac:	4313      	orrs	r3, r2
 8014eae:	440b      	add	r3, r1
 8014eb0:	42bb      	cmp	r3, r7
 8014eb2:	db5e      	blt.n	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014eb6:	4299      	cmp	r1, r3
 8014eb8:	da5b      	bge.n	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014eba:	f8d8 0000 	ldr.w	r0, [r8]
 8014ebe:	42b7      	cmp	r7, r6
 8014ec0:	6803      	ldr	r3, [r0, #0]
 8014ec2:	bfcc      	ite	gt
 8014ec4:	1bbf      	subgt	r7, r7, r6
 8014ec6:	2700      	movle	r7, #0
 8014ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eca:	bfc8      	it	gt
 8014ecc:	b2bf      	uxthgt	r7, r7
 8014ece:	4798      	blx	r3
 8014ed0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014ed2:	7b5a      	ldrb	r2, [r3, #13]
 8014ed4:	00d1      	lsls	r1, r2, #3
 8014ed6:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8014eda:	7a19      	ldrb	r1, [r3, #8]
 8014edc:	4329      	orrs	r1, r5
 8014ede:	0655      	lsls	r5, r2, #25
 8014ee0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014ee2:	bf48      	it	mi
 8014ee4:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8014ee8:	4405      	add	r5, r0
 8014eea:	bf48      	it	mi
 8014eec:	b209      	sxthmi	r1, r1
 8014eee:	1a6d      	subs	r5, r5, r1
 8014ef0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014ef2:	b2ad      	uxth	r5, r5
 8014ef4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014ef8:	fa0f fa85 	sxth.w	sl, r5
 8014efc:	4551      	cmp	r1, sl
 8014efe:	dd3c      	ble.n	8014f7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8014f00:	0112      	lsls	r2, r2, #4
 8014f02:	79d8      	ldrb	r0, [r3, #7]
 8014f04:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014f08:	4302      	orrs	r2, r0
 8014f0a:	4492      	add	sl, r2
 8014f0c:	4551      	cmp	r1, sl
 8014f0e:	dc30      	bgt.n	8014f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014f10:	1b4d      	subs	r5, r1, r5
 8014f12:	468a      	mov	sl, r1
 8014f14:	b22d      	sxth	r5, r5
 8014f16:	9319      	str	r3, [sp, #100]	; 0x64
 8014f18:	b2ad      	uxth	r5, r5
 8014f1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f1c:	f8d8 0000 	ldr.w	r0, [r8]
 8014f20:	681a      	ldr	r2, [r3, #0]
 8014f22:	6801      	ldr	r1, [r0, #0]
 8014f24:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014f26:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014f28:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f2a:	9218      	str	r2, [sp, #96]	; 0x60
 8014f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014f2e:	4788      	blx	r1
 8014f30:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f36:	910b      	str	r1, [sp, #44]	; 0x2c
 8014f38:	f898 100e 	ldrb.w	r1, [r8, #14]
 8014f3c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014f3e:	910a      	str	r1, [sp, #40]	; 0x28
 8014f40:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8014f44:	9109      	str	r1, [sp, #36]	; 0x24
 8014f46:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014f4a:	9305      	str	r3, [sp, #20]
 8014f4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014f4e:	9206      	str	r2, [sp, #24]
 8014f50:	9304      	str	r3, [sp, #16]
 8014f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f54:	f8cd a004 	str.w	sl, [sp, #4]
 8014f58:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8014f5c:	4437      	add	r7, r6
 8014f5e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014f60:	b23f      	sxth	r7, r7
 8014f62:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014f66:	9700      	str	r7, [sp, #0]
 8014f68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f6a:	681a      	ldr	r2, [r3, #0]
 8014f6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	47a8      	blx	r5
 8014f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f74:	3301      	adds	r3, #1
 8014f76:	930e      	str	r3, [sp, #56]	; 0x38
 8014f78:	e6e0      	b.n	8014d3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8014f7a:	2500      	movs	r5, #0
 8014f7c:	e7cb      	b.n	8014f16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8014f7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014f80:	3501      	adds	r5, #1
 8014f82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f84:	429d      	cmp	r5, r3
 8014f86:	f6bf af74 	bge.w	8014e72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014f8a:	4659      	mov	r1, fp
 8014f8c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014f8e:	f7fa faf3 	bl	800f578 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014f92:	4604      	mov	r4, r0
 8014f94:	b110      	cbz	r0, 8014f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8014f96:	280a      	cmp	r0, #10
 8014f98:	d1f2      	bne.n	8014f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8014f9a:	e769      	b.n	8014e70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014f9c:	2400      	movs	r4, #0
 8014f9e:	e768      	b.n	8014e72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014fa0:	f1bb 0f00 	cmp.w	fp, #0
 8014fa4:	f43f af59 	beq.w	8014e5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8014fa8:	e774      	b.n	8014e94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08014faa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014faa:	b530      	push	{r4, r5, lr}
 8014fac:	8ac4      	ldrh	r4, [r0, #22]
 8014fae:	8b45      	ldrh	r5, [r0, #26]
 8014fb0:	8343      	strh	r3, [r0, #26]
 8014fb2:	442c      	add	r4, r5
 8014fb4:	1ae4      	subs	r4, r4, r3
 8014fb6:	8b83      	ldrh	r3, [r0, #28]
 8014fb8:	82c4      	strh	r4, [r0, #22]
 8014fba:	8b04      	ldrh	r4, [r0, #24]
 8014fbc:	4422      	add	r2, r4
 8014fbe:	440c      	add	r4, r1
 8014fc0:	1a59      	subs	r1, r3, r1
 8014fc2:	83c2      	strh	r2, [r0, #30]
 8014fc4:	8304      	strh	r4, [r0, #24]
 8014fc6:	8381      	strh	r1, [r0, #28]
 8014fc8:	bd30      	pop	{r4, r5, pc}

08014fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8014fca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fce:	4604      	mov	r4, r0
 8014fd0:	8a47      	ldrh	r7, [r0, #18]
 8014fd2:	68c0      	ldr	r0, [r0, #12]
 8014fd4:	b085      	sub	sp, #20
 8014fd6:	6803      	ldr	r3, [r0, #0]
 8014fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fda:	4798      	blx	r3
 8014fdc:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8014fe0:	7a63      	ldrb	r3, [r4, #9]
 8014fe2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8014fe6:	3b01      	subs	r3, #1
 8014fe8:	42b7      	cmp	r7, r6
 8014fea:	bfac      	ite	ge
 8014fec:	f04f 0900 	movge.w	r9, #0
 8014ff0:	f04f 0901 	movlt.w	r9, #1
 8014ff4:	2b05      	cmp	r3, #5
 8014ff6:	d804      	bhi.n	8015002 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8014ff8:	e8df f003 	tbb	[pc, r3]
 8014ffc:	470f0854 	.word	0x470f0854
 8015000:	4c4c      	.short	0x4c4c
 8015002:	2500      	movs	r5, #0
 8015004:	46a9      	mov	r9, r5
 8015006:	462e      	mov	r6, r5
 8015008:	462f      	mov	r7, r5
 801500a:	e00e      	b.n	801502a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801500c:	42b7      	cmp	r7, r6
 801500e:	f04f 0500 	mov.w	r5, #0
 8015012:	bfb4      	ite	lt
 8015014:	2600      	movlt	r6, #0
 8015016:	2601      	movge	r6, #1
 8015018:	e7f6      	b.n	8015008 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801501a:	42b7      	cmp	r7, r6
 801501c:	464d      	mov	r5, r9
 801501e:	f04f 0900 	mov.w	r9, #0
 8015022:	bfb4      	ite	lt
 8015024:	2600      	movlt	r6, #0
 8015026:	2601      	movge	r6, #1
 8015028:	464f      	mov	r7, r9
 801502a:	f04f 0800 	mov.w	r8, #0
 801502e:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015032:	f8a4 8018 	strh.w	r8, [r4, #24]
 8015036:	f8cd 8004 	str.w	r8, [sp, #4]
 801503a:	2300      	movs	r3, #0
 801503c:	9303      	str	r3, [sp, #12]
 801503e:	8823      	ldrh	r3, [r4, #0]
 8015040:	2b20      	cmp	r3, #32
 8015042:	d033      	beq.n	80150ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015044:	f242 010b 	movw	r1, #8203	; 0x200b
 8015048:	1a5a      	subs	r2, r3, r1
 801504a:	f1d2 0a00 	rsbs	sl, r2, #0
 801504e:	eb4a 0a02 	adc.w	sl, sl, r2
 8015052:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8015056:	4293      	cmp	r3, r2
 8015058:	d008      	beq.n	801506c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801505a:	428b      	cmp	r3, r1
 801505c:	9a01      	ldr	r2, [sp, #4]
 801505e:	bf0e      	itee	eq
 8015060:	f04f 0a01 	moveq.w	sl, #1
 8015064:	461a      	movne	r2, r3
 8015066:	f04f 0a00 	movne.w	sl, #0
 801506a:	9201      	str	r2, [sp, #4]
 801506c:	ab03      	add	r3, sp, #12
 801506e:	68e2      	ldr	r2, [r4, #12]
 8015070:	7a21      	ldrb	r1, [r4, #8]
 8015072:	6860      	ldr	r0, [r4, #4]
 8015074:	f002 fd66 	bl	8017b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015078:	8020      	strh	r0, [r4, #0]
 801507a:	b9d8      	cbnz	r0, 80150b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801507c:	8ba2      	ldrh	r2, [r4, #28]
 801507e:	2300      	movs	r3, #0
 8015080:	4611      	mov	r1, r2
 8015082:	4620      	mov	r0, r4
 8015084:	f7ff ff91 	bl	8014faa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015088:	e06e      	b.n	8015168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801508a:	2500      	movs	r5, #0
 801508c:	2701      	movs	r7, #1
 801508e:	46a9      	mov	r9, r5
 8015090:	462e      	mov	r6, r5
 8015092:	e7ca      	b.n	801502a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015094:	42b7      	cmp	r7, r6
 8015096:	f04f 0500 	mov.w	r5, #0
 801509a:	bfb4      	ite	lt
 801509c:	2700      	movlt	r7, #0
 801509e:	2701      	movge	r7, #1
 80150a0:	462e      	mov	r6, r5
 80150a2:	e7c2      	b.n	801502a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80150a4:	2500      	movs	r5, #0
 80150a6:	2601      	movs	r6, #1
 80150a8:	46a9      	mov	r9, r5
 80150aa:	e7ad      	b.n	8015008 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80150ac:	9301      	str	r3, [sp, #4]
 80150ae:	f04f 0a01 	mov.w	sl, #1
 80150b2:	e7db      	b.n	801506c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80150b4:	8b63      	ldrh	r3, [r4, #26]
 80150b6:	280a      	cmp	r0, #10
 80150b8:	f103 0301 	add.w	r3, r3, #1
 80150bc:	8363      	strh	r3, [r4, #26]
 80150be:	d0dd      	beq.n	801507c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80150c0:	9a03      	ldr	r2, [sp, #12]
 80150c2:	bb62      	cbnz	r2, 801511e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80150c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80150c8:	4298      	cmp	r0, r3
 80150ca:	d003      	beq.n	80150d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80150cc:	f242 030b 	movw	r3, #8203	; 0x200b
 80150d0:	4298      	cmp	r0, r3
 80150d2:	d1b2      	bne.n	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80150d4:	8823      	ldrh	r3, [r4, #0]
 80150d6:	8ba1      	ldrh	r1, [r4, #28]
 80150d8:	2b20      	cmp	r3, #32
 80150da:	d003      	beq.n	80150e4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80150dc:	f242 000b 	movw	r0, #8203	; 0x200b
 80150e0:	4283      	cmp	r3, r0
 80150e2:	d131      	bne.n	8015148 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80150e4:	f1ba 0f00 	cmp.w	sl, #0
 80150e8:	bf0a      	itet	eq
 80150ea:	4688      	moveq	r8, r1
 80150ec:	4650      	movne	r0, sl
 80150ee:	2001      	moveq	r0, #1
 80150f0:	440a      	add	r2, r1
 80150f2:	8b23      	ldrh	r3, [r4, #24]
 80150f4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80150f8:	b292      	uxth	r2, r2
 80150fa:	83a2      	strh	r2, [r4, #28]
 80150fc:	4413      	add	r3, r2
 80150fe:	f1b9 0f00 	cmp.w	r9, #0
 8015102:	d102      	bne.n	801510a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015104:	2d00      	cmp	r5, #0
 8015106:	d042      	beq.n	801518e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8015108:	b300      	cbz	r0, 801514c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801510a:	8c21      	ldrh	r1, [r4, #32]
 801510c:	4419      	add	r1, r3
 801510e:	458c      	cmp	ip, r1
 8015110:	da37      	bge.n	8015182 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015112:	8ae1      	ldrh	r1, [r4, #22]
 8015114:	2900      	cmp	r1, #0
 8015116:	d034      	beq.n	8015182 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015118:	4563      	cmp	r3, ip
 801511a:	dd8e      	ble.n	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801511c:	e01d      	b.n	801515a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801511e:	8893      	ldrh	r3, [r2, #4]
 8015120:	9901      	ldr	r1, [sp, #4]
 8015122:	8023      	strh	r3, [r4, #0]
 8015124:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8015128:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801512c:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8015130:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015134:	ea4b 0b00 	orr.w	fp, fp, r0
 8015138:	68e0      	ldr	r0, [r4, #12]
 801513a:	6803      	ldr	r3, [r0, #0]
 801513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801513e:	4798      	blx	r3
 8015140:	eb0b 0200 	add.w	r2, fp, r0
 8015144:	b292      	uxth	r2, r2
 8015146:	e7c5      	b.n	80150d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015148:	2000      	movs	r0, #0
 801514a:	e7d1      	b.n	80150f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801514c:	4563      	cmp	r3, ip
 801514e:	f77f af74 	ble.w	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015152:	8ae3      	ldrh	r3, [r4, #22]
 8015154:	2b00      	cmp	r3, #0
 8015156:	f43f af70 	beq.w	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801515a:	2301      	movs	r3, #1
 801515c:	8c22      	ldrh	r2, [r4, #32]
 801515e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8015162:	8be3      	ldrh	r3, [r4, #30]
 8015164:	4413      	add	r3, r2
 8015166:	83e3      	strh	r3, [r4, #30]
 8015168:	68e0      	ldr	r0, [r4, #12]
 801516a:	6803      	ldr	r3, [r0, #0]
 801516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801516e:	4798      	blx	r3
 8015170:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015174:	4418      	add	r0, r3
 8015176:	8a63      	ldrh	r3, [r4, #18]
 8015178:	1a18      	subs	r0, r3, r0
 801517a:	8260      	strh	r0, [r4, #18]
 801517c:	b005      	add	sp, #20
 801517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015182:	2300      	movs	r3, #0
 8015184:	4611      	mov	r1, r2
 8015186:	4620      	mov	r0, r4
 8015188:	f7ff ff0f 	bl	8014faa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801518c:	e755      	b.n	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801518e:	4563      	cmp	r3, ip
 8015190:	dd14      	ble.n	80151bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8015192:	b117      	cbz	r7, 801519a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8015194:	2301      	movs	r3, #1
 8015196:	460a      	mov	r2, r1
 8015198:	e772      	b.n	8015080 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801519a:	2e00      	cmp	r6, #0
 801519c:	f43f af4d 	beq.w	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80151a0:	2800      	cmp	r0, #0
 80151a2:	f47f af4a 	bne.w	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80151a6:	f1ba 0f00 	cmp.w	sl, #0
 80151aa:	d002      	beq.n	80151b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80151ac:	2301      	movs	r3, #1
 80151ae:	4642      	mov	r2, r8
 80151b0:	e767      	b.n	8015082 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80151b2:	8ae3      	ldrh	r3, [r4, #22]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	f43f af40 	beq.w	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80151ba:	e7d5      	b.n	8015168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80151bc:	2800      	cmp	r0, #0
 80151be:	f47f af3c 	bne.w	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80151c2:	f1ba 0f00 	cmp.w	sl, #0
 80151c6:	f43f af38 	beq.w	801503a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80151ca:	2301      	movs	r3, #1
 80151cc:	4642      	mov	r2, r8
 80151ce:	e7da      	b.n	8015186 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080151d0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80151d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151d2:	4605      	mov	r5, r0
 80151d4:	b08f      	sub	sp, #60	; 0x3c
 80151d6:	4617      	mov	r7, r2
 80151d8:	461c      	mov	r4, r3
 80151da:	460e      	mov	r6, r1
 80151dc:	b1d1      	cbz	r1, 8015214 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	4620      	mov	r0, r4
 80151e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151e4:	4798      	blx	r3
 80151e6:	4240      	negs	r0, r0
 80151e8:	9603      	str	r6, [sp, #12]
 80151ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151ee:	b200      	sxth	r0, r0
 80151f0:	9700      	str	r7, [sp, #0]
 80151f2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80151f6:	4629      	mov	r1, r5
 80151f8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80151fc:	2401      	movs	r4, #1
 80151fe:	a805      	add	r0, sp, #20
 8015200:	f7ff fcbe 	bl	8014b80 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015204:	a805      	add	r0, sp, #20
 8015206:	f7ff fee0 	bl	8014fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801520a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801520e:	b163      	cbz	r3, 801522a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015210:	3401      	adds	r4, #1
 8015212:	e7f7      	b.n	8015204 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015214:	2401      	movs	r4, #1
 8015216:	f002 fd61 	bl	8017cdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801521a:	280a      	cmp	r0, #10
 801521c:	4628      	mov	r0, r5
 801521e:	bf08      	it	eq
 8015220:	3401      	addeq	r4, #1
 8015222:	f002 fd5b 	bl	8017cdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015226:	2800      	cmp	r0, #0
 8015228:	d1f7      	bne.n	801521a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801522a:	b2a0      	uxth	r0, r4
 801522c:	b00f      	add	sp, #60	; 0x3c
 801522e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015230 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015234:	b0e3      	sub	sp, #396	; 0x18c
 8015236:	461c      	mov	r4, r3
 8015238:	4683      	mov	fp, r0
 801523a:	4688      	mov	r8, r1
 801523c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801523e:	2b00      	cmp	r3, #0
 8015240:	f000 810f 	beq.w	8015462 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015244:	6823      	ldr	r3, [r4, #0]
 8015246:	2b00      	cmp	r3, #0
 8015248:	f000 810b 	beq.w	8015462 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801524c:	7ba3      	ldrb	r3, [r4, #14]
 801524e:	2b00      	cmp	r3, #0
 8015250:	f000 8107 	beq.w	8015462 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015254:	ad0a      	add	r5, sp, #40	; 0x28
 8015256:	6810      	ldr	r0, [r2, #0]
 8015258:	6851      	ldr	r1, [r2, #4]
 801525a:	462b      	mov	r3, r5
 801525c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015260:	c303      	stmia	r3!, {r0, r1}
 8015262:	2100      	movs	r1, #0
 8015264:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015268:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801526c:	4628      	mov	r0, r5
 801526e:	910c      	str	r1, [sp, #48]	; 0x30
 8015270:	a90c      	add	r1, sp, #48	; 0x30
 8015272:	79a2      	ldrb	r2, [r4, #6]
 8015274:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015278:	f7ff fd01 	bl	8014c7e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801527c:	a90c      	add	r1, sp, #48	; 0x30
 801527e:	79a2      	ldrb	r2, [r4, #6]
 8015280:	4608      	mov	r0, r1
 8015282:	f7ff fcfc 	bl	8014c7e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015286:	a817      	add	r0, sp, #92	; 0x5c
 8015288:	f002 f8fb 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 801528c:	6820      	ldr	r0, [r4, #0]
 801528e:	6803      	ldr	r3, [r0, #0]
 8015290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015292:	4798      	blx	r3
 8015294:	4606      	mov	r6, r0
 8015296:	6820      	ldr	r0, [r4, #0]
 8015298:	6803      	ldr	r3, [r0, #0]
 801529a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801529c:	4798      	blx	r3
 801529e:	4633      	mov	r3, r6
 80152a0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80152a2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80152a4:	9000      	str	r0, [sp, #0]
 80152a6:	a817      	add	r0, sp, #92	; 0x5c
 80152a8:	f002 f946 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80152ac:	6820      	ldr	r0, [r4, #0]
 80152ae:	f894 a004 	ldrb.w	sl, [r4, #4]
 80152b2:	6803      	ldr	r3, [r0, #0]
 80152b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152b6:	4798      	blx	r3
 80152b8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80152bc:	6823      	ldr	r3, [r4, #0]
 80152be:	4607      	mov	r7, r0
 80152c0:	4406      	add	r6, r0
 80152c2:	a830      	add	r0, sp, #192	; 0xc0
 80152c4:	f893 9009 	ldrb.w	r9, [r3, #9]
 80152c8:	f002 f8db 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 80152cc:	7c23      	ldrb	r3, [r4, #16]
 80152ce:	b17b      	cbz	r3, 80152f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80152d0:	6820      	ldr	r0, [r4, #0]
 80152d2:	6803      	ldr	r3, [r0, #0]
 80152d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80152d6:	4798      	blx	r3
 80152d8:	9009      	str	r0, [sp, #36]	; 0x24
 80152da:	6820      	ldr	r0, [r4, #0]
 80152dc:	6802      	ldr	r2, [r0, #0]
 80152de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80152e0:	4790      	blx	r2
 80152e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e4:	9000      	str	r0, [sp, #0]
 80152e6:	a830      	add	r0, sp, #192	; 0xc0
 80152e8:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80152ea:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80152ec:	f002 f924 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80152f0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80152f4:	a80e      	add	r0, sp, #56	; 0x38
 80152f6:	7be2      	ldrb	r2, [r4, #15]
 80152f8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80152fc:	1a8a      	subs	r2, r1, r2
 80152fe:	7c21      	ldrb	r1, [r4, #16]
 8015300:	9103      	str	r1, [sp, #12]
 8015302:	b292      	uxth	r2, r2
 8015304:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015308:	9102      	str	r1, [sp, #8]
 801530a:	6821      	ldr	r1, [r4, #0]
 801530c:	9101      	str	r1, [sp, #4]
 801530e:	7961      	ldrb	r1, [r4, #5]
 8015310:	9100      	str	r1, [sp, #0]
 8015312:	a930      	add	r1, sp, #192	; 0xc0
 8015314:	f7ff fc34 	bl	8014b80 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015318:	2e00      	cmp	r6, #0
 801531a:	dc5b      	bgt.n	80153d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801531c:	af17      	add	r7, sp, #92	; 0x5c
 801531e:	f04f 0900 	mov.w	r9, #0
 8015322:	7c23      	ldrb	r3, [r4, #16]
 8015324:	2b00      	cmp	r3, #0
 8015326:	f000 80ae 	beq.w	8015486 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801532a:	a80e      	add	r0, sp, #56	; 0x38
 801532c:	f7ff fe4d 	bl	8014fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015330:	f1ba 0f00 	cmp.w	sl, #0
 8015334:	f000 80a2 	beq.w	801547c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015338:	7c23      	ldrb	r3, [r4, #16]
 801533a:	2264      	movs	r2, #100	; 0x64
 801533c:	4639      	mov	r1, r7
 801533e:	a849      	add	r0, sp, #292	; 0x124
 8015340:	9309      	str	r3, [sp, #36]	; 0x24
 8015342:	f00b ff59 	bl	80211f8 <memcpy>
 8015346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 80a4 	beq.w	8015496 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801534e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8015352:	7922      	ldrb	r2, [r4, #4]
 8015354:	2a01      	cmp	r2, #1
 8015356:	f040 8087 	bne.w	8015468 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801535a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801535e:	1ac0      	subs	r0, r0, r3
 8015360:	2302      	movs	r3, #2
 8015362:	fb90 f0f3 	sdiv	r0, r0, r3
 8015366:	b200      	sxth	r0, r0
 8015368:	7c23      	ldrb	r3, [r4, #16]
 801536a:	2b00      	cmp	r3, #0
 801536c:	f000 8088 	beq.w	8015480 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8015370:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8015374:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8015378:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801537c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015380:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8015384:	2100      	movs	r1, #0
 8015386:	4410      	add	r0, r2
 8015388:	4642      	mov	r2, r8
 801538a:	b200      	sxth	r0, r0
 801538c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015390:	9000      	str	r0, [sp, #0]
 8015392:	4658      	mov	r0, fp
 8015394:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015398:	f7ff fca2 	bl	8014ce0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801539c:	2800      	cmp	r0, #0
 801539e:	d160      	bne.n	8015462 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80153a0:	b2b2      	uxth	r2, r6
 80153a2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80153a6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80153aa:	4413      	add	r3, r2
 80153ac:	1a8a      	subs	r2, r1, r2
 80153ae:	b21b      	sxth	r3, r3
 80153b0:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80153b4:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 80153b8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80153bc:	2a00      	cmp	r2, #0
 80153be:	d150      	bne.n	8015462 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80153c0:	6822      	ldr	r2, [r4, #0]
 80153c2:	8869      	ldrh	r1, [r5, #2]
 80153c4:	7a12      	ldrb	r2, [r2, #8]
 80153c6:	1a9b      	subs	r3, r3, r2
 80153c8:	88ea      	ldrh	r2, [r5, #6]
 80153ca:	440a      	add	r2, r1
 80153cc:	b212      	sxth	r2, r2
 80153ce:	4293      	cmp	r3, r2
 80153d0:	dda7      	ble.n	8015322 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80153d2:	e046      	b.n	8015462 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80153d4:	7c23      	ldrb	r3, [r4, #16]
 80153d6:	444f      	add	r7, r9
 80153d8:	b1c3      	cbz	r3, 801540c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80153da:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80153de:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80153e2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80153e6:	443b      	add	r3, r7
 80153e8:	4293      	cmp	r3, r2
 80153ea:	da97      	bge.n	801531c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80153ec:	a80e      	add	r0, sp, #56	; 0x38
 80153ee:	f7ff fdec 	bl	8014fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80153f2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80153f6:	3b01      	subs	r3, #1
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	454b      	cmp	r3, r9
 80153fc:	9309      	str	r3, [sp, #36]	; 0x24
 80153fe:	d021      	beq.n	8015444 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015400:	7961      	ldrb	r1, [r4, #5]
 8015402:	a817      	add	r0, sp, #92	; 0x5c
 8015404:	f7fa f8b8 	bl	800f578 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801540a:	e7f4      	b.n	80153f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801540c:	fa1f f986 	uxth.w	r9, r6
 8015410:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015414:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015418:	443b      	add	r3, r7
 801541a:	4293      	cmp	r3, r2
 801541c:	f6bf af7e 	bge.w	801531c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015420:	a817      	add	r0, sp, #92	; 0x5c
 8015422:	f002 fc5b 	bl	8017cdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015426:	b1e0      	cbz	r0, 8015462 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015428:	280a      	cmp	r0, #10
 801542a:	d1f1      	bne.n	8015410 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801542c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015430:	444b      	add	r3, r9
 8015432:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015436:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801543a:	eba3 0309 	sub.w	r3, r3, r9
 801543e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015442:	e7e5      	b.n	8015410 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015444:	b2b3      	uxth	r3, r6
 8015446:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801544a:	441a      	add	r2, r3
 801544c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015450:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8015454:	1ad3      	subs	r3, r2, r3
 8015456:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801545a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801545e:	2b00      	cmp	r3, #0
 8015460:	d1bd      	bne.n	80153de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015462:	b063      	add	sp, #396	; 0x18c
 8015464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015468:	2a02      	cmp	r2, #2
 801546a:	d105      	bne.n	8015478 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801546c:	7be2      	ldrb	r2, [r4, #15]
 801546e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8015472:	1a80      	subs	r0, r0, r2
 8015474:	1ac0      	subs	r0, r0, r3
 8015476:	e776      	b.n	8015366 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015478:	2000      	movs	r0, #0
 801547a:	e775      	b.n	8015368 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801547c:	7be0      	ldrb	r0, [r4, #15]
 801547e:	e773      	b.n	8015368 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015480:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015484:	e776      	b.n	8015374 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015486:	f1ba 0f00 	cmp.w	sl, #0
 801548a:	d0f7      	beq.n	801547c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801548c:	2264      	movs	r2, #100	; 0x64
 801548e:	4639      	mov	r1, r7
 8015490:	a849      	add	r0, sp, #292	; 0x124
 8015492:	f00b feb1 	bl	80211f8 <memcpy>
 8015496:	2300      	movs	r3, #0
 8015498:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801549c:	6821      	ldr	r1, [r4, #0]
 801549e:	a849      	add	r0, sp, #292	; 0x124
 80154a0:	f7ff fbb1 	bl	8014c06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80154a4:	b203      	sxth	r3, r0
 80154a6:	e754      	b.n	8015352 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080154a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80154a8:	2b03      	cmp	r3, #3
 80154aa:	d818      	bhi.n	80154de <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80154ac:	e8df f003 	tbb	[pc, r3]
 80154b0:	130d0602 	.word	0x130d0602
 80154b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80154b8:	1850      	adds	r0, r2, r1
 80154ba:	4770      	bx	lr
 80154bc:	8803      	ldrh	r3, [r0, #0]
 80154be:	8880      	ldrh	r0, [r0, #4]
 80154c0:	4418      	add	r0, r3
 80154c2:	b200      	sxth	r0, r0
 80154c4:	1a80      	subs	r0, r0, r2
 80154c6:	3801      	subs	r0, #1
 80154c8:	4770      	bx	lr
 80154ca:	8803      	ldrh	r3, [r0, #0]
 80154cc:	8880      	ldrh	r0, [r0, #4]
 80154ce:	4418      	add	r0, r3
 80154d0:	b200      	sxth	r0, r0
 80154d2:	1a40      	subs	r0, r0, r1
 80154d4:	e7f7      	b.n	80154c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80154d6:	f9b0 0000 	ldrsh.w	r0, [r0]
 80154da:	4410      	add	r0, r2
 80154dc:	4770      	bx	lr
 80154de:	2000      	movs	r0, #0
 80154e0:	4770      	bx	lr

080154e2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80154e2:	2b03      	cmp	r3, #3
 80154e4:	d817      	bhi.n	8015516 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80154e6:	e8df f003 	tbb	[pc, r3]
 80154ea:	0602      	.short	0x0602
 80154ec:	1009      	.short	0x1009
 80154ee:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80154f2:	1850      	adds	r0, r2, r1
 80154f4:	4770      	bx	lr
 80154f6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80154fa:	e7fa      	b.n	80154f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80154fc:	8843      	ldrh	r3, [r0, #2]
 80154fe:	88c0      	ldrh	r0, [r0, #6]
 8015500:	4418      	add	r0, r3
 8015502:	b200      	sxth	r0, r0
 8015504:	1a80      	subs	r0, r0, r2
 8015506:	3801      	subs	r0, #1
 8015508:	4770      	bx	lr
 801550a:	8843      	ldrh	r3, [r0, #2]
 801550c:	88c0      	ldrh	r0, [r0, #6]
 801550e:	4418      	add	r0, r3
 8015510:	b200      	sxth	r0, r0
 8015512:	1a40      	subs	r0, r0, r1
 8015514:	e7f7      	b.n	8015506 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015516:	2000      	movs	r0, #0
 8015518:	4770      	bx	lr
	...

0801551c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801551c:	4b01      	ldr	r3, [pc, #4]	; (8015524 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801551e:	2200      	movs	r2, #0
 8015520:	601a      	str	r2, [r3, #0]
 8015522:	4770      	bx	lr
 8015524:	20011b44 	.word	0x20011b44

08015528 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015528:	4603      	mov	r3, r0
 801552a:	b1c8      	cbz	r0, 8015560 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801552c:	0c02      	lsrs	r2, r0, #16
 801552e:	0412      	lsls	r2, r2, #16
 8015530:	b9a2      	cbnz	r2, 801555c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015532:	0403      	lsls	r3, r0, #16
 8015534:	2010      	movs	r0, #16
 8015536:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801553a:	bf04      	itt	eq
 801553c:	021b      	lsleq	r3, r3, #8
 801553e:	3008      	addeq	r0, #8
 8015540:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015544:	bf04      	itt	eq
 8015546:	011b      	lsleq	r3, r3, #4
 8015548:	3004      	addeq	r0, #4
 801554a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801554e:	bf04      	itt	eq
 8015550:	009b      	lsleq	r3, r3, #2
 8015552:	3002      	addeq	r0, #2
 8015554:	2b00      	cmp	r3, #0
 8015556:	db04      	blt.n	8015562 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015558:	3001      	adds	r0, #1
 801555a:	4770      	bx	lr
 801555c:	2000      	movs	r0, #0
 801555e:	e7ea      	b.n	8015536 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015560:	2020      	movs	r0, #32
 8015562:	4770      	bx	lr

08015564 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015568:	b087      	sub	sp, #28
 801556a:	4681      	mov	r9, r0
 801556c:	4698      	mov	r8, r3
 801556e:	4610      	mov	r0, r2
 8015570:	460d      	mov	r5, r1
 8015572:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015576:	b981      	cbnz	r1, 801559a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015578:	b14b      	cbz	r3, 801558e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801557a:	460b      	mov	r3, r1
 801557c:	464a      	mov	r2, r9
 801557e:	4641      	mov	r1, r8
 8015580:	e9cd 4700 	strd	r4, r7, [sp]
 8015584:	f7ff ffee 	bl	8015564 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015588:	b007      	add	sp, #28
 801558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801558e:	f04f 33ff 	mov.w	r3, #4294967295
 8015592:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015596:	603b      	str	r3, [r7, #0]
 8015598:	e7f6      	b.n	8015588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801559a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801559e:	d107      	bne.n	80155b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80155a0:	fb09 f602 	mul.w	r6, r9, r2
 80155a4:	fbb6 f0f4 	udiv	r0, r6, r4
 80155a8:	fb04 6610 	mls	r6, r4, r0, r6
 80155ac:	603e      	str	r6, [r7, #0]
 80155ae:	e7eb      	b.n	8015588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80155b0:	2601      	movs	r6, #1
 80155b2:	fa09 fb01 	lsl.w	fp, r9, r1
 80155b6:	408e      	lsls	r6, r1
 80155b8:	fbbb f3f4 	udiv	r3, fp, r4
 80155bc:	3e01      	subs	r6, #1
 80155be:	9302      	str	r3, [sp, #8]
 80155c0:	fb0a f303 	mul.w	r3, sl, r3
 80155c4:	4016      	ands	r6, r2
 80155c6:	9303      	str	r3, [sp, #12]
 80155c8:	4630      	mov	r0, r6
 80155ca:	f7ff ffad 	bl	8015528 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80155ce:	464a      	mov	r2, r9
 80155d0:	460b      	mov	r3, r1
 80155d2:	4601      	mov	r1, r0
 80155d4:	4630      	mov	r0, r6
 80155d6:	e9cd 4700 	strd	r4, r7, [sp]
 80155da:	f7ff ffc3 	bl	8015564 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80155de:	9b02      	ldr	r3, [sp, #8]
 80155e0:	4606      	mov	r6, r0
 80155e2:	eb05 0108 	add.w	r1, r5, r8
 80155e6:	fb04 bb13 	mls	fp, r4, r3, fp
 80155ea:	4658      	mov	r0, fp
 80155ec:	f7ff ff9c 	bl	8015528 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80155f0:	ab05      	add	r3, sp, #20
 80155f2:	465a      	mov	r2, fp
 80155f4:	e9cd 4300 	strd	r4, r3, [sp]
 80155f8:	4603      	mov	r3, r0
 80155fa:	4650      	mov	r0, sl
 80155fc:	f7ff ffb2 	bl	8015564 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015600:	6839      	ldr	r1, [r7, #0]
 8015602:	9a05      	ldr	r2, [sp, #20]
 8015604:	9b03      	ldr	r3, [sp, #12]
 8015606:	4411      	add	r1, r2
 8015608:	fbb1 f2f4 	udiv	r2, r1, r4
 801560c:	18d3      	adds	r3, r2, r3
 801560e:	fb04 1412 	mls	r4, r4, r2, r1
 8015612:	441e      	add	r6, r3
 8015614:	603c      	str	r4, [r7, #0]
 8015616:	4430      	add	r0, r6
 8015618:	e7b6      	b.n	8015588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801561a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801561a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801561e:	b085      	sub	sp, #20
 8015620:	f1b0 0900 	subs.w	r9, r0, #0
 8015624:	461d      	mov	r5, r3
 8015626:	4617      	mov	r7, r2
 8015628:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801562a:	bfbb      	ittet	lt
 801562c:	f1c9 0900 	rsblt	r9, r9, #0
 8015630:	f04f 36ff 	movlt.w	r6, #4294967295
 8015634:	2601      	movge	r6, #1
 8015636:	6823      	ldrlt	r3, [r4, #0]
 8015638:	bfbc      	itt	lt
 801563a:	425b      	neglt	r3, r3
 801563c:	6023      	strlt	r3, [r4, #0]
 801563e:	2a00      	cmp	r2, #0
 8015640:	da04      	bge.n	801564c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015642:	6823      	ldr	r3, [r4, #0]
 8015644:	4257      	negs	r7, r2
 8015646:	4276      	negs	r6, r6
 8015648:	425b      	negs	r3, r3
 801564a:	6023      	str	r3, [r4, #0]
 801564c:	2d00      	cmp	r5, #0
 801564e:	4638      	mov	r0, r7
 8015650:	bfba      	itte	lt
 8015652:	426d      	neglt	r5, r5
 8015654:	f04f 38ff 	movlt.w	r8, #4294967295
 8015658:	f04f 0801 	movge.w	r8, #1
 801565c:	f7ff ff64 	bl	8015528 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015660:	ab03      	add	r3, sp, #12
 8015662:	463a      	mov	r2, r7
 8015664:	e9cd 5300 	strd	r5, r3, [sp]
 8015668:	4603      	mov	r3, r0
 801566a:	4648      	mov	r0, r9
 801566c:	f7ff ff7a 	bl	8015564 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015670:	6823      	ldr	r3, [r4, #0]
 8015672:	9a03      	ldr	r2, [sp, #12]
 8015674:	4546      	cmp	r6, r8
 8015676:	441a      	add	r2, r3
 8015678:	fb92 f3f5 	sdiv	r3, r2, r5
 801567c:	4418      	add	r0, r3
 801567e:	fb05 2313 	mls	r3, r5, r3, r2
 8015682:	bf18      	it	ne
 8015684:	4240      	negne	r0, r0
 8015686:	1c72      	adds	r2, r6, #1
 8015688:	6023      	str	r3, [r4, #0]
 801568a:	d105      	bne.n	8015698 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801568c:	2b00      	cmp	r3, #0
 801568e:	f1c3 0200 	rsb	r2, r3, #0
 8015692:	db0b      	blt.n	80156ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015694:	6022      	str	r2, [r4, #0]
 8015696:	e006      	b.n	80156a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015698:	2e01      	cmp	r6, #1
 801569a:	d104      	bne.n	80156a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801569c:	2b00      	cmp	r3, #0
 801569e:	da02      	bge.n	80156a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80156a0:	442b      	add	r3, r5
 80156a2:	3801      	subs	r0, #1
 80156a4:	6023      	str	r3, [r4, #0]
 80156a6:	b005      	add	sp, #20
 80156a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156ac:	3801      	subs	r0, #1
 80156ae:	1b52      	subs	r2, r2, r5
 80156b0:	e7f0      	b.n	8015694 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080156b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80156b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80156b8:	4c1c      	ldr	r4, [pc, #112]	; (801572c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80156ba:	4605      	mov	r5, r0
 80156bc:	6807      	ldr	r7, [r0, #0]
 80156be:	69a3      	ldr	r3, [r4, #24]
 80156c0:	b92b      	cbnz	r3, 80156ce <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80156c2:	6840      	ldr	r0, [r0, #4]
 80156c4:	e9c5 7000 	strd	r7, r0, [r5]
 80156c8:	b004      	add	sp, #16
 80156ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ce:	f04f 0802 	mov.w	r8, #2
 80156d2:	68a2      	ldr	r2, [r4, #8]
 80156d4:	ae04      	add	r6, sp, #16
 80156d6:	6820      	ldr	r0, [r4, #0]
 80156d8:	fb93 f1f8 	sdiv	r1, r3, r8
 80156dc:	440a      	add	r2, r1
 80156de:	69e1      	ldr	r1, [r4, #28]
 80156e0:	f846 2d04 	str.w	r2, [r6, #-4]!
 80156e4:	463a      	mov	r2, r7
 80156e6:	9600      	str	r6, [sp, #0]
 80156e8:	f7ff ff97 	bl	801561a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80156ec:	69a3      	ldr	r3, [r4, #24]
 80156ee:	4607      	mov	r7, r0
 80156f0:	686a      	ldr	r2, [r5, #4]
 80156f2:	6a21      	ldr	r1, [r4, #32]
 80156f4:	9600      	str	r6, [sp, #0]
 80156f6:	6860      	ldr	r0, [r4, #4]
 80156f8:	f7ff ff8f 	bl	801561a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80156fc:	69a3      	ldr	r3, [r4, #24]
 80156fe:	6962      	ldr	r2, [r4, #20]
 8015700:	4407      	add	r7, r0
 8015702:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015704:	9600      	str	r6, [sp, #0]
 8015706:	68e0      	ldr	r0, [r4, #12]
 8015708:	fb93 f8f8 	sdiv	r8, r3, r8
 801570c:	4442      	add	r2, r8
 801570e:	9203      	str	r2, [sp, #12]
 8015710:	682a      	ldr	r2, [r5, #0]
 8015712:	f7ff ff82 	bl	801561a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015716:	4680      	mov	r8, r0
 8015718:	9600      	str	r6, [sp, #0]
 801571a:	69a3      	ldr	r3, [r4, #24]
 801571c:	686a      	ldr	r2, [r5, #4]
 801571e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015720:	6920      	ldr	r0, [r4, #16]
 8015722:	f7ff ff7a 	bl	801561a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015726:	4440      	add	r0, r8
 8015728:	e7cc      	b.n	80156c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801572a:	bf00      	nop
 801572c:	20011b48 	.word	0x20011b48

08015730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015730:	4b07      	ldr	r3, [pc, #28]	; (8015750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	2b01      	cmp	r3, #1
 8015736:	d109      	bne.n	801574c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015738:	f9b1 3000 	ldrsh.w	r3, [r1]
 801573c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015740:	8003      	strh	r3, [r0, #0]
 8015742:	4b04      	ldr	r3, [pc, #16]	; (8015754 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015744:	881b      	ldrh	r3, [r3, #0]
 8015746:	3b01      	subs	r3, #1
 8015748:	1a9b      	subs	r3, r3, r2
 801574a:	800b      	strh	r3, [r1, #0]
 801574c:	4770      	bx	lr
 801574e:	bf00      	nop
 8015750:	20011b32 	.word	0x20011b32
 8015754:	20011b2e 	.word	0x20011b2e

08015758 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015758:	4b07      	ldr	r3, [pc, #28]	; (8015778 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801575a:	b510      	push	{r4, lr}
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	2b01      	cmp	r3, #1
 8015760:	d108      	bne.n	8015774 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015762:	4b06      	ldr	r3, [pc, #24]	; (801577c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015764:	880c      	ldrh	r4, [r1, #0]
 8015766:	881b      	ldrh	r3, [r3, #0]
 8015768:	f9b0 2000 	ldrsh.w	r2, [r0]
 801576c:	3b01      	subs	r3, #1
 801576e:	1b1b      	subs	r3, r3, r4
 8015770:	8003      	strh	r3, [r0, #0]
 8015772:	800a      	strh	r2, [r1, #0]
 8015774:	bd10      	pop	{r4, pc}
 8015776:	bf00      	nop
 8015778:	20011b32 	.word	0x20011b32
 801577c:	20011b2e 	.word	0x20011b2e

08015780 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015780:	4b0a      	ldr	r3, [pc, #40]	; (80157ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015782:	b510      	push	{r4, lr}
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	2b01      	cmp	r3, #1
 8015788:	d10e      	bne.n	80157a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801578a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801578e:	8843      	ldrh	r3, [r0, #2]
 8015790:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015794:	18ca      	adds	r2, r1, r3
 8015796:	4b06      	ldr	r3, [pc, #24]	; (80157b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015798:	8044      	strh	r4, [r0, #2]
 801579a:	881b      	ldrh	r3, [r3, #0]
 801579c:	1a9b      	subs	r3, r3, r2
 801579e:	8003      	strh	r3, [r0, #0]
 80157a0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80157a4:	8081      	strh	r1, [r0, #4]
 80157a6:	80c3      	strh	r3, [r0, #6]
 80157a8:	bd10      	pop	{r4, pc}
 80157aa:	bf00      	nop
 80157ac:	20011b32 	.word	0x20011b32
 80157b0:	20011b2e 	.word	0x20011b2e

080157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80157b4:	4b08      	ldr	r3, [pc, #32]	; (80157d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	2b01      	cmp	r3, #1
 80157ba:	d10c      	bne.n	80157d6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80157bc:	8803      	ldrh	r3, [r0, #0]
 80157be:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80157c2:	8842      	ldrh	r2, [r0, #2]
 80157c4:	8002      	strh	r2, [r0, #0]
 80157c6:	185a      	adds	r2, r3, r1
 80157c8:	4b04      	ldr	r3, [pc, #16]	; (80157dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80157ca:	881b      	ldrh	r3, [r3, #0]
 80157cc:	1a9b      	subs	r3, r3, r2
 80157ce:	8043      	strh	r3, [r0, #2]
 80157d0:	88c3      	ldrh	r3, [r0, #6]
 80157d2:	80c1      	strh	r1, [r0, #6]
 80157d4:	8083      	strh	r3, [r0, #4]
 80157d6:	4770      	bx	lr
 80157d8:	20011b32 	.word	0x20011b32
 80157dc:	20011b2e 	.word	0x20011b2e

080157e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80157e0:	4b07      	ldr	r3, [pc, #28]	; (8015800 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80157e2:	b510      	push	{r4, lr}
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d108      	bne.n	80157fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80157ea:	f9b1 3000 	ldrsh.w	r3, [r1]
 80157ee:	f9b0 4000 	ldrsh.w	r4, [r0]
 80157f2:	8003      	strh	r3, [r0, #0]
 80157f4:	8893      	ldrh	r3, [r2, #4]
 80157f6:	3b01      	subs	r3, #1
 80157f8:	1b1b      	subs	r3, r3, r4
 80157fa:	800b      	strh	r3, [r1, #0]
 80157fc:	bd10      	pop	{r4, pc}
 80157fe:	bf00      	nop
 8015800:	20011b32 	.word	0x20011b32

08015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015804:	4b0a      	ldr	r3, [pc, #40]	; (8015830 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015806:	460a      	mov	r2, r1
 8015808:	b510      	push	{r4, lr}
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	2b01      	cmp	r3, #1
 801580e:	d10d      	bne.n	801582c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015810:	8881      	ldrh	r1, [r0, #4]
 8015812:	8803      	ldrh	r3, [r0, #0]
 8015814:	440b      	add	r3, r1
 8015816:	4601      	mov	r1, r0
 8015818:	3b01      	subs	r3, #1
 801581a:	f821 3b02 	strh.w	r3, [r1], #2
 801581e:	f7ff ffdf 	bl	80157e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015822:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015826:	88c2      	ldrh	r2, [r0, #6]
 8015828:	80c3      	strh	r3, [r0, #6]
 801582a:	8082      	strh	r2, [r0, #4]
 801582c:	bd10      	pop	{r4, pc}
 801582e:	bf00      	nop
 8015830:	20011b32 	.word	0x20011b32

08015834 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015834:	4b06      	ldr	r3, [pc, #24]	; (8015850 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015836:	2100      	movs	r1, #0
 8015838:	f9b3 2000 	ldrsh.w	r2, [r3]
 801583c:	4b05      	ldr	r3, [pc, #20]	; (8015854 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801583e:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8015842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015846:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801584a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801584e:	4770      	bx	lr
 8015850:	20011b2e 	.word	0x20011b2e
 8015854:	20011b30 	.word	0x20011b30

08015858 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015858:	4b03      	ldr	r3, [pc, #12]	; (8015868 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801585a:	6818      	ldr	r0, [r3, #0]
 801585c:	b110      	cbz	r0, 8015864 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801585e:	6803      	ldr	r3, [r0, #0]
 8015860:	699b      	ldr	r3, [r3, #24]
 8015862:	4718      	bx	r3
 8015864:	4770      	bx	lr
 8015866:	bf00      	nop
 8015868:	20011b78 	.word	0x20011b78

0801586c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801586c:	4770      	bx	lr
	...

08015870 <_ZN8touchgfx11Application4drawEv>:
 8015870:	4b09      	ldr	r3, [pc, #36]	; (8015898 <_ZN8touchgfx11Application4drawEv+0x28>)
 8015872:	b507      	push	{r0, r1, r2, lr}
 8015874:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015878:	2100      	movs	r1, #0
 801587a:	4b08      	ldr	r3, [pc, #32]	; (801589c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801587c:	9100      	str	r1, [sp, #0]
 801587e:	4669      	mov	r1, sp
 8015880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015884:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015888:	f8ad 3006 	strh.w	r3, [sp, #6]
 801588c:	6803      	ldr	r3, [r0, #0]
 801588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015890:	4798      	blx	r3
 8015892:	b003      	add	sp, #12
 8015894:	f85d fb04 	ldr.w	pc, [sp], #4
 8015898:	20011b2e 	.word	0x20011b2e
 801589c:	20011b30 	.word	0x20011b30

080158a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80158a0:	4b03      	ldr	r3, [pc, #12]	; (80158b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80158a2:	6818      	ldr	r0, [r3, #0]
 80158a4:	b110      	cbz	r0, 80158ac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80158a6:	6803      	ldr	r3, [r0, #0]
 80158a8:	69db      	ldr	r3, [r3, #28]
 80158aa:	4718      	bx	r3
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop
 80158b0:	20011b78 	.word	0x20011b78

080158b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80158b4:	4b03      	ldr	r3, [pc, #12]	; (80158c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80158b6:	6818      	ldr	r0, [r3, #0]
 80158b8:	b110      	cbz	r0, 80158c0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80158ba:	6803      	ldr	r3, [r0, #0]
 80158bc:	6a1b      	ldr	r3, [r3, #32]
 80158be:	4718      	bx	r3
 80158c0:	4770      	bx	lr
 80158c2:	bf00      	nop
 80158c4:	20011b78 	.word	0x20011b78

080158c8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80158c8:	2300      	movs	r3, #0
 80158ca:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80158ce:	4770      	bx	lr

080158d0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80158d0:	4b03      	ldr	r3, [pc, #12]	; (80158e0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80158d2:	6818      	ldr	r0, [r3, #0]
 80158d4:	b110      	cbz	r0, 80158dc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80158d6:	6803      	ldr	r3, [r0, #0]
 80158d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158da:	4718      	bx	r3
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop
 80158e0:	20011b78 	.word	0x20011b78

080158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80158e4:	b510      	push	{r4, lr}
 80158e6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80158ea:	888a      	ldrh	r2, [r1, #4]
 80158ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 80158f0:	4422      	add	r2, r4
 80158f2:	b212      	sxth	r2, r2
 80158f4:	4293      	cmp	r3, r2
 80158f6:	da15      	bge.n	8015924 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80158f8:	8882      	ldrh	r2, [r0, #4]
 80158fa:	4413      	add	r3, r2
 80158fc:	b21b      	sxth	r3, r3
 80158fe:	429c      	cmp	r4, r3
 8015900:	da10      	bge.n	8015924 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015902:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015906:	88c9      	ldrh	r1, [r1, #6]
 8015908:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801590c:	4419      	add	r1, r3
 801590e:	b209      	sxth	r1, r1
 8015910:	428a      	cmp	r2, r1
 8015912:	da07      	bge.n	8015924 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015914:	88c0      	ldrh	r0, [r0, #6]
 8015916:	4410      	add	r0, r2
 8015918:	b200      	sxth	r0, r0
 801591a:	4283      	cmp	r3, r0
 801591c:	bfac      	ite	ge
 801591e:	2000      	movge	r0, #0
 8015920:	2001      	movlt	r0, #1
 8015922:	bd10      	pop	{r4, pc}
 8015924:	2000      	movs	r0, #0
 8015926:	e7fc      	b.n	8015922 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015928 <_ZN8touchgfx4Rect10restrictToEss>:
 8015928:	f9b0 3000 	ldrsh.w	r3, [r0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	b510      	push	{r4, lr}
 8015930:	da04      	bge.n	801593c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8015932:	8884      	ldrh	r4, [r0, #4]
 8015934:	4423      	add	r3, r4
 8015936:	8083      	strh	r3, [r0, #4]
 8015938:	2300      	movs	r3, #0
 801593a:	8003      	strh	r3, [r0, #0]
 801593c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015940:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015944:	1b09      	subs	r1, r1, r4
 8015946:	428b      	cmp	r3, r1
 8015948:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801594c:	bfc8      	it	gt
 801594e:	8081      	strhgt	r1, [r0, #4]
 8015950:	2b00      	cmp	r3, #0
 8015952:	da04      	bge.n	801595e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8015954:	88c1      	ldrh	r1, [r0, #6]
 8015956:	440b      	add	r3, r1
 8015958:	80c3      	strh	r3, [r0, #6]
 801595a:	2300      	movs	r3, #0
 801595c:	8043      	strh	r3, [r0, #2]
 801595e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015962:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015966:	1a52      	subs	r2, r2, r1
 8015968:	4293      	cmp	r3, r2
 801596a:	bfc8      	it	gt
 801596c:	80c2      	strhgt	r2, [r0, #6]
 801596e:	bd10      	pop	{r4, pc}

08015970 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015970:	4b10      	ldr	r3, [pc, #64]	; (80159b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8015972:	b510      	push	{r4, lr}
 8015974:	460c      	mov	r4, r1
 8015976:	f9b3 2000 	ldrsh.w	r2, [r3]
 801597a:	4b0f      	ldr	r3, [pc, #60]	; (80159b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801597c:	4620      	mov	r0, r4
 801597e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015982:	f7ff ffd1 	bl	8015928 <_ZN8touchgfx4Rect10restrictToEss>
 8015986:	4b0d      	ldr	r3, [pc, #52]	; (80159bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8015988:	6818      	ldr	r0, [r3, #0]
 801598a:	b190      	cbz	r0, 80159b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801598c:	6803      	ldr	r3, [r0, #0]
 801598e:	4621      	mov	r1, r4
 8015990:	689b      	ldr	r3, [r3, #8]
 8015992:	4798      	blx	r3
 8015994:	4b0a      	ldr	r3, [pc, #40]	; (80159c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8015996:	6818      	ldr	r0, [r3, #0]
 8015998:	b118      	cbz	r0, 80159a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801599a:	6803      	ldr	r3, [r0, #0]
 801599c:	4621      	mov	r1, r4
 801599e:	689b      	ldr	r3, [r3, #8]
 80159a0:	4798      	blx	r3
 80159a2:	4b08      	ldr	r3, [pc, #32]	; (80159c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80159a4:	4621      	mov	r1, r4
 80159a6:	6818      	ldr	r0, [r3, #0]
 80159a8:	6803      	ldr	r3, [r0, #0]
 80159aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159ae:	69db      	ldr	r3, [r3, #28]
 80159b0:	4718      	bx	r3
 80159b2:	bd10      	pop	{r4, pc}
 80159b4:	20011b30 	.word	0x20011b30
 80159b8:	20011b2e 	.word	0x20011b2e
 80159bc:	20011b78 	.word	0x20011b78
 80159c0:	20011b74 	.word	0x20011b74
 80159c4:	20011b3c 	.word	0x20011b3c

080159c8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80159c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ca:	4606      	mov	r6, r0
 80159cc:	4608      	mov	r0, r1
 80159ce:	460f      	mov	r7, r1
 80159d0:	f7fc facd 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80159d4:	b9e8      	cbnz	r0, 8015a12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80159d6:	f9b7 5000 	ldrsh.w	r5, [r7]
 80159da:	f9b6 4000 	ldrsh.w	r4, [r6]
 80159de:	42a5      	cmp	r5, r4
 80159e0:	db17      	blt.n	8015a12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80159e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80159e6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	db11      	blt.n	8015a12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80159ee:	88b9      	ldrh	r1, [r7, #4]
 80159f0:	440d      	add	r5, r1
 80159f2:	88b1      	ldrh	r1, [r6, #4]
 80159f4:	440c      	add	r4, r1
 80159f6:	b22d      	sxth	r5, r5
 80159f8:	b224      	sxth	r4, r4
 80159fa:	42a5      	cmp	r5, r4
 80159fc:	dc09      	bgt.n	8015a12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80159fe:	88f8      	ldrh	r0, [r7, #6]
 8015a00:	4410      	add	r0, r2
 8015a02:	88f2      	ldrh	r2, [r6, #6]
 8015a04:	4413      	add	r3, r2
 8015a06:	b200      	sxth	r0, r0
 8015a08:	b21b      	sxth	r3, r3
 8015a0a:	4298      	cmp	r0, r3
 8015a0c:	bfcc      	ite	gt
 8015a0e:	2000      	movgt	r0, #0
 8015a10:	2001      	movle	r0, #1
 8015a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015a14 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a16:	4604      	mov	r4, r0
 8015a18:	4608      	mov	r0, r1
 8015a1a:	460d      	mov	r5, r1
 8015a1c:	f7fc faa7 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a20:	b978      	cbnz	r0, 8015a42 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015a22:	4620      	mov	r0, r4
 8015a24:	f7fc faa3 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a28:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015a2c:	b150      	cbz	r0, 8015a44 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015a2e:	8026      	strh	r6, [r4, #0]
 8015a30:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015a34:	8063      	strh	r3, [r4, #2]
 8015a36:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015a3a:	80a3      	strh	r3, [r4, #4]
 8015a3c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015a40:	80e3      	strh	r3, [r4, #6]
 8015a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a44:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015a48:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015a4c:	42b1      	cmp	r1, r6
 8015a4e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015a52:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8015a56:	460f      	mov	r7, r1
 8015a58:	88ed      	ldrh	r5, [r5, #6]
 8015a5a:	bfa8      	it	ge
 8015a5c:	4637      	movge	r7, r6
 8015a5e:	4293      	cmp	r3, r2
 8015a60:	4618      	mov	r0, r3
 8015a62:	4466      	add	r6, ip
 8015a64:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015a68:	bfa8      	it	ge
 8015a6a:	4610      	movge	r0, r2
 8015a6c:	442a      	add	r2, r5
 8015a6e:	88e5      	ldrh	r5, [r4, #6]
 8015a70:	4461      	add	r1, ip
 8015a72:	b236      	sxth	r6, r6
 8015a74:	8027      	strh	r7, [r4, #0]
 8015a76:	442b      	add	r3, r5
 8015a78:	b209      	sxth	r1, r1
 8015a7a:	b212      	sxth	r2, r2
 8015a7c:	8060      	strh	r0, [r4, #2]
 8015a7e:	b21b      	sxth	r3, r3
 8015a80:	428e      	cmp	r6, r1
 8015a82:	bfac      	ite	ge
 8015a84:	ebc7 0106 	rsbge	r1, r7, r6
 8015a88:	ebc7 0101 	rsblt	r1, r7, r1
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	bfac      	ite	ge
 8015a90:	ebc0 0202 	rsbge	r2, r0, r2
 8015a94:	ebc0 0203 	rsblt	r2, r0, r3
 8015a98:	80a1      	strh	r1, [r4, #4]
 8015a9a:	80e2      	strh	r2, [r4, #6]
 8015a9c:	e7d1      	b.n	8015a42 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015aa0 <_ZN8touchgfx11Application11getInstanceEv>:
 8015aa0:	4b01      	ldr	r3, [pc, #4]	; (8015aa8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015aa2:	6818      	ldr	r0, [r3, #0]
 8015aa4:	4770      	bx	lr
 8015aa6:	bf00      	nop
 8015aa8:	20011b88 	.word	0x20011b88

08015aac <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8015aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aae:	4b10      	ldr	r3, [pc, #64]	; (8015af0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 8015ab0:	4605      	mov	r5, r0
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	b1d3      	cbz	r3, 8015aec <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8015ab6:	4b0f      	ldr	r3, [pc, #60]	; (8015af4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8015ab8:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 8015abc:	4f0e      	ldr	r7, [pc, #56]	; (8015af8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8015abe:	881c      	ldrh	r4, [r3, #0]
 8015ac0:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 8015ac4:	42a3      	cmp	r3, r4
 8015ac6:	d90e      	bls.n	8015ae6 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015ace:	b10a      	cbz	r2, 8015ad4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 8015ad0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015ad2:	b900      	cbnz	r0, 8015ad6 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 8015ad4:	6898      	ldr	r0, [r3, #8]
 8015ad6:	6803      	ldr	r3, [r0, #0]
 8015ad8:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8015adc:	3401      	adds	r4, #1
 8015ade:	69db      	ldr	r3, [r3, #28]
 8015ae0:	4798      	blx	r3
 8015ae2:	b2a4      	uxth	r4, r4
 8015ae4:	e7ec      	b.n	8015ac0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 8015aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aee:	bf00      	nop
 8015af0:	20011b38 	.word	0x20011b38
 8015af4:	20000040 	.word	0x20000040
 8015af8:	20011b3c 	.word	0x20011b3c

08015afc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8015afc:	2300      	movs	r3, #0
 8015afe:	b510      	push	{r4, lr}
 8015b00:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8015b04:	4604      	mov	r4, r0
 8015b06:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8015b0a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015b0e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8015b12:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d90e      	bls.n	8015b38 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8015b1a:	18e2      	adds	r2, r4, r3
 8015b1c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8015b20:	b122      	cbz	r2, 8015b2c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8015b22:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8015b26:	6803      	ldr	r3, [r0, #0]
 8015b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b2a:	4798      	blx	r3
 8015b2c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8015b30:	3301      	adds	r3, #1
 8015b32:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8015b36:	e7ea      	b.n	8015b0e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8015b38:	bd10      	pop	{r4, pc}

08015b3a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8015b40:	30a4      	adds	r0, #164	; 0xa4
 8015b42:	f820 3c24 	strh.w	r3, [r0, #-36]
 8015b46:	f802 3b01 	strb.w	r3, [r2], #1
 8015b4a:	4282      	cmp	r2, r0
 8015b4c:	d1fb      	bne.n	8015b46 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8015b4e:	4770      	bx	lr

08015b50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015b50:	b570      	push	{r4, r5, r6, lr}
 8015b52:	4c0b      	ldr	r4, [pc, #44]	; (8015b80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015b54:	4605      	mov	r5, r0
 8015b56:	460e      	mov	r6, r1
 8015b58:	6820      	ldr	r0, [r4, #0]
 8015b5a:	b110      	cbz	r0, 8015b62 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8015b5c:	6803      	ldr	r3, [r0, #0]
 8015b5e:	695b      	ldr	r3, [r3, #20]
 8015b60:	4798      	blx	r3
 8015b62:	1d28      	adds	r0, r5, #4
 8015b64:	f7ff ffe9 	bl	8015b3a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015b68:	6026      	str	r6, [r4, #0]
 8015b6a:	6833      	ldr	r3, [r6, #0]
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	68db      	ldr	r3, [r3, #12]
 8015b70:	4798      	blx	r3
 8015b72:	682b      	ldr	r3, [r5, #0]
 8015b74:	4628      	mov	r0, r5
 8015b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b7c:	4718      	bx	r3
 8015b7e:	bf00      	nop
 8015b80:	20011b78 	.word	0x20011b78

08015b84 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8015b84:	2300      	movs	r3, #0
 8015b86:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8015b8a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8015b8e:	461a      	mov	r2, r3
 8015b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b92:	461c      	mov	r4, r3
 8015b94:	461d      	mov	r5, r3
 8015b96:	459c      	cmp	ip, r3
 8015b98:	dd1a      	ble.n	8015bd0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8015b9a:	18c6      	adds	r6, r0, r3
 8015b9c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8015ba0:	b16e      	cbz	r6, 8015bbe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d008      	beq.n	8015bb8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8015ba6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8015baa:	fa1f fe82 	uxth.w	lr, r2
 8015bae:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8015bb2:	1887      	adds	r7, r0, r2
 8015bb4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8015bb8:	3201      	adds	r2, #1
 8015bba:	3301      	adds	r3, #1
 8015bbc:	e7eb      	b.n	8015b96 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8015bbe:	4299      	cmp	r1, r3
 8015bc0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8015bc4:	bfa8      	it	ge
 8015bc6:	3501      	addge	r5, #1
 8015bc8:	429e      	cmp	r6, r3
 8015bca:	bfc8      	it	gt
 8015bcc:	3401      	addgt	r4, #1
 8015bce:	e7f4      	b.n	8015bba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8015bd0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8015bd4:	1b49      	subs	r1, r1, r5
 8015bd6:	1b1b      	subs	r3, r3, r4
 8015bd8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8015bdc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015be0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8015be4:	4293      	cmp	r3, r2
 8015be6:	dd03      	ble.n	8015bf0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8015be8:	3b01      	subs	r3, #1
 8015bea:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8015bee:	e7f7      	b.n	8015be0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8015bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015bf4 <_ZN8touchgfx11Application15handleTickEventEv>:
 8015bf4:	b570      	push	{r4, r5, r6, lr}
 8015bf6:	4d16      	ldr	r5, [pc, #88]	; (8015c50 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	6828      	ldr	r0, [r5, #0]
 8015bfc:	b140      	cbz	r0, 8015c10 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015bfe:	7a03      	ldrb	r3, [r0, #8]
 8015c00:	b933      	cbnz	r3, 8015c10 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015c02:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8015c06:	6803      	ldr	r3, [r0, #0]
 8015c08:	689b      	ldr	r3, [r3, #8]
 8015c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c0e:	4718      	bx	r3
 8015c10:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8015c14:	4e0f      	ldr	r6, [pc, #60]	; (8015c54 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8015c16:	b973      	cbnz	r3, 8015c36 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015c18:	b168      	cbz	r0, 8015c36 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015c1a:	7a03      	ldrb	r3, [r0, #8]
 8015c1c:	b15b      	cbz	r3, 8015c36 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015c1e:	6830      	ldr	r0, [r6, #0]
 8015c20:	b110      	cbz	r0, 8015c28 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015c22:	6803      	ldr	r3, [r0, #0]
 8015c24:	691b      	ldr	r3, [r3, #16]
 8015c26:	4798      	blx	r3
 8015c28:	6828      	ldr	r0, [r5, #0]
 8015c2a:	6803      	ldr	r3, [r0, #0]
 8015c2c:	68db      	ldr	r3, [r3, #12]
 8015c2e:	4798      	blx	r3
 8015c30:	2301      	movs	r3, #1
 8015c32:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8015c36:	3404      	adds	r4, #4
 8015c38:	4620      	mov	r0, r4
 8015c3a:	f7ff ff5f 	bl	8015afc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8015c3e:	4620      	mov	r0, r4
 8015c40:	f7ff ffa0 	bl	8015b84 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015c44:	6830      	ldr	r0, [r6, #0]
 8015c46:	b110      	cbz	r0, 8015c4e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8015c48:	6803      	ldr	r3, [r0, #0]
 8015c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c4c:	e7dd      	b.n	8015c0a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8015c4e:	bd70      	pop	{r4, r5, r6, pc}
 8015c50:	20011b7c 	.word	0x20011b7c
 8015c54:	20011b78 	.word	0x20011b78

08015c58 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015c58:	4603      	mov	r3, r0
 8015c5a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015c5e:	2200      	movs	r2, #0
 8015c60:	801a      	strh	r2, [r3, #0]
 8015c62:	3308      	adds	r3, #8
 8015c64:	f823 2c06 	strh.w	r2, [r3, #-6]
 8015c68:	f823 2c04 	strh.w	r2, [r3, #-4]
 8015c6c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8015c70:	428b      	cmp	r3, r1
 8015c72:	d1f5      	bne.n	8015c60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015c74:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015c78:	4770      	bx	lr
	...

08015c7c <_ZN8touchgfx11ApplicationC1Ev>:
 8015c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c7e:	4b1d      	ldr	r3, [pc, #116]	; (8015cf4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015c80:	4606      	mov	r6, r0
 8015c82:	4604      	mov	r4, r0
 8015c84:	2500      	movs	r5, #0
 8015c86:	f846 3b04 	str.w	r3, [r6], #4
 8015c8a:	22a8      	movs	r2, #168	; 0xa8
 8015c8c:	2100      	movs	r1, #0
 8015c8e:	4630      	mov	r0, r6
 8015c90:	f00b fac0 	bl	8021214 <memset>
 8015c94:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8015c98:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015c9c:	4f16      	ldr	r7, [pc, #88]	; (8015cf8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8015c9e:	f7ff ffdb 	bl	8015c58 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015ca2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8015ca6:	f7ff ffd7 	bl	8015c58 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015caa:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8015cae:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8015cb2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8015cb6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8015cba:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8015cbe:	490f      	ldr	r1, [pc, #60]	; (8015cfc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015cc0:	480f      	ldr	r0, [pc, #60]	; (8015d00 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8015cc2:	f00a ffe9 	bl	8020c98 <CRC_Lock>
 8015cc6:	4b0f      	ldr	r3, [pc, #60]	; (8015d04 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8015cc8:	b158      	cbz	r0, 8015ce2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8015cca:	801d      	strh	r5, [r3, #0]
 8015ccc:	2300      	movs	r3, #0
 8015cce:	4a0e      	ldr	r2, [pc, #56]	; (8015d08 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	6013      	str	r3, [r2, #0]
 8015cd4:	4a0d      	ldr	r2, [pc, #52]	; (8015d0c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8015cd6:	603b      	str	r3, [r7, #0]
 8015cd8:	6013      	str	r3, [r2, #0]
 8015cda:	f7ff ff2e 	bl	8015b3a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015cde:	4620      	mov	r0, r4
 8015ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015ce6:	2002      	movs	r0, #2
 8015ce8:	801a      	strh	r2, [r3, #0]
 8015cea:	6038      	str	r0, [r7, #0]
 8015cec:	f001 fa1c 	bl	8017128 <_ZN8touchgfx6Screen4drawEv>
 8015cf0:	e7ec      	b.n	8015ccc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8015cf2:	bf00      	nop
 8015cf4:	080241ec 	.word	0x080241ec
 8015cf8:	20011b78 	.word	0x20011b78
 8015cfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8015d00:	f407a5c2 	.word	0xf407a5c2
 8015d04:	20000040 	.word	0x20000040
 8015d08:	20011b88 	.word	0x20011b88
 8015d0c:	20011b7c 	.word	0x20011b7c

08015d10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015d10:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015d14:	3b01      	subs	r3, #1
 8015d16:	b29b      	uxth	r3, r3
 8015d18:	428b      	cmp	r3, r1
 8015d1a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015d1e:	b510      	push	{r4, lr}
 8015d20:	d908      	bls.n	8015d34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015d22:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015d26:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015d30:	685a      	ldr	r2, [r3, #4]
 8015d32:	6062      	str	r2, [r4, #4]
 8015d34:	bd10      	pop	{r4, pc}
	...

08015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d3c:	b08f      	sub	sp, #60	; 0x3c
 8015d3e:	4b8f      	ldr	r3, [pc, #572]	; (8015f7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8015d40:	4683      	mov	fp, r0
 8015d42:	ac0a      	add	r4, sp, #40	; 0x28
 8015d44:	e884 0006 	stmia.w	r4, {r1, r2}
 8015d48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	4b8c      	ldr	r3, [pc, #560]	; (8015f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8015d50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015d54:	f7ff fde8 	bl	8015928 <_ZN8touchgfx4Rect10restrictToEss>
 8015d58:	4620      	mov	r0, r4
 8015d5a:	f7fc f908 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	d16a      	bne.n	8015e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015d62:	9403      	str	r4, [sp, #12]
 8015d64:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8015d68:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8015d6c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8015d70:	9301      	str	r3, [sp, #4]
 8015d72:	35a4      	adds	r5, #164	; 0xa4
 8015d74:	b15c      	cbz	r4, 8015d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015d76:	4629      	mov	r1, r5
 8015d78:	9803      	ldr	r0, [sp, #12]
 8015d7a:	f7ff fe25 	bl	80159c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015d7e:	3c01      	subs	r4, #1
 8015d80:	b118      	cbz	r0, 8015d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8015d82:	b2a1      	uxth	r1, r4
 8015d84:	9801      	ldr	r0, [sp, #4]
 8015d86:	f7ff ffc3 	bl	8015d10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015d8a:	3d08      	subs	r5, #8
 8015d8c:	e7f2      	b.n	8015d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8015d8e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8015d92:	f108 33ff 	add.w	r3, r8, #4294967295
 8015d96:	f8cd 8010 	str.w	r8, [sp, #16]
 8015d9a:	9302      	str	r3, [sp, #8]
 8015d9c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8015da0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8015da4:	9306      	str	r3, [sp, #24]
 8015da6:	445c      	add	r4, fp
 8015da8:	2500      	movs	r5, #0
 8015daa:	4626      	mov	r6, r4
 8015dac:	f8cd 8014 	str.w	r8, [sp, #20]
 8015db0:	462f      	mov	r7, r5
 8015db2:	9b05      	ldr	r3, [sp, #20]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d073      	beq.n	8015ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015db8:	9903      	ldr	r1, [sp, #12]
 8015dba:	4630      	mov	r0, r6
 8015dbc:	f7ff fd92 	bl	80158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015dc0:	b350      	cbz	r0, 8015e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015dc2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8015dc6:	f9b6 c000 	ldrsh.w	ip, [r6]
 8015dca:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8015dce:	45e6      	cmp	lr, ip
 8015dd0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015dd4:	db33      	blt.n	8015e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015dd6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015dda:	88b3      	ldrh	r3, [r6, #4]
 8015ddc:	4472      	add	r2, lr
 8015dde:	4463      	add	r3, ip
 8015de0:	b212      	sxth	r2, r2
 8015de2:	b21b      	sxth	r3, r3
 8015de4:	429a      	cmp	r2, r3
 8015de6:	dc2a      	bgt.n	8015e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015de8:	fa1f f289 	uxth.w	r2, r9
 8015dec:	88f3      	ldrh	r3, [r6, #6]
 8015dee:	45ca      	cmp	sl, r9
 8015df0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015df4:	4413      	add	r3, r2
 8015df6:	fa1f fc8a 	uxth.w	ip, sl
 8015dfa:	b29b      	uxth	r3, r3
 8015dfc:	fa0f fe83 	sxth.w	lr, r3
 8015e00:	db0f      	blt.n	8015e22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015e02:	eba3 030c 	sub.w	r3, r3, ip
 8015e06:	1ac9      	subs	r1, r1, r3
 8015e08:	b209      	sxth	r1, r1
 8015e0a:	2900      	cmp	r1, #0
 8015e0c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015e10:	dd12      	ble.n	8015e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015e12:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8015e16:	4605      	mov	r5, r0
 8015e18:	9b05      	ldr	r3, [sp, #20]
 8015e1a:	3e08      	subs	r6, #8
 8015e1c:	3b01      	subs	r3, #1
 8015e1e:	9305      	str	r3, [sp, #20]
 8015e20:	e7c7      	b.n	8015db2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015e22:	4461      	add	r1, ip
 8015e24:	b209      	sxth	r1, r1
 8015e26:	4571      	cmp	r1, lr
 8015e28:	dc38      	bgt.n	8015e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015e2a:	eba2 020c 	sub.w	r2, r2, ip
 8015e2e:	b212      	sxth	r2, r2
 8015e30:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015e34:	2a00      	cmp	r2, #0
 8015e36:	dcee      	bgt.n	8015e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015e38:	b00f      	add	sp, #60	; 0x3c
 8015e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e3e:	45ca      	cmp	sl, r9
 8015e40:	db2c      	blt.n	8015e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015e42:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015e46:	449a      	add	sl, r3
 8015e48:	88f3      	ldrh	r3, [r6, #6]
 8015e4a:	4499      	add	r9, r3
 8015e4c:	fa0f fa8a 	sxth.w	sl, sl
 8015e50:	fa0f f989 	sxth.w	r9, r9
 8015e54:	45ca      	cmp	sl, r9
 8015e56:	dc21      	bgt.n	8015e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015e58:	fa1f f28c 	uxth.w	r2, ip
 8015e5c:	88b3      	ldrh	r3, [r6, #4]
 8015e5e:	45e6      	cmp	lr, ip
 8015e60:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015e64:	4413      	add	r3, r2
 8015e66:	fa1f f98e 	uxth.w	r9, lr
 8015e6a:	b29b      	uxth	r3, r3
 8015e6c:	fa0f fa83 	sxth.w	sl, r3
 8015e70:	db0a      	blt.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8015e72:	eba3 0309 	sub.w	r3, r3, r9
 8015e76:	1ac9      	subs	r1, r1, r3
 8015e78:	b209      	sxth	r1, r1
 8015e7a:	2900      	cmp	r1, #0
 8015e7c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8015e80:	ddda      	ble.n	8015e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015e82:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015e86:	e7c6      	b.n	8015e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015e88:	4449      	add	r1, r9
 8015e8a:	b209      	sxth	r1, r1
 8015e8c:	4551      	cmp	r1, sl
 8015e8e:	dc05      	bgt.n	8015e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015e90:	eba2 0209 	sub.w	r2, r2, r9
 8015e94:	b212      	sxth	r2, r2
 8015e96:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015e9a:	e7cb      	b.n	8015e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8015e9c:	4607      	mov	r7, r0
 8015e9e:	e7bb      	b.n	8015e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015ea0:	2d00      	cmp	r5, #0
 8015ea2:	d181      	bne.n	8015da8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8015ea4:	2f00      	cmp	r7, #0
 8015ea6:	f000 81dd 	beq.w	8016264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015eaa:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8015eae:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8015eb2:	b2b3      	uxth	r3, r6
 8015eb4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015eb8:	b2b9      	uxth	r1, r7
 8015eba:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8015ebe:	441a      	add	r2, r3
 8015ec0:	448a      	add	sl, r1
 8015ec2:	9105      	str	r1, [sp, #20]
 8015ec4:	b292      	uxth	r2, r2
 8015ec6:	fa1f fa8a 	uxth.w	sl, sl
 8015eca:	fa0f f882 	sxth.w	r8, r2
 8015ece:	fa0f f98a 	sxth.w	r9, sl
 8015ed2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015ed6:	9b04      	ldr	r3, [sp, #16]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d053      	beq.n	8015f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8015edc:	9903      	ldr	r1, [sp, #12]
 8015ede:	4620      	mov	r0, r4
 8015ee0:	f7ff fd00 	bl	80158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015ee4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015ee8:	b1c0      	cbz	r0, 8015f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8015eea:	f9b4 e000 	ldrsh.w	lr, [r4]
 8015eee:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015ef2:	4576      	cmp	r6, lr
 8015ef4:	dc23      	bgt.n	8015f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015ef6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015efa:	44f4      	add	ip, lr
 8015efc:	fa0f fc8c 	sxth.w	ip, ip
 8015f00:	45e0      	cmp	r8, ip
 8015f02:	db1c      	blt.n	8015f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015f04:	428f      	cmp	r7, r1
 8015f06:	fa1f fc81 	uxth.w	ip, r1
 8015f0a:	88e1      	ldrh	r1, [r4, #6]
 8015f0c:	dc0d      	bgt.n	8015f2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8015f0e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8015f12:	f8a4 9002 	strh.w	r9, [r4, #2]
 8015f16:	eba1 010c 	sub.w	r1, r1, ip
 8015f1a:	80e1      	strh	r1, [r4, #6]
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	9904      	ldr	r1, [sp, #16]
 8015f20:	3c08      	subs	r4, #8
 8015f22:	4605      	mov	r5, r0
 8015f24:	3901      	subs	r1, #1
 8015f26:	9104      	str	r1, [sp, #16]
 8015f28:	e7d3      	b.n	8015ed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8015f2a:	4461      	add	r1, ip
 8015f2c:	b209      	sxth	r1, r1
 8015f2e:	4549      	cmp	r1, r9
 8015f30:	dcf5      	bgt.n	8015f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015f32:	9905      	ldr	r1, [sp, #20]
 8015f34:	eba1 0c0c 	sub.w	ip, r1, ip
 8015f38:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015f3c:	e7ee      	b.n	8015f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8015f3e:	428f      	cmp	r7, r1
 8015f40:	dced      	bgt.n	8015f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015f42:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8015f46:	4461      	add	r1, ip
 8015f48:	b209      	sxth	r1, r1
 8015f4a:	4589      	cmp	r9, r1
 8015f4c:	dbe7      	blt.n	8015f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015f4e:	4576      	cmp	r6, lr
 8015f50:	fa1f fc8e 	uxth.w	ip, lr
 8015f54:	88a1      	ldrh	r1, [r4, #4]
 8015f56:	dc07      	bgt.n	8015f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8015f58:	eba2 0c0c 	sub.w	ip, r2, ip
 8015f5c:	f8a4 8000 	strh.w	r8, [r4]
 8015f60:	eba1 010c 	sub.w	r1, r1, ip
 8015f64:	80a1      	strh	r1, [r4, #4]
 8015f66:	e7d9      	b.n	8015f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8015f68:	4461      	add	r1, ip
 8015f6a:	b209      	sxth	r1, r1
 8015f6c:	4588      	cmp	r8, r1
 8015f6e:	dbd6      	blt.n	8015f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015f70:	eba3 0c0c 	sub.w	ip, r3, ip
 8015f74:	f8a4 c004 	strh.w	ip, [r4, #4]
 8015f78:	e7d0      	b.n	8015f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8015f7a:	bf00      	nop
 8015f7c:	20011b30 	.word	0x20011b30
 8015f80:	20011b2e 	.word	0x20011b2e
 8015f84:	2d00      	cmp	r5, #0
 8015f86:	f000 816d 	beq.w	8016264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015f8a:	9b06      	ldr	r3, [sp, #24]
 8015f8c:	445b      	add	r3, fp
 8015f8e:	461c      	mov	r4, r3
 8015f90:	9b02      	ldr	r3, [sp, #8]
 8015f92:	3301      	adds	r3, #1
 8015f94:	f000 8166 	beq.w	8016264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015f98:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8015f9c:	9803      	ldr	r0, [sp, #12]
 8015f9e:	4629      	mov	r1, r5
 8015fa0:	f7ff fd12 	bl	80159c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015fa4:	b120      	cbz	r0, 8015fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8015fa6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015faa:	9801      	ldr	r0, [sp, #4]
 8015fac:	f7ff feb0 	bl	8015d10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015fb0:	9903      	ldr	r1, [sp, #12]
 8015fb2:	4628      	mov	r0, r5
 8015fb4:	f7ff fc96 	bl	80158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	f000 809c 	beq.w	80160f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8015fbe:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8015fc2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8015fc6:	fa1f f189 	uxth.w	r1, r9
 8015fca:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8015fce:	9309      	str	r3, [sp, #36]	; 0x24
 8015fd0:	eb01 0c03 	add.w	ip, r1, r3
 8015fd4:	b283      	uxth	r3, r0
 8015fd6:	4548      	cmp	r0, r9
 8015fd8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015fdc:	fa1f fa8c 	uxth.w	sl, ip
 8015fe0:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015fe4:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8015fe8:	eb03 050c 	add.w	r5, r3, ip
 8015fec:	b2ad      	uxth	r5, r5
 8015fee:	9505      	str	r5, [sp, #20]
 8015ff0:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8015ff4:	9504      	str	r5, [sp, #16]
 8015ff6:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8015ffa:	f340 8099 	ble.w	8016130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8015ffe:	1a5b      	subs	r3, r3, r1
 8016000:	4596      	cmp	lr, r2
 8016002:	fa0f f08a 	sxth.w	r0, sl
 8016006:	b29b      	uxth	r3, r3
 8016008:	b21e      	sxth	r6, r3
 801600a:	dd2e      	ble.n	801606a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801600c:	9f02      	ldr	r7, [sp, #8]
 801600e:	fa1f fe8e 	uxth.w	lr, lr
 8016012:	b292      	uxth	r2, r2
 8016014:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8016018:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801601c:	9f04      	ldr	r7, [sp, #16]
 801601e:	ebae 0102 	sub.w	r1, lr, r2
 8016022:	44a6      	add	lr, r4
 8016024:	1a3f      	subs	r7, r7, r0
 8016026:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801602a:	b289      	uxth	r1, r1
 801602c:	4402      	add	r2, r0
 801602e:	fa0f fe8e 	sxth.w	lr, lr
 8016032:	b20d      	sxth	r5, r1
 8016034:	b212      	sxth	r2, r2
 8016036:	436f      	muls	r7, r5
 8016038:	ebae 0202 	sub.w	r2, lr, r2
 801603c:	4372      	muls	r2, r6
 801603e:	4297      	cmp	r7, r2
 8016040:	db09      	blt.n	8016056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016042:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8016046:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801604a:	449c      	add	ip, r3
 801604c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016050:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016054:	e686      	b.n	8015d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016056:	4421      	add	r1, r4
 8016058:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801605c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8016060:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016064:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016068:	e67c      	b.n	8015d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801606a:	9f04      	ldr	r7, [sp, #16]
 801606c:	42b8      	cmp	r0, r7
 801606e:	da27      	bge.n	80160c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016070:	9902      	ldr	r1, [sp, #8]
 8016072:	1a3f      	subs	r7, r7, r0
 8016074:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8016078:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801607c:	eb05 010e 	add.w	r1, r5, lr
 8016080:	fa1f f881 	uxth.w	r8, r1
 8016084:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8016088:	4411      	add	r1, r2
 801608a:	fa0f f988 	sxth.w	r9, r8
 801608e:	eba2 020e 	sub.w	r2, r2, lr
 8016092:	eba1 0108 	sub.w	r1, r1, r8
 8016096:	4372      	muls	r2, r6
 8016098:	b289      	uxth	r1, r1
 801609a:	fa0f f881 	sxth.w	r8, r1
 801609e:	fb08 f707 	mul.w	r7, r8, r7
 80160a2:	42ba      	cmp	r2, r7
 80160a4:	dc06      	bgt.n	80160b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80160a6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80160aa:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80160ae:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80160b2:	e7ca      	b.n	801604a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80160b4:	4429      	add	r1, r5
 80160b6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80160ba:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80160be:	e651      	b.n	8015d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80160c0:	9805      	ldr	r0, [sp, #20]
 80160c2:	2d06      	cmp	r5, #6
 80160c4:	ebaa 0000 	sub.w	r0, sl, r0
 80160c8:	b280      	uxth	r0, r0
 80160ca:	fa0f fe80 	sxth.w	lr, r0
 80160ce:	d817      	bhi.n	8016100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80160d0:	9b04      	ldr	r3, [sp, #16]
 80160d2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80160d6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80160da:	1c6b      	adds	r3, r5, #1
 80160dc:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 80160e0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80160e4:	9b01      	ldr	r3, [sp, #4]
 80160e6:	9801      	ldr	r0, [sp, #4]
 80160e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80160ec:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80160f0:	805a      	strh	r2, [r3, #2]
 80160f2:	809e      	strh	r6, [r3, #4]
 80160f4:	80d9      	strh	r1, [r3, #6]
 80160f6:	9b02      	ldr	r3, [sp, #8]
 80160f8:	3c08      	subs	r4, #8
 80160fa:	3b01      	subs	r3, #1
 80160fc:	9302      	str	r3, [sp, #8]
 80160fe:	e747      	b.n	8015f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016100:	9a02      	ldr	r2, [sp, #8]
 8016102:	45b6      	cmp	lr, r6
 8016104:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016108:	db0d      	blt.n	8016126 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801610a:	449c      	add	ip, r3
 801610c:	445a      	add	r2, fp
 801610e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016112:	fa1f fc8c 	uxth.w	ip, ip
 8016116:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801611a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801611e:	448c      	add	ip, r1
 8016120:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8016124:	e61e      	b.n	8015d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016126:	445a      	add	r2, fp
 8016128:	4484      	add	ip, r0
 801612a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801612e:	e78f      	b.n	8016050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016130:	fa1f f18e 	uxth.w	r1, lr
 8016134:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8016138:	b293      	uxth	r3, r2
 801613a:	4596      	cmp	lr, r2
 801613c:	eb01 0806 	add.w	r8, r1, r6
 8016140:	9306      	str	r3, [sp, #24]
 8016142:	fa1f f888 	uxth.w	r8, r8
 8016146:	9f06      	ldr	r7, [sp, #24]
 8016148:	fa0f f388 	sxth.w	r3, r8
 801614c:	9307      	str	r3, [sp, #28]
 801614e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016152:	443b      	add	r3, r7
 8016154:	b29b      	uxth	r3, r3
 8016156:	9308      	str	r3, [sp, #32]
 8016158:	da24      	bge.n	80161a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801615a:	9905      	ldr	r1, [sp, #20]
 801615c:	eba3 0308 	sub.w	r3, r3, r8
 8016160:	eba2 020e 	sub.w	r2, r2, lr
 8016164:	eba9 0000 	sub.w	r0, r9, r0
 8016168:	ebaa 0401 	sub.w	r4, sl, r1
 801616c:	b29b      	uxth	r3, r3
 801616e:	b2a4      	uxth	r4, r4
 8016170:	b219      	sxth	r1, r3
 8016172:	b225      	sxth	r5, r4
 8016174:	4348      	muls	r0, r1
 8016176:	436a      	muls	r2, r5
 8016178:	4282      	cmp	r2, r0
 801617a:	9a02      	ldr	r2, [sp, #8]
 801617c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016180:	445a      	add	r2, fp
 8016182:	dc06      	bgt.n	8016192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016184:	9b07      	ldr	r3, [sp, #28]
 8016186:	44a4      	add	ip, r4
 8016188:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801618c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8016190:	e75e      	b.n	8016050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016192:	9904      	ldr	r1, [sp, #16]
 8016194:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8016198:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801619c:	4433      	add	r3, r6
 801619e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80161a2:	e5df      	b.n	8015d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80161a4:	9f06      	ldr	r7, [sp, #24]
 80161a6:	9b04      	ldr	r3, [sp, #16]
 80161a8:	1bc9      	subs	r1, r1, r7
 80161aa:	fa0f f78a 	sxth.w	r7, sl
 80161ae:	b289      	uxth	r1, r1
 80161b0:	429f      	cmp	r7, r3
 80161b2:	fa0f fe81 	sxth.w	lr, r1
 80161b6:	dd23      	ble.n	8016200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80161b8:	9a05      	ldr	r2, [sp, #20]
 80161ba:	eba9 0000 	sub.w	r0, r9, r0
 80161be:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80161c2:	ebaa 0202 	sub.w	r2, sl, r2
 80161c6:	9d07      	ldr	r5, [sp, #28]
 80161c8:	fb0e f000 	mul.w	r0, lr, r0
 80161cc:	b292      	uxth	r2, r2
 80161ce:	eba5 0a03 	sub.w	sl, r5, r3
 80161d2:	9b02      	ldr	r3, [sp, #8]
 80161d4:	b214      	sxth	r4, r2
 80161d6:	00db      	lsls	r3, r3, #3
 80161d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80161dc:	445b      	add	r3, fp
 80161de:	4550      	cmp	r0, sl
 80161e0:	db03      	blt.n	80161ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80161e2:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 80161e6:	4494      	add	ip, r2
 80161e8:	e732      	b.n	8016050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80161ea:	9a04      	ldr	r2, [sp, #16]
 80161ec:	4431      	add	r1, r6
 80161ee:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 80161f2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80161f6:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80161fa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80161fe:	e75c      	b.n	80160ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016200:	9b08      	ldr	r3, [sp, #32]
 8016202:	2d06      	cmp	r5, #6
 8016204:	eba3 0308 	sub.w	r3, r3, r8
 8016208:	b29b      	uxth	r3, r3
 801620a:	b218      	sxth	r0, r3
 801620c:	d813      	bhi.n	8016236 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801620e:	9b07      	ldr	r3, [sp, #28]
 8016210:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8016214:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8016218:	1c6b      	adds	r3, r5, #1
 801621a:	9901      	ldr	r1, [sp, #4]
 801621c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016220:	9b01      	ldr	r3, [sp, #4]
 8016222:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016226:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801622a:	805a      	strh	r2, [r3, #2]
 801622c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801622e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016232:	809a      	strh	r2, [r3, #4]
 8016234:	e75f      	b.n	80160f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016236:	9c02      	ldr	r4, [sp, #8]
 8016238:	4570      	cmp	r0, lr
 801623a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801623e:	db0d      	blt.n	801625c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016240:	4431      	add	r1, r6
 8016242:	9b06      	ldr	r3, [sp, #24]
 8016244:	445c      	add	r4, fp
 8016246:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801624a:	b289      	uxth	r1, r1
 801624c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8016250:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016254:	4419      	add	r1, r3
 8016256:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801625a:	e583      	b.n	8015d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801625c:	445c      	add	r4, fp
 801625e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8016262:	e79b      	b.n	801619c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016264:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8016268:	2e07      	cmp	r6, #7
 801626a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801626e:	d812      	bhi.n	8016296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8016270:	1c75      	adds	r5, r6, #1
 8016272:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8016276:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801627a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801627e:	9d01      	ldr	r5, [sp, #4]
 8016280:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8016284:	442c      	add	r4, r5
 8016286:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801628a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801628e:	8061      	strh	r1, [r4, #2]
 8016290:	80a2      	strh	r2, [r4, #4]
 8016292:	80e3      	strh	r3, [r4, #6]
 8016294:	e5d0      	b.n	8015e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016296:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801629a:	3e01      	subs	r6, #1
 801629c:	445c      	add	r4, fp
 801629e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80162a2:	f04f 37ff 	mov.w	r7, #4294967295
 80162a6:	2500      	movs	r5, #0
 80162a8:	9305      	str	r3, [sp, #20]
 80162aa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80162ae:	1e72      	subs	r2, r6, #1
 80162b0:	9302      	str	r3, [sp, #8]
 80162b2:	4691      	mov	r9, r2
 80162b4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80162b8:	9304      	str	r3, [sp, #16]
 80162ba:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80162be:	f1b9 3fff 	cmp.w	r9, #4294967295
 80162c2:	6818      	ldr	r0, [r3, #0]
 80162c4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80162c8:	9207      	str	r2, [sp, #28]
 80162ca:	bf16      	itet	ne
 80162cc:	9905      	ldrne	r1, [sp, #20]
 80162ce:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80162d2:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80162d6:	9306      	str	r3, [sp, #24]
 80162d8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80162dc:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80162e0:	fb18 f801 	smulbb	r8, r8, r1
 80162e4:	6859      	ldr	r1, [r3, #4]
 80162e6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80162ea:	4671      	mov	r1, lr
 80162ec:	a80c      	add	r0, sp, #48	; 0x30
 80162ee:	f7ff fb91 	bl	8015a14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80162f2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80162f6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80162fa:	f04f 0c08 	mov.w	ip, #8
 80162fe:	9b04      	ldr	r3, [sp, #16]
 8016300:	9a02      	ldr	r2, [sp, #8]
 8016302:	fb10 f001 	smulbb	r0, r0, r1
 8016306:	fb02 8803 	mla	r8, r2, r3, r8
 801630a:	eba0 0108 	sub.w	r1, r0, r8
 801630e:	fb90 f0fc 	sdiv	r0, r0, ip
 8016312:	4288      	cmp	r0, r1
 8016314:	dc20      	bgt.n	8016358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016316:	4551      	cmp	r1, sl
 8016318:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801631c:	da03      	bge.n	8016326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801631e:	b1d9      	cbz	r1, 8016358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016320:	468a      	mov	sl, r1
 8016322:	464f      	mov	r7, r9
 8016324:	4635      	mov	r5, r6
 8016326:	f109 39ff 	add.w	r9, r9, #4294967295
 801632a:	f119 0f02 	cmn.w	r9, #2
 801632e:	d1c6      	bne.n	80162be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8016330:	4616      	mov	r6, r2
 8016332:	3201      	adds	r2, #1
 8016334:	f1a4 0408 	sub.w	r4, r4, #8
 8016338:	d1b7      	bne.n	80162aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801633a:	9b01      	ldr	r3, [sp, #4]
 801633c:	b2ac      	uxth	r4, r5
 801633e:	00ed      	lsls	r5, r5, #3
 8016340:	1958      	adds	r0, r3, r5
 8016342:	1c7b      	adds	r3, r7, #1
 8016344:	d10b      	bne.n	801635e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8016346:	4601      	mov	r1, r0
 8016348:	9803      	ldr	r0, [sp, #12]
 801634a:	f7ff fb63 	bl	8015a14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801634e:	4621      	mov	r1, r4
 8016350:	9801      	ldr	r0, [sp, #4]
 8016352:	f7ff fcdd 	bl	8015d10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016356:	e505      	b.n	8015d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016358:	464f      	mov	r7, r9
 801635a:	4635      	mov	r5, r6
 801635c:	e7ed      	b.n	801633a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801635e:	9b01      	ldr	r3, [sp, #4]
 8016360:	00ff      	lsls	r7, r7, #3
 8016362:	445d      	add	r5, fp
 8016364:	19d9      	adds	r1, r3, r7
 8016366:	445f      	add	r7, fp
 8016368:	f7ff fb54 	bl	8015a14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801636c:	9b03      	ldr	r3, [sp, #12]
 801636e:	cb03      	ldmia	r3!, {r0, r1}
 8016370:	9b03      	ldr	r3, [sp, #12]
 8016372:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8016376:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801637a:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801637e:	6869      	ldr	r1, [r5, #4]
 8016380:	c303      	stmia	r3!, {r0, r1}
 8016382:	e7e4      	b.n	801634e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08016384 <_ZN8touchgfx11Application10invalidateEv>:
 8016384:	4b09      	ldr	r3, [pc, #36]	; (80163ac <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016386:	b082      	sub	sp, #8
 8016388:	2100      	movs	r1, #0
 801638a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801638e:	4b08      	ldr	r3, [pc, #32]	; (80163b0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016390:	9100      	str	r1, [sp, #0]
 8016392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016396:	f8ad 2004 	strh.w	r2, [sp, #4]
 801639a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801639e:	ab02      	add	r3, sp, #8
 80163a0:	e913 0006 	ldmdb	r3, {r1, r2}
 80163a4:	b002      	add	sp, #8
 80163a6:	f7ff bcc7 	b.w	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80163aa:	bf00      	nop
 80163ac:	20011b2e 	.word	0x20011b2e
 80163b0:	20011b30 	.word	0x20011b30

080163b4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80163b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80163bc:	b09b      	sub	sp, #108	; 0x6c
 80163be:	4604      	mov	r4, r0
 80163c0:	4630      	mov	r0, r6
 80163c2:	f7fb fdd4 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80163c6:	4605      	mov	r5, r0
 80163c8:	b940      	cbnz	r0, 80163dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80163ca:	4620      	mov	r0, r4
 80163cc:	e896 0006 	ldmia.w	r6, {r1, r2}
 80163d0:	f7ff fcb2 	bl	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80163d4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80163d8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80163dc:	4bc8      	ldr	r3, [pc, #800]	; (8016700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d03e      	beq.n	8016462 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80163e4:	4dc7      	ldr	r5, [pc, #796]	; (8016704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80163e6:	4628      	mov	r0, r5
 80163e8:	f7fb fdc1 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80163ec:	4606      	mov	r6, r0
 80163ee:	2800      	cmp	r0, #0
 80163f0:	d137      	bne.n	8016462 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80163f2:	4628      	mov	r0, r5
 80163f4:	f7ff f9c4 	bl	8015780 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80163f8:	6829      	ldr	r1, [r5, #0]
 80163fa:	686a      	ldr	r2, [r5, #4]
 80163fc:	4620      	mov	r0, r4
 80163fe:	f7ff fc9b 	bl	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016402:	802e      	strh	r6, [r5, #0]
 8016404:	806e      	strh	r6, [r5, #2]
 8016406:	80ae      	strh	r6, [r5, #4]
 8016408:	80ee      	strh	r6, [r5, #6]
 801640a:	ae09      	add	r6, sp, #36	; 0x24
 801640c:	4630      	mov	r0, r6
 801640e:	f7ff fc23 	bl	8015c58 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016412:	4abd      	ldr	r2, [pc, #756]	; (8016708 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016414:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016418:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801641c:	8815      	ldrh	r5, [r2, #0]
 801641e:	9202      	str	r2, [sp, #8]
 8016420:	462b      	mov	r3, r5
 8016422:	429f      	cmp	r7, r3
 8016424:	d924      	bls.n	8016470 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8016426:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801642a:	2907      	cmp	r1, #7
 801642c:	d816      	bhi.n	801645c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801642e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8016432:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016436:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801643a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801643e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016442:	1c4a      	adds	r2, r1, #1
 8016444:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8016448:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801644c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8016450:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016454:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016458:	f8a2 c006 	strh.w	ip, [r2, #6]
 801645c:	3301      	adds	r3, #1
 801645e:	b29b      	uxth	r3, r3
 8016460:	e7df      	b.n	8016422 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8016462:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016466:	2b00      	cmp	r3, #0
 8016468:	d1cf      	bne.n	801640a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801646a:	b01b      	add	sp, #108	; 0x6c
 801646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016470:	462f      	mov	r7, r5
 8016472:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8016476:	42bb      	cmp	r3, r7
 8016478:	d90b      	bls.n	8016492 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801647a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801647e:	3701      	adds	r7, #1
 8016480:	4620      	mov	r0, r4
 8016482:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8016486:	b2bf      	uxth	r7, r7
 8016488:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801648c:	f7ff fc54 	bl	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016490:	e7ef      	b.n	8016472 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8016492:	4a9e      	ldr	r2, [pc, #632]	; (801670c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016494:	6813      	ldr	r3, [r2, #0]
 8016496:	4690      	mov	r8, r2
 8016498:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801649c:	2b01      	cmp	r3, #1
 801649e:	f040 80e4 	bne.w	801666a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80164a2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80164a6:	4629      	mov	r1, r5
 80164a8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80164ac:	2500      	movs	r5, #0
 80164ae:	33ae      	adds	r3, #174	; 0xae
 80164b0:	428f      	cmp	r7, r1
 80164b2:	f103 0308 	add.w	r3, r3, #8
 80164b6:	dd0a      	ble.n	80164ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80164b8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80164bc:	3101      	adds	r1, #1
 80164be:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80164c2:	4402      	add	r2, r0
 80164c4:	b212      	sxth	r2, r2
 80164c6:	4295      	cmp	r5, r2
 80164c8:	bfb8      	it	lt
 80164ca:	4615      	movlt	r5, r2
 80164cc:	e7f0      	b.n	80164b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80164ce:	4b90      	ldr	r3, [pc, #576]	; (8016710 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80164d0:	f8df b238 	ldr.w	fp, [pc, #568]	; 801670c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80164d4:	881b      	ldrh	r3, [r3, #0]
 80164d6:	46d8      	mov	r8, fp
 80164d8:	2b0f      	cmp	r3, #15
 80164da:	bf8c      	ite	hi
 80164dc:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80164e0:	f04f 0a01 	movls.w	sl, #1
 80164e4:	2300      	movs	r3, #0
 80164e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80164ea:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80164ee:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80164f2:	4438      	add	r0, r7
 80164f4:	b207      	sxth	r7, r0
 80164f6:	f8db 0000 	ldr.w	r0, [fp]
 80164fa:	42bd      	cmp	r5, r7
 80164fc:	6803      	ldr	r3, [r0, #0]
 80164fe:	f340 8084 	ble.w	801660a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8016502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016506:	4798      	blx	r3
 8016508:	eb07 030a 	add.w	r3, r7, sl
 801650c:	4298      	cmp	r0, r3
 801650e:	da07      	bge.n	8016520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016510:	4285      	cmp	r5, r0
 8016512:	dd05      	ble.n	8016520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016514:	4287      	cmp	r7, r0
 8016516:	dd6d      	ble.n	80165f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016518:	2f00      	cmp	r7, #0
 801651a:	dd6b      	ble.n	80165f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801651c:	4628      	mov	r0, r5
 801651e:	e004      	b.n	801652a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8016520:	4287      	cmp	r7, r0
 8016522:	dcfb      	bgt.n	801651c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016524:	42a8      	cmp	r0, r5
 8016526:	bfa8      	it	ge
 8016528:	4628      	movge	r0, r5
 801652a:	4b7a      	ldr	r3, [pc, #488]	; (8016714 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801652c:	1bc0      	subs	r0, r0, r7
 801652e:	2200      	movs	r2, #0
 8016530:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016538:	f8ad 2014 	strh.w	r2, [sp, #20]
 801653c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016540:	9b02      	ldr	r3, [sp, #8]
 8016542:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016546:	881f      	ldrh	r7, [r3, #0]
 8016548:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801654c:	42bb      	cmp	r3, r7
 801654e:	d9cc      	bls.n	80164ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016550:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016554:	ab07      	add	r3, sp, #28
 8016556:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801655a:	6851      	ldr	r1, [r2, #4]
 801655c:	c303      	stmia	r3!, {r0, r1}
 801655e:	a905      	add	r1, sp, #20
 8016560:	a807      	add	r0, sp, #28
 8016562:	f7ff f9bf 	bl	80158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016566:	2800      	cmp	r0, #0
 8016568:	d04c      	beq.n	8016604 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801656a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801656e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016572:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016576:	4686      	mov	lr, r0
 8016578:	4290      	cmp	r0, r2
 801657a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801657e:	4448      	add	r0, r9
 8016580:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016584:	bfb8      	it	lt
 8016586:	4696      	movlt	lr, r2
 8016588:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801658c:	444a      	add	r2, r9
 801658e:	b280      	uxth	r0, r0
 8016590:	4299      	cmp	r1, r3
 8016592:	468c      	mov	ip, r1
 8016594:	b292      	uxth	r2, r2
 8016596:	9303      	str	r3, [sp, #12]
 8016598:	bfb8      	it	lt
 801659a:	469c      	movlt	ip, r3
 801659c:	b203      	sxth	r3, r0
 801659e:	fa0f f982 	sxth.w	r9, r2
 80165a2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80165a6:	f8ad c01e 	strh.w	ip, [sp, #30]
 80165aa:	454b      	cmp	r3, r9
 80165ac:	bfb8      	it	lt
 80165ae:	4602      	movlt	r2, r0
 80165b0:	9b03      	ldr	r3, [sp, #12]
 80165b2:	eba2 020e 	sub.w	r2, r2, lr
 80165b6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80165ba:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80165be:	4411      	add	r1, r2
 80165c0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80165c4:	4413      	add	r3, r2
 80165c6:	b289      	uxth	r1, r1
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	b208      	sxth	r0, r1
 80165cc:	b21a      	sxth	r2, r3
 80165ce:	4290      	cmp	r0, r2
 80165d0:	bfb8      	it	lt
 80165d2:	460b      	movlt	r3, r1
 80165d4:	eba3 030c 	sub.w	r3, r3, ip
 80165d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80165dc:	a807      	add	r0, sp, #28
 80165de:	f7fb fcc6 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80165e2:	b920      	cbnz	r0, 80165ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80165e4:	6823      	ldr	r3, [r4, #0]
 80165e6:	a907      	add	r1, sp, #28
 80165e8:	4620      	mov	r0, r4
 80165ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165ec:	4798      	blx	r3
 80165ee:	3701      	adds	r7, #1
 80165f0:	b2bf      	uxth	r7, r7
 80165f2:	e7a9      	b.n	8016548 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80165f4:	f8d8 0000 	ldr.w	r0, [r8]
 80165f8:	2101      	movs	r1, #1
 80165fa:	6803      	ldr	r3, [r0, #0]
 80165fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016600:	4798      	blx	r3
 8016602:	e772      	b.n	80164ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016604:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016608:	e7e8      	b.n	80165dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801660c:	4798      	blx	r3
 801660e:	4b42      	ldr	r3, [pc, #264]	; (8016718 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	f43f af29 	beq.w	801646a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016618:	2300      	movs	r3, #0
 801661a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801661e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8016622:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8016626:	9b02      	ldr	r3, [sp, #8]
 8016628:	881b      	ldrh	r3, [r3, #0]
 801662a:	429d      	cmp	r5, r3
 801662c:	f67f af1d 	bls.w	801646a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016630:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8016634:	2907      	cmp	r1, #7
 8016636:	d815      	bhi.n	8016664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8016638:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801663c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8016640:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016644:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016648:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801664c:	1c4a      	adds	r2, r1, #1
 801664e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8016652:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016656:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801665a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801665e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8016662:	80d7      	strh	r7, [r2, #6]
 8016664:	3301      	adds	r3, #1
 8016666:	b29b      	uxth	r3, r3
 8016668:	e7df      	b.n	801662a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801666a:	2b02      	cmp	r3, #2
 801666c:	f040 8135 	bne.w	80168da <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016670:	4b2a      	ldr	r3, [pc, #168]	; (801671c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8016672:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	2b01      	cmp	r3, #1
 801667a:	f000 809c 	beq.w	80167b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801667e:	9b02      	ldr	r3, [sp, #8]
 8016680:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8016684:	f8b3 b000 	ldrh.w	fp, [r3]
 8016688:	f10b 0b01 	add.w	fp, fp, #1
 801668c:	fa1f fb8b 	uxth.w	fp, fp
 8016690:	2a00      	cmp	r2, #0
 8016692:	d0bc      	beq.n	801660e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016694:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8016698:	4659      	mov	r1, fp
 801669a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801669e:	f04f 0800 	mov.w	r8, #0
 80166a2:	441d      	add	r5, r3
 80166a4:	b22d      	sxth	r5, r5
 80166a6:	b28b      	uxth	r3, r1
 80166a8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80166ac:	429a      	cmp	r2, r3
 80166ae:	f240 80c0 	bls.w	8016832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80166b2:	4427      	add	r7, r4
 80166b4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80166b8:	4608      	mov	r0, r1
 80166ba:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80166be:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80166c2:	4563      	cmp	r3, ip
 80166c4:	f340 80a2 	ble.w	801680c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80166c8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80166cc:	4465      	add	r5, ip
 80166ce:	b22d      	sxth	r5, r5
 80166d0:	429d      	cmp	r5, r3
 80166d2:	bfa8      	it	ge
 80166d4:	461d      	movge	r5, r3
 80166d6:	3101      	adds	r1, #1
 80166d8:	4680      	mov	r8, r0
 80166da:	e7e4      	b.n	80166a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 80166dc:	d10b      	bne.n	80166f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 80166de:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 80166e2:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 80166e6:	458c      	cmp	ip, r1
 80166e8:	bfb4      	ite	lt
 80166ea:	469c      	movlt	ip, r3
 80166ec:	46bc      	movge	ip, r7
 80166ee:	4572      	cmp	r2, lr
 80166f0:	bfb8      	it	lt
 80166f2:	4672      	movlt	r2, lr
 80166f4:	e087      	b.n	8016806 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80166f6:	428a      	cmp	r2, r1
 80166f8:	46bc      	mov	ip, r7
 80166fa:	bfb8      	it	lt
 80166fc:	460a      	movlt	r2, r1
 80166fe:	e082      	b.n	8016806 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016700:	20011b74 	.word	0x20011b74
 8016704:	20011b80 	.word	0x20011b80
 8016708:	20000040 	.word	0x20000040
 801670c:	20011b3c 	.word	0x20011b3c
 8016710:	20011b30 	.word	0x20011b30
 8016714:	20011b2e 	.word	0x20011b2e
 8016718:	20011b38 	.word	0x20011b38
 801671c:	20011b32 	.word	0x20011b32
 8016720:	1961      	adds	r1, r4, r5
 8016722:	ab07      	add	r3, sp, #28
 8016724:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8016728:	6849      	ldr	r1, [r1, #4]
 801672a:	c303      	stmia	r3!, {r0, r1}
 801672c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016730:	a807      	add	r0, sp, #28
 8016732:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016736:	2b13      	cmp	r3, #19
 8016738:	440b      	add	r3, r1
 801673a:	bfd8      	it	le
 801673c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016740:	1a9b      	subs	r3, r3, r2
 8016742:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016746:	f8ad 3020 	strh.w	r3, [sp, #32]
 801674a:	f7ff f833 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801674e:	a807      	add	r0, sp, #28
 8016750:	f7fb fc0d 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016754:	bb78      	cbnz	r0, 80167b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016756:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801675a:	4425      	add	r5, r4
 801675c:	f8d8 0000 	ldr.w	r0, [r8]
 8016760:	f1bc 0f14 	cmp.w	ip, #20
 8016764:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016768:	f8d0 e000 	ldr.w	lr, [r0]
 801676c:	bfa8      	it	ge
 801676e:	f04f 0c14 	movge.w	ip, #20
 8016772:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016776:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801677a:	fa1f fc8c 	uxth.w	ip, ip
 801677e:	f8cd c000 	str.w	ip, [sp]
 8016782:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8016786:	47d0      	blx	sl
 8016788:	4682      	mov	sl, r0
 801678a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801678e:	a807      	add	r0, sp, #28
 8016790:	f7fe fff6 	bl	8015780 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016794:	6823      	ldr	r3, [r4, #0]
 8016796:	4620      	mov	r0, r4
 8016798:	a907      	add	r1, sp, #28
 801679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801679c:	4798      	blx	r3
 801679e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80167a2:	eba0 000a 	sub.w	r0, r0, sl
 80167a6:	b200      	sxth	r0, r0
 80167a8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80167ac:	b918      	cbnz	r0, 80167b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80167ae:	b2b9      	uxth	r1, r7
 80167b0:	4648      	mov	r0, r9
 80167b2:	f7ff faad 	bl	8015d10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80167b6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80167ba:	f1bb 0f00 	cmp.w	fp, #0
 80167be:	f43f af26 	beq.w	801660e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80167c2:	9b02      	ldr	r3, [sp, #8]
 80167c4:	2700      	movs	r7, #0
 80167c6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80167ca:	881b      	ldrh	r3, [r3, #0]
 80167cc:	3301      	adds	r3, #1
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	b299      	uxth	r1, r3
 80167d2:	00fd      	lsls	r5, r7, #3
 80167d4:	458b      	cmp	fp, r1
 80167d6:	d9a3      	bls.n	8016720 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 80167d8:	4425      	add	r5, r4
 80167da:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80167de:	469c      	mov	ip, r3
 80167e0:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 80167e4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80167e8:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 80167ec:	4408      	add	r0, r1
 80167ee:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 80167f2:	4471      	add	r1, lr
 80167f4:	b200      	sxth	r0, r0
 80167f6:	b209      	sxth	r1, r1
 80167f8:	4288      	cmp	r0, r1
 80167fa:	f6bf af6f 	bge.w	80166dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 80167fe:	4586      	cmp	lr, r0
 8016800:	4672      	mov	r2, lr
 8016802:	bfb8      	it	lt
 8016804:	4602      	movlt	r2, r0
 8016806:	3301      	adds	r3, #1
 8016808:	4667      	mov	r7, ip
 801680a:	e7e1      	b.n	80167d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801680c:	d10c      	bne.n	8016828 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801680e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8016812:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8016816:	4287      	cmp	r7, r0
 8016818:	bfb4      	ite	lt
 801681a:	4608      	movlt	r0, r1
 801681c:	4640      	movge	r0, r8
 801681e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8016822:	443b      	add	r3, r7
 8016824:	b21b      	sxth	r3, r3
 8016826:	e753      	b.n	80166d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016828:	4565      	cmp	r5, ip
 801682a:	4640      	mov	r0, r8
 801682c:	bfa8      	it	ge
 801682e:	4665      	movge	r5, ip
 8016830:	e751      	b.n	80166d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016832:	eb09 0007 	add.w	r0, r9, r7
 8016836:	4427      	add	r7, r4
 8016838:	9203      	str	r2, [sp, #12]
 801683a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801683e:	f1ba 0f13 	cmp.w	sl, #19
 8016842:	bfde      	ittt	le
 8016844:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8016848:	4455      	addle	r5, sl
 801684a:	b22d      	sxthle	r5, r5
 801684c:	f7fb fb8f 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016850:	9a03      	ldr	r2, [sp, #12]
 8016852:	2800      	cmp	r0, #0
 8016854:	f47f af1c 	bne.w	8016690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8016858:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801685c:	fa1f fa8a 	uxth.w	sl, sl
 8016860:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016864:	1aad      	subs	r5, r5, r2
 8016866:	4829      	ldr	r0, [pc, #164]	; (801690c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8016868:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801686c:	2d14      	cmp	r5, #20
 801686e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8016872:	6800      	ldr	r0, [r0, #0]
 8016874:	bfa8      	it	ge
 8016876:	2514      	movge	r5, #20
 8016878:	f8ad 101c 	strh.w	r1, [sp, #28]
 801687c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016880:	b289      	uxth	r1, r1
 8016882:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016886:	b2ad      	uxth	r5, r5
 8016888:	f8d0 c000 	ldr.w	ip, [r0]
 801688c:	b292      	uxth	r2, r2
 801688e:	4555      	cmp	r5, sl
 8016890:	bf94      	ite	ls
 8016892:	9500      	strls	r5, [sp, #0]
 8016894:	f8cd a000 	strhi.w	sl, [sp]
 8016898:	b29b      	uxth	r3, r3
 801689a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801689e:	47a8      	blx	r5
 80168a0:	6823      	ldr	r3, [r4, #0]
 80168a2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80168a6:	a907      	add	r1, sp, #28
 80168a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168aa:	4620      	mov	r0, r4
 80168ac:	4798      	blx	r3
 80168ae:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80168b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80168b6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80168ba:	1a5b      	subs	r3, r3, r1
 80168bc:	440a      	add	r2, r1
 80168be:	b21b      	sxth	r3, r3
 80168c0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80168c4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	f47f aed8 	bne.w	801667e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80168ce:	fa1f f188 	uxth.w	r1, r8
 80168d2:	4648      	mov	r0, r9
 80168d4:	f7ff fa1c 	bl	8015d10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80168d8:	e6d1      	b.n	801667e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80168da:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80168de:	42ab      	cmp	r3, r5
 80168e0:	f67f ae95 	bls.w	801660e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80168e4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80168e8:	ab07      	add	r3, sp, #28
 80168ea:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80168ee:	6851      	ldr	r1, [r2, #4]
 80168f0:	c303      	stmia	r3!, {r0, r1}
 80168f2:	a807      	add	r0, sp, #28
 80168f4:	f7fb fb3b 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80168f8:	b920      	cbnz	r0, 8016904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 80168fa:	6823      	ldr	r3, [r4, #0]
 80168fc:	a907      	add	r1, sp, #28
 80168fe:	4620      	mov	r0, r4
 8016900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016902:	4798      	blx	r3
 8016904:	3501      	adds	r5, #1
 8016906:	b2ad      	uxth	r5, r5
 8016908:	e7e7      	b.n	80168da <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801690a:	bf00      	nop
 801690c:	20011b3c 	.word	0x20011b3c

08016910 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016910:	4b03      	ldr	r3, [pc, #12]	; (8016920 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016912:	2200      	movs	r2, #0
 8016914:	801a      	strh	r2, [r3, #0]
 8016916:	805a      	strh	r2, [r3, #2]
 8016918:	809a      	strh	r2, [r3, #4]
 801691a:	80da      	strh	r2, [r3, #6]
 801691c:	4770      	bx	lr
 801691e:	bf00      	nop
 8016920:	20011b80 	.word	0x20011b80

08016924 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016928:	b09d      	sub	sp, #116	; 0x74
 801692a:	4606      	mov	r6, r0
 801692c:	4614      	mov	r4, r2
 801692e:	468a      	mov	sl, r1
 8016930:	a803      	add	r0, sp, #12
 8016932:	461d      	mov	r5, r3
 8016934:	f000 fda5 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 8016938:	6833      	ldr	r3, [r6, #0]
 801693a:	4630      	mov	r0, r6
 801693c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8016940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016942:	4798      	blx	r3
 8016944:	6833      	ldr	r3, [r6, #0]
 8016946:	4607      	mov	r7, r0
 8016948:	4630      	mov	r0, r6
 801694a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801694c:	4798      	blx	r3
 801694e:	462a      	mov	r2, r5
 8016950:	2500      	movs	r5, #0
 8016952:	4621      	mov	r1, r4
 8016954:	9000      	str	r0, [sp, #0]
 8016956:	463b      	mov	r3, r7
 8016958:	462c      	mov	r4, r5
 801695a:	46a9      	mov	r9, r5
 801695c:	46a8      	mov	r8, r5
 801695e:	a803      	add	r0, sp, #12
 8016960:	f000 fdea 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016964:	2300      	movs	r3, #0
 8016966:	9302      	str	r3, [sp, #8]
 8016968:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801696c:	429c      	cmp	r4, r3
 801696e:	d002      	beq.n	8016976 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8016970:	455c      	cmp	r4, fp
 8016972:	bf18      	it	ne
 8016974:	4625      	movne	r5, r4
 8016976:	ab02      	add	r3, sp, #8
 8016978:	4632      	mov	r2, r6
 801697a:	4651      	mov	r1, sl
 801697c:	a803      	add	r0, sp, #12
 801697e:	f001 f8e1 	bl	8017b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016982:	4604      	mov	r4, r0
 8016984:	b108      	cbz	r0, 801698a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016986:	280a      	cmp	r0, #10
 8016988:	d10a      	bne.n	80169a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801698a:	45c1      	cmp	r9, r8
 801698c:	bf38      	it	cc
 801698e:	46c1      	movcc	r9, r8
 8016990:	f04f 0800 	mov.w	r8, #0
 8016994:	2c00      	cmp	r4, #0
 8016996:	d1e5      	bne.n	8016964 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016998:	4648      	mov	r0, r9
 801699a:	b01d      	add	sp, #116	; 0x74
 801699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a0:	9a02      	ldr	r2, [sp, #8]
 80169a2:	2a00      	cmp	r2, #0
 80169a4:	d0de      	beq.n	8016964 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80169a6:	7b57      	ldrb	r7, [r2, #13]
 80169a8:	4629      	mov	r1, r5
 80169aa:	6833      	ldr	r3, [r6, #0]
 80169ac:	007f      	lsls	r7, r7, #1
 80169ae:	8894      	ldrh	r4, [r2, #4]
 80169b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169b2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80169b6:	7a97      	ldrb	r7, [r2, #10]
 80169b8:	4307      	orrs	r7, r0
 80169ba:	4630      	mov	r0, r6
 80169bc:	4798      	blx	r3
 80169be:	4438      	add	r0, r7
 80169c0:	4480      	add	r8, r0
 80169c2:	fa1f f888 	uxth.w	r8, r8
 80169c6:	e7e5      	b.n	8016994 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080169c8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80169c8:	b508      	push	{r3, lr}
 80169ca:	6803      	ldr	r3, [r0, #0]
 80169cc:	68db      	ldr	r3, [r3, #12]
 80169ce:	4798      	blx	r3
 80169d0:	b128      	cbz	r0, 80169de <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80169d2:	7b43      	ldrb	r3, [r0, #13]
 80169d4:	7a80      	ldrb	r0, [r0, #10]
 80169d6:	005b      	lsls	r3, r3, #1
 80169d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80169dc:	4318      	orrs	r0, r3
 80169de:	bd08      	pop	{r3, pc}

080169e0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80169e0:	b40e      	push	{r1, r2, r3}
 80169e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169e4:	b09e      	sub	sp, #120	; 0x78
 80169e6:	4605      	mov	r5, r0
 80169e8:	ab23      	add	r3, sp, #140	; 0x8c
 80169ea:	a805      	add	r0, sp, #20
 80169ec:	f853 4b04 	ldr.w	r4, [r3], #4
 80169f0:	9303      	str	r3, [sp, #12]
 80169f2:	f000 fd46 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 80169f6:	682b      	ldr	r3, [r5, #0]
 80169f8:	4628      	mov	r0, r5
 80169fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169fc:	4798      	blx	r3
 80169fe:	682b      	ldr	r3, [r5, #0]
 8016a00:	4606      	mov	r6, r0
 8016a02:	4628      	mov	r0, r5
 8016a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a06:	4798      	blx	r3
 8016a08:	4633      	mov	r3, r6
 8016a0a:	4621      	mov	r1, r4
 8016a0c:	ae1e      	add	r6, sp, #120	; 0x78
 8016a0e:	2400      	movs	r4, #0
 8016a10:	9000      	str	r0, [sp, #0]
 8016a12:	9a03      	ldr	r2, [sp, #12]
 8016a14:	a805      	add	r0, sp, #20
 8016a16:	f000 fd8f 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016a1a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8016a1e:	462a      	mov	r2, r5
 8016a20:	4633      	mov	r3, r6
 8016a22:	4621      	mov	r1, r4
 8016a24:	a805      	add	r0, sp, #20
 8016a26:	f001 f88d 	bl	8017b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016a2a:	b300      	cbz	r0, 8016a6e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8016a2c:	280a      	cmp	r0, #10
 8016a2e:	d01a      	beq.n	8016a66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016a30:	9f04      	ldr	r7, [sp, #16]
 8016a32:	b1c7      	cbz	r7, 8016a66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016a34:	7b78      	ldrb	r0, [r7, #13]
 8016a36:	7a3b      	ldrb	r3, [r7, #8]
 8016a38:	00c1      	lsls	r1, r0, #3
 8016a3a:	88ea      	ldrh	r2, [r5, #6]
 8016a3c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016a40:	4319      	orrs	r1, r3
 8016a42:	0643      	lsls	r3, r0, #25
 8016a44:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8016a48:	bf48      	it	mi
 8016a4a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8016a4e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016a52:	bf48      	it	mi
 8016a54:	b219      	sxthmi	r1, r3
 8016a56:	79fb      	ldrb	r3, [r7, #7]
 8016a58:	4303      	orrs	r3, r0
 8016a5a:	4413      	add	r3, r2
 8016a5c:	1a5b      	subs	r3, r3, r1
 8016a5e:	b21b      	sxth	r3, r3
 8016a60:	429c      	cmp	r4, r3
 8016a62:	bfb8      	it	lt
 8016a64:	461c      	movlt	r4, r3
 8016a66:	4633      	mov	r3, r6
 8016a68:	462a      	mov	r2, r5
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	e7da      	b.n	8016a24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8016a6e:	b2a0      	uxth	r0, r4
 8016a70:	b01e      	add	sp, #120	; 0x78
 8016a72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a76:	b003      	add	sp, #12
 8016a78:	4770      	bx	lr

08016a7a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8016a7a:	7a43      	ldrb	r3, [r0, #9]
 8016a7c:	8880      	ldrh	r0, [r0, #4]
 8016a7e:	4418      	add	r0, r3
 8016a80:	b280      	uxth	r0, r0
 8016a82:	4770      	bx	lr

08016a84 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8016a84:	6803      	ldr	r3, [r0, #0]
 8016a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a88:	4718      	bx	r3

08016a8a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016a8a:	b40e      	push	{r1, r2, r3}
 8016a8c:	b570      	push	{r4, r5, r6, lr}
 8016a8e:	b09d      	sub	sp, #116	; 0x74
 8016a90:	4604      	mov	r4, r0
 8016a92:	ab21      	add	r3, sp, #132	; 0x84
 8016a94:	a803      	add	r0, sp, #12
 8016a96:	f853 5b04 	ldr.w	r5, [r3], #4
 8016a9a:	9302      	str	r3, [sp, #8]
 8016a9c:	f000 fcf1 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 8016aa0:	6823      	ldr	r3, [r4, #0]
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016aa6:	4798      	blx	r3
 8016aa8:	6823      	ldr	r3, [r4, #0]
 8016aaa:	4606      	mov	r6, r0
 8016aac:	4620      	mov	r0, r4
 8016aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ab0:	2401      	movs	r4, #1
 8016ab2:	4798      	blx	r3
 8016ab4:	4633      	mov	r3, r6
 8016ab6:	9000      	str	r0, [sp, #0]
 8016ab8:	4629      	mov	r1, r5
 8016aba:	9a02      	ldr	r2, [sp, #8]
 8016abc:	a803      	add	r0, sp, #12
 8016abe:	f000 fd3b 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016ac2:	a803      	add	r0, sp, #12
 8016ac4:	f001 f90a 	bl	8017cdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016ac8:	b2a3      	uxth	r3, r4
 8016aca:	b138      	cbz	r0, 8016adc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8016acc:	280a      	cmp	r0, #10
 8016ace:	a803      	add	r0, sp, #12
 8016ad0:	bf04      	itt	eq
 8016ad2:	3301      	addeq	r3, #1
 8016ad4:	b21c      	sxtheq	r4, r3
 8016ad6:	f001 f901 	bl	8017cdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016ada:	e7f5      	b.n	8016ac8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016adc:	4618      	mov	r0, r3
 8016ade:	b01d      	add	sp, #116	; 0x74
 8016ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ae4:	b003      	add	sp, #12
 8016ae6:	4770      	bx	lr

08016ae8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016ae8:	b40e      	push	{r1, r2, r3}
 8016aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aec:	b09e      	sub	sp, #120	; 0x78
 8016aee:	4604      	mov	r4, r0
 8016af0:	ab23      	add	r3, sp, #140	; 0x8c
 8016af2:	a805      	add	r0, sp, #20
 8016af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8016af8:	9303      	str	r3, [sp, #12]
 8016afa:	f000 fcc2 	bl	8017482 <_ZN8touchgfx12TextProviderC1Ev>
 8016afe:	6823      	ldr	r3, [r4, #0]
 8016b00:	4620      	mov	r0, r4
 8016b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016b04:	4798      	blx	r3
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	4606      	mov	r6, r0
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b0e:	4798      	blx	r3
 8016b10:	4633      	mov	r3, r6
 8016b12:	4629      	mov	r1, r5
 8016b14:	9000      	str	r0, [sp, #0]
 8016b16:	9a03      	ldr	r2, [sp, #12]
 8016b18:	a805      	add	r0, sp, #20
 8016b1a:	f000 fd0d 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016b1e:	ad1e      	add	r5, sp, #120	; 0x78
 8016b20:	2100      	movs	r1, #0
 8016b22:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8016b26:	4622      	mov	r2, r4
 8016b28:	a805      	add	r0, sp, #20
 8016b2a:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016b2e:	462b      	mov	r3, r5
 8016b30:	f001 f808 	bl	8017b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b34:	b1d8      	cbz	r0, 8016b6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8016b36:	280a      	cmp	r0, #10
 8016b38:	d012      	beq.n	8016b60 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016b3a:	9804      	ldr	r0, [sp, #16]
 8016b3c:	b180      	cbz	r0, 8016b60 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016b3e:	7b47      	ldrb	r7, [r0, #13]
 8016b40:	88e2      	ldrh	r2, [r4, #6]
 8016b42:	00fb      	lsls	r3, r7, #3
 8016b44:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016b48:	7a03      	ldrb	r3, [r0, #8]
 8016b4a:	430b      	orrs	r3, r1
 8016b4c:	0679      	lsls	r1, r7, #25
 8016b4e:	bf44      	itt	mi
 8016b50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016b54:	b21b      	sxthmi	r3, r3
 8016b56:	1ad3      	subs	r3, r2, r3
 8016b58:	b21b      	sxth	r3, r3
 8016b5a:	429e      	cmp	r6, r3
 8016b5c:	bfa8      	it	ge
 8016b5e:	461e      	movge	r6, r3
 8016b60:	462b      	mov	r3, r5
 8016b62:	4622      	mov	r2, r4
 8016b64:	2100      	movs	r1, #0
 8016b66:	a805      	add	r0, sp, #20
 8016b68:	f000 ffec 	bl	8017b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b6c:	e7e2      	b.n	8016b34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8016b6e:	4630      	mov	r0, r6
 8016b70:	b01e      	add	sp, #120	; 0x78
 8016b72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016b76:	b003      	add	sp, #12
 8016b78:	4770      	bx	lr

08016b7a <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016b7a:	b513      	push	{r0, r1, r4, lr}
 8016b7c:	6803      	ldr	r3, [r0, #0]
 8016b7e:	2400      	movs	r4, #0
 8016b80:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016b84:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016b88:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016b8c:	4669      	mov	r1, sp
 8016b8e:	691b      	ldr	r3, [r3, #16]
 8016b90:	9400      	str	r4, [sp, #0]
 8016b92:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016b96:	4798      	blx	r3
 8016b98:	b002      	add	sp, #8
 8016b9a:	bd10      	pop	{r4, pc}

08016b9c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8016b9c:	b538      	push	{r3, r4, r5, lr}
 8016b9e:	680b      	ldr	r3, [r1, #0]
 8016ba0:	460c      	mov	r4, r1
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	68db      	ldr	r3, [r3, #12]
 8016ba6:	4798      	blx	r3
 8016ba8:	6823      	ldr	r3, [r4, #0]
 8016baa:	4620      	mov	r0, r4
 8016bac:	4629      	mov	r1, r5
 8016bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bb0:	4798      	blx	r3
 8016bb2:	4628      	mov	r0, r5
 8016bb4:	bd38      	pop	{r3, r4, r5, pc}

08016bb6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016bb6:	b410      	push	{r4}
 8016bb8:	880a      	ldrh	r2, [r1, #0]
 8016bba:	8884      	ldrh	r4, [r0, #4]
 8016bbc:	4422      	add	r2, r4
 8016bbe:	800a      	strh	r2, [r1, #0]
 8016bc0:	884a      	ldrh	r2, [r1, #2]
 8016bc2:	88c4      	ldrh	r4, [r0, #6]
 8016bc4:	4422      	add	r2, r4
 8016bc6:	804a      	strh	r2, [r1, #2]
 8016bc8:	6940      	ldr	r0, [r0, #20]
 8016bca:	b120      	cbz	r0, 8016bd6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016bcc:	6803      	ldr	r3, [r0, #0]
 8016bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bd4:	4718      	bx	r3
 8016bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bda:	4770      	bx	lr

08016bdc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016bdc:	b570      	push	{r4, r5, r6, lr}
 8016bde:	8882      	ldrh	r2, [r0, #4]
 8016be0:	460c      	mov	r4, r1
 8016be2:	880b      	ldrh	r3, [r1, #0]
 8016be4:	4605      	mov	r5, r0
 8016be6:	4413      	add	r3, r2
 8016be8:	800b      	strh	r3, [r1, #0]
 8016bea:	884b      	ldrh	r3, [r1, #2]
 8016bec:	88c2      	ldrh	r2, [r0, #6]
 8016bee:	4413      	add	r3, r2
 8016bf0:	804b      	strh	r3, [r1, #2]
 8016bf2:	1d01      	adds	r1, r0, #4
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f7fb f977 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8016bfa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	dd0b      	ble.n	8016c1a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016c02:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	dd07      	ble.n	8016c1a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016c0a:	6968      	ldr	r0, [r5, #20]
 8016c0c:	b128      	cbz	r0, 8016c1a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016c0e:	6803      	ldr	r3, [r0, #0]
 8016c10:	4621      	mov	r1, r4
 8016c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c18:	4718      	bx	r3
 8016c1a:	bd70      	pop	{r4, r5, r6, pc}

08016c1c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016c1c:	b570      	push	{r4, r5, r6, lr}
 8016c1e:	8882      	ldrh	r2, [r0, #4]
 8016c20:	460c      	mov	r4, r1
 8016c22:	880b      	ldrh	r3, [r1, #0]
 8016c24:	4605      	mov	r5, r0
 8016c26:	4413      	add	r3, r2
 8016c28:	800b      	strh	r3, [r1, #0]
 8016c2a:	884b      	ldrh	r3, [r1, #2]
 8016c2c:	88c2      	ldrh	r2, [r0, #6]
 8016c2e:	4413      	add	r3, r2
 8016c30:	804b      	strh	r3, [r1, #2]
 8016c32:	1d01      	adds	r1, r0, #4
 8016c34:	4620      	mov	r0, r4
 8016c36:	f7fb f957 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 8016c3a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	dd18      	ble.n	8016c74 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016c42:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	dd14      	ble.n	8016c74 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016c4a:	6968      	ldr	r0, [r5, #20]
 8016c4c:	b128      	cbz	r0, 8016c5a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016c4e:	6803      	ldr	r3, [r0, #0]
 8016c50:	4621      	mov	r1, r4
 8016c52:	691b      	ldr	r3, [r3, #16]
 8016c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c58:	4718      	bx	r3
 8016c5a:	4b07      	ldr	r3, [pc, #28]	; (8016c78 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	3304      	adds	r3, #4
 8016c60:	429d      	cmp	r5, r3
 8016c62:	d107      	bne.n	8016c74 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016c64:	f7fe ff1c 	bl	8015aa0 <_ZN8touchgfx11Application11getInstanceEv>
 8016c68:	6821      	ldr	r1, [r4, #0]
 8016c6a:	6862      	ldr	r2, [r4, #4]
 8016c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c70:	f7ff b862 	b.w	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016c74:	bd70      	pop	{r4, r5, r6, pc}
 8016c76:	bf00      	nop
 8016c78:	20011b78 	.word	0x20011b78

08016c7c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016c7c:	b570      	push	{r4, r5, r6, lr}
 8016c7e:	4604      	mov	r4, r0
 8016c80:	4616      	mov	r6, r2
 8016c82:	460d      	mov	r5, r1
 8016c84:	b901      	cbnz	r1, 8016c88 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016c86:	b192      	cbz	r2, 8016cae <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016c88:	6823      	ldr	r3, [r4, #0]
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	699b      	ldr	r3, [r3, #24]
 8016c8e:	4798      	blx	r3
 8016c90:	88e2      	ldrh	r2, [r4, #6]
 8016c92:	88a1      	ldrh	r1, [r4, #4]
 8016c94:	4620      	mov	r0, r4
 8016c96:	4432      	add	r2, r6
 8016c98:	4429      	add	r1, r5
 8016c9a:	b212      	sxth	r2, r2
 8016c9c:	b209      	sxth	r1, r1
 8016c9e:	f7f4 ffb7 	bl	800bc10 <_ZN8touchgfx8Drawable5setXYEss>
 8016ca2:	6823      	ldr	r3, [r4, #0]
 8016ca4:	4620      	mov	r0, r4
 8016ca6:	699b      	ldr	r3, [r3, #24]
 8016ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cac:	4718      	bx	r3
 8016cae:	bd70      	pop	{r4, r5, r6, pc}

08016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016cb0:	b510      	push	{r4, lr}
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	4608      	mov	r0, r1
 8016cb8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016cbc:	8023      	strh	r3, [r4, #0]
 8016cbe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016cc2:	8063      	strh	r3, [r4, #2]
 8016cc4:	6803      	ldr	r3, [r0, #0]
 8016cc6:	80a1      	strh	r1, [r4, #4]
 8016cc8:	4621      	mov	r1, r4
 8016cca:	80e2      	strh	r2, [r4, #6]
 8016ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cce:	4798      	blx	r3
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	bd10      	pop	{r4, pc}

08016cd4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8016cd4:	b530      	push	{r4, r5, lr}
 8016cd6:	8083      	strh	r3, [r0, #4]
 8016cd8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016cdc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016ce0:	80c3      	strh	r3, [r0, #6]
 8016ce2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016ce6:	6141      	str	r1, [r0, #20]
 8016ce8:	7203      	strb	r3, [r0, #8]
 8016cea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016cee:	8302      	strh	r2, [r0, #24]
 8016cf0:	7243      	strb	r3, [r0, #9]
 8016cf2:	7a83      	ldrb	r3, [r0, #10]
 8016cf4:	f365 0306 	bfi	r3, r5, #0, #7
 8016cf8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8016cfc:	f365 13c7 	bfi	r3, r5, #7, #1
 8016d00:	7283      	strb	r3, [r0, #10]
 8016d02:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016d06:	72c3      	strb	r3, [r0, #11]
 8016d08:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016d0c:	7303      	strb	r3, [r0, #12]
 8016d0e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016d12:	81c3      	strh	r3, [r0, #14]
 8016d14:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8016d18:	8203      	strh	r3, [r0, #16]
 8016d1a:	4b01      	ldr	r3, [pc, #4]	; (8016d20 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016d1c:	6003      	str	r3, [r0, #0]
 8016d1e:	bd30      	pop	{r4, r5, pc}
 8016d20:	080242a0 	.word	0x080242a0

08016d24 <_ZNK8touchgfx9ConstFont4findEt>:
 8016d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d26:	6944      	ldr	r4, [r0, #20]
 8016d28:	b3bc      	cbz	r4, 8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d2a:	88a3      	ldrh	r3, [r4, #4]
 8016d2c:	8b02      	ldrh	r2, [r0, #24]
 8016d2e:	1acb      	subs	r3, r1, r3
 8016d30:	f102 32ff 	add.w	r2, r2, #4294967295
 8016d34:	d431      	bmi.n	8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d36:	4293      	cmp	r3, r2
 8016d38:	dd0c      	ble.n	8016d54 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016d3a:	230e      	movs	r3, #14
 8016d3c:	fb03 4302 	mla	r3, r3, r2, r4
 8016d40:	889b      	ldrh	r3, [r3, #4]
 8016d42:	1a5b      	subs	r3, r3, r1
 8016d44:	1ad3      	subs	r3, r2, r3
 8016d46:	429a      	cmp	r2, r3
 8016d48:	db27      	blt.n	8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	bfbc      	itt	lt
 8016d4e:	2302      	movlt	r3, #2
 8016d50:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016d54:	2500      	movs	r5, #0
 8016d56:	260e      	movs	r6, #14
 8016d58:	4295      	cmp	r5, r2
 8016d5a:	dc1e      	bgt.n	8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d5c:	fb06 4003 	mla	r0, r6, r3, r4
 8016d60:	8887      	ldrh	r7, [r0, #4]
 8016d62:	42b9      	cmp	r1, r7
 8016d64:	d01a      	beq.n	8016d9c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8016d66:	d20d      	bcs.n	8016d84 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016d68:	1e5a      	subs	r2, r3, #1
 8016d6a:	4295      	cmp	r5, r2
 8016d6c:	dc15      	bgt.n	8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d6e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016d72:	1a5b      	subs	r3, r3, r1
 8016d74:	1ad3      	subs	r3, r2, r3
 8016d76:	429a      	cmp	r2, r3
 8016d78:	db0f      	blt.n	8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d7a:	429d      	cmp	r5, r3
 8016d7c:	ddec      	ble.n	8016d58 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016d7e:	1953      	adds	r3, r2, r5
 8016d80:	105b      	asrs	r3, r3, #1
 8016d82:	e7e9      	b.n	8016d58 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016d84:	1c5d      	adds	r5, r3, #1
 8016d86:	42aa      	cmp	r2, r5
 8016d88:	db07      	blt.n	8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d8a:	8a43      	ldrh	r3, [r0, #18]
 8016d8c:	1acb      	subs	r3, r1, r3
 8016d8e:	442b      	add	r3, r5
 8016d90:	429d      	cmp	r5, r3
 8016d92:	dc02      	bgt.n	8016d9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d94:	429a      	cmp	r2, r3
 8016d96:	dadf      	bge.n	8016d58 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016d98:	e7f1      	b.n	8016d7e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016d9a:	2000      	movs	r0, #0
 8016d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016da0:	4604      	mov	r4, r0
 8016da2:	4617      	mov	r7, r2
 8016da4:	461e      	mov	r6, r3
 8016da6:	b911      	cbnz	r1, 8016dae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016da8:	2500      	movs	r5, #0
 8016daa:	4628      	mov	r0, r5
 8016dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dae:	290a      	cmp	r1, #10
 8016db0:	d0fa      	beq.n	8016da8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016db2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016db6:	4291      	cmp	r1, r2
 8016db8:	d0f6      	beq.n	8016da8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016dba:	f242 020b 	movw	r2, #8203	; 0x200b
 8016dbe:	4291      	cmp	r1, r2
 8016dc0:	d0f2      	beq.n	8016da8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016dc2:	f7ff ffaf 	bl	8016d24 <_ZNK8touchgfx9ConstFont4findEt>
 8016dc6:	4605      	mov	r5, r0
 8016dc8:	b950      	cbnz	r0, 8016de0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016dca:	6823      	ldr	r3, [r4, #0]
 8016dcc:	4620      	mov	r0, r4
 8016dce:	691b      	ldr	r3, [r3, #16]
 8016dd0:	4798      	blx	r3
 8016dd2:	4601      	mov	r1, r0
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f7ff ffa5 	bl	8016d24 <_ZNK8touchgfx9ConstFont4findEt>
 8016dda:	4605      	mov	r5, r0
 8016ddc:	2800      	cmp	r0, #0
 8016dde:	d0e3      	beq.n	8016da8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016de0:	6823      	ldr	r3, [r4, #0]
 8016de2:	4629      	mov	r1, r5
 8016de4:	4620      	mov	r0, r4
 8016de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016de8:	4798      	blx	r3
 8016dea:	6038      	str	r0, [r7, #0]
 8016dec:	6823      	ldr	r3, [r4, #0]
 8016dee:	4620      	mov	r0, r4
 8016df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016df2:	4798      	blx	r3
 8016df4:	7030      	strb	r0, [r6, #0]
 8016df6:	e7d8      	b.n	8016daa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016df8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016df8:	2000      	movs	r0, #0
 8016dfa:	4770      	bx	lr

08016dfc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016dfc:	2001      	movs	r0, #1
 8016dfe:	4770      	bx	lr

08016e00 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016e00:	2002      	movs	r0, #2
 8016e02:	4770      	bx	lr

08016e04 <_ZN8touchgfx12GestureEventD1Ev>:
 8016e04:	4770      	bx	lr

08016e06 <_ZN8touchgfx9DragEventD1Ev>:
 8016e06:	4770      	bx	lr

08016e08 <_ZN8touchgfx10ClickEventD1Ev>:
 8016e08:	4770      	bx	lr

08016e0a <_ZN8touchgfx10ClickEventD0Ev>:
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	210c      	movs	r1, #12
 8016e10:	f00a f84b 	bl	8020eaa <_ZdlPvj>
 8016e14:	4620      	mov	r0, r4
 8016e16:	bd10      	pop	{r4, pc}

08016e18 <_ZN8touchgfx9DragEventD0Ev>:
 8016e18:	b510      	push	{r4, lr}
 8016e1a:	4604      	mov	r4, r0
 8016e1c:	2110      	movs	r1, #16
 8016e1e:	f00a f844 	bl	8020eaa <_ZdlPvj>
 8016e22:	4620      	mov	r0, r4
 8016e24:	bd10      	pop	{r4, pc}

08016e26 <_ZN8touchgfx12GestureEventD0Ev>:
 8016e26:	b510      	push	{r4, lr}
 8016e28:	4604      	mov	r4, r0
 8016e2a:	210c      	movs	r1, #12
 8016e2c:	f00a f83d 	bl	8020eaa <_ZdlPvj>
 8016e30:	4620      	mov	r0, r4
 8016e32:	bd10      	pop	{r4, pc}

08016e34 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016e34:	b530      	push	{r4, r5, lr}
 8016e36:	460d      	mov	r5, r1
 8016e38:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016e3a:	b087      	sub	sp, #28
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	b301      	cbz	r1, 8016e82 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016e40:	a801      	add	r0, sp, #4
 8016e42:	f7ff ff35 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e46:	892a      	ldrh	r2, [r5, #8]
 8016e48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016e4c:	7928      	ldrb	r0, [r5, #4]
 8016e4e:	1ad2      	subs	r2, r2, r3
 8016e50:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016e52:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016e56:	441a      	add	r2, r3
 8016e58:	896b      	ldrh	r3, [r5, #10]
 8016e5a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016e5e:	f88d 0010 	strb.w	r0, [sp, #16]
 8016e62:	1b5b      	subs	r3, r3, r5
 8016e64:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8016e66:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016e68:	442b      	add	r3, r5
 8016e6a:	4d07      	ldr	r5, [pc, #28]	; (8016e88 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016e6c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016e70:	a903      	add	r1, sp, #12
 8016e72:	9503      	str	r5, [sp, #12]
 8016e74:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016e78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e7c:	6803      	ldr	r3, [r0, #0]
 8016e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e80:	4798      	blx	r3
 8016e82:	b007      	add	sp, #28
 8016e84:	bd30      	pop	{r4, r5, pc}
 8016e86:	bf00      	nop
 8016e88:	08024328 	.word	0x08024328

08016e8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016e92:	b08a      	sub	sp, #40	; 0x28
 8016e94:	4604      	mov	r4, r0
 8016e96:	460d      	mov	r5, r1
 8016e98:	b113      	cbz	r3, 8016ea0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016e9a:	790b      	ldrb	r3, [r1, #4]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d044      	beq.n	8016f2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016ea0:	f104 0804 	add.w	r8, r4, #4
 8016ea4:	a803      	add	r0, sp, #12
 8016ea6:	4641      	mov	r1, r8
 8016ea8:	f7ff ff02 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016eac:	792b      	ldrb	r3, [r5, #4]
 8016eae:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016eb2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016eb6:	b983      	cbnz	r3, 8016eda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016eb8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8016ebc:	892a      	ldrh	r2, [r5, #8]
 8016ebe:	88e9      	ldrh	r1, [r5, #6]
 8016ec0:	4640      	mov	r0, r8
 8016ec2:	1b92      	subs	r2, r2, r6
 8016ec4:	9301      	str	r3, [sp, #4]
 8016ec6:	1bc9      	subs	r1, r1, r7
 8016ec8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016ecc:	b212      	sxth	r2, r2
 8016ece:	9300      	str	r3, [sp, #0]
 8016ed0:	b209      	sxth	r1, r1
 8016ed2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016ed6:	f7fa ff25 	bl	8011d24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016eda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016edc:	b329      	cbz	r1, 8016f2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016ede:	a805      	add	r0, sp, #20
 8016ee0:	f7ff fee6 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ee4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016ee8:	792b      	ldrb	r3, [r5, #4]
 8016eea:	a907      	add	r1, sp, #28
 8016eec:	1abf      	subs	r7, r7, r2
 8016eee:	88ea      	ldrh	r2, [r5, #6]
 8016ef0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016ef2:	4417      	add	r7, r2
 8016ef4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016ef6:	f88d 3020 	strb.w	r3, [sp, #32]
 8016efa:	4417      	add	r7, r2
 8016efc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016f00:	1ab6      	subs	r6, r6, r2
 8016f02:	892a      	ldrh	r2, [r5, #8]
 8016f04:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016f08:	4416      	add	r6, r2
 8016f0a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016f0c:	4416      	add	r6, r2
 8016f0e:	4a08      	ldr	r2, [pc, #32]	; (8016f30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016f10:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8016f14:	2600      	movs	r6, #0
 8016f16:	9207      	str	r2, [sp, #28]
 8016f18:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016f1c:	6803      	ldr	r3, [r0, #0]
 8016f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f20:	4798      	blx	r3
 8016f22:	792b      	ldrb	r3, [r5, #4]
 8016f24:	b10b      	cbz	r3, 8016f2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016f26:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8016f2a:	b00a      	add	sp, #40	; 0x28
 8016f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f30:	08024300 	.word	0x08024300

08016f34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f38:	460c      	mov	r4, r1
 8016f3a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016f3c:	b088      	sub	sp, #32
 8016f3e:	4605      	mov	r5, r0
 8016f40:	2900      	cmp	r1, #0
 8016f42:	d06d      	beq.n	8017020 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016f44:	4668      	mov	r0, sp
 8016f46:	f7ff feb3 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f4a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016f4c:	88e3      	ldrh	r3, [r4, #6]
 8016f4e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016f52:	440b      	add	r3, r1
 8016f54:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016f58:	b21b      	sxth	r3, r3
 8016f5a:	4543      	cmp	r3, r8
 8016f5c:	db31      	blt.n	8016fc2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f5e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016f62:	44c4      	add	ip, r8
 8016f64:	fa0f fc8c 	sxth.w	ip, ip
 8016f68:	4563      	cmp	r3, ip
 8016f6a:	da2a      	bge.n	8016fc2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f6c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016f6e:	8926      	ldrh	r6, [r4, #8]
 8016f70:	4416      	add	r6, r2
 8016f72:	b236      	sxth	r6, r6
 8016f74:	42be      	cmp	r6, r7
 8016f76:	db24      	blt.n	8016fc2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f78:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016f7c:	4438      	add	r0, r7
 8016f7e:	b200      	sxth	r0, r0
 8016f80:	4286      	cmp	r6, r0
 8016f82:	da1e      	bge.n	8016fc2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f84:	8963      	ldrh	r3, [r4, #10]
 8016f86:	4419      	add	r1, r3
 8016f88:	b209      	sxth	r1, r1
 8016f8a:	4541      	cmp	r1, r8
 8016f8c:	db08      	blt.n	8016fa0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f8e:	4561      	cmp	r1, ip
 8016f90:	da06      	bge.n	8016fa0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f92:	89a3      	ldrh	r3, [r4, #12]
 8016f94:	441a      	add	r2, r3
 8016f96:	b212      	sxth	r2, r2
 8016f98:	42ba      	cmp	r2, r7
 8016f9a:	db01      	blt.n	8016fa0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f9c:	4282      	cmp	r2, r0
 8016f9e:	db10      	blt.n	8016fc2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016fa0:	4b21      	ldr	r3, [pc, #132]	; (8017028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016fa2:	a904      	add	r1, sp, #16
 8016fa4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016fa6:	9304      	str	r3, [sp, #16]
 8016fa8:	2302      	movs	r3, #2
 8016faa:	f88d 3014 	strb.w	r3, [sp, #20]
 8016fae:	2300      	movs	r3, #0
 8016fb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016fb4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016fb8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016fbc:	6803      	ldr	r3, [r0, #0]
 8016fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fc0:	4798      	blx	r3
 8016fc2:	1d29      	adds	r1, r5, #4
 8016fc4:	a802      	add	r0, sp, #8
 8016fc6:	f7ff fe73 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016fce:	88e0      	ldrh	r0, [r4, #6]
 8016fd0:	eba3 0808 	sub.w	r8, r3, r8
 8016fd4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016fd8:	7921      	ldrb	r1, [r4, #4]
 8016fda:	fa1f f888 	uxth.w	r8, r8
 8016fde:	1bdf      	subs	r7, r3, r7
 8016fe0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016fe4:	b2bb      	uxth	r3, r7
 8016fe6:	4440      	add	r0, r8
 8016fe8:	8922      	ldrh	r2, [r4, #8]
 8016fea:	8967      	ldrh	r7, [r4, #10]
 8016fec:	4460      	add	r0, ip
 8016fee:	89a4      	ldrh	r4, [r4, #12]
 8016ff0:	441a      	add	r2, r3
 8016ff2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016ff4:	44b8      	add	r8, r7
 8016ff6:	4423      	add	r3, r4
 8016ff8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016ffc:	4432      	add	r2, r6
 8016ffe:	44e0      	add	r8, ip
 8017000:	4433      	add	r3, r6
 8017002:	4c0a      	ldr	r4, [pc, #40]	; (801702c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017004:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017006:	f88d 1014 	strb.w	r1, [sp, #20]
 801700a:	a904      	add	r1, sp, #16
 801700c:	9404      	str	r4, [sp, #16]
 801700e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017012:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017016:	f8ad 301c 	strh.w	r3, [sp, #28]
 801701a:	6803      	ldr	r3, [r0, #0]
 801701c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801701e:	4798      	blx	r3
 8017020:	b008      	add	sp, #32
 8017022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017026:	bf00      	nop
 8017028:	08024300 	.word	0x08024300
 801702c:	08024314 	.word	0x08024314

08017030 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017032:	4604      	mov	r4, r0
 8017034:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017038:	3201      	adds	r2, #1
 801703a:	d112      	bne.n	8017062 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801703c:	2500      	movs	r5, #0
 801703e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017042:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017046:	6803      	ldr	r3, [r0, #0]
 8017048:	9500      	str	r5, [sp, #0]
 801704a:	466d      	mov	r5, sp
 801704c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017050:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017054:	4629      	mov	r1, r5
 8017056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017058:	4798      	blx	r3
 801705a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801705e:	e884 0003 	stmia.w	r4, {r0, r1}
 8017062:	4620      	mov	r0, r4
 8017064:	b003      	add	sp, #12
 8017066:	bd30      	pop	{r4, r5, pc}

08017068 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017068:	b513      	push	{r0, r1, r4, lr}
 801706a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801706e:	4604      	mov	r4, r0
 8017070:	3301      	adds	r3, #1
 8017072:	d109      	bne.n	8017088 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017074:	4601      	mov	r1, r0
 8017076:	4668      	mov	r0, sp
 8017078:	f7ff fe1a 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801707c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017080:	8423      	strh	r3, [r4, #32]
 8017082:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017086:	8463      	strh	r3, [r4, #34]	; 0x22
 8017088:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801708c:	b002      	add	sp, #8
 801708e:	bd10      	pop	{r4, pc}

08017090 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017090:	b513      	push	{r0, r1, r4, lr}
 8017092:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017096:	4604      	mov	r4, r0
 8017098:	3301      	adds	r3, #1
 801709a:	d109      	bne.n	80170b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801709c:	4601      	mov	r1, r0
 801709e:	4668      	mov	r0, sp
 80170a0:	f7ff fe06 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80170a8:	8423      	strh	r3, [r4, #32]
 80170aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80170ae:	8463      	strh	r3, [r4, #34]	; 0x22
 80170b0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80170b4:	b002      	add	sp, #8
 80170b6:	bd10      	pop	{r4, pc}

080170b8 <_ZN8touchgfx6ScreenC1Ev>:
 80170b8:	b570      	push	{r4, r5, r6, lr}
 80170ba:	4b17      	ldr	r3, [pc, #92]	; (8017118 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80170bc:	4605      	mov	r5, r0
 80170be:	4a17      	ldr	r2, [pc, #92]	; (801711c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80170c0:	2101      	movs	r1, #1
 80170c2:	f845 3b04 	str.w	r3, [r5], #4
 80170c6:	2300      	movs	r3, #0
 80170c8:	6042      	str	r2, [r0, #4]
 80170ca:	4604      	mov	r4, r0
 80170cc:	8103      	strh	r3, [r0, #8]
 80170ce:	8143      	strh	r3, [r0, #10]
 80170d0:	8183      	strh	r3, [r0, #12]
 80170d2:	81c3      	strh	r3, [r0, #14]
 80170d4:	8203      	strh	r3, [r0, #16]
 80170d6:	8243      	strh	r3, [r0, #18]
 80170d8:	8283      	strh	r3, [r0, #20]
 80170da:	82c3      	strh	r3, [r0, #22]
 80170dc:	6203      	str	r3, [r0, #32]
 80170de:	8483      	strh	r3, [r0, #36]	; 0x24
 80170e0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80170e2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80170e6:	6343      	str	r3, [r0, #52]	; 0x34
 80170e8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80170ec:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80170f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80170f4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80170f8:	4b09      	ldr	r3, [pc, #36]	; (8017120 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80170fa:	4628      	mov	r0, r5
 80170fc:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017100:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8017102:	4a08      	ldr	r2, [pc, #32]	; (8017124 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017104:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017108:	4798      	blx	r3
 801710a:	6863      	ldr	r3, [r4, #4]
 801710c:	4628      	mov	r0, r5
 801710e:	4631      	mov	r1, r6
 8017110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017112:	4798      	blx	r3
 8017114:	4620      	mov	r0, r4
 8017116:	bd70      	pop	{r4, r5, r6, pc}
 8017118:	0802433c 	.word	0x0802433c
 801711c:	08023b30 	.word	0x08023b30
 8017120:	20011b30 	.word	0x20011b30
 8017124:	20011b2e 	.word	0x20011b2e

08017128 <_ZN8touchgfx6Screen4drawEv>:
 8017128:	4b09      	ldr	r3, [pc, #36]	; (8017150 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801712a:	b507      	push	{r0, r1, r2, lr}
 801712c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017130:	2100      	movs	r1, #0
 8017132:	4b08      	ldr	r3, [pc, #32]	; (8017154 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017134:	9100      	str	r1, [sp, #0]
 8017136:	4669      	mov	r1, sp
 8017138:	f9b3 3000 	ldrsh.w	r3, [r3]
 801713c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017140:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017144:	6803      	ldr	r3, [r0, #0]
 8017146:	689b      	ldr	r3, [r3, #8]
 8017148:	4798      	blx	r3
 801714a:	b003      	add	sp, #12
 801714c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017150:	20011b2e 	.word	0x20011b2e
 8017154:	20011b30 	.word	0x20011b30

08017158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801715c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017160:	b089      	sub	sp, #36	; 0x24
 8017162:	4680      	mov	r8, r0
 8017164:	460c      	mov	r4, r1
 8017166:	2b00      	cmp	r3, #0
 8017168:	4615      	mov	r5, r2
 801716a:	dd0e      	ble.n	801718a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801716c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017170:	2b00      	cmp	r3, #0
 8017172:	dd0a      	ble.n	801718a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017174:	4628      	mov	r0, r5
 8017176:	f7ff ff5b 	bl	8017030 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801717a:	4621      	mov	r1, r4
 801717c:	f7fe fbb2 	bl	80158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017180:	69eb      	ldr	r3, [r5, #28]
 8017182:	b928      	cbnz	r0, 8017190 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017184:	461d      	mov	r5, r3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d1f4      	bne.n	8017174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801718a:	b009      	add	sp, #36	; 0x24
 801718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017190:	ae04      	add	r6, sp, #16
 8017192:	2b00      	cmp	r3, #0
 8017194:	f000 80b5 	beq.w	8017302 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017198:	682b      	ldr	r3, [r5, #0]
 801719a:	4629      	mov	r1, r5
 801719c:	a802      	add	r0, sp, #8
 801719e:	68db      	ldr	r3, [r3, #12]
 80171a0:	4798      	blx	r3
 80171a2:	4628      	mov	r0, r5
 80171a4:	f7ff ff60 	bl	8017068 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80171a8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80171ac:	4407      	add	r7, r0
 80171ae:	4628      	mov	r0, r5
 80171b0:	f7ff ff6e 	bl	8017090 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80171b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80171b8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80171bc:	b23f      	sxth	r7, r7
 80171be:	4418      	add	r0, r3
 80171c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80171c4:	4621      	mov	r1, r4
 80171c6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80171ca:	f8ad 0012 	strh.w	r0, [sp, #18]
 80171ce:	4630      	mov	r0, r6
 80171d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80171d4:	f8ad 7010 	strh.w	r7, [sp, #16]
 80171d8:	f7fa fe86 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 80171dc:	4628      	mov	r0, r5
 80171de:	f7ff ff27 	bl	8017030 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80171e2:	ab06      	add	r3, sp, #24
 80171e4:	4602      	mov	r2, r0
 80171e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80171ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80171ee:	4611      	mov	r1, r2
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7fa fe79 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 80171f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80171fa:	f9b4 1000 	ldrsh.w	r1, [r4]
 80171fe:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017202:	4299      	cmp	r1, r3
 8017204:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017208:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801720c:	d10b      	bne.n	8017226 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801720e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017212:	4552      	cmp	r2, sl
 8017214:	d107      	bne.n	8017226 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017216:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801721a:	455a      	cmp	r2, fp
 801721c:	d103      	bne.n	8017226 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801721e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017222:	454a      	cmp	r2, r9
 8017224:	d06d      	beq.n	8017302 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017226:	f1bb 0f00 	cmp.w	fp, #0
 801722a:	dd65      	ble.n	80172f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801722c:	f1b9 0f00 	cmp.w	r9, #0
 8017230:	dd62      	ble.n	80172f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017232:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017236:	fa1f f08a 	uxth.w	r0, sl
 801723a:	4552      	cmp	r2, sl
 801723c:	9000      	str	r0, [sp, #0]
 801723e:	da12      	bge.n	8017266 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017240:	9301      	str	r3, [sp, #4]
 8017242:	9b00      	ldr	r3, [sp, #0]
 8017244:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017248:	f8ad 2012 	strh.w	r2, [sp, #18]
 801724c:	1a9a      	subs	r2, r3, r2
 801724e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017252:	4631      	mov	r1, r6
 8017254:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017258:	4640      	mov	r0, r8
 801725a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801725e:	69ea      	ldr	r2, [r5, #28]
 8017260:	f7ff ff7a 	bl	8017158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017264:	9b01      	ldr	r3, [sp, #4]
 8017266:	f9b4 2000 	ldrsh.w	r2, [r4]
 801726a:	b29f      	uxth	r7, r3
 801726c:	429a      	cmp	r2, r3
 801726e:	da0d      	bge.n	801728c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017270:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017274:	1aba      	subs	r2, r7, r2
 8017276:	f8ad a012 	strh.w	sl, [sp, #18]
 801727a:	4631      	mov	r1, r6
 801727c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017280:	4640      	mov	r0, r8
 8017282:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017286:	69ea      	ldr	r2, [r5, #28]
 8017288:	f7ff ff66 	bl	8017158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801728c:	8822      	ldrh	r2, [r4, #0]
 801728e:	445f      	add	r7, fp
 8017290:	88a3      	ldrh	r3, [r4, #4]
 8017292:	b2bf      	uxth	r7, r7
 8017294:	4413      	add	r3, r2
 8017296:	b23a      	sxth	r2, r7
 8017298:	b29b      	uxth	r3, r3
 801729a:	b219      	sxth	r1, r3
 801729c:	4291      	cmp	r1, r2
 801729e:	dd0d      	ble.n	80172bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80172a0:	1bdb      	subs	r3, r3, r7
 80172a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80172a6:	f8ad a012 	strh.w	sl, [sp, #18]
 80172aa:	4631      	mov	r1, r6
 80172ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80172b0:	4640      	mov	r0, r8
 80172b2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80172b6:	69ea      	ldr	r2, [r5, #28]
 80172b8:	f7ff ff4e 	bl	8017158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80172bc:	88e2      	ldrh	r2, [r4, #6]
 80172be:	8863      	ldrh	r3, [r4, #2]
 80172c0:	4413      	add	r3, r2
 80172c2:	9a00      	ldr	r2, [sp, #0]
 80172c4:	444a      	add	r2, r9
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	fa1f f982 	uxth.w	r9, r2
 80172cc:	b219      	sxth	r1, r3
 80172ce:	fa0f f289 	sxth.w	r2, r9
 80172d2:	428a      	cmp	r2, r1
 80172d4:	da15      	bge.n	8017302 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80172d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80172da:	eba3 0309 	sub.w	r3, r3, r9
 80172de:	f9b4 0000 	ldrsh.w	r0, [r4]
 80172e2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80172e6:	4631      	mov	r1, r6
 80172e8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80172ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 80172f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80172f4:	69ea      	ldr	r2, [r5, #28]
 80172f6:	e001      	b.n	80172fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80172f8:	69ea      	ldr	r2, [r5, #28]
 80172fa:	4621      	mov	r1, r4
 80172fc:	4640      	mov	r0, r8
 80172fe:	f7ff ff2b 	bl	8017158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017302:	4628      	mov	r0, r5
 8017304:	f7ff fe94 	bl	8017030 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017308:	6861      	ldr	r1, [r4, #4]
 801730a:	4602      	mov	r2, r0
 801730c:	4633      	mov	r3, r6
 801730e:	6820      	ldr	r0, [r4, #0]
 8017310:	c303      	stmia	r3!, {r0, r1}
 8017312:	4611      	mov	r1, r2
 8017314:	4630      	mov	r0, r6
 8017316:	f7fa fde7 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 801731a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801731e:	2b00      	cmp	r3, #0
 8017320:	f77f af33 	ble.w	801718a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017324:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017328:	2b00      	cmp	r3, #0
 801732a:	f77f af2e 	ble.w	801718a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801732e:	4628      	mov	r0, r5
 8017330:	f7ff fe9a 	bl	8017068 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017334:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017338:	1a18      	subs	r0, r3, r0
 801733a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801733e:	4628      	mov	r0, r5
 8017340:	f7ff fea6 	bl	8017090 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017344:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017348:	4631      	mov	r1, r6
 801734a:	1a18      	subs	r0, r3, r0
 801734c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017350:	4628      	mov	r0, r5
 8017352:	682b      	ldr	r3, [r5, #0]
 8017354:	689b      	ldr	r3, [r3, #8]
 8017356:	4798      	blx	r3
 8017358:	e717      	b.n	801718a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801735a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801735a:	b570      	push	{r4, r5, r6, lr}
 801735c:	1d06      	adds	r6, r0, #4
 801735e:	b086      	sub	sp, #24
 8017360:	460c      	mov	r4, r1
 8017362:	2300      	movs	r3, #0
 8017364:	4631      	mov	r1, r6
 8017366:	4605      	mov	r5, r0
 8017368:	a802      	add	r0, sp, #8
 801736a:	9301      	str	r3, [sp, #4]
 801736c:	f7ff fca0 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017370:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017374:	8822      	ldrh	r2, [r4, #0]
 8017376:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801737a:	1ad2      	subs	r2, r2, r3
 801737c:	8863      	ldrh	r3, [r4, #2]
 801737e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017382:	1a5b      	subs	r3, r3, r1
 8017384:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017388:	f8ad 2010 	strh.w	r2, [sp, #16]
 801738c:	aa01      	add	r2, sp, #4
 801738e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017392:	4630      	mov	r0, r6
 8017394:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017398:	a904      	add	r1, sp, #16
 801739a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801739e:	f7fa fe7b 	bl	8012098 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80173a2:	9a01      	ldr	r2, [sp, #4]
 80173a4:	b11a      	cbz	r2, 80173ae <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80173a6:	4621      	mov	r1, r4
 80173a8:	4628      	mov	r0, r5
 80173aa:	f7ff fed5 	bl	8017158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80173ae:	b006      	add	sp, #24
 80173b0:	bd70      	pop	{r4, r5, r6, pc}

080173b2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80173b2:	4602      	mov	r2, r0
 80173b4:	b530      	push	{r4, r5, lr}
 80173b6:	4604      	mov	r4, r0
 80173b8:	b085      	sub	sp, #20
 80173ba:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80173be:	460d      	mov	r5, r1
 80173c0:	466b      	mov	r3, sp
 80173c2:	6851      	ldr	r1, [r2, #4]
 80173c4:	c303      	stmia	r3!, {r0, r1}
 80173c6:	4629      	mov	r1, r5
 80173c8:	4668      	mov	r0, sp
 80173ca:	f7fa fd8d 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 80173ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80173d2:	b12b      	cbz	r3, 80173e0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80173d4:	4669      	mov	r1, sp
 80173d6:	4620      	mov	r0, r4
 80173d8:	f7ff ffbf 	bl	801735a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80173dc:	b005      	add	sp, #20
 80173de:	bd30      	pop	{r4, r5, pc}
 80173e0:	3404      	adds	r4, #4
 80173e2:	a802      	add	r0, sp, #8
 80173e4:	4621      	mov	r1, r4
 80173e6:	f7ff fc63 	bl	8016cb0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80173ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80173f2:	4669      	mov	r1, sp
 80173f4:	4620      	mov	r0, r4
 80173f6:	1a9b      	subs	r3, r3, r2
 80173f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80173fc:	f8ad 3000 	strh.w	r3, [sp]
 8017400:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017404:	1a9b      	subs	r3, r3, r2
 8017406:	f8ad 3002 	strh.w	r3, [sp, #2]
 801740a:	f7fa fe0c 	bl	8012026 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801740e:	e7e5      	b.n	80173dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017410 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017410:	460b      	mov	r3, r1
 8017412:	680a      	ldr	r2, [r1, #0]
 8017414:	1d01      	adds	r1, r0, #4
 8017416:	6992      	ldr	r2, [r2, #24]
 8017418:	4618      	mov	r0, r3
 801741a:	4710      	bx	r2

0801741c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801741c:	4298      	cmp	r0, r3
 801741e:	d200      	bcs.n	8017422 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8017420:	b913      	cbnz	r3, 8017428 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8017422:	440a      	add	r2, r1
 8017424:	b210      	sxth	r0, r2
 8017426:	4770      	bx	lr
 8017428:	ee07 0a90 	vmov	s15, r0
 801742c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017430:	ee07 3a90 	vmov	s15, r3
 8017434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801743c:	ee07 2a90 	vmov	s15, r2
 8017440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017444:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017448:	ee07 1a90 	vmov	s15, r1
 801744c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017450:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017454:	ee67 5a07 	vmul.f32	s11, s14, s14
 8017458:	eee5 6a87 	vfma.f32	s13, s11, s14
 801745c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017460:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801746c:	bfcc      	ite	gt
 801746e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8017472:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801747a:	ee17 3a90 	vmov	r3, s15
 801747e:	b218      	sxth	r0, r3
 8017480:	4770      	bx	lr

08017482 <_ZN8touchgfx12TextProviderC1Ev>:
 8017482:	b538      	push	{r3, r4, r5, lr}
 8017484:	2500      	movs	r5, #0
 8017486:	2302      	movs	r3, #2
 8017488:	4604      	mov	r4, r0
 801748a:	220e      	movs	r2, #14
 801748c:	7403      	strb	r3, [r0, #16]
 801748e:	4629      	mov	r1, r5
 8017490:	6145      	str	r5, [r0, #20]
 8017492:	7605      	strb	r5, [r0, #24]
 8017494:	83c5      	strh	r5, [r0, #30]
 8017496:	8405      	strh	r5, [r0, #32]
 8017498:	86c5      	strh	r5, [r0, #54]	; 0x36
 801749a:	8705      	strh	r5, [r0, #56]	; 0x38
 801749c:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801749e:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80174a2:	e9c0 5500 	strd	r5, r5, [r0]
 80174a6:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80174aa:	304c      	adds	r0, #76	; 0x4c
 80174ac:	f009 feb2 	bl	8021214 <memset>
 80174b0:	2301      	movs	r3, #1
 80174b2:	4620      	mov	r0, r4
 80174b4:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80174b8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80174bc:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80174c0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80174c4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80174c8:	f7f8 f8fc 	bl	800f6c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80174cc:	4620      	mov	r0, r4
 80174ce:	bd38      	pop	{r3, r4, r5, pc}

080174d0 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80174d0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80174d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80174d6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80174d8:	fab0 f080 	clz	r0, r0
 80174dc:	0940      	lsrs	r0, r0, #5
 80174de:	4770      	bx	lr

080174e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80174e0:	b530      	push	{r4, r5, lr}
 80174e2:	2500      	movs	r5, #0
 80174e4:	2401      	movs	r4, #1
 80174e6:	6843      	ldr	r3, [r0, #4]
 80174e8:	b913      	cbnz	r3, 80174f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80174ea:	6803      	ldr	r3, [r0, #0]
 80174ec:	b313      	cbz	r3, 8017534 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80174ee:	6043      	str	r3, [r0, #4]
 80174f0:	7e03      	ldrb	r3, [r0, #24]
 80174f2:	b143      	cbz	r3, 8017506 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80174f4:	6943      	ldr	r3, [r0, #20]
 80174f6:	b12b      	cbz	r3, 8017504 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80174f8:	881a      	ldrh	r2, [r3, #0]
 80174fa:	b11a      	cbz	r2, 8017504 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80174fc:	1c9a      	adds	r2, r3, #2
 80174fe:	6142      	str	r2, [r0, #20]
 8017500:	8818      	ldrh	r0, [r3, #0]
 8017502:	bd30      	pop	{r4, r5, pc}
 8017504:	7605      	strb	r5, [r0, #24]
 8017506:	6843      	ldr	r3, [r0, #4]
 8017508:	8819      	ldrh	r1, [r3, #0]
 801750a:	b199      	cbz	r1, 8017534 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801750c:	1c9a      	adds	r2, r3, #2
 801750e:	2902      	cmp	r1, #2
 8017510:	6042      	str	r2, [r0, #4]
 8017512:	d1f5      	bne.n	8017500 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017514:	7c03      	ldrb	r3, [r0, #16]
 8017516:	2b01      	cmp	r3, #1
 8017518:	d8e5      	bhi.n	80174e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801751a:	1c5a      	adds	r2, r3, #1
 801751c:	3302      	adds	r3, #2
 801751e:	7402      	strb	r2, [r0, #16]
 8017520:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017524:	6143      	str	r3, [r0, #20]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d0dd      	beq.n	80174e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801752a:	881b      	ldrh	r3, [r3, #0]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d0da      	beq.n	80174e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017530:	7604      	strb	r4, [r0, #24]
 8017532:	e7d8      	b.n	80174e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017534:	2000      	movs	r0, #0
 8017536:	e7e4      	b.n	8017502 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017538:	6001      	str	r1, [r0, #0]
 801753a:	2100      	movs	r1, #0
 801753c:	b430      	push	{r4, r5}
 801753e:	6041      	str	r1, [r0, #4]
 8017540:	6815      	ldr	r5, [r2, #0]
 8017542:	6085      	str	r5, [r0, #8]
 8017544:	6852      	ldr	r2, [r2, #4]
 8017546:	6443      	str	r3, [r0, #68]	; 0x44
 8017548:	9b02      	ldr	r3, [sp, #8]
 801754a:	60c2      	str	r2, [r0, #12]
 801754c:	7401      	strb	r1, [r0, #16]
 801754e:	6141      	str	r1, [r0, #20]
 8017550:	7601      	strb	r1, [r0, #24]
 8017552:	8701      	strh	r1, [r0, #56]	; 0x38
 8017554:	8401      	strh	r1, [r0, #32]
 8017556:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801755a:	6483      	str	r3, [r0, #72]	; 0x48
 801755c:	bc30      	pop	{r4, r5}
 801755e:	f7f8 b8b1 	b.w	800f6c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017562 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8017562:	b408      	push	{r3}
 8017564:	b510      	push	{r4, lr}
 8017566:	b085      	sub	sp, #20
 8017568:	ac07      	add	r4, sp, #28
 801756a:	f854 3b04 	ldr.w	r3, [r4], #4
 801756e:	9300      	str	r3, [sp, #0]
 8017570:	4613      	mov	r3, r2
 8017572:	4622      	mov	r2, r4
 8017574:	9403      	str	r4, [sp, #12]
 8017576:	f7ff ffdf 	bl	8017538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801757a:	b005      	add	sp, #20
 801757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017580:	b001      	add	sp, #4
 8017582:	4770      	bx	lr

08017584 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017586:	4605      	mov	r5, r0
 8017588:	4608      	mov	r0, r1
 801758a:	b1f1      	cbz	r1, 80175ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801758c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017590:	460b      	mov	r3, r1
 8017592:	f101 0708 	add.w	r7, r1, #8
 8017596:	4622      	mov	r2, r4
 8017598:	6818      	ldr	r0, [r3, #0]
 801759a:	3308      	adds	r3, #8
 801759c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80175a0:	4626      	mov	r6, r4
 80175a2:	42bb      	cmp	r3, r7
 80175a4:	c603      	stmia	r6!, {r0, r1}
 80175a6:	4634      	mov	r4, r6
 80175a8:	d1f6      	bne.n	8017598 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80175aa:	6818      	ldr	r0, [r3, #0]
 80175ac:	6030      	str	r0, [r6, #0]
 80175ae:	4610      	mov	r0, r2
 80175b0:	889b      	ldrh	r3, [r3, #4]
 80175b2:	80b3      	strh	r3, [r6, #4]
 80175b4:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80175b8:	015b      	lsls	r3, r3, #5
 80175ba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80175be:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80175c2:	430b      	orrs	r3, r1
 80175c4:	425b      	negs	r3, r3
 80175c6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80175ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	460c      	mov	r4, r1
 80175d0:	6811      	ldr	r1, [r2, #0]
 80175d2:	4610      	mov	r0, r2
 80175d4:	68cd      	ldr	r5, [r1, #12]
 80175d6:	4619      	mov	r1, r3
 80175d8:	47a8      	blx	r5
 80175da:	2800      	cmp	r0, #0
 80175dc:	bf08      	it	eq
 80175de:	4620      	moveq	r0, r4
 80175e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080175e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80175e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e6:	4604      	mov	r4, r0
 80175e8:	4615      	mov	r5, r2
 80175ea:	4608      	mov	r0, r1
 80175ec:	b93a      	cbnz	r2, 80175fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80175ee:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80175f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80175f6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80175fa:	4628      	mov	r0, r5
 80175fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175fe:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017602:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8017606:	8893      	ldrh	r3, [r2, #4]
 8017608:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801760c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017610:	79ee      	ldrb	r6, [r5, #7]
 8017612:	4316      	orrs	r6, r2
 8017614:	19da      	adds	r2, r3, r7
 8017616:	b291      	uxth	r1, r2
 8017618:	b2b7      	uxth	r7, r6
 801761a:	291d      	cmp	r1, #29
 801761c:	d87b      	bhi.n	8017716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801761e:	2201      	movs	r2, #1
 8017620:	10f6      	asrs	r6, r6, #3
 8017622:	408a      	lsls	r2, r1
 8017624:	4974      	ldr	r1, [pc, #464]	; (80177f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8017626:	420a      	tst	r2, r1
 8017628:	d12e      	bne.n	8017688 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801762a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801762e:	d072      	beq.n	8017716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017630:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8017634:	462b      	mov	r3, r5
 8017636:	f105 0e08 	add.w	lr, r5, #8
 801763a:	4615      	mov	r5, r2
 801763c:	6818      	ldr	r0, [r3, #0]
 801763e:	3308      	adds	r3, #8
 8017640:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017644:	4694      	mov	ip, r2
 8017646:	4573      	cmp	r3, lr
 8017648:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801764c:	4662      	mov	r2, ip
 801764e:	d1f5      	bne.n	801763c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017650:	6818      	ldr	r0, [r3, #0]
 8017652:	f8cc 0000 	str.w	r0, [ip]
 8017656:	889b      	ldrh	r3, [r3, #4]
 8017658:	f8ac 3004 	strh.w	r3, [ip, #4]
 801765c:	b2b3      	uxth	r3, r6
 801765e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017662:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8017666:	1aca      	subs	r2, r1, r3
 8017668:	1bcf      	subs	r7, r1, r7
 801766a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801766e:	b292      	uxth	r2, r2
 8017670:	1afb      	subs	r3, r7, r3
 8017672:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017676:	10d2      	asrs	r2, r2, #3
 8017678:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801767c:	4302      	orrs	r2, r0
 801767e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017682:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017686:	e7b8      	b.n	80175fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017688:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801768a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801768e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017690:	f640 6333 	movw	r3, #3635	; 0xe33
 8017694:	4299      	cmp	r1, r3
 8017696:	d110      	bne.n	80176ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017698:	6803      	ldr	r3, [r0, #0]
 801769a:	68db      	ldr	r3, [r3, #12]
 801769c:	4798      	blx	r3
 801769e:	7b41      	ldrb	r1, [r0, #13]
 80176a0:	00cb      	lsls	r3, r1, #3
 80176a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80176a6:	7a03      	ldrb	r3, [r0, #8]
 80176a8:	0648      	lsls	r0, r1, #25
 80176aa:	ea43 0302 	orr.w	r3, r3, r2
 80176ae:	bf44      	itt	mi
 80176b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80176b4:	b21b      	sxthmi	r3, r3
 80176b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80176ba:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80176be:	462a      	mov	r2, r5
 80176c0:	f105 0c08 	add.w	ip, r5, #8
 80176c4:	443b      	add	r3, r7
 80176c6:	4433      	add	r3, r6
 80176c8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	4635      	mov	r5, r6
 80176d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80176d4:	6810      	ldr	r0, [r2, #0]
 80176d6:	3208      	adds	r2, #8
 80176d8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80176dc:	4637      	mov	r7, r6
 80176de:	4562      	cmp	r2, ip
 80176e0:	c703      	stmia	r7!, {r0, r1}
 80176e2:	463e      	mov	r6, r7
 80176e4:	d1f6      	bne.n	80176d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80176e6:	6810      	ldr	r0, [r2, #0]
 80176e8:	6038      	str	r0, [r7, #0]
 80176ea:	8892      	ldrh	r2, [r2, #4]
 80176ec:	80ba      	strh	r2, [r7, #4]
 80176ee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80176f2:	10db      	asrs	r3, r3, #3
 80176f4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80176f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80176fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017700:	4313      	orrs	r3, r2
 8017702:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8017706:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801770a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801770e:	1a9b      	subs	r3, r3, r2
 8017710:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8017714:	e771      	b.n	80175fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017716:	f023 0204 	bic.w	r2, r3, #4
 801771a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801771e:	428a      	cmp	r2, r1
 8017720:	d003      	beq.n	801772a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8017722:	f640 621d 	movw	r2, #3613	; 0xe1d
 8017726:	4293      	cmp	r3, r2
 8017728:	d120      	bne.n	801776c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801772a:	3b01      	subs	r3, #1
 801772c:	4602      	mov	r2, r0
 801772e:	4629      	mov	r1, r5
 8017730:	4620      	mov	r0, r4
 8017732:	b29b      	uxth	r3, r3
 8017734:	f7ff ff4a 	bl	80175cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017738:	7b41      	ldrb	r1, [r0, #13]
 801773a:	00cb      	lsls	r3, r1, #3
 801773c:	0649      	lsls	r1, r1, #25
 801773e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017742:	7a03      	ldrb	r3, [r0, #8]
 8017744:	ea43 0302 	orr.w	r3, r3, r2
 8017748:	bf44      	itt	mi
 801774a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801774e:	b21b      	sxthmi	r3, r3
 8017750:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017754:	7b6b      	ldrb	r3, [r5, #13]
 8017756:	7aaa      	ldrb	r2, [r5, #10]
 8017758:	005b      	lsls	r3, r3, #1
 801775a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801775e:	4313      	orrs	r3, r2
 8017760:	115a      	asrs	r2, r3, #5
 8017762:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017766:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801776a:	e035      	b.n	80177d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801776c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017770:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017774:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017778:	7a2a      	ldrb	r2, [r5, #8]
 801777a:	ea42 0201 	orr.w	r2, r2, r1
 801777e:	f640 6109 	movw	r1, #3593	; 0xe09
 8017782:	bf1c      	itt	ne
 8017784:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017788:	b212      	sxthne	r2, r2
 801778a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801778e:	f023 0210 	bic.w	r2, r3, #16
 8017792:	428a      	cmp	r2, r1
 8017794:	d003      	beq.n	801779e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8017796:	f640 6213 	movw	r2, #3603	; 0xe13
 801779a:	4293      	cmp	r3, r2
 801779c:	d129      	bne.n	80177f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801779e:	7b6e      	ldrb	r6, [r5, #13]
 80177a0:	4629      	mov	r1, r5
 80177a2:	0076      	lsls	r6, r6, #1
 80177a4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80177a8:	7aae      	ldrb	r6, [r5, #10]
 80177aa:	4316      	orrs	r6, r2
 80177ac:	f640 6213 	movw	r2, #3603	; 0xe13
 80177b0:	4293      	cmp	r3, r2
 80177b2:	4602      	mov	r2, r0
 80177b4:	4620      	mov	r0, r4
 80177b6:	bf16      	itet	ne
 80177b8:	f103 33ff 	addne.w	r3, r3, #4294967295
 80177bc:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80177c0:	b29b      	uxthne	r3, r3
 80177c2:	f7ff ff03 	bl	80175cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80177c6:	7b43      	ldrb	r3, [r0, #13]
 80177c8:	7a82      	ldrb	r2, [r0, #10]
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177d0:	4313      	orrs	r3, r2
 80177d2:	1af6      	subs	r6, r6, r3
 80177d4:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80177d8:	7b69      	ldrb	r1, [r5, #13]
 80177da:	00cb      	lsls	r3, r1, #3
 80177dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80177e0:	7a2b      	ldrb	r3, [r5, #8]
 80177e2:	4313      	orrs	r3, r2
 80177e4:	064a      	lsls	r2, r1, #25
 80177e6:	bf44      	itt	mi
 80177e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80177ec:	b21b      	sxthmi	r3, r3
 80177ee:	1bdb      	subs	r3, r3, r7
 80177f0:	e747      	b.n	8017682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80177f2:	2300      	movs	r3, #0
 80177f4:	e7b7      	b.n	8017766 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80177f6:	bf00      	nop
 80177f8:	3fc00079 	.word	0x3fc00079

080177fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80177fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017800:	4604      	mov	r4, r0
 8017802:	b942      	cbnz	r2, 8017816 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017808:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801780c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8017810:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017814:	e047      	b.n	80178a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017816:	7b51      	ldrb	r1, [r2, #13]
 8017818:	8893      	ldrh	r3, [r2, #4]
 801781a:	010d      	lsls	r5, r1, #4
 801781c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8017820:	79d5      	ldrb	r5, [r2, #7]
 8017822:	4305      	orrs	r5, r0
 8017824:	2d04      	cmp	r5, #4
 8017826:	bfcc      	ite	gt
 8017828:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801782c:	f04f 0e01 	movle.w	lr, #1
 8017830:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8017834:	f200 80ab 	bhi.w	801798e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017838:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801783c:	4283      	cmp	r3, r0
 801783e:	d216      	bcs.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017840:	f240 605b 	movw	r0, #1627	; 0x65b
 8017844:	4283      	cmp	r3, r0
 8017846:	d859      	bhi.n	80178fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017848:	f240 6057 	movw	r0, #1623	; 0x657
 801784c:	4283      	cmp	r3, r0
 801784e:	d20e      	bcs.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017850:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017854:	d24a      	bcs.n	80178ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8017856:	f240 604e 	movw	r0, #1614	; 0x64e
 801785a:	4283      	cmp	r3, r0
 801785c:	d207      	bcs.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801785e:	f240 601a 	movw	r0, #1562	; 0x61a
 8017862:	4283      	cmp	r3, r0
 8017864:	d02a      	beq.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017866:	d821      	bhi.n	80178ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8017868:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801786c:	d35b      	bcc.n	8017926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801786e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017872:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017876:	f040 80d0 	bne.w	8017a1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801787a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801787e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017882:	f040 80ca 	bne.w	8017a1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017886:	00cb      	lsls	r3, r1, #3
 8017888:	0649      	lsls	r1, r1, #25
 801788a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801788e:	7a13      	ldrb	r3, [r2, #8]
 8017890:	ea43 0300 	orr.w	r3, r3, r0
 8017894:	bf44      	itt	mi
 8017896:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801789a:	b21b      	sxthmi	r3, r3
 801789c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80178a0:	1b5d      	subs	r5, r3, r5
 80178a2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80178a6:	4610      	mov	r0, r2
 80178a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178ac:	f240 604b 	movw	r0, #1611	; 0x64b
 80178b0:	4283      	cmp	r3, r0
 80178b2:	d338      	bcc.n	8017926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80178b4:	f240 604c 	movw	r0, #1612	; 0x64c
 80178b8:	4283      	cmp	r3, r0
 80178ba:	d9d8      	bls.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178bc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80178c0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80178c4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80178c8:	f040 80f3 	bne.w	8017ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80178cc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80178d0:	f040 80ef 	bne.w	8017ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80178d4:	00cb      	lsls	r3, r1, #3
 80178d6:	064e      	lsls	r6, r1, #25
 80178d8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80178dc:	7a13      	ldrb	r3, [r2, #8]
 80178de:	ea43 0300 	orr.w	r3, r3, r0
 80178e2:	bf44      	itt	mi
 80178e4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80178e8:	b21b      	sxthmi	r3, r3
 80178ea:	e7d9      	b.n	80178a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80178ec:	f240 6054 	movw	r0, #1620	; 0x654
 80178f0:	4283      	cmp	r3, r0
 80178f2:	d8e3      	bhi.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178f4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80178f8:	d9e0      	bls.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178fa:	e7b8      	b.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178fc:	f240 6074 	movw	r0, #1652	; 0x674
 8017900:	4283      	cmp	r3, r0
 8017902:	d0b4      	beq.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017904:	d82d      	bhi.n	8017962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8017906:	f240 605e 	movw	r0, #1630	; 0x65e
 801790a:	4283      	cmp	r3, r0
 801790c:	d804      	bhi.n	8017918 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801790e:	f240 605d 	movw	r0, #1629	; 0x65d
 8017912:	4283      	cmp	r3, r0
 8017914:	d3d2      	bcc.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017916:	e7aa      	b.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017918:	f240 605f 	movw	r0, #1631	; 0x65f
 801791c:	4283      	cmp	r3, r0
 801791e:	d0cd      	beq.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017920:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8017924:	d0a3      	beq.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017926:	00cb      	lsls	r3, r1, #3
 8017928:	0649      	lsls	r1, r1, #25
 801792a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801792e:	7a13      	ldrb	r3, [r2, #8]
 8017930:	ea43 0300 	orr.w	r3, r3, r0
 8017934:	bf44      	itt	mi
 8017936:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801793a:	b21b      	sxthmi	r3, r3
 801793c:	1b5d      	subs	r5, r3, r5
 801793e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017942:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017946:	7b53      	ldrb	r3, [r2, #13]
 8017948:	015b      	lsls	r3, r3, #5
 801794a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801794e:	7993      	ldrb	r3, [r2, #6]
 8017950:	430b      	orrs	r3, r1
 8017952:	2105      	movs	r1, #5
 8017954:	005b      	lsls	r3, r3, #1
 8017956:	fb93 f3f1 	sdiv	r3, r3, r1
 801795a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801795e:	440b      	add	r3, r1
 8017960:	e756      	b.n	8017810 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017962:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8017966:	4283      	cmp	r3, r0
 8017968:	d809      	bhi.n	801797e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801796a:	f240 60df 	movw	r0, #1759	; 0x6df
 801796e:	4283      	cmp	r3, r0
 8017970:	f4bf af7d 	bcs.w	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017974:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8017978:	2b05      	cmp	r3, #5
 801797a:	d8d4      	bhi.n	8017926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801797c:	e777      	b.n	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801797e:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017982:	4283      	cmp	r3, r0
 8017984:	d09a      	beq.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017986:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801798a:	4283      	cmp	r3, r0
 801798c:	e7ca      	b.n	8017924 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801798e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017992:	d22b      	bcs.n	80179ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017994:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8017998:	4283      	cmp	r3, r0
 801799a:	d28f      	bcs.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801799c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80179a0:	4283      	cmp	r3, r0
 80179a2:	d816      	bhi.n	80179d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80179a4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80179a8:	4283      	cmp	r3, r0
 80179aa:	f4bf af60 	bcs.w	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80179ae:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80179b2:	4283      	cmp	r3, r0
 80179b4:	d80a      	bhi.n	80179cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80179b6:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80179ba:	4283      	cmp	r3, r0
 80179bc:	f4bf af57 	bcs.w	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80179c0:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80179c4:	4283      	cmp	r3, r0
 80179c6:	f43f af79 	beq.w	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80179ca:	e7ac      	b.n	8017926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80179cc:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80179d0:	e7f8      	b.n	80179c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80179d2:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80179d6:	4283      	cmp	r3, r0
 80179d8:	d802      	bhi.n	80179e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80179da:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80179de:	e798      	b.n	8017912 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80179e0:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80179e4:	4283      	cmp	r3, r0
 80179e6:	f47f af42 	bne.w	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80179ea:	e767      	b.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80179ec:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80179f0:	4283      	cmp	r3, r0
 80179f2:	f43f af63 	beq.w	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80179f6:	d802      	bhi.n	80179fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80179f8:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80179fc:	e7f2      	b.n	80179e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80179fe:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8017a02:	4283      	cmp	r3, r0
 8017a04:	d805      	bhi.n	8017a12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8017a06:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8017a0a:	4283      	cmp	r3, r0
 8017a0c:	f4ff af2f 	bcc.w	801786e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017a10:	e754      	b.n	80178bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017a12:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8017a16:	4283      	cmp	r3, r0
 8017a18:	e7af      	b.n	801797a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8017a1a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017a1e:	4617      	mov	r7, r2
 8017a20:	f102 0808 	add.w	r8, r2, #8
 8017a24:	4666      	mov	r6, ip
 8017a26:	6838      	ldr	r0, [r7, #0]
 8017a28:	3708      	adds	r7, #8
 8017a2a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8017a2e:	46e6      	mov	lr, ip
 8017a30:	4547      	cmp	r7, r8
 8017a32:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017a36:	46f4      	mov	ip, lr
 8017a38:	d1f5      	bne.n	8017a26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8017a3a:	6838      	ldr	r0, [r7, #0]
 8017a3c:	f8ce 0000 	str.w	r0, [lr]
 8017a40:	88b9      	ldrh	r1, [r7, #4]
 8017a42:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017a46:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017a4a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017a4e:	d009      	beq.n	8017a64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8017a50:	7b51      	ldrb	r1, [r2, #13]
 8017a52:	7992      	ldrb	r2, [r2, #6]
 8017a54:	0149      	lsls	r1, r1, #5
 8017a56:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017a5a:	4311      	orrs	r1, r2
 8017a5c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017a60:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017a64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017a68:	b2ad      	uxth	r5, r5
 8017a6a:	d00d      	beq.n	8017a88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8017a6c:	442b      	add	r3, r5
 8017a6e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017a72:	b29b      	uxth	r3, r3
 8017a74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017a78:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017a7c:	10db      	asrs	r3, r3, #3
 8017a7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017a82:	4313      	orrs	r3, r2
 8017a84:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017a88:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017a8c:	00cb      	lsls	r3, r1, #3
 8017a8e:	064f      	lsls	r7, r1, #25
 8017a90:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017a94:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017a98:	ea43 0302 	orr.w	r3, r3, r2
 8017a9c:	bf44      	itt	mi
 8017a9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017aa2:	b21b      	sxthmi	r3, r3
 8017aa4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017aa8:	1b5b      	subs	r3, r3, r5
 8017aaa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017aae:	4632      	mov	r2, r6
 8017ab0:	e6f9      	b.n	80178a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017ab2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017ab6:	4617      	mov	r7, r2
 8017ab8:	f102 0908 	add.w	r9, r2, #8
 8017abc:	4666      	mov	r6, ip
 8017abe:	6838      	ldr	r0, [r7, #0]
 8017ac0:	3708      	adds	r7, #8
 8017ac2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8017ac6:	46e0      	mov	r8, ip
 8017ac8:	454f      	cmp	r7, r9
 8017aca:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8017ace:	46c4      	mov	ip, r8
 8017ad0:	d1f5      	bne.n	8017abe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8017ad2:	6838      	ldr	r0, [r7, #0]
 8017ad4:	f8c8 0000 	str.w	r0, [r8]
 8017ad8:	88b9      	ldrh	r1, [r7, #4]
 8017ada:	f8a8 1004 	strh.w	r1, [r8, #4]
 8017ade:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017ae2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017ae6:	d009      	beq.n	8017afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8017ae8:	7b51      	ldrb	r1, [r2, #13]
 8017aea:	7992      	ldrb	r2, [r2, #6]
 8017aec:	0149      	lsls	r1, r1, #5
 8017aee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017af2:	4311      	orrs	r1, r2
 8017af4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017af8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017afc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017b00:	d00e      	beq.n	8017b20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8017b02:	eba3 030e 	sub.w	r3, r3, lr
 8017b06:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017b0a:	b29b      	uxth	r3, r3
 8017b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017b10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017b14:	10db      	asrs	r3, r3, #3
 8017b16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017b1a:	4313      	orrs	r3, r2
 8017b1c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017b20:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017b24:	00cb      	lsls	r3, r1, #3
 8017b26:	0648      	lsls	r0, r1, #25
 8017b28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017b2c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017b30:	ea43 0302 	orr.w	r3, r3, r2
 8017b34:	bf44      	itt	mi
 8017b36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017b3a:	b21b      	sxthmi	r3, r3
 8017b3c:	1b5d      	subs	r5, r3, r5
 8017b3e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017b42:	e7b4      	b.n	8017aae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08017b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b48:	461e      	mov	r6, r3
 8017b4a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017b4c:	4604      	mov	r4, r0
 8017b4e:	4617      	mov	r7, r2
 8017b50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017b54:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017b58:	f7f7 fd0e 	bl	800f578 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017b5c:	4605      	mov	r5, r0
 8017b5e:	b918      	cbnz	r0, 8017b68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017b60:	6030      	str	r0, [r6, #0]
 8017b62:	4628      	mov	r0, r5
 8017b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	4601      	mov	r1, r0
 8017b6c:	4638      	mov	r0, r7
 8017b6e:	68db      	ldr	r3, [r3, #12]
 8017b70:	4798      	blx	r3
 8017b72:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017b76:	4602      	mov	r2, r0
 8017b78:	6030      	str	r0, [r6, #0]
 8017b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017b7e:	d213      	bcs.n	8017ba8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017b80:	4643      	mov	r3, r8
 8017b82:	4639      	mov	r1, r7
 8017b84:	4620      	mov	r0, r4
 8017b86:	f7ff fe39 	bl	80177fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017b8a:	6030      	str	r0, [r6, #0]
 8017b8c:	6833      	ldr	r3, [r6, #0]
 8017b8e:	b143      	cbz	r3, 8017ba2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017b90:	7b5a      	ldrb	r2, [r3, #13]
 8017b92:	7a9b      	ldrb	r3, [r3, #10]
 8017b94:	0052      	lsls	r2, r2, #1
 8017b96:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017b9a:	4313      	orrs	r3, r2
 8017b9c:	bf0c      	ite	eq
 8017b9e:	2301      	moveq	r3, #1
 8017ba0:	2300      	movne	r3, #0
 8017ba2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017ba6:	e7dc      	b.n	8017b62 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017ba8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	2b7f      	cmp	r3, #127	; 0x7f
 8017bb0:	d804      	bhi.n	8017bbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017bb2:	4639      	mov	r1, r7
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f7ff fd15 	bl	80175e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017bba:	e7e6      	b.n	8017b8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017bbc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d0e3      	beq.n	8017b8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017bc4:	f640 1302 	movw	r3, #2306	; 0x902
 8017bc8:	429d      	cmp	r5, r3
 8017bca:	d1df      	bne.n	8017b8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017bcc:	4601      	mov	r1, r0
 8017bce:	4620      	mov	r0, r4
 8017bd0:	f7ff fcd8 	bl	8017584 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017bd4:	e7d9      	b.n	8017b8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017bd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8017bd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bda:	461e      	mov	r6, r3
 8017bdc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017bde:	4604      	mov	r4, r0
 8017be0:	4617      	mov	r7, r2
 8017be2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017be6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017bea:	f7f7 fcc5 	bl	800f578 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017bee:	4605      	mov	r5, r0
 8017bf0:	b918      	cbnz	r0, 8017bfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8017bf2:	6030      	str	r0, [r6, #0]
 8017bf4:	4628      	mov	r0, r5
 8017bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bfa:	683b      	ldr	r3, [r7, #0]
 8017bfc:	4601      	mov	r1, r0
 8017bfe:	4638      	mov	r0, r7
 8017c00:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8017c04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017c08:	47c8      	blx	r9
 8017c0a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017c0e:	4602      	mov	r2, r0
 8017c10:	6030      	str	r0, [r6, #0]
 8017c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017c16:	d213      	bcs.n	8017c40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8017c18:	4643      	mov	r3, r8
 8017c1a:	4639      	mov	r1, r7
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	f7ff fded 	bl	80177fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017c22:	6030      	str	r0, [r6, #0]
 8017c24:	6833      	ldr	r3, [r6, #0]
 8017c26:	b143      	cbz	r3, 8017c3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8017c28:	7b5a      	ldrb	r2, [r3, #13]
 8017c2a:	7a9b      	ldrb	r3, [r3, #10]
 8017c2c:	0052      	lsls	r2, r2, #1
 8017c2e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017c32:	4313      	orrs	r3, r2
 8017c34:	bf0c      	ite	eq
 8017c36:	2301      	moveq	r3, #1
 8017c38:	2300      	movne	r3, #0
 8017c3a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017c3e:	e7d9      	b.n	8017bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8017c40:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017c44:	b29b      	uxth	r3, r3
 8017c46:	2b7f      	cmp	r3, #127	; 0x7f
 8017c48:	d804      	bhi.n	8017c54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8017c4a:	4639      	mov	r1, r7
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	f7ff fcc9 	bl	80175e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017c52:	e7e6      	b.n	8017c22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017c54:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d0e3      	beq.n	8017c24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017c5c:	f640 1302 	movw	r3, #2306	; 0x902
 8017c60:	429d      	cmp	r5, r3
 8017c62:	d1df      	bne.n	8017c24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017c64:	4601      	mov	r1, r0
 8017c66:	4620      	mov	r0, r4
 8017c68:	f7ff fc8c 	bl	8017584 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017c6c:	e7d9      	b.n	8017c22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08017c6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017c6e:	b510      	push	{r4, lr}
 8017c70:	4604      	mov	r4, r0
 8017c72:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8017c76:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017c78:	b1e1      	cbz	r1, 8017cb4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8017c7a:	2b0a      	cmp	r3, #10
 8017c7c:	d02d      	beq.n	8017cda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017c7e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017c80:	3901      	subs	r1, #1
 8017c82:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017c86:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8017c88:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8017c8c:	1c51      	adds	r1, r2, #1
 8017c8e:	b289      	uxth	r1, r1
 8017c90:	2901      	cmp	r1, #1
 8017c92:	bf8a      	itet	hi
 8017c94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017c98:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8017c9a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8017c9c:	1c5a      	adds	r2, r3, #1
 8017c9e:	8722      	strh	r2, [r4, #56]	; 0x38
 8017ca0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017ca2:	4413      	add	r3, r2
 8017ca4:	b29b      	uxth	r3, r3
 8017ca6:	2b09      	cmp	r3, #9
 8017ca8:	bf88      	it	hi
 8017caa:	3b0a      	subhi	r3, #10
 8017cac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017cb0:	8458      	strh	r0, [r3, #34]	; 0x22
 8017cb2:	e7de      	b.n	8017c72 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017cb4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017cb6:	2b0a      	cmp	r3, #10
 8017cb8:	d00f      	beq.n	8017cda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f7ff fc10 	bl	80174e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017cc0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017cc2:	1c5a      	adds	r2, r3, #1
 8017cc4:	8722      	strh	r2, [r4, #56]	; 0x38
 8017cc6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017cc8:	4413      	add	r3, r2
 8017cca:	b29b      	uxth	r3, r3
 8017ccc:	2b09      	cmp	r3, #9
 8017cce:	bf88      	it	hi
 8017cd0:	3b0a      	subhi	r3, #10
 8017cd2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017cd6:	8458      	strh	r0, [r3, #34]	; 0x22
 8017cd8:	e7ec      	b.n	8017cb4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8017cda:	bd10      	pop	{r4, pc}

08017cdc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017cdc:	b538      	push	{r3, r4, r5, lr}
 8017cde:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017ce6:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8017ce8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8017cea:	3a01      	subs	r2, #1
 8017cec:	8702      	strh	r2, [r0, #56]	; 0x38
 8017cee:	1c5a      	adds	r2, r3, #1
 8017cf0:	b292      	uxth	r2, r2
 8017cf2:	2a09      	cmp	r2, #9
 8017cf4:	bf8a      	itet	hi
 8017cf6:	3b09      	subhi	r3, #9
 8017cf8:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8017cfa:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8017cfc:	f7ff ffb7 	bl	8017c6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017d00:	8c23      	ldrh	r3, [r4, #32]
 8017d02:	2b01      	cmp	r3, #1
 8017d04:	bf9c      	itt	ls
 8017d06:	3301      	addls	r3, #1
 8017d08:	8423      	strhls	r3, [r4, #32]
 8017d0a:	8be3      	ldrh	r3, [r4, #30]
 8017d0c:	b90b      	cbnz	r3, 8017d12 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017d0e:	2302      	movs	r3, #2
 8017d10:	83e3      	strh	r3, [r4, #30]
 8017d12:	8be3      	ldrh	r3, [r4, #30]
 8017d14:	4628      	mov	r0, r5
 8017d16:	3b01      	subs	r3, #1
 8017d18:	b29b      	uxth	r3, r3
 8017d1a:	83e3      	strh	r3, [r4, #30]
 8017d1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017d20:	8365      	strh	r5, [r4, #26]
 8017d22:	bd38      	pop	{r3, r4, r5, pc}

08017d24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017d24:	428a      	cmp	r2, r1
 8017d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d2a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017d2c:	d932      	bls.n	8017d94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8017d2e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017d30:	1a54      	subs	r4, r2, r1
 8017d32:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8017d36:	19ee      	adds	r6, r5, r7
 8017d38:	fa1f fe84 	uxth.w	lr, r4
 8017d3c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017d40:	3e01      	subs	r6, #1
 8017d42:	b2b4      	uxth	r4, r6
 8017d44:	eba4 090e 	sub.w	r9, r4, lr
 8017d48:	fa1f f989 	uxth.w	r9, r9
 8017d4c:	2c09      	cmp	r4, #9
 8017d4e:	4626      	mov	r6, r4
 8017d50:	bf88      	it	hi
 8017d52:	f1a4 060a 	subhi.w	r6, r4, #10
 8017d56:	f1bc 0f00 	cmp.w	ip, #0
 8017d5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8017d5e:	bf08      	it	eq
 8017d60:	f04f 0c02 	moveq.w	ip, #2
 8017d64:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017d68:	b2a4      	uxth	r4, r4
 8017d6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017d6e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017d72:	454c      	cmp	r4, r9
 8017d74:	fa1f fc8c 	uxth.w	ip, ip
 8017d78:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017d7c:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017d80:	d1e4      	bne.n	8017d4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017d82:	eba5 050e 	sub.w	r5, r5, lr
 8017d86:	eb0e 0408 	add.w	r4, lr, r8
 8017d8a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017d8e:	8705      	strh	r5, [r0, #56]	; 0x38
 8017d90:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017d94:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8017d96:	250a      	movs	r5, #10
 8017d98:	1a64      	subs	r4, r4, r1
 8017d9a:	4439      	add	r1, r7
 8017d9c:	b289      	uxth	r1, r1
 8017d9e:	8704      	strh	r4, [r0, #56]	; 0x38
 8017da0:	2909      	cmp	r1, #9
 8017da2:	bf88      	it	hi
 8017da4:	390a      	subhi	r1, #10
 8017da6:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017da8:	b18a      	cbz	r2, 8017dce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8017daa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017dac:	3a01      	subs	r2, #1
 8017dae:	3101      	adds	r1, #1
 8017db0:	b292      	uxth	r2, r2
 8017db2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017db6:	8701      	strh	r1, [r0, #56]	; 0x38
 8017db8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017dba:	b901      	cbnz	r1, 8017dbe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8017dbc:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017dbe:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017dc0:	3901      	subs	r1, #1
 8017dc2:	b289      	uxth	r1, r1
 8017dc4:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017dc6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017dca:	844c      	strh	r4, [r1, #34]	; 0x22
 8017dcc:	e7ec      	b.n	8017da8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8017dce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dd2:	f7ff bf4c 	b.w	8017c6e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017dd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017dd6:	b570      	push	{r4, r5, r6, lr}
 8017dd8:	2500      	movs	r5, #0
 8017dda:	4295      	cmp	r5, r2
 8017ddc:	d011      	beq.n	8017e02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017dde:	8bc4      	ldrh	r4, [r0, #30]
 8017de0:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017de4:	4414      	add	r4, r2
 8017de6:	3c01      	subs	r4, #1
 8017de8:	1b64      	subs	r4, r4, r5
 8017dea:	b2a4      	uxth	r4, r4
 8017dec:	2c01      	cmp	r4, #1
 8017dee:	bf88      	it	hi
 8017df0:	3c02      	subhi	r4, #2
 8017df2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017df6:	8b64      	ldrh	r4, [r4, #26]
 8017df8:	42b4      	cmp	r4, r6
 8017dfa:	d117      	bne.n	8017e2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017dfc:	3501      	adds	r5, #1
 8017dfe:	b2ad      	uxth	r5, r5
 8017e00:	e7eb      	b.n	8017dda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017e02:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017e06:	2400      	movs	r4, #0
 8017e08:	4413      	add	r3, r2
 8017e0a:	b2a2      	uxth	r2, r4
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	da0f      	bge.n	8017e30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017e10:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8017e12:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017e16:	3401      	adds	r4, #1
 8017e18:	4432      	add	r2, r6
 8017e1a:	b292      	uxth	r2, r2
 8017e1c:	2a09      	cmp	r2, #9
 8017e1e:	bf88      	it	hi
 8017e20:	3a0a      	subhi	r2, #10
 8017e22:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017e26:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017e28:	42aa      	cmp	r2, r5
 8017e2a:	d0ee      	beq.n	8017e0a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017e2c:	2000      	movs	r0, #0
 8017e2e:	bd70      	pop	{r4, r5, r6, pc}
 8017e30:	2001      	movs	r0, #1
 8017e32:	e7fc      	b.n	8017e2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017e34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e38:	4605      	mov	r5, r0
 8017e3a:	4616      	mov	r6, r2
 8017e3c:	1c8c      	adds	r4, r1, #2
 8017e3e:	8809      	ldrh	r1, [r1, #0]
 8017e40:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017e44:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017e48:	42b3      	cmp	r3, r6
 8017e4a:	d124      	bne.n	8017e96 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017e4c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017e50:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017e54:	f001 070f 	and.w	r7, r1, #15
 8017e58:	4652      	mov	r2, sl
 8017e5a:	f8cd 8000 	str.w	r8, [sp]
 8017e5e:	464b      	mov	r3, r9
 8017e60:	4621      	mov	r1, r4
 8017e62:	4628      	mov	r0, r5
 8017e64:	f7ff ffb7 	bl	8017dd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017e68:	4683      	mov	fp, r0
 8017e6a:	b168      	cbz	r0, 8017e88 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017e6c:	eb0a 0109 	add.w	r1, sl, r9
 8017e70:	463a      	mov	r2, r7
 8017e72:	4628      	mov	r0, r5
 8017e74:	4441      	add	r1, r8
 8017e76:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017e7a:	4649      	mov	r1, r9
 8017e7c:	f7ff ff52 	bl	8017d24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017e80:	4658      	mov	r0, fp
 8017e82:	b003      	add	sp, #12
 8017e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e88:	eb07 010a 	add.w	r1, r7, sl
 8017e8c:	4449      	add	r1, r9
 8017e8e:	4441      	add	r1, r8
 8017e90:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017e94:	e7d2      	b.n	8017e3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017e96:	f04f 0b00 	mov.w	fp, #0
 8017e9a:	e7f1      	b.n	8017e80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017e9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017e9c:	b570      	push	{r4, r5, r6, lr}
 8017e9e:	8810      	ldrh	r0, [r2, #0]
 8017ea0:	4298      	cmp	r0, r3
 8017ea2:	d817      	bhi.n	8017ed4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017ea4:	1e48      	subs	r0, r1, #1
 8017ea6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017eaa:	4298      	cmp	r0, r3
 8017eac:	d312      	bcc.n	8017ed4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017eae:	2400      	movs	r4, #0
 8017eb0:	428c      	cmp	r4, r1
 8017eb2:	d20f      	bcs.n	8017ed4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017eb4:	1860      	adds	r0, r4, r1
 8017eb6:	1040      	asrs	r0, r0, #1
 8017eb8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017ebc:	0085      	lsls	r5, r0, #2
 8017ebe:	42b3      	cmp	r3, r6
 8017ec0:	d902      	bls.n	8017ec8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017ec2:	3001      	adds	r0, #1
 8017ec4:	b284      	uxth	r4, r0
 8017ec6:	e7f3      	b.n	8017eb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017ec8:	d201      	bcs.n	8017ece <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017eca:	b281      	uxth	r1, r0
 8017ecc:	e7f0      	b.n	8017eb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017ece:	442a      	add	r2, r5
 8017ed0:	8850      	ldrh	r0, [r2, #2]
 8017ed2:	bd70      	pop	{r4, r5, r6, pc}
 8017ed4:	2000      	movs	r0, #0
 8017ed6:	e7fc      	b.n	8017ed2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017ed8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017edc:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8017ede:	4604      	mov	r4, r0
 8017ee0:	260b      	movs	r6, #11
 8017ee2:	886f      	ldrh	r7, [r5, #2]
 8017ee4:	087f      	lsrs	r7, r7, #1
 8017ee6:	3e01      	subs	r6, #1
 8017ee8:	d013      	beq.n	8017f12 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017eea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017eec:	462a      	mov	r2, r5
 8017eee:	4639      	mov	r1, r7
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017ef6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017efa:	4643      	mov	r3, r8
 8017efc:	f7ff ffce 	bl	8017e9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017f00:	b138      	cbz	r0, 8017f12 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017f02:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017f06:	4642      	mov	r2, r8
 8017f08:	4620      	mov	r0, r4
 8017f0a:	f7ff ff93 	bl	8017e34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	d1e9      	bne.n	8017ee6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017f18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017f18:	b570      	push	{r4, r5, r6, lr}
 8017f1a:	694a      	ldr	r2, [r1, #20]
 8017f1c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017f1e:	684b      	ldr	r3, [r1, #4]
 8017f20:	1b54      	subs	r4, r2, r5
 8017f22:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017f24:	f000 8106 	beq.w	8018134 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017f28:	1b9b      	subs	r3, r3, r6
 8017f2a:	d003      	beq.n	8017f34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017f2c:	4363      	muls	r3, r4
 8017f2e:	2210      	movs	r2, #16
 8017f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8017f34:	680c      	ldr	r4, [r1, #0]
 8017f36:	698a      	ldr	r2, [r1, #24]
 8017f38:	1b65      	subs	r5, r4, r5
 8017f3a:	f000 80fd 	beq.w	8018138 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017f3e:	1b92      	subs	r2, r2, r6
 8017f40:	d003      	beq.n	8017f4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017f42:	436a      	muls	r2, r5
 8017f44:	2410      	movs	r4, #16
 8017f46:	fb92 f2f4 	sdiv	r2, r2, r4
 8017f4a:	1a9b      	subs	r3, r3, r2
 8017f4c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8018174 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017f50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017f54:	460a      	mov	r2, r1
 8017f56:	ee07 3a90 	vmov	s15, r3
 8017f5a:	f100 040c 	add.w	r4, r0, #12
 8017f5e:	4603      	mov	r3, r0
 8017f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f64:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017f68:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017f6c:	eeb1 6a43 	vneg.f32	s12, s6
 8017f70:	edd2 7a02 	vldr	s15, [r2, #8]
 8017f74:	3214      	adds	r2, #20
 8017f76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017f7a:	ece3 6a01 	vstmia	r3!, {s13}
 8017f7e:	429c      	cmp	r4, r3
 8017f80:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017f84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f88:	edc3 7a02 	vstr	s15, [r3, #8]
 8017f8c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017f90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f94:	edc3 7a05 	vstr	s15, [r3, #20]
 8017f98:	d1ea      	bne.n	8017f70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017f9a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017f9c:	698b      	ldr	r3, [r1, #24]
 8017f9e:	edd0 4a02 	vldr	s9, [r0, #8]
 8017fa2:	1a9b      	subs	r3, r3, r2
 8017fa4:	edd0 3a00 	vldr	s7, [r0]
 8017fa8:	edd0 6a01 	vldr	s13, [r0, #4]
 8017fac:	ee07 3a90 	vmov	s15, r3
 8017fb0:	684b      	ldr	r3, [r1, #4]
 8017fb2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017fb6:	ed90 5a05 	vldr	s10, [r0, #20]
 8017fba:	1a9b      	subs	r3, r3, r2
 8017fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fc0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017fc4:	ed90 2a03 	vldr	s4, [r0, #12]
 8017fc8:	ee07 3a10 	vmov	s14, r3
 8017fcc:	edd0 5a04 	vldr	s11, [r0, #16]
 8017fd0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017fd4:	ed90 1a07 	vldr	s2, [r0, #28]
 8017fd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017fdc:	edd0 2a06 	vldr	s5, [r0, #24]
 8017fe0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017fe4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017fe8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017fec:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017ff0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017ff4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017ff8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017ffc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017ffe:	694a      	ldr	r2, [r1, #20]
 8018000:	1b13      	subs	r3, r2, r4
 8018002:	ee07 3a10 	vmov	s14, r3
 8018006:	680b      	ldr	r3, [r1, #0]
 8018008:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801800c:	1b1b      	subs	r3, r3, r4
 801800e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018012:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018016:	ee07 3a10 	vmov	s14, r3
 801801a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801801e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018022:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018026:	ee64 4a86 	vmul.f32	s9, s9, s12
 801802a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801802e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018030:	698b      	ldr	r3, [r1, #24]
 8018032:	1a9b      	subs	r3, r3, r2
 8018034:	ee06 3a90 	vmov	s13, r3
 8018038:	684b      	ldr	r3, [r1, #4]
 801803a:	1a9b      	subs	r3, r3, r2
 801803c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018040:	ee07 3a10 	vmov	s14, r3
 8018044:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801804c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018050:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018054:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018058:	ee66 6a83 	vmul.f32	s13, s13, s6
 801805c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8018060:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018062:	694a      	ldr	r2, [r1, #20]
 8018064:	1b13      	subs	r3, r2, r4
 8018066:	ee07 3a10 	vmov	s14, r3
 801806a:	680b      	ldr	r3, [r1, #0]
 801806c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018070:	1b1b      	subs	r3, r3, r4
 8018072:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018076:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801807a:	ee07 3a10 	vmov	s14, r3
 801807e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018082:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018086:	eea5 5a87 	vfma.f32	s10, s11, s14
 801808a:	edd0 5a08 	vldr	s11, [r0, #32]
 801808e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018092:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018096:	ee25 5a06 	vmul.f32	s10, s10, s12
 801809a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801809e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80180a0:	698b      	ldr	r3, [r1, #24]
 80180a2:	1a9b      	subs	r3, r3, r2
 80180a4:	ee07 3a10 	vmov	s14, r3
 80180a8:	684b      	ldr	r3, [r1, #4]
 80180aa:	1a9b      	subs	r3, r3, r2
 80180ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80180b0:	ee01 3a90 	vmov	s3, r3
 80180b4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80180b8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80180bc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80180c0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80180c4:	eea1 7a21 	vfma.f32	s14, s2, s3
 80180c8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80180cc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80180d0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80180d2:	694a      	ldr	r2, [r1, #20]
 80180d4:	1b13      	subs	r3, r2, r4
 80180d6:	ee03 3a10 	vmov	s6, r3
 80180da:	680b      	ldr	r3, [r1, #0]
 80180dc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80180e0:	1b1b      	subs	r3, r3, r4
 80180e2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80180e6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80180ea:	ee03 3a10 	vmov	s6, r3
 80180ee:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80180f2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80180f6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80180fa:	ee25 6a86 	vmul.f32	s12, s11, s12
 80180fe:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018102:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018106:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801810a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801810e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018112:	dd13      	ble.n	801813c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018118:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801811c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801811e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801812a:	dd15      	ble.n	8018158 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801812c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018130:	6403      	str	r3, [r0, #64]	; 0x40
 8018132:	bd70      	pop	{r4, r5, r6, pc}
 8018134:	4623      	mov	r3, r4
 8018136:	e6fd      	b.n	8017f34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018138:	462a      	mov	r2, r5
 801813a:	e706      	b.n	8017f4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801813c:	d502      	bpl.n	8018144 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801813e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018142:	e7e9      	b.n	8018118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018144:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018148:	eea3 2a85 	vfma.f32	s4, s7, s10
 801814c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018154:	dade      	bge.n	8018114 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018156:	e7f2      	b.n	801813e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018158:	d502      	bpl.n	8018160 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801815a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801815e:	e7e7      	b.n	8018130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018160:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018164:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018168:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801816c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018170:	dadc      	bge.n	801812c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018172:	e7f2      	b.n	801815a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018174:	3d800000 	.word	0x3d800000

08018178 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801817c:	2714      	movs	r7, #20
 801817e:	435f      	muls	r7, r3
 8018180:	eb02 0c07 	add.w	ip, r2, r7
 8018184:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018188:	f115 0e0f 	adds.w	lr, r5, #15
 801818c:	f100 80a2 	bmi.w	80182d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018190:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018194:	9c08      	ldr	r4, [sp, #32]
 8018196:	2614      	movs	r6, #20
 8018198:	f8c0 e014 	str.w	lr, [r0, #20]
 801819c:	4366      	muls	r6, r4
 801819e:	eb02 0806 	add.w	r8, r2, r6
 80181a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80181a6:	f115 040f 	adds.w	r4, r5, #15
 80181aa:	f100 809f 	bmi.w	80182ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80181ae:	1124      	asrs	r4, r4, #4
 80181b0:	eba4 040e 	sub.w	r4, r4, lr
 80181b4:	6184      	str	r4, [r0, #24]
 80181b6:	2c00      	cmp	r4, #0
 80181b8:	f000 808a 	beq.w	80182d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80181bc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80181c0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80181c4:	5995      	ldr	r5, [r2, r6]
 80181c6:	eba4 0809 	sub.w	r8, r4, r9
 80181ca:	59d4      	ldr	r4, [r2, r7]
 80181cc:	eba5 0a04 	sub.w	sl, r5, r4
 80181d0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80181d4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80181d8:	fb0e fe05 	mul.w	lr, lr, r5
 80181dc:	fb0a ee19 	mls	lr, sl, r9, lr
 80181e0:	fb08 e404 	mla	r4, r8, r4, lr
 80181e4:	3c01      	subs	r4, #1
 80181e6:	19a4      	adds	r4, r4, r6
 80181e8:	f100 808c 	bmi.w	8018304 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80181ec:	fb94 fef6 	sdiv	lr, r4, r6
 80181f0:	fb06 441e 	mls	r4, r6, lr, r4
 80181f4:	f8c0 e000 	str.w	lr, [r0]
 80181f8:	6104      	str	r4, [r0, #16]
 80181fa:	2d00      	cmp	r5, #0
 80181fc:	f2c0 8095 	blt.w	801832a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018200:	fb95 f4f6 	sdiv	r4, r5, r6
 8018204:	fb06 5514 	mls	r5, r6, r4, r5
 8018208:	6044      	str	r4, [r0, #4]
 801820a:	6085      	str	r5, [r0, #8]
 801820c:	60c6      	str	r6, [r0, #12]
 801820e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018212:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018216:	6945      	ldr	r5, [r0, #20]
 8018218:	59d2      	ldr	r2, [r2, r7]
 801821a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801821e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801834c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018222:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018226:	ee07 4a10 	vmov	s14, r4
 801822a:	6804      	ldr	r4, [r0, #0]
 801822c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018230:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018234:	ee07 2a90 	vmov	s15, r2
 8018238:	ee27 7a26 	vmul.f32	s14, s14, s13
 801823c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018244:	edd3 6a00 	vldr	s13, [r3]
 8018248:	eee6 6a07 	vfma.f32	s13, s12, s14
 801824c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8018250:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018254:	edc0 6a07 	vstr	s13, [r0, #28]
 8018258:	edd0 6a01 	vldr	s13, [r0, #4]
 801825c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8018260:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018264:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018268:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801826c:	ed80 6a08 	vstr	s12, [r0, #32]
 8018270:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018272:	6242      	str	r2, [r0, #36]	; 0x24
 8018274:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018278:	ed93 6a03 	vldr	s12, [r3, #12]
 801827c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018280:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018284:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018288:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801828c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018290:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018294:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018298:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801829c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801829e:	6302      	str	r2, [r0, #48]	; 0x30
 80182a0:	ed93 6a06 	vldr	s12, [r3, #24]
 80182a4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80182a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80182ac:	eeb0 7a46 	vmov.f32	s14, s12
 80182b0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80182b4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80182b8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80182bc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80182c0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80182c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80182c8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80182cc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80182ce:	63c3      	str	r3, [r0, #60]	; 0x3c
 80182d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182d4:	2410      	movs	r4, #16
 80182d6:	f1c5 0501 	rsb	r5, r5, #1
 80182da:	fb9e fef4 	sdiv	lr, lr, r4
 80182de:	f015 050f 	ands.w	r5, r5, #15
 80182e2:	bf18      	it	ne
 80182e4:	2501      	movne	r5, #1
 80182e6:	ebae 0e05 	sub.w	lr, lr, r5
 80182ea:	e753      	b.n	8018194 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80182ec:	f04f 0910 	mov.w	r9, #16
 80182f0:	f1c5 0501 	rsb	r5, r5, #1
 80182f4:	fb94 f4f9 	sdiv	r4, r4, r9
 80182f8:	f015 050f 	ands.w	r5, r5, #15
 80182fc:	bf18      	it	ne
 80182fe:	2501      	movne	r5, #1
 8018300:	1b64      	subs	r4, r4, r5
 8018302:	e755      	b.n	80181b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018304:	4264      	negs	r4, r4
 8018306:	fb94 fef6 	sdiv	lr, r4, r6
 801830a:	f1ce 0800 	rsb	r8, lr, #0
 801830e:	fb06 441e 	mls	r4, r6, lr, r4
 8018312:	f8c0 8000 	str.w	r8, [r0]
 8018316:	6104      	str	r4, [r0, #16]
 8018318:	2c00      	cmp	r4, #0
 801831a:	f43f af6e 	beq.w	80181fa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801831e:	ea6f 0e0e 	mvn.w	lr, lr
 8018322:	1b34      	subs	r4, r6, r4
 8018324:	f8c0 e000 	str.w	lr, [r0]
 8018328:	e766      	b.n	80181f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801832a:	426d      	negs	r5, r5
 801832c:	fb95 f4f6 	sdiv	r4, r5, r6
 8018330:	f1c4 0e00 	rsb	lr, r4, #0
 8018334:	fb06 5514 	mls	r5, r6, r4, r5
 8018338:	f8c0 e004 	str.w	lr, [r0, #4]
 801833c:	6085      	str	r5, [r0, #8]
 801833e:	2d00      	cmp	r5, #0
 8018340:	f43f af64 	beq.w	801820c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018344:	43e4      	mvns	r4, r4
 8018346:	1b75      	subs	r5, r6, r5
 8018348:	6044      	str	r4, [r0, #4]
 801834a:	e75e      	b.n	801820a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801834c:	3d800000 	.word	0x3d800000

08018350 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018350:	4602      	mov	r2, r0
 8018352:	b148      	cbz	r0, 8018368 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018354:	2300      	movs	r3, #0
 8018356:	b298      	uxth	r0, r3
 8018358:	3301      	adds	r3, #1
 801835a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801835e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018362:	2900      	cmp	r1, #0
 8018364:	d1f7      	bne.n	8018356 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018366:	4770      	bx	lr
 8018368:	4770      	bx	lr

0801836a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801836a:	b530      	push	{r4, r5, lr}
 801836c:	4604      	mov	r4, r0
 801836e:	b159      	cbz	r1, 8018388 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018370:	b148      	cbz	r0, 8018386 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018372:	2300      	movs	r3, #0
 8018374:	b298      	uxth	r0, r3
 8018376:	4282      	cmp	r2, r0
 8018378:	d905      	bls.n	8018386 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801837a:	5ccd      	ldrb	r5, [r1, r3]
 801837c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018380:	3301      	adds	r3, #1
 8018382:	2d00      	cmp	r5, #0
 8018384:	d1f6      	bne.n	8018374 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018386:	bd30      	pop	{r4, r5, pc}
 8018388:	4608      	mov	r0, r1
 801838a:	e7fc      	b.n	8018386 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801838c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801838e:	468c      	mov	ip, r1
 8018390:	b08b      	sub	sp, #44	; 0x2c
 8018392:	2100      	movs	r1, #0
 8018394:	ae01      	add	r6, sp, #4
 8018396:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801839a:	211f      	movs	r1, #31
 801839c:	fbb0 f7f3 	udiv	r7, r0, r3
 80183a0:	fb03 0517 	mls	r5, r3, r7, r0
 80183a4:	4638      	mov	r0, r7
 80183a6:	b2ec      	uxtb	r4, r5
 80183a8:	2d09      	cmp	r5, #9
 80183aa:	bfd4      	ite	le
 80183ac:	3430      	addle	r4, #48	; 0x30
 80183ae:	3457      	addgt	r4, #87	; 0x57
 80183b0:	b2e4      	uxtb	r4, r4
 80183b2:	558c      	strb	r4, [r1, r6]
 80183b4:	1e4c      	subs	r4, r1, #1
 80183b6:	b92f      	cbnz	r7, 80183c4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 80183b8:	4431      	add	r1, r6
 80183ba:	4660      	mov	r0, ip
 80183bc:	f7ff ffd5 	bl	801836a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80183c0:	b00b      	add	sp, #44	; 0x2c
 80183c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183c4:	4621      	mov	r1, r4
 80183c6:	e7e9      	b.n	801839c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

080183c8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 80183c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183ca:	4607      	mov	r7, r0
 80183cc:	b08b      	sub	sp, #44	; 0x2c
 80183ce:	4608      	mov	r0, r1
 80183d0:	b341      	cbz	r1, 8018424 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80183d2:	1e99      	subs	r1, r3, #2
 80183d4:	2922      	cmp	r1, #34	; 0x22
 80183d6:	d825      	bhi.n	8018424 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80183d8:	2100      	movs	r1, #0
 80183da:	463c      	mov	r4, r7
 80183dc:	261f      	movs	r6, #31
 80183de:	f10d 0c04 	add.w	ip, sp, #4
 80183e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80183e6:	1e71      	subs	r1, r6, #1
 80183e8:	fb94 fef3 	sdiv	lr, r4, r3
 80183ec:	fb03 441e 	mls	r4, r3, lr, r4
 80183f0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80183f4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80183f8:	b2ec      	uxtb	r4, r5
 80183fa:	2d09      	cmp	r5, #9
 80183fc:	bfd4      	ite	le
 80183fe:	3430      	addle	r4, #48	; 0x30
 8018400:	3457      	addgt	r4, #87	; 0x57
 8018402:	b2e4      	uxtb	r4, r4
 8018404:	f80c 4006 	strb.w	r4, [ip, r6]
 8018408:	4674      	mov	r4, lr
 801840a:	b96c      	cbnz	r4, 8018428 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801840c:	2f00      	cmp	r7, #0
 801840e:	da05      	bge.n	801841c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018410:	ab0a      	add	r3, sp, #40	; 0x28
 8018412:	4419      	add	r1, r3
 8018414:	232d      	movs	r3, #45	; 0x2d
 8018416:	f801 3c24 	strb.w	r3, [r1, #-36]
 801841a:	1eb1      	subs	r1, r6, #2
 801841c:	3101      	adds	r1, #1
 801841e:	4461      	add	r1, ip
 8018420:	f7ff ffa3 	bl	801836a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018424:	b00b      	add	sp, #44	; 0x2c
 8018426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018428:	460e      	mov	r6, r1
 801842a:	e7dc      	b.n	80183e6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801842c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018430:	b085      	sub	sp, #20
 8018432:	4691      	mov	r9, r2
 8018434:	6802      	ldr	r2, [r0, #0]
 8018436:	4688      	mov	r8, r1
 8018438:	461c      	mov	r4, r3
 801843a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801843e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018442:	4683      	mov	fp, r0
 8018444:	4610      	mov	r0, r2
 8018446:	9103      	str	r1, [sp, #12]
 8018448:	9302      	str	r3, [sp, #8]
 801844a:	9201      	str	r2, [sp, #4]
 801844c:	f7ff ff80 	bl	8018350 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018450:	f1b8 0f00 	cmp.w	r8, #0
 8018454:	bf0c      	ite	eq
 8018456:	4684      	moveq	ip, r0
 8018458:	f100 0c01 	addne.w	ip, r0, #1
 801845c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018460:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018464:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018466:	fa1f fc8c 	uxth.w	ip, ip
 801846a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801846c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018470:	9903      	ldr	r1, [sp, #12]
 8018472:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018476:	d041      	beq.n	80184fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018478:	d834      	bhi.n	80184e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801847a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801847e:	d059      	beq.n	8018534 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018480:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018484:	d03a      	beq.n	80184fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018486:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801848a:	d034      	beq.n	80184f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801848c:	2400      	movs	r4, #0
 801848e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018492:	3a01      	subs	r2, #1
 8018494:	b169      	cbz	r1, 80184b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018496:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018498:	458c      	cmp	ip, r1
 801849a:	da09      	bge.n	80184b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801849c:	eba1 010c 	sub.w	r1, r1, ip
 80184a0:	b289      	uxth	r1, r1
 80184a2:	b933      	cbnz	r3, 80184b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80184a4:	2e00      	cmp	r6, #0
 80184a6:	d051      	beq.n	801854c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80184a8:	2800      	cmp	r0, #0
 80184aa:	d04f      	beq.n	801854c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80184ac:	440c      	add	r4, r1
 80184ae:	b2a4      	uxth	r4, r4
 80184b0:	2100      	movs	r1, #0
 80184b2:	682b      	ldr	r3, [r5, #0]
 80184b4:	4293      	cmp	r3, r2
 80184b6:	da07      	bge.n	80184c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80184b8:	f1b8 0f00 	cmp.w	r8, #0
 80184bc:	d004      	beq.n	80184c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80184be:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80184c2:	682b      	ldr	r3, [r5, #0]
 80184c4:	3301      	adds	r3, #1
 80184c6:	602b      	str	r3, [r5, #0]
 80184c8:	2730      	movs	r7, #48	; 0x30
 80184ca:	2c00      	cmp	r4, #0
 80184cc:	d04e      	beq.n	801856c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80184ce:	682e      	ldr	r6, [r5, #0]
 80184d0:	3c01      	subs	r4, #1
 80184d2:	42b2      	cmp	r2, r6
 80184d4:	b2a4      	uxth	r4, r4
 80184d6:	dd49      	ble.n	801856c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80184d8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80184dc:	682b      	ldr	r3, [r5, #0]
 80184de:	3301      	adds	r3, #1
 80184e0:	602b      	str	r3, [r5, #0]
 80184e2:	e7f2      	b.n	80184ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80184e4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80184e8:	d01d      	beq.n	8018526 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80184ea:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80184ee:	d002      	beq.n	80184f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80184f0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80184f4:	e7c9      	b.n	801848a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80184f6:	4684      	mov	ip, r0
 80184f8:	f04f 0800 	mov.w	r8, #0
 80184fc:	2c00      	cmp	r4, #0
 80184fe:	d0c6      	beq.n	801848e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018500:	b947      	cbnz	r7, 8018514 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018502:	2801      	cmp	r0, #1
 8018504:	d106      	bne.n	8018514 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018506:	8814      	ldrh	r4, [r2, #0]
 8018508:	2c30      	cmp	r4, #48	; 0x30
 801850a:	bf02      	ittt	eq
 801850c:	3202      	addeq	r2, #2
 801850e:	4638      	moveq	r0, r7
 8018510:	f8cb 2000 	streq.w	r2, [fp]
 8018514:	45bc      	cmp	ip, r7
 8018516:	da14      	bge.n	8018542 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018518:	b2bf      	uxth	r7, r7
 801851a:	eba7 040c 	sub.w	r4, r7, ip
 801851e:	46bc      	mov	ip, r7
 8018520:	b2a4      	uxth	r4, r4
 8018522:	2600      	movs	r6, #0
 8018524:	e7b3      	b.n	801848e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018526:	4684      	mov	ip, r0
 8018528:	b16c      	cbz	r4, 8018546 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801852a:	42b8      	cmp	r0, r7
 801852c:	dd00      	ble.n	8018530 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801852e:	b2b8      	uxth	r0, r7
 8018530:	2400      	movs	r4, #0
 8018532:	e003      	b.n	801853c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018534:	f04f 0c01 	mov.w	ip, #1
 8018538:	2400      	movs	r4, #0
 801853a:	4660      	mov	r0, ip
 801853c:	4626      	mov	r6, r4
 801853e:	46a0      	mov	r8, r4
 8018540:	e7a5      	b.n	801848e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018542:	2400      	movs	r4, #0
 8018544:	e7ed      	b.n	8018522 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018546:	4626      	mov	r6, r4
 8018548:	46a0      	mov	r8, r4
 801854a:	e7a0      	b.n	801848e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801854c:	2900      	cmp	r1, #0
 801854e:	d0b0      	beq.n	80184b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018550:	2720      	movs	r7, #32
 8018552:	682e      	ldr	r6, [r5, #0]
 8018554:	2900      	cmp	r1, #0
 8018556:	d0ac      	beq.n	80184b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018558:	3901      	subs	r1, #1
 801855a:	4296      	cmp	r6, r2
 801855c:	b289      	uxth	r1, r1
 801855e:	daa7      	bge.n	80184b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018560:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018564:	682b      	ldr	r3, [r5, #0]
 8018566:	3301      	adds	r3, #1
 8018568:	602b      	str	r3, [r5, #0]
 801856a:	e7f2      	b.n	8018552 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801856c:	b188      	cbz	r0, 8018592 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801856e:	682b      	ldr	r3, [r5, #0]
 8018570:	3801      	subs	r0, #1
 8018572:	429a      	cmp	r2, r3
 8018574:	b280      	uxth	r0, r0
 8018576:	dd0c      	ble.n	8018592 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018578:	f8db 3000 	ldr.w	r3, [fp]
 801857c:	1c9c      	adds	r4, r3, #2
 801857e:	f8cb 4000 	str.w	r4, [fp]
 8018582:	881c      	ldrh	r4, [r3, #0]
 8018584:	682b      	ldr	r3, [r5, #0]
 8018586:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801858a:	682b      	ldr	r3, [r5, #0]
 801858c:	3301      	adds	r3, #1
 801858e:	602b      	str	r3, [r5, #0]
 8018590:	e7ec      	b.n	801856c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018592:	2620      	movs	r6, #32
 8018594:	b151      	cbz	r1, 80185ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018596:	6828      	ldr	r0, [r5, #0]
 8018598:	3901      	subs	r1, #1
 801859a:	4282      	cmp	r2, r0
 801859c:	b289      	uxth	r1, r1
 801859e:	dd05      	ble.n	80185ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80185a0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80185a4:	682b      	ldr	r3, [r5, #0]
 80185a6:	3301      	adds	r3, #1
 80185a8:	602b      	str	r3, [r5, #0]
 80185aa:	e7f3      	b.n	8018594 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80185ac:	b005      	add	sp, #20
 80185ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80185b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185b6:	2400      	movs	r4, #0
 80185b8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80185bc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80185c0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 80185c4:	8014      	strh	r4, [r2, #0]
 80185c6:	701c      	strb	r4, [r3, #0]
 80185c8:	f888 4000 	strb.w	r4, [r8]
 80185cc:	f88c 4000 	strb.w	r4, [ip]
 80185d0:	f88e 4000 	strb.w	r4, [lr]
 80185d4:	703c      	strb	r4, [r7, #0]
 80185d6:	6804      	ldr	r4, [r0, #0]
 80185d8:	b1a4      	cbz	r4, 8018604 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80185da:	8824      	ldrh	r4, [r4, #0]
 80185dc:	f04f 0901 	mov.w	r9, #1
 80185e0:	b314      	cbz	r4, 8018628 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80185e2:	2c2b      	cmp	r4, #43	; 0x2b
 80185e4:	d001      	beq.n	80185ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80185e6:	2c20      	cmp	r4, #32
 80185e8:	d110      	bne.n	801860c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80185ea:	8014      	strh	r4, [r2, #0]
 80185ec:	6804      	ldr	r4, [r0, #0]
 80185ee:	b10c      	cbz	r4, 80185f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80185f0:	3402      	adds	r4, #2
 80185f2:	6004      	str	r4, [r0, #0]
 80185f4:	680c      	ldr	r4, [r1, #0]
 80185f6:	b10c      	cbz	r4, 80185fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80185f8:	3401      	adds	r4, #1
 80185fa:	600c      	str	r4, [r1, #0]
 80185fc:	6804      	ldr	r4, [r0, #0]
 80185fe:	b17c      	cbz	r4, 8018620 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018600:	8824      	ldrh	r4, [r4, #0]
 8018602:	e7ed      	b.n	80185e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018604:	680c      	ldr	r4, [r1, #0]
 8018606:	b17c      	cbz	r4, 8018628 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018608:	7824      	ldrb	r4, [r4, #0]
 801860a:	e7e7      	b.n	80185dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801860c:	2c2d      	cmp	r4, #45	; 0x2d
 801860e:	d102      	bne.n	8018616 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018610:	f883 9000 	strb.w	r9, [r3]
 8018614:	e7ea      	b.n	80185ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018616:	2c23      	cmp	r4, #35	; 0x23
 8018618:	d107      	bne.n	801862a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801861a:	f888 9000 	strb.w	r9, [r8]
 801861e:	e7e5      	b.n	80185ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018620:	680c      	ldr	r4, [r1, #0]
 8018622:	b10c      	cbz	r4, 8018628 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018624:	7824      	ldrb	r4, [r4, #0]
 8018626:	e7db      	b.n	80185e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018628:	2400      	movs	r4, #0
 801862a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801862e:	2b09      	cmp	r3, #9
 8018630:	d901      	bls.n	8018636 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018632:	2c2a      	cmp	r4, #42	; 0x2a
 8018634:	d122      	bne.n	801867c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018636:	2301      	movs	r3, #1
 8018638:	2c30      	cmp	r4, #48	; 0x30
 801863a:	f88e 3000 	strb.w	r3, [lr]
 801863e:	d10d      	bne.n	801865c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018640:	f88c 3000 	strb.w	r3, [ip]
 8018644:	6803      	ldr	r3, [r0, #0]
 8018646:	b10b      	cbz	r3, 801864c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018648:	3302      	adds	r3, #2
 801864a:	6003      	str	r3, [r0, #0]
 801864c:	680b      	ldr	r3, [r1, #0]
 801864e:	b10b      	cbz	r3, 8018654 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018650:	3301      	adds	r3, #1
 8018652:	600b      	str	r3, [r1, #0]
 8018654:	6803      	ldr	r3, [r0, #0]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d02f      	beq.n	80186ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801865a:	881c      	ldrh	r4, [r3, #0]
 801865c:	2c2a      	cmp	r4, #42	; 0x2a
 801865e:	d135      	bne.n	80186cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018660:	f04f 33ff 	mov.w	r3, #4294967295
 8018664:	6033      	str	r3, [r6, #0]
 8018666:	6803      	ldr	r3, [r0, #0]
 8018668:	b10b      	cbz	r3, 801866e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801866a:	3302      	adds	r3, #2
 801866c:	6003      	str	r3, [r0, #0]
 801866e:	680b      	ldr	r3, [r1, #0]
 8018670:	b10b      	cbz	r3, 8018676 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018672:	3301      	adds	r3, #1
 8018674:	600b      	str	r3, [r1, #0]
 8018676:	6803      	ldr	r3, [r0, #0]
 8018678:	b31b      	cbz	r3, 80186c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801867a:	881c      	ldrh	r4, [r3, #0]
 801867c:	2c2e      	cmp	r4, #46	; 0x2e
 801867e:	d11a      	bne.n	80186b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018680:	2301      	movs	r3, #1
 8018682:	703b      	strb	r3, [r7, #0]
 8018684:	6803      	ldr	r3, [r0, #0]
 8018686:	b10b      	cbz	r3, 801868c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018688:	3302      	adds	r3, #2
 801868a:	6003      	str	r3, [r0, #0]
 801868c:	680b      	ldr	r3, [r1, #0]
 801868e:	b10b      	cbz	r3, 8018694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018690:	3301      	adds	r3, #1
 8018692:	600b      	str	r3, [r1, #0]
 8018694:	6803      	ldr	r3, [r0, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d036      	beq.n	8018708 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801869a:	881b      	ldrh	r3, [r3, #0]
 801869c:	2b2a      	cmp	r3, #42	; 0x2a
 801869e:	d137      	bne.n	8018710 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80186a0:	f04f 33ff 	mov.w	r3, #4294967295
 80186a4:	602b      	str	r3, [r5, #0]
 80186a6:	6803      	ldr	r3, [r0, #0]
 80186a8:	b10b      	cbz	r3, 80186ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80186aa:	3302      	adds	r3, #2
 80186ac:	6003      	str	r3, [r0, #0]
 80186ae:	680b      	ldr	r3, [r1, #0]
 80186b0:	b10b      	cbz	r3, 80186b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80186b2:	3301      	adds	r3, #1
 80186b4:	600b      	str	r3, [r1, #0]
 80186b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186ba:	680c      	ldr	r4, [r1, #0]
 80186bc:	b134      	cbz	r4, 80186cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80186be:	7824      	ldrb	r4, [r4, #0]
 80186c0:	e7cc      	b.n	801865c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80186c2:	680b      	ldr	r3, [r1, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d0f6      	beq.n	80186b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80186c8:	781c      	ldrb	r4, [r3, #0]
 80186ca:	e7d7      	b.n	801867c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80186cc:	2300      	movs	r3, #0
 80186ce:	220a      	movs	r2, #10
 80186d0:	6033      	str	r3, [r6, #0]
 80186d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80186d6:	fa1f f38c 	uxth.w	r3, ip
 80186da:	2b09      	cmp	r3, #9
 80186dc:	d8ce      	bhi.n	801867c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80186de:	6833      	ldr	r3, [r6, #0]
 80186e0:	fb02 c303 	mla	r3, r2, r3, ip
 80186e4:	6033      	str	r3, [r6, #0]
 80186e6:	6803      	ldr	r3, [r0, #0]
 80186e8:	b10b      	cbz	r3, 80186ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80186ea:	3302      	adds	r3, #2
 80186ec:	6003      	str	r3, [r0, #0]
 80186ee:	680b      	ldr	r3, [r1, #0]
 80186f0:	b10b      	cbz	r3, 80186f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80186f2:	3301      	adds	r3, #1
 80186f4:	600b      	str	r3, [r1, #0]
 80186f6:	6803      	ldr	r3, [r0, #0]
 80186f8:	b10b      	cbz	r3, 80186fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80186fa:	881c      	ldrh	r4, [r3, #0]
 80186fc:	e7e9      	b.n	80186d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80186fe:	680c      	ldr	r4, [r1, #0]
 8018700:	2c00      	cmp	r4, #0
 8018702:	d0e6      	beq.n	80186d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018704:	7824      	ldrb	r4, [r4, #0]
 8018706:	e7e4      	b.n	80186d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018708:	680b      	ldr	r3, [r1, #0]
 801870a:	b10b      	cbz	r3, 8018710 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	e7c5      	b.n	801869c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8018710:	2200      	movs	r2, #0
 8018712:	240a      	movs	r4, #10
 8018714:	602a      	str	r2, [r5, #0]
 8018716:	3b30      	subs	r3, #48	; 0x30
 8018718:	682a      	ldr	r2, [r5, #0]
 801871a:	b29e      	uxth	r6, r3
 801871c:	2e09      	cmp	r6, #9
 801871e:	d813      	bhi.n	8018748 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8018720:	fb04 3302 	mla	r3, r4, r2, r3
 8018724:	602b      	str	r3, [r5, #0]
 8018726:	6803      	ldr	r3, [r0, #0]
 8018728:	b10b      	cbz	r3, 801872e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801872a:	3302      	adds	r3, #2
 801872c:	6003      	str	r3, [r0, #0]
 801872e:	680b      	ldr	r3, [r1, #0]
 8018730:	b10b      	cbz	r3, 8018736 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8018732:	3301      	adds	r3, #1
 8018734:	600b      	str	r3, [r1, #0]
 8018736:	6803      	ldr	r3, [r0, #0]
 8018738:	b10b      	cbz	r3, 801873e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801873a:	881b      	ldrh	r3, [r3, #0]
 801873c:	e7eb      	b.n	8018716 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801873e:	680b      	ldr	r3, [r1, #0]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d0e8      	beq.n	8018716 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018744:	781b      	ldrb	r3, [r3, #0]
 8018746:	e7e6      	b.n	8018716 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018748:	2a06      	cmp	r2, #6
 801874a:	bfa8      	it	ge
 801874c:	2206      	movge	r2, #6
 801874e:	602a      	str	r2, [r5, #0]
 8018750:	e7b1      	b.n	80186b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08018752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8018752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018756:	b0a3      	sub	sp, #140	; 0x8c
 8018758:	2600      	movs	r6, #0
 801875a:	4607      	mov	r7, r0
 801875c:	4688      	mov	r8, r1
 801875e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8018762:	4631      	mov	r1, r6
 8018764:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8018766:	4648      	mov	r0, r9
 8018768:	960d      	str	r6, [sp, #52]	; 0x34
 801876a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801876e:	2242      	movs	r2, #66	; 0x42
 8018770:	f008 fd50 	bl	8021214 <memset>
 8018774:	b15f      	cbz	r7, 801878e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8018776:	f108 3aff 	add.w	sl, r8, #4294967295
 801877a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801877c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801877e:	b152      	cbz	r2, 8018796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018780:	8812      	ldrh	r2, [r2, #0]
 8018782:	b10a      	cbz	r2, 8018788 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018784:	459a      	cmp	sl, r3
 8018786:	dc2e      	bgt.n	80187e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8018788:	2200      	movs	r2, #0
 801878a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801878e:	4638      	mov	r0, r7
 8018790:	b023      	add	sp, #140	; 0x8c
 8018792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018796:	9a08      	ldr	r2, [sp, #32]
 8018798:	2a00      	cmp	r2, #0
 801879a:	d0f5      	beq.n	8018788 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801879c:	7812      	ldrb	r2, [r2, #0]
 801879e:	e7f0      	b.n	8018782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80187a0:	2d00      	cmp	r5, #0
 80187a2:	d0ea      	beq.n	801877a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80187a4:	782a      	ldrb	r2, [r5, #0]
 80187a6:	b142      	cbz	r2, 80187ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80187a8:	2a25      	cmp	r2, #37	; 0x25
 80187aa:	d001      	beq.n	80187b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80187ac:	459a      	cmp	sl, r3
 80187ae:	dc08      	bgt.n	80187c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80187b0:	f1bb 0f00 	cmp.w	fp, #0
 80187b4:	d121      	bne.n	80187fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80187b6:	2d00      	cmp	r5, #0
 80187b8:	d0df      	beq.n	801877a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80187ba:	782a      	ldrb	r2, [r5, #0]
 80187bc:	f04f 0b00 	mov.w	fp, #0
 80187c0:	e01d      	b.n	80187fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80187c2:	f1bb 0f00 	cmp.w	fp, #0
 80187c6:	d077      	beq.n	80188b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 80187c8:	f8bb 2000 	ldrh.w	r2, [fp]
 80187cc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80187d0:	f1bb 0f00 	cmp.w	fp, #0
 80187d4:	d002      	beq.n	80187dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80187d6:	f10b 0202 	add.w	r2, fp, #2
 80187da:	9209      	str	r2, [sp, #36]	; 0x24
 80187dc:	b10d      	cbz	r5, 80187e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80187de:	3501      	adds	r5, #1
 80187e0:	9508      	str	r5, [sp, #32]
 80187e2:	3301      	adds	r3, #1
 80187e4:	930d      	str	r3, [sp, #52]	; 0x34
 80187e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187e8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80187ec:	f1bb 0f00 	cmp.w	fp, #0
 80187f0:	d0d6      	beq.n	80187a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80187f2:	f8bb 2000 	ldrh.w	r2, [fp]
 80187f6:	2a00      	cmp	r2, #0
 80187f8:	d1d6      	bne.n	80187a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80187fa:	f8bb 2000 	ldrh.w	r2, [fp]
 80187fe:	2a00      	cmp	r2, #0
 8018800:	d0bb      	beq.n	801877a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018802:	459a      	cmp	sl, r3
 8018804:	ddb9      	ble.n	801877a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018806:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801880a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801880e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8018812:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8018816:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801881a:	960e      	str	r6, [sp, #56]	; 0x38
 801881c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8018820:	960f      	str	r6, [sp, #60]	; 0x3c
 8018822:	f1bb 0f00 	cmp.w	fp, #0
 8018826:	d002      	beq.n	801882e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8018828:	f10b 0302 	add.w	r3, fp, #2
 801882c:	9309      	str	r3, [sp, #36]	; 0x24
 801882e:	b10d      	cbz	r5, 8018834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8018830:	1c6b      	adds	r3, r5, #1
 8018832:	9308      	str	r3, [sp, #32]
 8018834:	ab0f      	add	r3, sp, #60	; 0x3c
 8018836:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801883a:	a908      	add	r1, sp, #32
 801883c:	a809      	add	r0, sp, #36	; 0x24
 801883e:	9305      	str	r3, [sp, #20]
 8018840:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8018844:	9304      	str	r3, [sp, #16]
 8018846:	ab0e      	add	r3, sp, #56	; 0x38
 8018848:	9303      	str	r3, [sp, #12]
 801884a:	ab0c      	add	r3, sp, #48	; 0x30
 801884c:	9302      	str	r3, [sp, #8]
 801884e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018852:	9301      	str	r3, [sp, #4]
 8018854:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018858:	9300      	str	r3, [sp, #0]
 801885a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801885e:	f7ff fea8 	bl	80185b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8018862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018864:	2b00      	cmp	r3, #0
 8018866:	bfbf      	itttt	lt
 8018868:	6823      	ldrlt	r3, [r4, #0]
 801886a:	3404      	addlt	r4, #4
 801886c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018870:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018874:	2b00      	cmp	r3, #0
 8018876:	bfbe      	ittt	lt
 8018878:	6823      	ldrlt	r3, [r4, #0]
 801887a:	3404      	addlt	r4, #4
 801887c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018880:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018884:	bfb8      	it	lt
 8018886:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8018888:	b1d9      	cbz	r1, 80188c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801888a:	880b      	ldrh	r3, [r1, #0]
 801888c:	2b69      	cmp	r3, #105	; 0x69
 801888e:	d01f      	beq.n	80188d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018890:	d82f      	bhi.n	80188f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8018892:	2b58      	cmp	r3, #88	; 0x58
 8018894:	d01c      	beq.n	80188d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018896:	d818      	bhi.n	80188ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8018898:	2b25      	cmp	r3, #37	; 0x25
 801889a:	d034      	beq.n	8018906 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801889c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801889e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80188a2:	f1bb 0f00 	cmp.w	fp, #0
 80188a6:	f000 80b7 	beq.w	8018a18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80188aa:	f8bb 5000 	ldrh.w	r5, [fp]
 80188ae:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80188b2:	3301      	adds	r3, #1
 80188b4:	930d      	str	r3, [sp, #52]	; 0x34
 80188b6:	e029      	b.n	801890c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80188b8:	b10d      	cbz	r5, 80188be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80188ba:	782a      	ldrb	r2, [r5, #0]
 80188bc:	e786      	b.n	80187cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80188be:	462a      	mov	r2, r5
 80188c0:	e784      	b.n	80187cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80188c2:	2a00      	cmp	r2, #0
 80188c4:	d0ea      	beq.n	801889c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80188c6:	7813      	ldrb	r3, [r2, #0]
 80188c8:	e7e0      	b.n	801888c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 80188ca:	3b63      	subs	r3, #99	; 0x63
 80188cc:	2b01      	cmp	r3, #1
 80188ce:	d8e5      	bhi.n	801889c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80188d0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80188d4:	b329      	cbz	r1, 8018922 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 80188d6:	880b      	ldrh	r3, [r1, #0]
 80188d8:	2b69      	cmp	r3, #105	; 0x69
 80188da:	d063      	beq.n	80189a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80188dc:	d825      	bhi.n	801892a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 80188de:	2b63      	cmp	r3, #99	; 0x63
 80188e0:	d038      	beq.n	8018954 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 80188e2:	2b64      	cmp	r3, #100	; 0x64
 80188e4:	d05e      	beq.n	80189a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80188e6:	2b58      	cmp	r3, #88	; 0x58
 80188e8:	d07a      	beq.n	80189e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 80188ea:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80188ee:	4625      	mov	r5, r4
 80188f0:	e036      	b.n	8018960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80188f2:	2b73      	cmp	r3, #115	; 0x73
 80188f4:	d0ec      	beq.n	80188d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80188f6:	d802      	bhi.n	80188fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80188f8:	2b6f      	cmp	r3, #111	; 0x6f
 80188fa:	d1cf      	bne.n	801889c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80188fc:	e7e8      	b.n	80188d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80188fe:	2b75      	cmp	r3, #117	; 0x75
 8018900:	d0e6      	beq.n	80188d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018902:	2b78      	cmp	r3, #120	; 0x78
 8018904:	e7f9      	b.n	80188fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8018906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018908:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801890e:	b10b      	cbz	r3, 8018914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8018910:	3302      	adds	r3, #2
 8018912:	9309      	str	r3, [sp, #36]	; 0x24
 8018914:	9b08      	ldr	r3, [sp, #32]
 8018916:	2b00      	cmp	r3, #0
 8018918:	f43f af2f 	beq.w	801877a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801891c:	3301      	adds	r3, #1
 801891e:	9308      	str	r3, [sp, #32]
 8018920:	e72b      	b.n	801877a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018922:	2a00      	cmp	r2, #0
 8018924:	d0e1      	beq.n	80188ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018926:	7813      	ldrb	r3, [r2, #0]
 8018928:	e7d6      	b.n	80188d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801892a:	2b73      	cmp	r3, #115	; 0x73
 801892c:	d036      	beq.n	801899c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801892e:	d807      	bhi.n	8018940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8018930:	2b6f      	cmp	r3, #111	; 0x6f
 8018932:	d1da      	bne.n	80188ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018936:	1d25      	adds	r5, r4, #4
 8018938:	2308      	movs	r3, #8
 801893a:	eba8 0202 	sub.w	r2, r8, r2
 801893e:	e049      	b.n	80189d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8018940:	2b75      	cmp	r3, #117	; 0x75
 8018942:	d042      	beq.n	80189ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8018944:	2b78      	cmp	r3, #120	; 0x78
 8018946:	d1d0      	bne.n	80188ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801894a:	1d25      	adds	r5, r4, #4
 801894c:	2310      	movs	r3, #16
 801894e:	eba8 0202 	sub.w	r2, r8, r2
 8018952:	e03f      	b.n	80189d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8018954:	6823      	ldr	r3, [r4, #0]
 8018956:	1d25      	adds	r5, r4, #4
 8018958:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801895c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8018960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018962:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018966:	2b00      	cmp	r3, #0
 8018968:	d051      	beq.n	8018a0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801896a:	881a      	ldrh	r2, [r3, #0]
 801896c:	a80d      	add	r0, sp, #52	; 0x34
 801896e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8018972:	462c      	mov	r4, r5
 8018974:	9005      	str	r0, [sp, #20]
 8018976:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801897a:	9004      	str	r0, [sp, #16]
 801897c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801897e:	9003      	str	r0, [sp, #12]
 8018980:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8018984:	9002      	str	r0, [sp, #8]
 8018986:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018988:	9001      	str	r0, [sp, #4]
 801898a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801898e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8018992:	9000      	str	r0, [sp, #0]
 8018994:	a810      	add	r0, sp, #64	; 0x40
 8018996:	f7ff fd49 	bl	801842c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801899a:	e7b7      	b.n	801890c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801899c:	1d25      	adds	r5, r4, #4
 801899e:	6823      	ldr	r3, [r4, #0]
 80189a0:	9310      	str	r3, [sp, #64]	; 0x40
 80189a2:	e7dd      	b.n	8018960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80189a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189a6:	230a      	movs	r3, #10
 80189a8:	4649      	mov	r1, r9
 80189aa:	6820      	ldr	r0, [r4, #0]
 80189ac:	eba8 0202 	sub.w	r2, r8, r2
 80189b0:	1d25      	adds	r5, r4, #4
 80189b2:	b292      	uxth	r2, r2
 80189b4:	f7ff fd08 	bl	80183c8 <_ZN8touchgfx7Unicode4itoaElPtti>
 80189b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80189bc:	2b2d      	cmp	r3, #45	; 0x2d
 80189be:	d1cf      	bne.n	8018960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80189c0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80189c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189c6:	3302      	adds	r3, #2
 80189c8:	e7ea      	b.n	80189a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80189ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189cc:	1d25      	adds	r5, r4, #4
 80189ce:	230a      	movs	r3, #10
 80189d0:	eba8 0202 	sub.w	r2, r8, r2
 80189d4:	b292      	uxth	r2, r2
 80189d6:	4649      	mov	r1, r9
 80189d8:	6820      	ldr	r0, [r4, #0]
 80189da:	f7ff fcd7 	bl	801838c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80189de:	e7bf      	b.n	8018960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80189e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189e2:	2310      	movs	r3, #16
 80189e4:	4649      	mov	r1, r9
 80189e6:	6820      	ldr	r0, [r4, #0]
 80189e8:	eba8 0202 	sub.w	r2, r8, r2
 80189ec:	1d25      	adds	r5, r4, #4
 80189ee:	b292      	uxth	r2, r2
 80189f0:	f7ff fccc 	bl	801838c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80189f4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80189f8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d0af      	beq.n	8018960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018a00:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8018a04:	2919      	cmp	r1, #25
 8018a06:	d8f7      	bhi.n	80189f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8018a08:	3b20      	subs	r3, #32
 8018a0a:	8013      	strh	r3, [r2, #0]
 8018a0c:	e7f4      	b.n	80189f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8018a0e:	9a08      	ldr	r2, [sp, #32]
 8018a10:	2a00      	cmp	r2, #0
 8018a12:	d0ab      	beq.n	801896c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8018a14:	7812      	ldrb	r2, [r2, #0]
 8018a16:	e7a9      	b.n	801896c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8018a18:	2d00      	cmp	r5, #0
 8018a1a:	f43f af48 	beq.w	80188ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8018a1e:	782d      	ldrb	r5, [r5, #0]
 8018a20:	e745      	b.n	80188ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08018a22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8018a22:	b507      	push	{r0, r1, r2, lr}
 8018a24:	9300      	str	r3, [sp, #0]
 8018a26:	4613      	mov	r3, r2
 8018a28:	2200      	movs	r2, #0
 8018a2a:	f7ff fe92 	bl	8018752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8018a2e:	b003      	add	sp, #12
 8018a30:	f85d fb04 	ldr.w	pc, [sp], #4

08018a34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8018a34:	b40c      	push	{r2, r3}
 8018a36:	b507      	push	{r0, r1, r2, lr}
 8018a38:	ab04      	add	r3, sp, #16
 8018a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a3e:	9301      	str	r3, [sp, #4]
 8018a40:	f7ff ffef 	bl	8018a22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8018a44:	b003      	add	sp, #12
 8018a46:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a4a:	b002      	add	sp, #8
 8018a4c:	4770      	bx	lr
	...

08018a50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018a50:	4b01      	ldr	r3, [pc, #4]	; (8018a58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8018a52:	6018      	str	r0, [r3, #0]
 8018a54:	4770      	bx	lr
 8018a56:	bf00      	nop
 8018a58:	20011b9c 	.word	0x20011b9c

08018a5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8018a5c:	4b06      	ldr	r3, [pc, #24]	; (8018a78 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8018a5e:	881a      	ldrh	r2, [r3, #0]
 8018a60:	4282      	cmp	r2, r0
 8018a62:	d807      	bhi.n	8018a74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8018a64:	4b05      	ldr	r3, [pc, #20]	; (8018a7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8018a66:	881b      	ldrh	r3, [r3, #0]
 8018a68:	4413      	add	r3, r2
 8018a6a:	4298      	cmp	r0, r3
 8018a6c:	bfac      	ite	ge
 8018a6e:	2000      	movge	r0, #0
 8018a70:	2001      	movlt	r0, #1
 8018a72:	4770      	bx	lr
 8018a74:	2000      	movs	r0, #0
 8018a76:	4770      	bx	lr
 8018a78:	20011bbc 	.word	0x20011bbc
 8018a7c:	20011bc0 	.word	0x20011bc0

08018a80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018a80:	b508      	push	{r3, lr}
 8018a82:	4601      	mov	r1, r0
 8018a84:	f7ff ffea 	bl	8018a5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018a88:	b118      	cbz	r0, 8018a92 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8018a8a:	4b02      	ldr	r3, [pc, #8]	; (8018a94 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8018a92:	bd08      	pop	{r3, pc}
 8018a94:	20011ba0 	.word	0x20011ba0

08018a98 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8018a98:	b538      	push	{r3, r4, r5, lr}
 8018a9a:	4604      	mov	r4, r0
 8018a9c:	f7ff ffde 	bl	8018a5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018aa0:	b188      	cbz	r0, 8018ac6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8018aa2:	4b09      	ldr	r3, [pc, #36]	; (8018ac8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8018aa4:	881a      	ldrh	r2, [r3, #0]
 8018aa6:	4b09      	ldr	r3, [pc, #36]	; (8018acc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8018aa8:	1aa4      	subs	r4, r4, r2
 8018aaa:	220e      	movs	r2, #14
 8018aac:	681d      	ldr	r5, [r3, #0]
 8018aae:	4362      	muls	r2, r4
 8018ab0:	18ac      	adds	r4, r5, r2
 8018ab2:	7b23      	ldrb	r3, [r4, #12]
 8018ab4:	f013 0320 	ands.w	r3, r3, #32
 8018ab8:	bf17      	itett	ne
 8018aba:	680b      	ldrne	r3, [r1, #0]
 8018abc:	4618      	moveq	r0, r3
 8018abe:	50ab      	strne	r3, [r5, r2]
 8018ac0:	684b      	ldrne	r3, [r1, #4]
 8018ac2:	bf18      	it	ne
 8018ac4:	6063      	strne	r3, [r4, #4]
 8018ac6:	bd38      	pop	{r3, r4, r5, pc}
 8018ac8:	20011bbc 	.word	0x20011bbc
 8018acc:	20011ba4 	.word	0x20011ba4

08018ad0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8018ad0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ad4:	4606      	mov	r6, r0
 8018ad6:	460c      	mov	r4, r1
 8018ad8:	f7ff ffc0 	bl	8018a5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018adc:	b918      	cbnz	r0, 8018ae6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8018ade:	2000      	movs	r0, #0
 8018ae0:	b002      	add	sp, #8
 8018ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ae6:	4608      	mov	r0, r1
 8018ae8:	f7f9 fa41 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018aec:	2800      	cmp	r0, #0
 8018aee:	d1f6      	bne.n	8018ade <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018af0:	4b3f      	ldr	r3, [pc, #252]	; (8018bf0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8018af2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8018bf4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8018af6:	881d      	ldrh	r5, [r3, #0]
 8018af8:	f8d9 a000 	ldr.w	sl, [r9]
 8018afc:	46c8      	mov	r8, r9
 8018afe:	1b73      	subs	r3, r6, r5
 8018b00:	250e      	movs	r5, #14
 8018b02:	435d      	muls	r5, r3
 8018b04:	eb0a 0705 	add.w	r7, sl, r5
 8018b08:	7b3b      	ldrb	r3, [r7, #12]
 8018b0a:	f013 0f20 	tst.w	r3, #32
 8018b0e:	d0e6      	beq.n	8018ade <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018b10:	4621      	mov	r1, r4
 8018b12:	4638      	mov	r0, r7
 8018b14:	f7fc ff58 	bl	80159c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	d1e1      	bne.n	8018ae0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8018b1c:	4639      	mov	r1, r7
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f7fc ff52 	bl	80159c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018b24:	b108      	cbz	r0, 8018b2a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8018b26:	4621      	mov	r1, r4
 8018b28:	e020      	b.n	8018b6c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8018b2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018b2e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8018b32:	429a      	cmp	r2, r3
 8018b34:	d11e      	bne.n	8018b74 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018b36:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018b3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8018b3e:	429a      	cmp	r2, r3
 8018b40:	d118      	bne.n	8018b74 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018b42:	6820      	ldr	r0, [r4, #0]
 8018b44:	466b      	mov	r3, sp
 8018b46:	6861      	ldr	r1, [r4, #4]
 8018b48:	c303      	stmia	r3!, {r0, r1}
 8018b4a:	4639      	mov	r1, r7
 8018b4c:	4668      	mov	r0, sp
 8018b4e:	f7fc ff61 	bl	8015a14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018b52:	f8d9 3000 	ldr.w	r3, [r9]
 8018b56:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018b5a:	442b      	add	r3, r5
 8018b5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018b60:	4413      	add	r3, r2
 8018b62:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8018b66:	4293      	cmp	r3, r2
 8018b68:	dc04      	bgt.n	8018b74 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018b6a:	4669      	mov	r1, sp
 8018b6c:	4630      	mov	r0, r6
 8018b6e:	f7ff ff93 	bl	8018a98 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8018b72:	e7b5      	b.n	8018ae0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8018b74:	f8d8 3000 	ldr.w	r3, [r8]
 8018b78:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018b7c:	442b      	add	r3, r5
 8018b7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018b82:	4291      	cmp	r1, r2
 8018b84:	d119      	bne.n	8018bba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8018b86:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018b8a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8018b8e:	4291      	cmp	r1, r2
 8018b90:	d113      	bne.n	8018bba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8018b92:	6820      	ldr	r0, [r4, #0]
 8018b94:	466a      	mov	r2, sp
 8018b96:	6861      	ldr	r1, [r4, #4]
 8018b98:	c203      	stmia	r2!, {r0, r1}
 8018b9a:	4619      	mov	r1, r3
 8018b9c:	4668      	mov	r0, sp
 8018b9e:	f7fc ff39 	bl	8015a14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8018ba6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018baa:	442b      	add	r3, r5
 8018bac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018bb0:	4413      	add	r3, r2
 8018bb2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8018bb6:	4293      	cmp	r3, r2
 8018bb8:	ddd7      	ble.n	8018b6a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8018bba:	4620      	mov	r0, r4
 8018bbc:	f7f9 f9d7 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018bc0:	b990      	cbnz	r0, 8018be8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8018bc2:	88a7      	ldrh	r7, [r4, #4]
 8018bc4:	88e3      	ldrh	r3, [r4, #6]
 8018bc6:	fb17 f703 	smulbb	r7, r7, r3
 8018bca:	f8d8 3000 	ldr.w	r3, [r8]
 8018bce:	441d      	add	r5, r3
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	f7f9 f9cc 	bl	8011f6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018bd6:	b948      	cbnz	r0, 8018bec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8018bd8:	88ab      	ldrh	r3, [r5, #4]
 8018bda:	88ea      	ldrh	r2, [r5, #6]
 8018bdc:	fb13 f302 	smulbb	r3, r3, r2
 8018be0:	42bb      	cmp	r3, r7
 8018be2:	f6bf af7c 	bge.w	8018ade <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018be6:	e79e      	b.n	8018b26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8018be8:	2700      	movs	r7, #0
 8018bea:	e7ee      	b.n	8018bca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8018bec:	2300      	movs	r3, #0
 8018bee:	e7f7      	b.n	8018be0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8018bf0:	20011bbc 	.word	0x20011bbc
 8018bf4:	20011ba4 	.word	0x20011ba4

08018bf8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bfa:	4c24      	ldr	r4, [pc, #144]	; (8018c8c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8018bfc:	6823      	ldr	r3, [r4, #0]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d042      	beq.n	8018c88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018c02:	4a23      	ldr	r2, [pc, #140]	; (8018c90 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018c04:	4d23      	ldr	r5, [pc, #140]	; (8018c94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8018c06:	8811      	ldrh	r1, [r2, #0]
 8018c08:	f8b5 c000 	ldrh.w	ip, [r5]
 8018c0c:	4822      	ldr	r0, [pc, #136]	; (8018c98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8018c0e:	4461      	add	r1, ip
 8018c10:	1c4a      	adds	r2, r1, #1
 8018c12:	008f      	lsls	r7, r1, #2
 8018c14:	f022 0201 	bic.w	r2, r2, #1
 8018c18:	19de      	adds	r6, r3, r7
 8018c1a:	0412      	lsls	r2, r2, #16
 8018c1c:	6006      	str	r6, [r0, #0]
 8018c1e:	4e1f      	ldr	r6, [pc, #124]	; (8018c9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018c20:	0c12      	lsrs	r2, r2, #16
 8018c22:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018c26:	19da      	adds	r2, r3, r7
 8018c28:	6032      	str	r2, [r6, #0]
 8018c2a:	220e      	movs	r2, #14
 8018c2c:	fb02 f20c 	mul.w	r2, r2, ip
 8018c30:	3203      	adds	r2, #3
 8018c32:	f022 0203 	bic.w	r2, r2, #3
 8018c36:	443a      	add	r2, r7
 8018c38:	4f19      	ldr	r7, [pc, #100]	; (8018ca0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018c3a:	4413      	add	r3, r2
 8018c3c:	603b      	str	r3, [r7, #0]
 8018c3e:	2300      	movs	r3, #0
 8018c40:	4f18      	ldr	r7, [pc, #96]	; (8018ca4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018c42:	469c      	mov	ip, r3
 8018c44:	803b      	strh	r3, [r7, #0]
 8018c46:	4f18      	ldr	r7, [pc, #96]	; (8018ca8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018c48:	683f      	ldr	r7, [r7, #0]
 8018c4a:	1aba      	subs	r2, r7, r2
 8018c4c:	4f17      	ldr	r7, [pc, #92]	; (8018cac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018c4e:	603a      	str	r2, [r7, #0]
 8018c50:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018c54:	4a16      	ldr	r2, [pc, #88]	; (8018cb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018c56:	8013      	strh	r3, [r2, #0]
 8018c58:	428b      	cmp	r3, r1
 8018c5a:	d10d      	bne.n	8018c78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018c5c:	882d      	ldrh	r5, [r5, #0]
 8018c5e:	2300      	movs	r3, #0
 8018c60:	6830      	ldr	r0, [r6, #0]
 8018c62:	240e      	movs	r4, #14
 8018c64:	429d      	cmp	r5, r3
 8018c66:	d90f      	bls.n	8018c88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018c68:	fb04 0203 	mla	r2, r4, r3, r0
 8018c6c:	3301      	adds	r3, #1
 8018c6e:	7b11      	ldrb	r1, [r2, #12]
 8018c70:	f36f 1145 	bfc	r1, #5, #1
 8018c74:	7311      	strb	r1, [r2, #12]
 8018c76:	e7f5      	b.n	8018c64 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8018c78:	6822      	ldr	r2, [r4, #0]
 8018c7a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018c7e:	6802      	ldr	r2, [r0, #0]
 8018c80:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8018c84:	3301      	adds	r3, #1
 8018c86:	e7e7      	b.n	8018c58 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8018c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c8a:	bf00      	nop
 8018c8c:	20011ba0 	.word	0x20011ba0
 8018c90:	20011bbc 	.word	0x20011bbc
 8018c94:	20011bc0 	.word	0x20011bc0
 8018c98:	20011bb4 	.word	0x20011bb4
 8018c9c:	20011ba4 	.word	0x20011ba4
 8018ca0:	20011bac 	.word	0x20011bac
 8018ca4:	20011bbe 	.word	0x20011bbe
 8018ca8:	20011ba8 	.word	0x20011ba8
 8018cac:	20011bb8 	.word	0x20011bb8
 8018cb0:	20011bb0 	.word	0x20011bb0

08018cb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018cb4:	4b06      	ldr	r3, [pc, #24]	; (8018cd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	b943      	cbnz	r3, 8018ccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018cba:	b139      	cbz	r1, 8018ccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018cbc:	4b05      	ldr	r3, [pc, #20]	; (8018cd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8018cbe:	801a      	strh	r2, [r3, #0]
 8018cc0:	4b05      	ldr	r3, [pc, #20]	; (8018cd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8018cc2:	6019      	str	r1, [r3, #0]
 8018cc4:	4b05      	ldr	r3, [pc, #20]	; (8018cdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8018cc6:	6018      	str	r0, [r3, #0]
 8018cc8:	f7ff bf96 	b.w	8018bf8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8018ccc:	4770      	bx	lr
 8018cce:	bf00      	nop
 8018cd0:	20011bac 	.word	0x20011bac
 8018cd4:	20011bc0 	.word	0x20011bc0
 8018cd8:	20011ba8 	.word	0x20011ba8
 8018cdc:	20011ba0 	.word	0x20011ba0

08018ce0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018ce0:	b470      	push	{r4, r5, r6}
 8018ce2:	4c07      	ldr	r4, [pc, #28]	; (8018d00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018ce4:	4605      	mov	r5, r0
 8018ce6:	4610      	mov	r0, r2
 8018ce8:	9a03      	ldr	r2, [sp, #12]
 8018cea:	6826      	ldr	r6, [r4, #0]
 8018cec:	b936      	cbnz	r6, 8018cfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018cee:	6025      	str	r5, [r4, #0]
 8018cf0:	4c04      	ldr	r4, [pc, #16]	; (8018d04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018cf2:	8021      	strh	r1, [r4, #0]
 8018cf4:	4619      	mov	r1, r3
 8018cf6:	bc70      	pop	{r4, r5, r6}
 8018cf8:	f7ff bfdc 	b.w	8018cb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018cfc:	bc70      	pop	{r4, r5, r6}
 8018cfe:	4770      	bx	lr
 8018d00:	20011bc4 	.word	0x20011bc4
 8018d04:	20011bbc 	.word	0x20011bbc

08018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018d08:	4a12      	ldr	r2, [pc, #72]	; (8018d54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8018d0a:	8803      	ldrh	r3, [r0, #0]
 8018d0c:	8812      	ldrh	r2, [r2, #0]
 8018d0e:	4293      	cmp	r3, r2
 8018d10:	d207      	bcs.n	8018d22 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018d12:	4a11      	ldr	r2, [pc, #68]	; (8018d58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018d14:	2114      	movs	r1, #20
 8018d16:	6812      	ldr	r2, [r2, #0]
 8018d18:	fb01 2303 	mla	r3, r1, r3, r2
 8018d1c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018d20:	4770      	bx	lr
 8018d22:	490e      	ldr	r1, [pc, #56]	; (8018d5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018d24:	8809      	ldrh	r1, [r1, #0]
 8018d26:	4411      	add	r1, r2
 8018d28:	428b      	cmp	r3, r1
 8018d2a:	da04      	bge.n	8018d36 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018d2c:	1a9b      	subs	r3, r3, r2
 8018d2e:	4a0c      	ldr	r2, [pc, #48]	; (8018d60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018d30:	210e      	movs	r1, #14
 8018d32:	6812      	ldr	r2, [r2, #0]
 8018d34:	e7f0      	b.n	8018d18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018d36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018d3a:	4293      	cmp	r3, r2
 8018d3c:	d108      	bne.n	8018d50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018d3e:	4b09      	ldr	r3, [pc, #36]	; (8018d64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018d40:	781b      	ldrb	r3, [r3, #0]
 8018d42:	b91b      	cbnz	r3, 8018d4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018d44:	4b08      	ldr	r3, [pc, #32]	; (8018d68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018d46:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018d4a:	4770      	bx	lr
 8018d4c:	4b07      	ldr	r3, [pc, #28]	; (8018d6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018d4e:	e7fa      	b.n	8018d46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018d50:	2000      	movs	r0, #0
 8018d52:	4770      	bx	lr
 8018d54:	20011bbc 	.word	0x20011bbc
 8018d58:	20011bc4 	.word	0x20011bc4
 8018d5c:	20011bc0 	.word	0x20011bc0
 8018d60:	20011ba4 	.word	0x20011ba4
 8018d64:	20011b32 	.word	0x20011b32
 8018d68:	20011b34 	.word	0x20011b34
 8018d6c:	20011b36 	.word	0x20011b36

08018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018d70:	4a12      	ldr	r2, [pc, #72]	; (8018dbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018d72:	8803      	ldrh	r3, [r0, #0]
 8018d74:	8812      	ldrh	r2, [r2, #0]
 8018d76:	4293      	cmp	r3, r2
 8018d78:	d207      	bcs.n	8018d8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8018d7a:	4a11      	ldr	r2, [pc, #68]	; (8018dc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018d7c:	2114      	movs	r1, #20
 8018d7e:	6812      	ldr	r2, [r2, #0]
 8018d80:	fb01 2303 	mla	r3, r1, r3, r2
 8018d84:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8018d88:	4770      	bx	lr
 8018d8a:	490e      	ldr	r1, [pc, #56]	; (8018dc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018d8c:	8809      	ldrh	r1, [r1, #0]
 8018d8e:	4411      	add	r1, r2
 8018d90:	428b      	cmp	r3, r1
 8018d92:	da04      	bge.n	8018d9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018d94:	1a9b      	subs	r3, r3, r2
 8018d96:	4a0c      	ldr	r2, [pc, #48]	; (8018dc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018d98:	210e      	movs	r1, #14
 8018d9a:	6812      	ldr	r2, [r2, #0]
 8018d9c:	e7f0      	b.n	8018d80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8018d9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018da2:	4293      	cmp	r3, r2
 8018da4:	d108      	bne.n	8018db8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8018da6:	4b09      	ldr	r3, [pc, #36]	; (8018dcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018da8:	781b      	ldrb	r3, [r3, #0]
 8018daa:	b91b      	cbnz	r3, 8018db4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8018dac:	4b08      	ldr	r3, [pc, #32]	; (8018dd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018dae:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018db2:	4770      	bx	lr
 8018db4:	4b07      	ldr	r3, [pc, #28]	; (8018dd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018db6:	e7fa      	b.n	8018dae <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8018db8:	2000      	movs	r0, #0
 8018dba:	4770      	bx	lr
 8018dbc:	20011bbc 	.word	0x20011bbc
 8018dc0:	20011bc4 	.word	0x20011bc4
 8018dc4:	20011bc0 	.word	0x20011bc0
 8018dc8:	20011ba4 	.word	0x20011ba4
 8018dcc:	20011b32 	.word	0x20011b32
 8018dd0:	20011b36 	.word	0x20011b36
 8018dd4:	20011b34 	.word	0x20011b34

08018dd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018dd8:	4a1f      	ldr	r2, [pc, #124]	; (8018e58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8018dda:	b510      	push	{r4, lr}
 8018ddc:	880b      	ldrh	r3, [r1, #0]
 8018dde:	8812      	ldrh	r2, [r2, #0]
 8018de0:	4293      	cmp	r3, r2
 8018de2:	d213      	bcs.n	8018e0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8018de4:	4a1d      	ldr	r2, [pc, #116]	; (8018e5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8018de6:	2114      	movs	r1, #20
 8018de8:	6812      	ldr	r2, [r2, #0]
 8018dea:	fb01 2303 	mla	r3, r1, r3, r2
 8018dee:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018df2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018df6:	8a1a      	ldrh	r2, [r3, #16]
 8018df8:	8a5b      	ldrh	r3, [r3, #18]
 8018dfa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018dfe:	8004      	strh	r4, [r0, #0]
 8018e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e04:	8041      	strh	r1, [r0, #2]
 8018e06:	8082      	strh	r2, [r0, #4]
 8018e08:	80c3      	strh	r3, [r0, #6]
 8018e0a:	e00e      	b.n	8018e2a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018e0c:	4914      	ldr	r1, [pc, #80]	; (8018e60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8018e0e:	8809      	ldrh	r1, [r1, #0]
 8018e10:	4411      	add	r1, r2
 8018e12:	428b      	cmp	r3, r1
 8018e14:	da0a      	bge.n	8018e2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8018e16:	1a9b      	subs	r3, r3, r2
 8018e18:	4a12      	ldr	r2, [pc, #72]	; (8018e64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8018e1a:	210e      	movs	r1, #14
 8018e1c:	6812      	ldr	r2, [r2, #0]
 8018e1e:	fb01 2303 	mla	r3, r1, r3, r2
 8018e22:	681a      	ldr	r2, [r3, #0]
 8018e24:	6002      	str	r2, [r0, #0]
 8018e26:	685a      	ldr	r2, [r3, #4]
 8018e28:	6042      	str	r2, [r0, #4]
 8018e2a:	bd10      	pop	{r4, pc}
 8018e2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018e30:	4293      	cmp	r3, r2
 8018e32:	d10b      	bne.n	8018e4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018e34:	4b0c      	ldr	r3, [pc, #48]	; (8018e68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018e36:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018e3a:	4b0c      	ldr	r3, [pc, #48]	; (8018e6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018e3c:	8081      	strh	r1, [r0, #4]
 8018e3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e42:	2300      	movs	r3, #0
 8018e44:	80c2      	strh	r2, [r0, #6]
 8018e46:	8003      	strh	r3, [r0, #0]
 8018e48:	8043      	strh	r3, [r0, #2]
 8018e4a:	e7ee      	b.n	8018e2a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	8003      	strh	r3, [r0, #0]
 8018e50:	8043      	strh	r3, [r0, #2]
 8018e52:	8083      	strh	r3, [r0, #4]
 8018e54:	e7d8      	b.n	8018e08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018e56:	bf00      	nop
 8018e58:	20011bbc 	.word	0x20011bbc
 8018e5c:	20011bc4 	.word	0x20011bc4
 8018e60:	20011bc0 	.word	0x20011bc0
 8018e64:	20011ba4 	.word	0x20011ba4
 8018e68:	20011b2e 	.word	0x20011b2e
 8018e6c:	20011b30 	.word	0x20011b30

08018e70 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018e70:	4a12      	ldr	r2, [pc, #72]	; (8018ebc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018e72:	8803      	ldrh	r3, [r0, #0]
 8018e74:	8811      	ldrh	r1, [r2, #0]
 8018e76:	428b      	cmp	r3, r1
 8018e78:	d20b      	bcs.n	8018e92 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8018e7a:	4a11      	ldr	r2, [pc, #68]	; (8018ec0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018e7c:	6812      	ldr	r2, [r2, #0]
 8018e7e:	b112      	cbz	r2, 8018e86 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018e80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018e84:	b9c0      	cbnz	r0, 8018eb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8018e86:	4a0f      	ldr	r2, [pc, #60]	; (8018ec4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018e88:	6811      	ldr	r1, [r2, #0]
 8018e8a:	2214      	movs	r2, #20
 8018e8c:	4353      	muls	r3, r2
 8018e8e:	58c8      	ldr	r0, [r1, r3]
 8018e90:	4770      	bx	lr
 8018e92:	4a0d      	ldr	r2, [pc, #52]	; (8018ec8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018e94:	8812      	ldrh	r2, [r2, #0]
 8018e96:	440a      	add	r2, r1
 8018e98:	4293      	cmp	r3, r2
 8018e9a:	da04      	bge.n	8018ea6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018e9c:	4a08      	ldr	r2, [pc, #32]	; (8018ec0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018e9e:	6812      	ldr	r2, [r2, #0]
 8018ea0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018ea4:	4770      	bx	lr
 8018ea6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018eaa:	4293      	cmp	r3, r2
 8018eac:	d103      	bne.n	8018eb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018eae:	4b07      	ldr	r3, [pc, #28]	; (8018ecc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018eb4:	4770      	bx	lr
 8018eb6:	2000      	movs	r0, #0
 8018eb8:	4770      	bx	lr
 8018eba:	bf00      	nop
 8018ebc:	20011bbc 	.word	0x20011bbc
 8018ec0:	20011ba0 	.word	0x20011ba0
 8018ec4:	20011bc4 	.word	0x20011bc4
 8018ec8:	20011bc0 	.word	0x20011bc0
 8018ecc:	20011b3c 	.word	0x20011b3c

08018ed0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018ed0:	4b24      	ldr	r3, [pc, #144]	; (8018f64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018ed2:	8802      	ldrh	r2, [r0, #0]
 8018ed4:	8818      	ldrh	r0, [r3, #0]
 8018ed6:	4282      	cmp	r2, r0
 8018ed8:	d221      	bcs.n	8018f1e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8018eda:	4b23      	ldr	r3, [pc, #140]	; (8018f68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018edc:	6819      	ldr	r1, [r3, #0]
 8018ede:	2314      	movs	r3, #20
 8018ee0:	fb03 1302 	mla	r3, r3, r2, r1
 8018ee4:	6858      	ldr	r0, [r3, #4]
 8018ee6:	2800      	cmp	r0, #0
 8018ee8:	d03a      	beq.n	8018f60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018eea:	4920      	ldr	r1, [pc, #128]	; (8018f6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018eec:	6809      	ldr	r1, [r1, #0]
 8018eee:	2900      	cmp	r1, #0
 8018ef0:	d036      	beq.n	8018f60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018ef2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018ef6:	2900      	cmp	r1, #0
 8018ef8:	d032      	beq.n	8018f60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018efa:	891a      	ldrh	r2, [r3, #8]
 8018efc:	8958      	ldrh	r0, [r3, #10]
 8018efe:	4350      	muls	r0, r2
 8018f00:	7c5a      	ldrb	r2, [r3, #17]
 8018f02:	7cdb      	ldrb	r3, [r3, #19]
 8018f04:	0952      	lsrs	r2, r2, #5
 8018f06:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018f0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018f0e:	2b0b      	cmp	r3, #11
 8018f10:	bf18      	it	ne
 8018f12:	0040      	lslne	r0, r0, #1
 8018f14:	3003      	adds	r0, #3
 8018f16:	f020 0003 	bic.w	r0, r0, #3
 8018f1a:	4408      	add	r0, r1
 8018f1c:	4770      	bx	lr
 8018f1e:	4b14      	ldr	r3, [pc, #80]	; (8018f70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018f20:	881b      	ldrh	r3, [r3, #0]
 8018f22:	4403      	add	r3, r0
 8018f24:	429a      	cmp	r2, r3
 8018f26:	da1a      	bge.n	8018f5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018f28:	4b12      	ldr	r3, [pc, #72]	; (8018f74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8018f2a:	1a10      	subs	r0, r2, r0
 8018f2c:	210e      	movs	r1, #14
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	fb01 3000 	mla	r0, r1, r0, r3
 8018f34:	7b03      	ldrb	r3, [r0, #12]
 8018f36:	f003 031f 	and.w	r3, r3, #31
 8018f3a:	2b0b      	cmp	r3, #11
 8018f3c:	d10b      	bne.n	8018f56 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018f3e:	8903      	ldrh	r3, [r0, #8]
 8018f40:	8940      	ldrh	r0, [r0, #10]
 8018f42:	4358      	muls	r0, r3
 8018f44:	4b09      	ldr	r3, [pc, #36]	; (8018f6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018f46:	3003      	adds	r0, #3
 8018f48:	6819      	ldr	r1, [r3, #0]
 8018f4a:	f020 0303 	bic.w	r3, r0, #3
 8018f4e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018f52:	4418      	add	r0, r3
 8018f54:	4770      	bx	lr
 8018f56:	2b0d      	cmp	r3, #13
 8018f58:	d101      	bne.n	8018f5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018f5a:	300d      	adds	r0, #13
 8018f5c:	4770      	bx	lr
 8018f5e:	2000      	movs	r0, #0
 8018f60:	4770      	bx	lr
 8018f62:	bf00      	nop
 8018f64:	20011bbc 	.word	0x20011bbc
 8018f68:	20011bc4 	.word	0x20011bc4
 8018f6c:	20011ba0 	.word	0x20011ba0
 8018f70:	20011bc0 	.word	0x20011bc0
 8018f74:	20011ba4 	.word	0x20011ba4

08018f78 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8018f78:	4a17      	ldr	r2, [pc, #92]	; (8018fd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8018f7a:	b510      	push	{r4, lr}
 8018f7c:	8803      	ldrh	r3, [r0, #0]
 8018f7e:	8812      	ldrh	r2, [r2, #0]
 8018f80:	4293      	cmp	r3, r2
 8018f82:	d20c      	bcs.n	8018f9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018f84:	4a15      	ldr	r2, [pc, #84]	; (8018fdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8018f86:	2114      	movs	r1, #20
 8018f88:	6812      	ldr	r2, [r2, #0]
 8018f8a:	fb01 2303 	mla	r3, r1, r3, r2
 8018f8e:	7c58      	ldrb	r0, [r3, #17]
 8018f90:	0942      	lsrs	r2, r0, #5
 8018f92:	7cd8      	ldrb	r0, [r3, #19]
 8018f94:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8018f98:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8018f9c:	bd10      	pop	{r4, pc}
 8018f9e:	4910      	ldr	r1, [pc, #64]	; (8018fe0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8018fa0:	8809      	ldrh	r1, [r1, #0]
 8018fa2:	4411      	add	r1, r2
 8018fa4:	428b      	cmp	r3, r1
 8018fa6:	da09      	bge.n	8018fbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8018fa8:	1a9b      	subs	r3, r3, r2
 8018faa:	4a0e      	ldr	r2, [pc, #56]	; (8018fe4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018fac:	210e      	movs	r1, #14
 8018fae:	6812      	ldr	r2, [r2, #0]
 8018fb0:	fb01 2303 	mla	r3, r1, r3, r2
 8018fb4:	7b18      	ldrb	r0, [r3, #12]
 8018fb6:	f000 001f 	and.w	r0, r0, #31
 8018fba:	e7ef      	b.n	8018f9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018fbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018fc0:	4293      	cmp	r3, r2
 8018fc2:	d106      	bne.n	8018fd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8018fc4:	f7f2 ffde 	bl	800bf84 <_ZN8touchgfx3HAL3lcdEv>
 8018fc8:	6803      	ldr	r3, [r0, #0]
 8018fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fd0:	4718      	bx	r3
 8018fd2:	2000      	movs	r0, #0
 8018fd4:	e7e2      	b.n	8018f9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018fd6:	bf00      	nop
 8018fd8:	20011bbc 	.word	0x20011bbc
 8018fdc:	20011bc4 	.word	0x20011bc4
 8018fe0:	20011bc0 	.word	0x20011bc0
 8018fe4:	20011ba4 	.word	0x20011ba4

08018fe8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8018fe8:	2018      	movs	r0, #24
 8018fea:	4770      	bx	lr

08018fec <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8018fec:	2001      	movs	r0, #1
 8018fee:	4770      	bx	lr

08018ff0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8018ff0:	4b02      	ldr	r3, [pc, #8]	; (8018ffc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8018ff2:	8818      	ldrh	r0, [r3, #0]
 8018ff4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018ff8:	b280      	uxth	r0, r0
 8018ffa:	4770      	bx	lr
 8018ffc:	20011b34 	.word	0x20011b34

08019000 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019000:	2bff      	cmp	r3, #255	; 0xff
 8019002:	d040      	beq.n	8019086 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8019004:	2a2c      	cmp	r2, #44	; 0x2c
 8019006:	d02a      	beq.n	801905e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8019008:	d80f      	bhi.n	801902a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801900a:	2a08      	cmp	r2, #8
 801900c:	d037      	beq.n	801907e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801900e:	d805      	bhi.n	801901c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8019010:	2a04      	cmp	r2, #4
 8019012:	d032      	beq.n	801907a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8019014:	2a05      	cmp	r2, #5
 8019016:	d02e      	beq.n	8019076 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019018:	2000      	movs	r0, #0
 801901a:	4770      	bx	lr
 801901c:	2a0a      	cmp	r2, #10
 801901e:	d02e      	beq.n	801907e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019020:	d301      	bcc.n	8019026 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8019022:	2a0b      	cmp	r2, #11
 8019024:	d1f8      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019026:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019028:	4770      	bx	lr
 801902a:	2a30      	cmp	r2, #48	; 0x30
 801902c:	d029      	beq.n	8019082 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801902e:	d808      	bhi.n	8019042 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8019030:	2a2e      	cmp	r2, #46	; 0x2e
 8019032:	684b      	ldr	r3, [r1, #4]
 8019034:	d01a      	beq.n	801906c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8019036:	d90b      	bls.n	8019050 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d1ec      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801903e:	6a00      	ldr	r0, [r0, #32]
 8019040:	4770      	bx	lr
 8019042:	2a32      	cmp	r2, #50	; 0x32
 8019044:	d01d      	beq.n	8019082 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019046:	d301      	bcc.n	801904c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8019048:	2a33      	cmp	r2, #51	; 0x33
 801904a:	d1e5      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801904c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801904e:	4770      	bx	lr
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d0f3      	beq.n	801903e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8019056:	2b01      	cmp	r3, #1
 8019058:	d1de      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801905a:	6900      	ldr	r0, [r0, #16]
 801905c:	4770      	bx	lr
 801905e:	684b      	ldr	r3, [r1, #4]
 8019060:	781b      	ldrb	r3, [r3, #0]
 8019062:	b133      	cbz	r3, 8019072 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019064:	2b01      	cmp	r3, #1
 8019066:	d1d7      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019068:	6880      	ldr	r0, [r0, #8]
 801906a:	4770      	bx	lr
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d1d2      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019072:	6980      	ldr	r0, [r0, #24]
 8019074:	4770      	bx	lr
 8019076:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019078:	4770      	bx	lr
 801907a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801907c:	4770      	bx	lr
 801907e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019080:	4770      	bx	lr
 8019082:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019084:	4770      	bx	lr
 8019086:	2a2c      	cmp	r2, #44	; 0x2c
 8019088:	d02a      	beq.n	80190e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801908a:	d80f      	bhi.n	80190ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801908c:	2a08      	cmp	r2, #8
 801908e:	d035      	beq.n	80190fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8019090:	d805      	bhi.n	801909e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019092:	2a04      	cmp	r2, #4
 8019094:	d030      	beq.n	80190f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8019096:	2a05      	cmp	r2, #5
 8019098:	d1be      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801909a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801909c:	4770      	bx	lr
 801909e:	2a0a      	cmp	r2, #10
 80190a0:	d02c      	beq.n	80190fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80190a2:	d301      	bcc.n	80190a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 80190a4:	2a0b      	cmp	r2, #11
 80190a6:	d1b7      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80190a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80190aa:	4770      	bx	lr
 80190ac:	2a30      	cmp	r2, #48	; 0x30
 80190ae:	d027      	beq.n	8019100 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80190b0:	d808      	bhi.n	80190c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80190b2:	2a2e      	cmp	r2, #46	; 0x2e
 80190b4:	684b      	ldr	r3, [r1, #4]
 80190b6:	d01a      	beq.n	80190ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80190b8:	d90b      	bls.n	80190d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 80190ba:	781b      	ldrb	r3, [r3, #0]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d1ab      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80190c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80190c2:	4770      	bx	lr
 80190c4:	2a32      	cmp	r2, #50	; 0x32
 80190c6:	d01b      	beq.n	8019100 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80190c8:	d301      	bcc.n	80190ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 80190ca:	2a33      	cmp	r2, #51	; 0x33
 80190cc:	d1a4      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80190ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80190d0:	4770      	bx	lr
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d0f3      	beq.n	80190c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80190d8:	2b01      	cmp	r3, #1
 80190da:	d19d      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80190dc:	6940      	ldr	r0, [r0, #20]
 80190de:	4770      	bx	lr
 80190e0:	684b      	ldr	r3, [r1, #4]
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	b133      	cbz	r3, 80190f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 80190e6:	2b01      	cmp	r3, #1
 80190e8:	d196      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80190ea:	68c0      	ldr	r0, [r0, #12]
 80190ec:	4770      	bx	lr
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d191      	bne.n	8019018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80190f4:	69c0      	ldr	r0, [r0, #28]
 80190f6:	4770      	bx	lr
 80190f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80190fa:	4770      	bx	lr
 80190fc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80190fe:	4770      	bx	lr
 8019100:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019102:	4770      	bx	lr

08019104 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019108:	b085      	sub	sp, #20
 801910a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801910c:	9203      	str	r2, [sp, #12]
 801910e:	6870      	ldr	r0, [r6, #4]
 8019110:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019114:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019118:	9101      	str	r1, [sp, #4]
 801911a:	fa1f f885 	uxth.w	r8, r5
 801911e:	43ed      	mvns	r5, r5
 8019120:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019124:	b2ed      	uxtb	r5, r5
 8019126:	fb00 2404 	mla	r4, r0, r4, r2
 801912a:	6832      	ldr	r2, [r6, #0]
 801912c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019130:	4414      	add	r4, r2
 8019132:	f8dc 2000 	ldr.w	r2, [ip]
 8019136:	9202      	str	r2, [sp, #8]
 8019138:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801913c:	f102 0e04 	add.w	lr, r2, #4
 8019140:	9a01      	ldr	r2, [sp, #4]
 8019142:	2a00      	cmp	r2, #0
 8019144:	dc03      	bgt.n	801914e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019146:	9a03      	ldr	r2, [sp, #12]
 8019148:	2a00      	cmp	r2, #0
 801914a:	f340 8116 	ble.w	801937a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801914e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019150:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019154:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019158:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801915a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801915e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019162:	2b00      	cmp	r3, #0
 8019164:	dd0e      	ble.n	8019184 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019166:	1406      	asrs	r6, r0, #16
 8019168:	d405      	bmi.n	8019176 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801916a:	4556      	cmp	r6, sl
 801916c:	da03      	bge.n	8019176 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801916e:	1416      	asrs	r6, r2, #16
 8019170:	d401      	bmi.n	8019176 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019172:	454e      	cmp	r6, r9
 8019174:	db07      	blt.n	8019186 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019176:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019178:	3b01      	subs	r3, #1
 801917a:	3403      	adds	r4, #3
 801917c:	4430      	add	r0, r6
 801917e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019180:	4432      	add	r2, r6
 8019182:	e7ee      	b.n	8019162 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019184:	d063      	beq.n	801924e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019186:	1e5e      	subs	r6, r3, #1
 8019188:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801918a:	fb07 0706 	mla	r7, r7, r6, r0
 801918e:	143f      	asrs	r7, r7, #16
 8019190:	d454      	bmi.n	801923c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019192:	4557      	cmp	r7, sl
 8019194:	da52      	bge.n	801923c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019196:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8019198:	fb07 2606 	mla	r6, r7, r6, r2
 801919c:	1436      	asrs	r6, r6, #16
 801919e:	d44d      	bmi.n	801923c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80191a0:	454e      	cmp	r6, r9
 80191a2:	da4b      	bge.n	801923c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80191a4:	1ce6      	adds	r6, r4, #3
 80191a6:	4699      	mov	r9, r3
 80191a8:	f1b9 0f00 	cmp.w	r9, #0
 80191ac:	f106 0603 	add.w	r6, r6, #3
 80191b0:	dd48      	ble.n	8019244 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80191b2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80191b6:	1417      	asrs	r7, r2, #16
 80191b8:	9902      	ldr	r1, [sp, #8]
 80191ba:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80191be:	f109 39ff 	add.w	r9, r9, #4294967295
 80191c2:	fb0b 1707 	mla	r7, fp, r7, r1
 80191c6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80191ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80191cc:	f817 700a 	ldrb.w	r7, [r7, sl]
 80191d0:	fb1b fb05 	smulbb	fp, fp, r5
 80191d4:	4408      	add	r0, r1
 80191d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80191d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80191dc:	440a      	add	r2, r1
 80191de:	eb0e 0a07 	add.w	sl, lr, r7
 80191e2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80191e6:	fb07 b708 	mla	r7, r7, r8, fp
 80191ea:	b2bf      	uxth	r7, r7
 80191ec:	f107 0b01 	add.w	fp, r7, #1
 80191f0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80191f4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80191f8:	fb1b fb05 	smulbb	fp, fp, r5
 80191fc:	123f      	asrs	r7, r7, #8
 80191fe:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019202:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019206:	fb07 b708 	mla	r7, r7, r8, fp
 801920a:	b2bf      	uxth	r7, r7
 801920c:	f107 0b01 	add.w	fp, r7, #1
 8019210:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019214:	123f      	asrs	r7, r7, #8
 8019216:	f806 7c05 	strb.w	r7, [r6, #-5]
 801921a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801921e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019222:	fb1a fa05 	smulbb	sl, sl, r5
 8019226:	fb07 a708 	mla	r7, r7, r8, sl
 801922a:	b2bf      	uxth	r7, r7
 801922c:	f107 0a01 	add.w	sl, r7, #1
 8019230:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019234:	123f      	asrs	r7, r7, #8
 8019236:	f806 7c04 	strb.w	r7, [r6, #-4]
 801923a:	e7b5      	b.n	80191a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801923c:	2700      	movs	r7, #0
 801923e:	1bde      	subs	r6, r3, r7
 8019240:	2e00      	cmp	r6, #0
 8019242:	dc42      	bgt.n	80192ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8019244:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019248:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801924c:	441c      	add	r4, r3
 801924e:	9b01      	ldr	r3, [sp, #4]
 8019250:	2b00      	cmp	r3, #0
 8019252:	f340 8092 	ble.w	801937a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801925a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801925c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019260:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019264:	eef0 6a62 	vmov.f32	s13, s5
 8019268:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801926c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019270:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019274:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019278:	eef0 6a43 	vmov.f32	s13, s6
 801927c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019280:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8019284:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019288:	ee61 7a27 	vmul.f32	s15, s2, s15
 801928c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019290:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019294:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019298:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801929c:	ee12 2a90 	vmov	r2, s5
 80192a0:	eef0 2a47 	vmov.f32	s5, s14
 80192a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80192a8:	ee13 2a10 	vmov	r2, s6
 80192ac:	9311      	str	r3, [sp, #68]	; 0x44
 80192ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192b0:	eeb0 3a67 	vmov.f32	s6, s15
 80192b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80192b8:	9312      	str	r3, [sp, #72]	; 0x48
 80192ba:	9b01      	ldr	r3, [sp, #4]
 80192bc:	9a03      	ldr	r2, [sp, #12]
 80192be:	3b01      	subs	r3, #1
 80192c0:	9301      	str	r3, [sp, #4]
 80192c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192c4:	bf08      	it	eq
 80192c6:	4613      	moveq	r3, r2
 80192c8:	e73a      	b.n	8019140 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80192ca:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80192ce:	d44e      	bmi.n	801936e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80192d0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80192d4:	4556      	cmp	r6, sl
 80192d6:	dd4a      	ble.n	801936e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80192d8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80192dc:	d447      	bmi.n	801936e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80192de:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80192e2:	4559      	cmp	r1, fp
 80192e4:	dd43      	ble.n	801936e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80192e6:	fa0f f986 	sxth.w	r9, r6
 80192ea:	9902      	ldr	r1, [sp, #8]
 80192ec:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80192f0:	fb0b 1909 	mla	r9, fp, r9, r1
 80192f4:	f814 b006 	ldrb.w	fp, [r4, r6]
 80192f8:	f819 900a 	ldrb.w	r9, [r9, sl]
 80192fc:	fb1b fb05 	smulbb	fp, fp, r5
 8019300:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019304:	eb0e 0a09 	add.w	sl, lr, r9
 8019308:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801930c:	fb09 b908 	mla	r9, r9, r8, fp
 8019310:	fa1f f989 	uxth.w	r9, r9
 8019314:	f109 0b01 	add.w	fp, r9, #1
 8019318:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801931c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019320:	f804 9006 	strb.w	r9, [r4, r6]
 8019324:	4426      	add	r6, r4
 8019326:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801932a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801932e:	fb1b fb05 	smulbb	fp, fp, r5
 8019332:	fb09 b908 	mla	r9, r9, r8, fp
 8019336:	fa1f f989 	uxth.w	r9, r9
 801933a:	f109 0b01 	add.w	fp, r9, #1
 801933e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019342:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019346:	f886 9001 	strb.w	r9, [r6, #1]
 801934a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801934e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019352:	fb1a fa05 	smulbb	sl, sl, r5
 8019356:	fb09 a908 	mla	r9, r9, r8, sl
 801935a:	fa1f f989 	uxth.w	r9, r9
 801935e:	f109 0a01 	add.w	sl, r9, #1
 8019362:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019366:	ea4f 2929 	mov.w	r9, r9, asr #8
 801936a:	f886 9002 	strb.w	r9, [r6, #2]
 801936e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019370:	3701      	adds	r7, #1
 8019372:	4408      	add	r0, r1
 8019374:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019376:	440a      	add	r2, r1
 8019378:	e761      	b.n	801923e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801937a:	b005      	add	sp, #20
 801937c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019380 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019384:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019386:	4693      	mov	fp, r2
 8019388:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801938a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801938e:	6868      	ldr	r0, [r5, #4]
 8019390:	6877      	ldr	r7, [r6, #4]
 8019392:	9100      	str	r1, [sp, #0]
 8019394:	3704      	adds	r7, #4
 8019396:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801939a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801939e:	fb00 2404 	mla	r4, r0, r4, r2
 80193a2:	682a      	ldr	r2, [r5, #0]
 80193a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80193a8:	4414      	add	r4, r2
 80193aa:	6832      	ldr	r2, [r6, #0]
 80193ac:	9201      	str	r2, [sp, #4]
 80193ae:	9a00      	ldr	r2, [sp, #0]
 80193b0:	2a00      	cmp	r2, #0
 80193b2:	dc03      	bgt.n	80193bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80193b4:	f1bb 0f00 	cmp.w	fp, #0
 80193b8:	f340 80bc 	ble.w	8019534 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80193bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80193be:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80193c2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80193c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80193c8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80193cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	dd0c      	ble.n	80193ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80193d4:	1405      	asrs	r5, r0, #16
 80193d6:	d405      	bmi.n	80193e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80193d8:	4555      	cmp	r5, sl
 80193da:	da03      	bge.n	80193e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80193dc:	1415      	asrs	r5, r2, #16
 80193de:	d401      	bmi.n	80193e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80193e0:	454d      	cmp	r5, r9
 80193e2:	db05      	blt.n	80193f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80193e4:	4440      	add	r0, r8
 80193e6:	4472      	add	r2, lr
 80193e8:	3b01      	subs	r3, #1
 80193ea:	3403      	adds	r4, #3
 80193ec:	e7f0      	b.n	80193d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80193ee:	d03f      	beq.n	8019470 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80193f0:	1e5d      	subs	r5, r3, #1
 80193f2:	fb08 0c05 	mla	ip, r8, r5, r0
 80193f6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80193fa:	d42e      	bmi.n	801945a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80193fc:	45d4      	cmp	ip, sl
 80193fe:	da2c      	bge.n	801945a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019400:	fb0e 2505 	mla	r5, lr, r5, r2
 8019404:	142d      	asrs	r5, r5, #16
 8019406:	d428      	bmi.n	801945a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019408:	454d      	cmp	r5, r9
 801940a:	da26      	bge.n	801945a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801940c:	1ce5      	adds	r5, r4, #3
 801940e:	469c      	mov	ip, r3
 8019410:	f1bc 0f00 	cmp.w	ip, #0
 8019414:	f105 0503 	add.w	r5, r5, #3
 8019418:	dd25      	ble.n	8019466 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801941a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801941e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019422:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019426:	4472      	add	r2, lr
 8019428:	468a      	mov	sl, r1
 801942a:	9901      	ldr	r1, [sp, #4]
 801942c:	fb0a 1909 	mla	r9, sl, r9, r1
 8019430:	1401      	asrs	r1, r0, #16
 8019432:	4440      	add	r0, r8
 8019434:	f819 9001 	ldrb.w	r9, [r9, r1]
 8019438:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801943c:	eb07 0a09 	add.w	sl, r7, r9
 8019440:	f817 9009 	ldrb.w	r9, [r7, r9]
 8019444:	f805 9c06 	strb.w	r9, [r5, #-6]
 8019448:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801944c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8019450:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019454:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019458:	e7da      	b.n	8019410 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801945a:	2500      	movs	r5, #0
 801945c:	eba3 0c05 	sub.w	ip, r3, r5
 8019460:	f1bc 0f00 	cmp.w	ip, #0
 8019464:	dc3b      	bgt.n	80194de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8019466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801946a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801946e:	441c      	add	r4, r3
 8019470:	9b00      	ldr	r3, [sp, #0]
 8019472:	2b00      	cmp	r3, #0
 8019474:	dd5e      	ble.n	8019534 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019476:	ee30 0a04 	vadd.f32	s0, s0, s8
 801947a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801947c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019480:	eeb0 6a62 	vmov.f32	s12, s5
 8019484:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019488:	ee31 1a05 	vadd.f32	s2, s2, s10
 801948c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019490:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019494:	eeb0 6a43 	vmov.f32	s12, s6
 8019498:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801949c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80194a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80194a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80194a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80194ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80194b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80194b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80194b8:	ee12 2a90 	vmov	r2, s5
 80194bc:	eef0 2a47 	vmov.f32	s5, s14
 80194c0:	fb92 f8f3 	sdiv	r8, r2, r3
 80194c4:	ee13 2a10 	vmov	r2, s6
 80194c8:	eeb0 3a67 	vmov.f32	s6, s15
 80194cc:	fb92 fef3 	sdiv	lr, r2, r3
 80194d0:	9b00      	ldr	r3, [sp, #0]
 80194d2:	3b01      	subs	r3, #1
 80194d4:	9300      	str	r3, [sp, #0]
 80194d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194d8:	bf08      	it	eq
 80194da:	465b      	moveq	r3, fp
 80194dc:	e767      	b.n	80193ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80194de:	ea5f 4920 	movs.w	r9, r0, asr #16
 80194e2:	d423      	bmi.n	801952c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80194e4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80194e8:	45cc      	cmp	ip, r9
 80194ea:	dd1f      	ble.n	801952c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80194ec:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80194f0:	d41c      	bmi.n	801952c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80194f2:	68f1      	ldr	r1, [r6, #12]
 80194f4:	4551      	cmp	r1, sl
 80194f6:	dd19      	ble.n	801952c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80194f8:	fa0f fc8c 	sxth.w	ip, ip
 80194fc:	9901      	ldr	r1, [sp, #4]
 80194fe:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8019502:	f81c c009 	ldrb.w	ip, [ip, r9]
 8019506:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801950a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801950e:	eb07 090c 	add.w	r9, r7, ip
 8019512:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8019516:	f804 a00c 	strb.w	sl, [r4, ip]
 801951a:	44a4      	add	ip, r4
 801951c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8019520:	f88c a001 	strb.w	sl, [ip, #1]
 8019524:	f899 9002 	ldrb.w	r9, [r9, #2]
 8019528:	f88c 9002 	strb.w	r9, [ip, #2]
 801952c:	4440      	add	r0, r8
 801952e:	4472      	add	r2, lr
 8019530:	3501      	adds	r5, #1
 8019532:	e793      	b.n	801945c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8019534:	b003      	add	sp, #12
 8019536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801953a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801953a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801953e:	b085      	sub	sp, #20
 8019540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019544:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019546:	9202      	str	r2, [sp, #8]
 8019548:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801954c:	6860      	ldr	r0, [r4, #4]
 801954e:	9203      	str	r2, [sp, #12]
 8019550:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019554:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8019558:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801955c:	fb00 2505 	mla	r5, r0, r5, r2
 8019560:	6822      	ldr	r2, [r4, #0]
 8019562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019566:	4415      	add	r5, r2
 8019568:	f8dc 2000 	ldr.w	r2, [ip]
 801956c:	9200      	str	r2, [sp, #0]
 801956e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019572:	3204      	adds	r2, #4
 8019574:	9201      	str	r2, [sp, #4]
 8019576:	2900      	cmp	r1, #0
 8019578:	dc03      	bgt.n	8019582 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801957a:	9a02      	ldr	r2, [sp, #8]
 801957c:	2a00      	cmp	r2, #0
 801957e:	f340 8127 	ble.w	80197d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8019582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019584:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019588:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801958c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801958e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019592:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019596:	2b00      	cmp	r3, #0
 8019598:	dd0d      	ble.n	80195b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801959a:	1422      	asrs	r2, r4, #16
 801959c:	d405      	bmi.n	80195aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801959e:	4542      	cmp	r2, r8
 80195a0:	da03      	bge.n	80195aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80195a2:	1402      	asrs	r2, r0, #16
 80195a4:	d401      	bmi.n	80195aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80195a6:	42ba      	cmp	r2, r7
 80195a8:	db06      	blt.n	80195b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80195aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195ac:	4474      	add	r4, lr
 80195ae:	3b01      	subs	r3, #1
 80195b0:	3503      	adds	r5, #3
 80195b2:	4410      	add	r0, r2
 80195b4:	e7ef      	b.n	8019596 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80195b6:	d075      	beq.n	80196a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80195b8:	1e5a      	subs	r2, r3, #1
 80195ba:	fb0e 4602 	mla	r6, lr, r2, r4
 80195be:	1436      	asrs	r6, r6, #16
 80195c0:	d465      	bmi.n	801968e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80195c2:	4546      	cmp	r6, r8
 80195c4:	da63      	bge.n	801968e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80195c6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80195c8:	fb06 0202 	mla	r2, r6, r2, r0
 80195cc:	1412      	asrs	r2, r2, #16
 80195ce:	d45e      	bmi.n	801968e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80195d0:	42ba      	cmp	r2, r7
 80195d2:	da5c      	bge.n	801968e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80195d4:	1cef      	adds	r7, r5, #3
 80195d6:	4699      	mov	r9, r3
 80195d8:	f1b9 0f00 	cmp.w	r9, #0
 80195dc:	dd5d      	ble.n	801969a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80195de:	1402      	asrs	r2, r0, #16
 80195e0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80195e4:	1426      	asrs	r6, r4, #16
 80195e6:	4692      	mov	sl, r2
 80195e8:	9a00      	ldr	r2, [sp, #0]
 80195ea:	fb08 220a 	mla	r2, r8, sl, r2
 80195ee:	5d92      	ldrb	r2, [r2, r6]
 80195f0:	9e01      	ldr	r6, [sp, #4]
 80195f2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80195f6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80195fa:	d041      	beq.n	8019680 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80195fc:	9a03      	ldr	r2, [sp, #12]
 80195fe:	fa5f fb86 	uxtb.w	fp, r6
 8019602:	fb02 f808 	mul.w	r8, r2, r8
 8019606:	f108 0201 	add.w	r2, r8, #1
 801960a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801960e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8019612:	1212      	asrs	r2, r2, #8
 8019614:	fa1f fa82 	uxth.w	sl, r2
 8019618:	43d2      	mvns	r2, r2
 801961a:	fb1b fb0a 	smulbb	fp, fp, sl
 801961e:	b2d2      	uxtb	r2, r2
 8019620:	fb08 b802 	mla	r8, r8, r2, fp
 8019624:	fa1f f888 	uxth.w	r8, r8
 8019628:	f108 0b01 	add.w	fp, r8, #1
 801962c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019630:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019634:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019638:	fb1b fb0a 	smulbb	fp, fp, sl
 801963c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019640:	fb16 fa0a 	smulbb	sl, r6, sl
 8019644:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019648:	f807 8c03 	strb.w	r8, [r7, #-3]
 801964c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8019650:	fb06 aa02 	mla	sl, r6, r2, sl
 8019654:	fb08 b802 	mla	r8, r8, r2, fp
 8019658:	fa1f fa8a 	uxth.w	sl, sl
 801965c:	fa1f f888 	uxth.w	r8, r8
 8019660:	f10a 0601 	add.w	r6, sl, #1
 8019664:	f108 0b01 	add.w	fp, r8, #1
 8019668:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801966c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019670:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019674:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019678:	f807 ac01 	strb.w	sl, [r7, #-1]
 801967c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8019680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019682:	4474      	add	r4, lr
 8019684:	3703      	adds	r7, #3
 8019686:	f109 39ff 	add.w	r9, r9, #4294967295
 801968a:	4410      	add	r0, r2
 801968c:	e7a4      	b.n	80195d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801968e:	f04f 0800 	mov.w	r8, #0
 8019692:	eba3 0208 	sub.w	r2, r3, r8
 8019696:	2a00      	cmp	r2, #0
 8019698:	dc3b      	bgt.n	8019712 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801969a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801969e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80196a2:	441d      	add	r5, r3
 80196a4:	2900      	cmp	r1, #0
 80196a6:	f340 8093 	ble.w	80197d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80196aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80196b4:	3901      	subs	r1, #1
 80196b6:	eeb0 6a62 	vmov.f32	s12, s5
 80196ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80196be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80196c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80196c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80196ca:	eeb0 6a43 	vmov.f32	s12, s6
 80196ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80196d2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80196d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80196da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80196de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80196e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80196e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80196ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80196ee:	ee12 2a90 	vmov	r2, s5
 80196f2:	eef0 2a47 	vmov.f32	s5, s14
 80196f6:	fb92 fef3 	sdiv	lr, r2, r3
 80196fa:	ee13 2a10 	vmov	r2, s6
 80196fe:	eeb0 3a67 	vmov.f32	s6, s15
 8019702:	fb92 f3f3 	sdiv	r3, r2, r3
 8019706:	9a02      	ldr	r2, [sp, #8]
 8019708:	9312      	str	r3, [sp, #72]	; 0x48
 801970a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801970c:	bf08      	it	eq
 801970e:	4613      	moveq	r3, r2
 8019710:	e731      	b.n	8019576 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019712:	1427      	asrs	r7, r4, #16
 8019714:	d456      	bmi.n	80197c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019716:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801971a:	42be      	cmp	r6, r7
 801971c:	dd52      	ble.n	80197c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801971e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019722:	d44f      	bmi.n	80197c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019724:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019728:	454a      	cmp	r2, r9
 801972a:	dd4b      	ble.n	80197c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801972c:	9a00      	ldr	r2, [sp, #0]
 801972e:	b236      	sxth	r6, r6
 8019730:	fb09 2606 	mla	r6, r9, r6, r2
 8019734:	5df2      	ldrb	r2, [r6, r7]
 8019736:	9e01      	ldr	r6, [sp, #4]
 8019738:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801973c:	0e3a      	lsrs	r2, r7, #24
 801973e:	d041      	beq.n	80197c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019740:	9e03      	ldr	r6, [sp, #12]
 8019742:	fa5f fb87 	uxtb.w	fp, r7
 8019746:	4372      	muls	r2, r6
 8019748:	1c56      	adds	r6, r2, #1
 801974a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801974e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8019752:	1212      	asrs	r2, r2, #8
 8019754:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019758:	fa1f fa82 	uxth.w	sl, r2
 801975c:	43d2      	mvns	r2, r2
 801975e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019762:	b2d2      	uxtb	r2, r2
 8019764:	fb09 b902 	mla	r9, r9, r2, fp
 8019768:	fa1f f989 	uxth.w	r9, r9
 801976c:	f109 0b01 	add.w	fp, r9, #1
 8019770:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019774:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019778:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801977c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019780:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019784:	fb17 fa0a 	smulbb	sl, r7, sl
 8019788:	f805 9006 	strb.w	r9, [r5, r6]
 801978c:	442e      	add	r6, r5
 801978e:	78b7      	ldrb	r7, [r6, #2]
 8019790:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019794:	fb07 aa02 	mla	sl, r7, r2, sl
 8019798:	fb09 b902 	mla	r9, r9, r2, fp
 801979c:	fa1f fa8a 	uxth.w	sl, sl
 80197a0:	fa1f f989 	uxth.w	r9, r9
 80197a4:	f10a 0701 	add.w	r7, sl, #1
 80197a8:	f109 0b01 	add.w	fp, r9, #1
 80197ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80197b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80197b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80197b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80197bc:	f886 a002 	strb.w	sl, [r6, #2]
 80197c0:	f886 9001 	strb.w	r9, [r6, #1]
 80197c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80197c6:	4474      	add	r4, lr
 80197c8:	f108 0801 	add.w	r8, r8, #1
 80197cc:	4410      	add	r0, r2
 80197ce:	e760      	b.n	8019692 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80197d0:	b005      	add	sp, #20
 80197d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080197d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80197d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197da:	b085      	sub	sp, #20
 80197dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80197e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80197e2:	9203      	str	r2, [sp, #12]
 80197e4:	6868      	ldr	r0, [r5, #4]
 80197e6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80197ea:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80197ee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80197f2:	fb00 2404 	mla	r4, r0, r4, r2
 80197f6:	682a      	ldr	r2, [r5, #0]
 80197f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80197fc:	4414      	add	r4, r2
 80197fe:	f8dc 2000 	ldr.w	r2, [ip]
 8019802:	9201      	str	r2, [sp, #4]
 8019804:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019808:	3204      	adds	r2, #4
 801980a:	9202      	str	r2, [sp, #8]
 801980c:	2900      	cmp	r1, #0
 801980e:	dc03      	bgt.n	8019818 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019810:	9a03      	ldr	r2, [sp, #12]
 8019812:	2a00      	cmp	r2, #0
 8019814:	f340 8137 	ble.w	8019a86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801981a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801981e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019822:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019824:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019828:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801982c:	2b00      	cmp	r3, #0
 801982e:	dd0d      	ble.n	801984c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019830:	1405      	asrs	r5, r0, #16
 8019832:	d405      	bmi.n	8019840 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019834:	4545      	cmp	r5, r8
 8019836:	da03      	bge.n	8019840 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019838:	1415      	asrs	r5, r2, #16
 801983a:	d401      	bmi.n	8019840 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801983c:	42bd      	cmp	r5, r7
 801983e:	db06      	blt.n	801984e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019840:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019842:	4470      	add	r0, lr
 8019844:	3b01      	subs	r3, #1
 8019846:	3403      	adds	r4, #3
 8019848:	442a      	add	r2, r5
 801984a:	e7ef      	b.n	801982c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801984c:	d070      	beq.n	8019930 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801984e:	1e5d      	subs	r5, r3, #1
 8019850:	fb0e 0605 	mla	r6, lr, r5, r0
 8019854:	1436      	asrs	r6, r6, #16
 8019856:	d462      	bmi.n	801991e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019858:	4546      	cmp	r6, r8
 801985a:	da60      	bge.n	801991e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801985c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801985e:	fb06 2505 	mla	r5, r6, r5, r2
 8019862:	142d      	asrs	r5, r5, #16
 8019864:	d45b      	bmi.n	801991e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019866:	42bd      	cmp	r5, r7
 8019868:	da59      	bge.n	801991e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801986a:	1ce5      	adds	r5, r4, #3
 801986c:	469a      	mov	sl, r3
 801986e:	f1ba 0f00 	cmp.w	sl, #0
 8019872:	dd58      	ble.n	8019926 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8019874:	1416      	asrs	r6, r2, #16
 8019876:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801987a:	1407      	asrs	r7, r0, #16
 801987c:	46b1      	mov	r9, r6
 801987e:	9e01      	ldr	r6, [sp, #4]
 8019880:	fb08 6609 	mla	r6, r8, r9, r6
 8019884:	5df6      	ldrb	r6, [r6, r7]
 8019886:	9f02      	ldr	r7, [sp, #8]
 8019888:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801988c:	0e37      	lsrs	r7, r6, #24
 801988e:	2fff      	cmp	r7, #255	; 0xff
 8019890:	f000 80f0 	beq.w	8019a74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8019894:	fa5f f887 	uxtb.w	r8, r7
 8019898:	b3d7      	cbz	r7, 8019910 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801989a:	fa1f f788 	uxth.w	r7, r8
 801989e:	ea6f 0808 	mvn.w	r8, r8
 80198a2:	fa5f fb86 	uxtb.w	fp, r6
 80198a6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80198aa:	fa5f f888 	uxtb.w	r8, r8
 80198ae:	fb1b fb07 	smulbb	fp, fp, r7
 80198b2:	fb09 b908 	mla	r9, r9, r8, fp
 80198b6:	fa1f f989 	uxth.w	r9, r9
 80198ba:	f109 0b01 	add.w	fp, r9, #1
 80198be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80198c2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80198c6:	fb1b fb08 	smulbb	fp, fp, r8
 80198ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198ce:	f805 9c03 	strb.w	r9, [r5, #-3]
 80198d2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80198d6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80198da:	fb09 b907 	mla	r9, r9, r7, fp
 80198de:	fa1f f989 	uxth.w	r9, r9
 80198e2:	f109 0b01 	add.w	fp, r9, #1
 80198e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80198ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198ee:	f805 9c02 	strb.w	r9, [r5, #-2]
 80198f2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80198f6:	fb19 f808 	smulbb	r8, r9, r8
 80198fa:	fb06 8607 	mla	r6, r6, r7, r8
 80198fe:	b2b6      	uxth	r6, r6
 8019900:	f106 0801 	add.w	r8, r6, #1
 8019904:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8019908:	ea4f 2828 	mov.w	r8, r8, asr #8
 801990c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019910:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019912:	4470      	add	r0, lr
 8019914:	3503      	adds	r5, #3
 8019916:	f10a 3aff 	add.w	sl, sl, #4294967295
 801991a:	4432      	add	r2, r6
 801991c:	e7a7      	b.n	801986e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801991e:	2600      	movs	r6, #0
 8019920:	1b9d      	subs	r5, r3, r6
 8019922:	2d00      	cmp	r5, #0
 8019924:	dc3b      	bgt.n	801999e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019926:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801992a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801992e:	441c      	add	r4, r3
 8019930:	2900      	cmp	r1, #0
 8019932:	f340 80a8 	ble.w	8019a86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019936:	ee30 0a04 	vadd.f32	s0, s0, s8
 801993a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801993c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019940:	3901      	subs	r1, #1
 8019942:	eeb0 6a62 	vmov.f32	s12, s5
 8019946:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801994a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801994e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019952:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019956:	eeb0 6a43 	vmov.f32	s12, s6
 801995a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801995e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019962:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019966:	ee61 7a27 	vmul.f32	s15, s2, s15
 801996a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801996e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019972:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019976:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801997a:	ee12 2a90 	vmov	r2, s5
 801997e:	eef0 2a47 	vmov.f32	s5, s14
 8019982:	fb92 fef3 	sdiv	lr, r2, r3
 8019986:	ee13 2a10 	vmov	r2, s6
 801998a:	eeb0 3a67 	vmov.f32	s6, s15
 801998e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019992:	9a03      	ldr	r2, [sp, #12]
 8019994:	9312      	str	r3, [sp, #72]	; 0x48
 8019996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019998:	bf08      	it	eq
 801999a:	4613      	moveq	r3, r2
 801999c:	e736      	b.n	801980c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801999e:	ea5f 4820 	movs.w	r8, r0, asr #16
 80199a2:	d457      	bmi.n	8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80199a4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80199a8:	4547      	cmp	r7, r8
 80199aa:	dd53      	ble.n	8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80199ac:	ea5f 4922 	movs.w	r9, r2, asr #16
 80199b0:	d450      	bmi.n	8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80199b2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80199b6:	454d      	cmp	r5, r9
 80199b8:	dd4c      	ble.n	8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80199ba:	9d01      	ldr	r5, [sp, #4]
 80199bc:	b23f      	sxth	r7, r7
 80199be:	fb09 5707 	mla	r7, r9, r7, r5
 80199c2:	f817 5008 	ldrb.w	r5, [r7, r8]
 80199c6:	9f02      	ldr	r7, [sp, #8]
 80199c8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80199cc:	0e2f      	lsrs	r7, r5, #24
 80199ce:	2fff      	cmp	r7, #255	; 0xff
 80199d0:	d045      	beq.n	8019a5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80199d2:	fa5f f987 	uxtb.w	r9, r7
 80199d6:	b3ef      	cbz	r7, 8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80199d8:	fa1f f889 	uxth.w	r8, r9
 80199dc:	ea6f 0909 	mvn.w	r9, r9
 80199e0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80199e4:	fa5f fb85 	uxtb.w	fp, r5
 80199e8:	f814 a007 	ldrb.w	sl, [r4, r7]
 80199ec:	fa5f f989 	uxtb.w	r9, r9
 80199f0:	fb1b fb08 	smulbb	fp, fp, r8
 80199f4:	fb0a ba09 	mla	sl, sl, r9, fp
 80199f8:	fa1f fa8a 	uxth.w	sl, sl
 80199fc:	f10a 0b01 	add.w	fp, sl, #1
 8019a00:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019a04:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019a08:	f804 a007 	strb.w	sl, [r4, r7]
 8019a0c:	4427      	add	r7, r4
 8019a0e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019a12:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8019a16:	f897 b001 	ldrb.w	fp, [r7, #1]
 8019a1a:	fb1b fb09 	smulbb	fp, fp, r9
 8019a1e:	fb0a ba08 	mla	sl, sl, r8, fp
 8019a22:	fa1f fa8a 	uxth.w	sl, sl
 8019a26:	f10a 0b01 	add.w	fp, sl, #1
 8019a2a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019a2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019a32:	f887 a001 	strb.w	sl, [r7, #1]
 8019a36:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019a3a:	fb1a f909 	smulbb	r9, sl, r9
 8019a3e:	fb05 9508 	mla	r5, r5, r8, r9
 8019a42:	b2ad      	uxth	r5, r5
 8019a44:	f105 0901 	add.w	r9, r5, #1
 8019a48:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8019a4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019a50:	f887 9002 	strb.w	r9, [r7, #2]
 8019a54:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019a56:	4470      	add	r0, lr
 8019a58:	3601      	adds	r6, #1
 8019a5a:	442a      	add	r2, r5
 8019a5c:	e760      	b.n	8019920 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019a5e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019a62:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8019a66:	55e5      	strb	r5, [r4, r7]
 8019a68:	4427      	add	r7, r4
 8019a6a:	0c2d      	lsrs	r5, r5, #16
 8019a6c:	f887 8001 	strb.w	r8, [r7, #1]
 8019a70:	70bd      	strb	r5, [r7, #2]
 8019a72:	e7ef      	b.n	8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019a74:	0a37      	lsrs	r7, r6, #8
 8019a76:	f805 6c03 	strb.w	r6, [r5, #-3]
 8019a7a:	0c36      	lsrs	r6, r6, #16
 8019a7c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8019a80:	f805 6c01 	strb.w	r6, [r5, #-1]
 8019a84:	e744      	b.n	8019910 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019a86:	b005      	add	sp, #20
 8019a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a90:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019a92:	9201      	str	r2, [sp, #4]
 8019a94:	6870      	ldr	r0, [r6, #4]
 8019a96:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8019a9a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8019a9e:	fa1f fe85 	uxth.w	lr, r5
 8019aa2:	43ed      	mvns	r5, r5
 8019aa4:	f8dc 8000 	ldr.w	r8, [ip]
 8019aa8:	b2ed      	uxtb	r5, r5
 8019aaa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019aae:	fb00 2404 	mla	r4, r0, r4, r2
 8019ab2:	6832      	ldr	r2, [r6, #0]
 8019ab4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019ab8:	4414      	add	r4, r2
 8019aba:	2900      	cmp	r1, #0
 8019abc:	dc03      	bgt.n	8019ac6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019abe:	9a01      	ldr	r2, [sp, #4]
 8019ac0:	2a00      	cmp	r2, #0
 8019ac2:	f340 810d 	ble.w	8019ce0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8019ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ac8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019acc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ad2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019ad6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	dd0e      	ble.n	8019afc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019ade:	1406      	asrs	r6, r0, #16
 8019ae0:	d405      	bmi.n	8019aee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019ae2:	4556      	cmp	r6, sl
 8019ae4:	da03      	bge.n	8019aee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019ae6:	1416      	asrs	r6, r2, #16
 8019ae8:	d401      	bmi.n	8019aee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019aea:	454e      	cmp	r6, r9
 8019aec:	db07      	blt.n	8019afe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019aee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019af0:	3b01      	subs	r3, #1
 8019af2:	3403      	adds	r4, #3
 8019af4:	4430      	add	r0, r6
 8019af6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019af8:	4432      	add	r2, r6
 8019afa:	e7ee      	b.n	8019ada <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8019afc:	d060      	beq.n	8019bc0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8019afe:	1e5e      	subs	r6, r3, #1
 8019b00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019b02:	fb07 0706 	mla	r7, r7, r6, r0
 8019b06:	143f      	asrs	r7, r7, #16
 8019b08:	d451      	bmi.n	8019bae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019b0a:	4557      	cmp	r7, sl
 8019b0c:	da4f      	bge.n	8019bae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019b0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019b10:	fb07 2606 	mla	r6, r7, r6, r2
 8019b14:	1436      	asrs	r6, r6, #16
 8019b16:	d44a      	bmi.n	8019bae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019b18:	454e      	cmp	r6, r9
 8019b1a:	da48      	bge.n	8019bae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019b1c:	1ce6      	adds	r6, r4, #3
 8019b1e:	4699      	mov	r9, r3
 8019b20:	f1b9 0f00 	cmp.w	r9, #0
 8019b24:	f106 0603 	add.w	r6, r6, #3
 8019b28:	dd45      	ble.n	8019bb6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8019b2a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019b2e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019b32:	1417      	asrs	r7, r2, #16
 8019b34:	f109 39ff 	add.w	r9, r9, #4294967295
 8019b38:	fb0b a707 	mla	r7, fp, r7, sl
 8019b3c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019b40:	fb1b fb05 	smulbb	fp, fp, r5
 8019b44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019b48:	eb08 0a07 	add.w	sl, r8, r7
 8019b4c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8019b50:	fb07 b70e 	mla	r7, r7, lr, fp
 8019b54:	b2bf      	uxth	r7, r7
 8019b56:	f107 0b01 	add.w	fp, r7, #1
 8019b5a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019b5e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019b62:	fb1b fb05 	smulbb	fp, fp, r5
 8019b66:	123f      	asrs	r7, r7, #8
 8019b68:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019b6c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019b70:	fb07 b70e 	mla	r7, r7, lr, fp
 8019b74:	b2bf      	uxth	r7, r7
 8019b76:	f107 0b01 	add.w	fp, r7, #1
 8019b7a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019b7e:	123f      	asrs	r7, r7, #8
 8019b80:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019b84:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019b88:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019b8c:	fb1a fa05 	smulbb	sl, sl, r5
 8019b90:	fb07 a70e 	mla	r7, r7, lr, sl
 8019b94:	b2bf      	uxth	r7, r7
 8019b96:	f107 0a01 	add.w	sl, r7, #1
 8019b9a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019b9e:	123f      	asrs	r7, r7, #8
 8019ba0:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019ba4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019ba6:	4438      	add	r0, r7
 8019ba8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019baa:	443a      	add	r2, r7
 8019bac:	e7b8      	b.n	8019b20 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019bae:	2700      	movs	r7, #0
 8019bb0:	1bde      	subs	r6, r3, r7
 8019bb2:	2e00      	cmp	r6, #0
 8019bb4:	dc3f      	bgt.n	8019c36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8019bb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019bbe:	441c      	add	r4, r3
 8019bc0:	2900      	cmp	r1, #0
 8019bc2:	f340 808d 	ble.w	8019ce0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8019bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019bd0:	3901      	subs	r1, #1
 8019bd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019bd6:	eef0 6a62 	vmov.f32	s13, s5
 8019bda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019bde:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019be2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019be6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8019bea:	eef0 6a43 	vmov.f32	s13, s6
 8019bee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019bf2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8019bf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019bfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019bfe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019c02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019c06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019c0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019c0e:	ee12 2a90 	vmov	r2, s5
 8019c12:	eef0 2a47 	vmov.f32	s5, s14
 8019c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c1a:	ee13 2a10 	vmov	r2, s6
 8019c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c22:	eeb0 3a67 	vmov.f32	s6, s15
 8019c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c2a:	9a01      	ldr	r2, [sp, #4]
 8019c2c:	9310      	str	r3, [sp, #64]	; 0x40
 8019c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c30:	bf08      	it	eq
 8019c32:	4613      	moveq	r3, r2
 8019c34:	e741      	b.n	8019aba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019c36:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019c3a:	d44b      	bmi.n	8019cd4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019c3c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8019c40:	45cb      	cmp	fp, r9
 8019c42:	dd47      	ble.n	8019cd4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019c44:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019c48:	d444      	bmi.n	8019cd4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019c4a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8019c4e:	4556      	cmp	r6, sl
 8019c50:	dd40      	ble.n	8019cd4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019c52:	fa0f f68b 	sxth.w	r6, fp
 8019c56:	fb0a 9906 	mla	r9, sl, r6, r9
 8019c5a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019c5e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019c62:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019c66:	fb1b fb05 	smulbb	fp, fp, r5
 8019c6a:	eb08 0a09 	add.w	sl, r8, r9
 8019c6e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8019c72:	fb09 b90e 	mla	r9, r9, lr, fp
 8019c76:	fa1f f989 	uxth.w	r9, r9
 8019c7a:	f109 0b01 	add.w	fp, r9, #1
 8019c7e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c82:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c86:	f804 9006 	strb.w	r9, [r4, r6]
 8019c8a:	4426      	add	r6, r4
 8019c8c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019c90:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019c94:	fb1b fb05 	smulbb	fp, fp, r5
 8019c98:	fb09 b90e 	mla	r9, r9, lr, fp
 8019c9c:	fa1f f989 	uxth.w	r9, r9
 8019ca0:	f109 0b01 	add.w	fp, r9, #1
 8019ca4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019ca8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019cac:	f886 9001 	strb.w	r9, [r6, #1]
 8019cb0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019cb4:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019cb8:	fb1a fa05 	smulbb	sl, sl, r5
 8019cbc:	fb09 a90e 	mla	r9, r9, lr, sl
 8019cc0:	fa1f f989 	uxth.w	r9, r9
 8019cc4:	f109 0a01 	add.w	sl, r9, #1
 8019cc8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019ccc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019cd0:	f886 9002 	strb.w	r9, [r6, #2]
 8019cd4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019cd6:	3701      	adds	r7, #1
 8019cd8:	4430      	add	r0, r6
 8019cda:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019cdc:	4432      	add	r2, r6
 8019cde:	e767      	b.n	8019bb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8019ce0:	b003      	add	sp, #12
 8019ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ce6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ce6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019cf0:	9201      	str	r2, [sp, #4]
 8019cf2:	6868      	ldr	r0, [r5, #4]
 8019cf4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8019cf6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019cfa:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8019cfe:	fb00 2404 	mla	r4, r0, r4, r2
 8019d02:	682a      	ldr	r2, [r5, #0]
 8019d04:	f8d7 8000 	ldr.w	r8, [r7]
 8019d08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019d0c:	4414      	add	r4, r2
 8019d0e:	2900      	cmp	r1, #0
 8019d10:	dc03      	bgt.n	8019d1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019d12:	9a01      	ldr	r2, [sp, #4]
 8019d14:	2a00      	cmp	r2, #0
 8019d16:	f340 80af 	ble.w	8019e78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019d1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d1c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8019d20:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019d24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d26:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8019d2a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	dd0c      	ble.n	8019d4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019d32:	1405      	asrs	r5, r0, #16
 8019d34:	d405      	bmi.n	8019d42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019d36:	4555      	cmp	r5, sl
 8019d38:	da03      	bge.n	8019d42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019d3a:	1415      	asrs	r5, r2, #16
 8019d3c:	d401      	bmi.n	8019d42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019d3e:	454d      	cmp	r5, r9
 8019d40:	db05      	blt.n	8019d4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019d42:	4470      	add	r0, lr
 8019d44:	4462      	add	r2, ip
 8019d46:	3b01      	subs	r3, #1
 8019d48:	3403      	adds	r4, #3
 8019d4a:	e7f0      	b.n	8019d2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019d4c:	d038      	beq.n	8019dc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019d4e:	1e5d      	subs	r5, r3, #1
 8019d50:	fb0e 0605 	mla	r6, lr, r5, r0
 8019d54:	1436      	asrs	r6, r6, #16
 8019d56:	d42a      	bmi.n	8019dae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019d58:	4556      	cmp	r6, sl
 8019d5a:	da28      	bge.n	8019dae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019d5c:	fb0c 2505 	mla	r5, ip, r5, r2
 8019d60:	142d      	asrs	r5, r5, #16
 8019d62:	d424      	bmi.n	8019dae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019d64:	454d      	cmp	r5, r9
 8019d66:	da22      	bge.n	8019dae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019d68:	1ce6      	adds	r6, r4, #3
 8019d6a:	4699      	mov	r9, r3
 8019d6c:	f1b9 0f00 	cmp.w	r9, #0
 8019d70:	f106 0603 	add.w	r6, r6, #3
 8019d74:	dd1f      	ble.n	8019db6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8019d76:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8019d7a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019d7e:	1415      	asrs	r5, r2, #16
 8019d80:	4470      	add	r0, lr
 8019d82:	4462      	add	r2, ip
 8019d84:	f109 39ff 	add.w	r9, r9, #4294967295
 8019d88:	fb0b a505 	mla	r5, fp, r5, sl
 8019d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d90:	eb08 0a05 	add.w	sl, r8, r5
 8019d94:	f818 5005 	ldrb.w	r5, [r8, r5]
 8019d98:	f806 5c06 	strb.w	r5, [r6, #-6]
 8019d9c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8019da0:	f806 5c05 	strb.w	r5, [r6, #-5]
 8019da4:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8019da8:	f806 5c04 	strb.w	r5, [r6, #-4]
 8019dac:	e7de      	b.n	8019d6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019dae:	2600      	movs	r6, #0
 8019db0:	1b9d      	subs	r5, r3, r6
 8019db2:	2d00      	cmp	r5, #0
 8019db4:	dc38      	bgt.n	8019e28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019db6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019dba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019dbe:	441c      	add	r4, r3
 8019dc0:	2900      	cmp	r1, #0
 8019dc2:	dd59      	ble.n	8019e78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019dc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019dca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019dce:	3901      	subs	r1, #1
 8019dd0:	eeb0 6a62 	vmov.f32	s12, s5
 8019dd4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019dd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ddc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019de0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019de4:	eeb0 6a43 	vmov.f32	s12, s6
 8019de8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019dec:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8019df0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019df4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019df8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019dfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e08:	ee12 2a90 	vmov	r2, s5
 8019e0c:	eef0 2a47 	vmov.f32	s5, s14
 8019e10:	fb92 fef3 	sdiv	lr, r2, r3
 8019e14:	ee13 2a10 	vmov	r2, s6
 8019e18:	eeb0 3a67 	vmov.f32	s6, s15
 8019e1c:	fb92 fcf3 	sdiv	ip, r2, r3
 8019e20:	9a01      	ldr	r2, [sp, #4]
 8019e22:	bf08      	it	eq
 8019e24:	4613      	moveq	r3, r2
 8019e26:	e772      	b.n	8019d0e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8019e28:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019e2c:	d420      	bmi.n	8019e70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019e2e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8019e32:	45cb      	cmp	fp, r9
 8019e34:	dd1c      	ble.n	8019e70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019e36:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019e3a:	d419      	bmi.n	8019e70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019e3c:	68fd      	ldr	r5, [r7, #12]
 8019e3e:	4555      	cmp	r5, sl
 8019e40:	dd16      	ble.n	8019e70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019e42:	fa0f f58b 	sxth.w	r5, fp
 8019e46:	fb0a 9505 	mla	r5, sl, r5, r9
 8019e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e4e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8019e52:	eb08 0b05 	add.w	fp, r8, r5
 8019e56:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8019e5a:	f804 9005 	strb.w	r9, [r4, r5]
 8019e5e:	4425      	add	r5, r4
 8019e60:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8019e64:	f885 9001 	strb.w	r9, [r5, #1]
 8019e68:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019e6c:	f885 9002 	strb.w	r9, [r5, #2]
 8019e70:	4470      	add	r0, lr
 8019e72:	4462      	add	r2, ip
 8019e74:	3601      	adds	r6, #1
 8019e76:	e79b      	b.n	8019db0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8019e78:	b003      	add	sp, #12
 8019e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e82:	b085      	sub	sp, #20
 8019e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019e8a:	9202      	str	r2, [sp, #8]
 8019e8c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019e90:	6860      	ldr	r0, [r4, #4]
 8019e92:	9203      	str	r2, [sp, #12]
 8019e94:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019e98:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8019e9c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8019ea0:	fb00 2505 	mla	r5, r0, r5, r2
 8019ea4:	6822      	ldr	r2, [r4, #0]
 8019ea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019eaa:	4415      	add	r5, r2
 8019eac:	f8dc 2000 	ldr.w	r2, [ip]
 8019eb0:	9201      	str	r2, [sp, #4]
 8019eb2:	2900      	cmp	r1, #0
 8019eb4:	dc03      	bgt.n	8019ebe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019eb6:	9a02      	ldr	r2, [sp, #8]
 8019eb8:	2a00      	cmp	r2, #0
 8019eba:	f340 8122 	ble.w	801a102 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ec0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019ec4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019eca:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019ece:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	dd0d      	ble.n	8019ef2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8019ed6:	1422      	asrs	r2, r4, #16
 8019ed8:	d405      	bmi.n	8019ee6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019eda:	4542      	cmp	r2, r8
 8019edc:	da03      	bge.n	8019ee6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019ede:	1402      	asrs	r2, r0, #16
 8019ee0:	d401      	bmi.n	8019ee6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019ee2:	42ba      	cmp	r2, r7
 8019ee4:	db06      	blt.n	8019ef4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019ee6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ee8:	4474      	add	r4, lr
 8019eea:	3b01      	subs	r3, #1
 8019eec:	3503      	adds	r5, #3
 8019eee:	4410      	add	r0, r2
 8019ef0:	e7ef      	b.n	8019ed2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019ef2:	d072      	beq.n	8019fda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019ef4:	1e5a      	subs	r2, r3, #1
 8019ef6:	fb0e 4602 	mla	r6, lr, r2, r4
 8019efa:	1436      	asrs	r6, r6, #16
 8019efc:	d462      	bmi.n	8019fc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019efe:	4546      	cmp	r6, r8
 8019f00:	da60      	bge.n	8019fc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019f02:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019f04:	fb06 0202 	mla	r2, r6, r2, r0
 8019f08:	1412      	asrs	r2, r2, #16
 8019f0a:	d45b      	bmi.n	8019fc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019f0c:	42ba      	cmp	r2, r7
 8019f0e:	da59      	bge.n	8019fc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019f10:	1cef      	adds	r7, r5, #3
 8019f12:	4699      	mov	r9, r3
 8019f14:	f1b9 0f00 	cmp.w	r9, #0
 8019f18:	dd5a      	ble.n	8019fd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019f1a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019f1e:	1426      	asrs	r6, r4, #16
 8019f20:	1402      	asrs	r2, r0, #16
 8019f22:	fb08 6202 	mla	r2, r8, r2, r6
 8019f26:	9e01      	ldr	r6, [sp, #4]
 8019f28:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8019f2c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8019f30:	d041      	beq.n	8019fb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019f32:	9a03      	ldr	r2, [sp, #12]
 8019f34:	fa5f fb86 	uxtb.w	fp, r6
 8019f38:	fb02 f808 	mul.w	r8, r2, r8
 8019f3c:	f108 0201 	add.w	r2, r8, #1
 8019f40:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8019f44:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8019f48:	1212      	asrs	r2, r2, #8
 8019f4a:	fa1f fa82 	uxth.w	sl, r2
 8019f4e:	43d2      	mvns	r2, r2
 8019f50:	fb1b fb0a 	smulbb	fp, fp, sl
 8019f54:	b2d2      	uxtb	r2, r2
 8019f56:	fb08 b802 	mla	r8, r8, r2, fp
 8019f5a:	fa1f f888 	uxth.w	r8, r8
 8019f5e:	f108 0b01 	add.w	fp, r8, #1
 8019f62:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019f66:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019f6a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019f6e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019f72:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019f76:	fb16 fa0a 	smulbb	sl, r6, sl
 8019f7a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019f7e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8019f82:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8019f86:	fb06 aa02 	mla	sl, r6, r2, sl
 8019f8a:	fb08 b802 	mla	r8, r8, r2, fp
 8019f8e:	fa1f fa8a 	uxth.w	sl, sl
 8019f92:	fa1f f888 	uxth.w	r8, r8
 8019f96:	f10a 0601 	add.w	r6, sl, #1
 8019f9a:	f108 0b01 	add.w	fp, r8, #1
 8019f9e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019fa2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019fa6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019faa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019fae:	f807 ac01 	strb.w	sl, [r7, #-1]
 8019fb2:	f807 8c02 	strb.w	r8, [r7, #-2]
 8019fb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019fb8:	4474      	add	r4, lr
 8019fba:	3703      	adds	r7, #3
 8019fbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8019fc0:	4410      	add	r0, r2
 8019fc2:	e7a7      	b.n	8019f14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019fc4:	f04f 0800 	mov.w	r8, #0
 8019fc8:	eba3 0208 	sub.w	r2, r3, r8
 8019fcc:	2a00      	cmp	r2, #0
 8019fce:	dc3b      	bgt.n	801a048 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019fd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019fd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019fd8:	441d      	add	r5, r3
 8019fda:	2900      	cmp	r1, #0
 8019fdc:	f340 8091 	ble.w	801a102 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019fe0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fe6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019fea:	3901      	subs	r1, #1
 8019fec:	eeb0 6a62 	vmov.f32	s12, s5
 8019ff0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019ff4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ff8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ffc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a000:	eeb0 6a43 	vmov.f32	s12, s6
 801a004:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a008:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a00c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a010:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a014:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a018:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a01c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a020:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a024:	ee12 2a90 	vmov	r2, s5
 801a028:	eef0 2a47 	vmov.f32	s5, s14
 801a02c:	fb92 fef3 	sdiv	lr, r2, r3
 801a030:	ee13 2a10 	vmov	r2, s6
 801a034:	eeb0 3a67 	vmov.f32	s6, s15
 801a038:	fb92 f3f3 	sdiv	r3, r2, r3
 801a03c:	9a02      	ldr	r2, [sp, #8]
 801a03e:	9312      	str	r3, [sp, #72]	; 0x48
 801a040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a042:	bf08      	it	eq
 801a044:	4613      	moveq	r3, r2
 801a046:	e734      	b.n	8019eb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a048:	1427      	asrs	r7, r4, #16
 801a04a:	d454      	bmi.n	801a0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a04c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a050:	42be      	cmp	r6, r7
 801a052:	dd50      	ble.n	801a0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a054:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a058:	d44d      	bmi.n	801a0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a05a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a05e:	454a      	cmp	r2, r9
 801a060:	dd49      	ble.n	801a0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a062:	b236      	sxth	r6, r6
 801a064:	9a01      	ldr	r2, [sp, #4]
 801a066:	fb09 7606 	mla	r6, r9, r6, r7
 801a06a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801a06e:	0e3a      	lsrs	r2, r7, #24
 801a070:	d041      	beq.n	801a0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a072:	9e03      	ldr	r6, [sp, #12]
 801a074:	fa5f fb87 	uxtb.w	fp, r7
 801a078:	4372      	muls	r2, r6
 801a07a:	1c56      	adds	r6, r2, #1
 801a07c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a080:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801a084:	1212      	asrs	r2, r2, #8
 801a086:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a08a:	fa1f fa82 	uxth.w	sl, r2
 801a08e:	43d2      	mvns	r2, r2
 801a090:	fb1b fb0a 	smulbb	fp, fp, sl
 801a094:	b2d2      	uxtb	r2, r2
 801a096:	fb09 b902 	mla	r9, r9, r2, fp
 801a09a:	fa1f f989 	uxth.w	r9, r9
 801a09e:	f109 0b01 	add.w	fp, r9, #1
 801a0a2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a0a6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a0aa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a0ae:	fb1b fb0a 	smulbb	fp, fp, sl
 801a0b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a0b6:	fb17 fa0a 	smulbb	sl, r7, sl
 801a0ba:	f805 9006 	strb.w	r9, [r5, r6]
 801a0be:	442e      	add	r6, r5
 801a0c0:	78b7      	ldrb	r7, [r6, #2]
 801a0c2:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a0c6:	fb07 aa02 	mla	sl, r7, r2, sl
 801a0ca:	fb09 b902 	mla	r9, r9, r2, fp
 801a0ce:	fa1f fa8a 	uxth.w	sl, sl
 801a0d2:	fa1f f989 	uxth.w	r9, r9
 801a0d6:	f10a 0701 	add.w	r7, sl, #1
 801a0da:	f109 0b01 	add.w	fp, r9, #1
 801a0de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a0e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a0e6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a0ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a0ee:	f886 a002 	strb.w	sl, [r6, #2]
 801a0f2:	f886 9001 	strb.w	r9, [r6, #1]
 801a0f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0f8:	4474      	add	r4, lr
 801a0fa:	f108 0801 	add.w	r8, r8, #1
 801a0fe:	4410      	add	r0, r2
 801a100:	e762      	b.n	8019fc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a102:	b005      	add	sp, #20
 801a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a108 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a10c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a10e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a112:	9201      	str	r2, [sp, #4]
 801a114:	6860      	ldr	r0, [r4, #4]
 801a116:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801a11a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801a11e:	fb00 2505 	mla	r5, r0, r5, r2
 801a122:	6822      	ldr	r2, [r4, #0]
 801a124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a128:	4415      	add	r5, r2
 801a12a:	f8dc 2000 	ldr.w	r2, [ip]
 801a12e:	9200      	str	r2, [sp, #0]
 801a130:	2900      	cmp	r1, #0
 801a132:	dc03      	bgt.n	801a13c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a134:	9a01      	ldr	r2, [sp, #4]
 801a136:	2a00      	cmp	r2, #0
 801a138:	f340 812b 	ble.w	801a392 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a13c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a13e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a142:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a148:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a14c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a150:	2b00      	cmp	r3, #0
 801a152:	dd0e      	ble.n	801a172 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a154:	1422      	asrs	r2, r4, #16
 801a156:	d405      	bmi.n	801a164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a158:	4572      	cmp	r2, lr
 801a15a:	da03      	bge.n	801a164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a15c:	1402      	asrs	r2, r0, #16
 801a15e:	d401      	bmi.n	801a164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a160:	42ba      	cmp	r2, r7
 801a162:	db07      	blt.n	801a174 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a164:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a166:	3b01      	subs	r3, #1
 801a168:	3503      	adds	r5, #3
 801a16a:	4414      	add	r4, r2
 801a16c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a16e:	4410      	add	r0, r2
 801a170:	e7ee      	b.n	801a150 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a172:	d06f      	beq.n	801a254 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a174:	1e5a      	subs	r2, r3, #1
 801a176:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a178:	fb06 4602 	mla	r6, r6, r2, r4
 801a17c:	1436      	asrs	r6, r6, #16
 801a17e:	d45e      	bmi.n	801a23e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a180:	4576      	cmp	r6, lr
 801a182:	da5c      	bge.n	801a23e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a184:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a186:	fb06 0202 	mla	r2, r6, r2, r0
 801a18a:	1412      	asrs	r2, r2, #16
 801a18c:	d457      	bmi.n	801a23e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a18e:	42ba      	cmp	r2, r7
 801a190:	da55      	bge.n	801a23e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a192:	1cee      	adds	r6, r5, #3
 801a194:	469a      	mov	sl, r3
 801a196:	f1ba 0f00 	cmp.w	sl, #0
 801a19a:	dd56      	ble.n	801a24a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a19c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a1a0:	1427      	asrs	r7, r4, #16
 801a1a2:	1402      	asrs	r2, r0, #16
 801a1a4:	fb0e 7202 	mla	r2, lr, r2, r7
 801a1a8:	9f00      	ldr	r7, [sp, #0]
 801a1aa:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801a1ae:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801a1b2:	d03c      	beq.n	801a22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a1b4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a1b8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a1bc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a1c0:	fa5f f28e 	uxtb.w	r2, lr
 801a1c4:	b2ff      	uxtb	r7, r7
 801a1c6:	f000 80dd 	beq.w	801a384 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a1ca:	fa1f f882 	uxth.w	r8, r2
 801a1ce:	43d2      	mvns	r2, r2
 801a1d0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801a1d4:	fb17 f708 	smulbb	r7, r7, r8
 801a1d8:	b2d2      	uxtb	r2, r2
 801a1da:	fb19 f908 	smulbb	r9, r9, r8
 801a1de:	fb0e 7702 	mla	r7, lr, r2, r7
 801a1e2:	fb1b f808 	smulbb	r8, fp, r8
 801a1e6:	b2bf      	uxth	r7, r7
 801a1e8:	f107 0e01 	add.w	lr, r7, #1
 801a1ec:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a1f0:	123f      	asrs	r7, r7, #8
 801a1f2:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a1f6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801a1fa:	fb07 9902 	mla	r9, r7, r2, r9
 801a1fe:	fa1f f989 	uxth.w	r9, r9
 801a202:	f109 0701 	add.w	r7, r9, #1
 801a206:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a20a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a20e:	fb07 8802 	mla	r8, r7, r2, r8
 801a212:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a216:	fa1f f888 	uxth.w	r8, r8
 801a21a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a21e:	f108 0201 	add.w	r2, r8, #1
 801a222:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a226:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a22a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801a22e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a230:	3603      	adds	r6, #3
 801a232:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a236:	4414      	add	r4, r2
 801a238:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a23a:	4410      	add	r0, r2
 801a23c:	e7ab      	b.n	801a196 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a23e:	f04f 0e00 	mov.w	lr, #0
 801a242:	eba3 020e 	sub.w	r2, r3, lr
 801a246:	2a00      	cmp	r2, #0
 801a248:	dc3d      	bgt.n	801a2c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801a24a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a24e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a252:	441d      	add	r5, r3
 801a254:	2900      	cmp	r1, #0
 801a256:	f340 809c 	ble.w	801a392 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a25a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a25e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a260:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a264:	3901      	subs	r1, #1
 801a266:	eeb0 6a62 	vmov.f32	s12, s5
 801a26a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a26e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a272:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a276:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a27a:	eeb0 6a43 	vmov.f32	s12, s6
 801a27e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a282:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a286:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a28a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a28e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a292:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a296:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a29a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a29e:	ee12 2a90 	vmov	r2, s5
 801a2a2:	eef0 2a47 	vmov.f32	s5, s14
 801a2a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2aa:	ee13 2a10 	vmov	r2, s6
 801a2ae:	930f      	str	r3, [sp, #60]	; 0x3c
 801a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2b2:	eeb0 3a67 	vmov.f32	s6, s15
 801a2b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2ba:	9a01      	ldr	r2, [sp, #4]
 801a2bc:	9310      	str	r3, [sp, #64]	; 0x40
 801a2be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2c0:	bf08      	it	eq
 801a2c2:	4613      	moveq	r3, r2
 801a2c4:	e734      	b.n	801a130 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a2c6:	1427      	asrs	r7, r4, #16
 801a2c8:	d44d      	bmi.n	801a366 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a2ca:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a2ce:	42be      	cmp	r6, r7
 801a2d0:	dd49      	ble.n	801a366 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a2d2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a2d6:	d446      	bmi.n	801a366 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a2d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a2dc:	4542      	cmp	r2, r8
 801a2de:	dd42      	ble.n	801a366 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a2e0:	b236      	sxth	r6, r6
 801a2e2:	9a00      	ldr	r2, [sp, #0]
 801a2e4:	fb08 7606 	mla	r6, r8, r6, r7
 801a2e8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801a2ec:	0e3a      	lsrs	r2, r7, #24
 801a2ee:	d03a      	beq.n	801a366 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a2f0:	2aff      	cmp	r2, #255	; 0xff
 801a2f2:	b2d6      	uxtb	r6, r2
 801a2f4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a2f8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801a2fc:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801a300:	b2ff      	uxtb	r7, r7
 801a302:	d037      	beq.n	801a374 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801a304:	fa1f f986 	uxth.w	r9, r6
 801a308:	4472      	add	r2, lr
 801a30a:	43f6      	mvns	r6, r6
 801a30c:	f815 8002 	ldrb.w	r8, [r5, r2]
 801a310:	fb17 f709 	smulbb	r7, r7, r9
 801a314:	fb1a fa09 	smulbb	sl, sl, r9
 801a318:	b2f6      	uxtb	r6, r6
 801a31a:	fb1b f909 	smulbb	r9, fp, r9
 801a31e:	fb08 7706 	mla	r7, r8, r6, r7
 801a322:	b2bf      	uxth	r7, r7
 801a324:	f107 0801 	add.w	r8, r7, #1
 801a328:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801a32c:	123f      	asrs	r7, r7, #8
 801a32e:	54af      	strb	r7, [r5, r2]
 801a330:	442a      	add	r2, r5
 801a332:	7857      	ldrb	r7, [r2, #1]
 801a334:	fb07 aa06 	mla	sl, r7, r6, sl
 801a338:	fa1f fa8a 	uxth.w	sl, sl
 801a33c:	f10a 0701 	add.w	r7, sl, #1
 801a340:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a344:	7897      	ldrb	r7, [r2, #2]
 801a346:	fb07 9906 	mla	r9, r7, r6, r9
 801a34a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a34e:	fa1f f989 	uxth.w	r9, r9
 801a352:	f882 a001 	strb.w	sl, [r2, #1]
 801a356:	f109 0601 	add.w	r6, r9, #1
 801a35a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801a35e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a362:	f882 9002 	strb.w	r9, [r2, #2]
 801a366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a368:	f10e 0e01 	add.w	lr, lr, #1
 801a36c:	4414      	add	r4, r2
 801a36e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a370:	4410      	add	r0, r2
 801a372:	e766      	b.n	801a242 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a374:	4472      	add	r2, lr
 801a376:	54af      	strb	r7, [r5, r2]
 801a378:	442a      	add	r2, r5
 801a37a:	f882 a001 	strb.w	sl, [r2, #1]
 801a37e:	f882 b002 	strb.w	fp, [r2, #2]
 801a382:	e7f0      	b.n	801a366 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a384:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a388:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a38c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801a390:	e74d      	b.n	801a22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a392:	b003      	add	sp, #12
 801a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a398 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a39c:	b087      	sub	sp, #28
 801a39e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a3a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a3a4:	9204      	str	r2, [sp, #16]
 801a3a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a3aa:	6860      	ldr	r0, [r4, #4]
 801a3ac:	9205      	str	r2, [sp, #20]
 801a3ae:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a3b2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801a3b6:	9101      	str	r1, [sp, #4]
 801a3b8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a3bc:	fb00 2505 	mla	r5, r0, r5, r2
 801a3c0:	6822      	ldr	r2, [r4, #0]
 801a3c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3c6:	4415      	add	r5, r2
 801a3c8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a3cc:	3201      	adds	r2, #1
 801a3ce:	f022 0201 	bic.w	r2, r2, #1
 801a3d2:	9202      	str	r2, [sp, #8]
 801a3d4:	f8dc 2000 	ldr.w	r2, [ip]
 801a3d8:	9203      	str	r2, [sp, #12]
 801a3da:	9a01      	ldr	r2, [sp, #4]
 801a3dc:	2a00      	cmp	r2, #0
 801a3de:	dc03      	bgt.n	801a3e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a3e0:	9a04      	ldr	r2, [sp, #16]
 801a3e2:	2a00      	cmp	r2, #0
 801a3e4:	f340 8135 	ble.w	801a652 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a3e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a3ea:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a3ee:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a3f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a3f4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a3f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	dd0d      	ble.n	801a41c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a400:	1422      	asrs	r2, r4, #16
 801a402:	d405      	bmi.n	801a410 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a404:	4542      	cmp	r2, r8
 801a406:	da03      	bge.n	801a410 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a408:	1402      	asrs	r2, r0, #16
 801a40a:	d401      	bmi.n	801a410 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a40c:	42ba      	cmp	r2, r7
 801a40e:	db06      	blt.n	801a41e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a412:	4474      	add	r4, lr
 801a414:	3b01      	subs	r3, #1
 801a416:	3503      	adds	r5, #3
 801a418:	4410      	add	r0, r2
 801a41a:	e7ef      	b.n	801a3fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a41c:	d077      	beq.n	801a50e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801a41e:	1e5a      	subs	r2, r3, #1
 801a420:	fb0e 4602 	mla	r6, lr, r2, r4
 801a424:	1436      	asrs	r6, r6, #16
 801a426:	d469      	bmi.n	801a4fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a428:	4546      	cmp	r6, r8
 801a42a:	da67      	bge.n	801a4fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a42c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a42e:	fb06 0202 	mla	r2, r6, r2, r0
 801a432:	1412      	asrs	r2, r2, #16
 801a434:	d462      	bmi.n	801a4fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a436:	42ba      	cmp	r2, r7
 801a438:	da60      	bge.n	801a4fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a43a:	1cee      	adds	r6, r5, #3
 801a43c:	4699      	mov	r9, r3
 801a43e:	f1b9 0f00 	cmp.w	r9, #0
 801a442:	dd5f      	ble.n	801a504 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a444:	1422      	asrs	r2, r4, #16
 801a446:	9902      	ldr	r1, [sp, #8]
 801a448:	1407      	asrs	r7, r0, #16
 801a44a:	fb01 2707 	mla	r7, r1, r7, r2
 801a44e:	9903      	ldr	r1, [sp, #12]
 801a450:	087a      	lsrs	r2, r7, #1
 801a452:	5c8a      	ldrb	r2, [r1, r2]
 801a454:	07f9      	lsls	r1, r7, #31
 801a456:	bf54      	ite	pl
 801a458:	f002 020f 	andpl.w	r2, r2, #15
 801a45c:	1112      	asrmi	r2, r2, #4
 801a45e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a462:	b2d2      	uxtb	r2, r2
 801a464:	2a00      	cmp	r2, #0
 801a466:	d042      	beq.n	801a4ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a468:	497b      	ldr	r1, [pc, #492]	; (801a658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801a46a:	680f      	ldr	r7, [r1, #0]
 801a46c:	9905      	ldr	r1, [sp, #20]
 801a46e:	fa5f fb87 	uxtb.w	fp, r7
 801a472:	434a      	muls	r2, r1
 801a474:	f102 0801 	add.w	r8, r2, #1
 801a478:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801a47c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801a480:	1212      	asrs	r2, r2, #8
 801a482:	fa1f fa82 	uxth.w	sl, r2
 801a486:	43d2      	mvns	r2, r2
 801a488:	fb1b fb0a 	smulbb	fp, fp, sl
 801a48c:	b2d2      	uxtb	r2, r2
 801a48e:	fb08 b802 	mla	r8, r8, r2, fp
 801a492:	fa1f f888 	uxth.w	r8, r8
 801a496:	f108 0b01 	add.w	fp, r8, #1
 801a49a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a49e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a4a2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a4a6:	fb1b fb0a 	smulbb	fp, fp, sl
 801a4aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a4ae:	fb17 fa0a 	smulbb	sl, r7, sl
 801a4b2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a4b6:	f806 8c03 	strb.w	r8, [r6, #-3]
 801a4ba:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801a4be:	fb07 aa02 	mla	sl, r7, r2, sl
 801a4c2:	fb08 b802 	mla	r8, r8, r2, fp
 801a4c6:	fa1f fa8a 	uxth.w	sl, sl
 801a4ca:	fa1f f888 	uxth.w	r8, r8
 801a4ce:	f10a 0701 	add.w	r7, sl, #1
 801a4d2:	f108 0b01 	add.w	fp, r8, #1
 801a4d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a4da:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a4de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a4e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a4e6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801a4ea:	f806 8c02 	strb.w	r8, [r6, #-2]
 801a4ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a4f0:	4474      	add	r4, lr
 801a4f2:	3603      	adds	r6, #3
 801a4f4:	f109 39ff 	add.w	r9, r9, #4294967295
 801a4f8:	4410      	add	r0, r2
 801a4fa:	e7a0      	b.n	801a43e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a4fc:	2700      	movs	r7, #0
 801a4fe:	1bda      	subs	r2, r3, r7
 801a500:	2a00      	cmp	r2, #0
 801a502:	dc3e      	bgt.n	801a582 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801a504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a50c:	441d      	add	r5, r3
 801a50e:	9b01      	ldr	r3, [sp, #4]
 801a510:	2b00      	cmp	r3, #0
 801a512:	f340 809e 	ble.w	801a652 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a516:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a51a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a51c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a520:	eeb0 6a62 	vmov.f32	s12, s5
 801a524:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a528:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a52c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a530:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a534:	eeb0 6a43 	vmov.f32	s12, s6
 801a538:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a53c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a540:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a544:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a548:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a54c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a550:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a554:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a558:	ee12 2a90 	vmov	r2, s5
 801a55c:	eef0 2a47 	vmov.f32	s5, s14
 801a560:	fb92 fef3 	sdiv	lr, r2, r3
 801a564:	ee13 2a10 	vmov	r2, s6
 801a568:	eeb0 3a67 	vmov.f32	s6, s15
 801a56c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a570:	9314      	str	r3, [sp, #80]	; 0x50
 801a572:	9b01      	ldr	r3, [sp, #4]
 801a574:	9a04      	ldr	r2, [sp, #16]
 801a576:	3b01      	subs	r3, #1
 801a578:	9301      	str	r3, [sp, #4]
 801a57a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a57c:	bf08      	it	eq
 801a57e:	4613      	moveq	r3, r2
 801a580:	e72b      	b.n	801a3da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a582:	1426      	asrs	r6, r4, #16
 801a584:	d460      	bmi.n	801a648 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a586:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a58a:	42b2      	cmp	r2, r6
 801a58c:	dd5c      	ble.n	801a648 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a58e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a592:	d459      	bmi.n	801a648 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a594:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a598:	4542      	cmp	r2, r8
 801a59a:	dd55      	ble.n	801a648 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a59c:	9a02      	ldr	r2, [sp, #8]
 801a59e:	9903      	ldr	r1, [sp, #12]
 801a5a0:	fb08 6602 	mla	r6, r8, r2, r6
 801a5a4:	0872      	lsrs	r2, r6, #1
 801a5a6:	07f6      	lsls	r6, r6, #31
 801a5a8:	5c8a      	ldrb	r2, [r1, r2]
 801a5aa:	bf54      	ite	pl
 801a5ac:	f002 020f 	andpl.w	r2, r2, #15
 801a5b0:	1112      	asrmi	r2, r2, #4
 801a5b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a5b6:	b2d2      	uxtb	r2, r2
 801a5b8:	2a00      	cmp	r2, #0
 801a5ba:	d045      	beq.n	801a648 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a5bc:	4926      	ldr	r1, [pc, #152]	; (801a658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801a5be:	f8d1 8000 	ldr.w	r8, [r1]
 801a5c2:	9905      	ldr	r1, [sp, #20]
 801a5c4:	fa5f fb88 	uxtb.w	fp, r8
 801a5c8:	434a      	muls	r2, r1
 801a5ca:	1c56      	adds	r6, r2, #1
 801a5cc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a5d0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a5d4:	1212      	asrs	r2, r2, #8
 801a5d6:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a5da:	fa1f fa82 	uxth.w	sl, r2
 801a5de:	43d2      	mvns	r2, r2
 801a5e0:	fb1b fb0a 	smulbb	fp, fp, sl
 801a5e4:	b2d2      	uxtb	r2, r2
 801a5e6:	fb09 b902 	mla	r9, r9, r2, fp
 801a5ea:	fa1f f989 	uxth.w	r9, r9
 801a5ee:	f109 0b01 	add.w	fp, r9, #1
 801a5f2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a5f6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801a5fa:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801a5fe:	fb1b fb0a 	smulbb	fp, fp, sl
 801a602:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a606:	fb18 fa0a 	smulbb	sl, r8, sl
 801a60a:	f805 9006 	strb.w	r9, [r5, r6]
 801a60e:	442e      	add	r6, r5
 801a610:	f896 8002 	ldrb.w	r8, [r6, #2]
 801a614:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a618:	fb08 aa02 	mla	sl, r8, r2, sl
 801a61c:	fb09 b902 	mla	r9, r9, r2, fp
 801a620:	fa1f fa8a 	uxth.w	sl, sl
 801a624:	fa1f f989 	uxth.w	r9, r9
 801a628:	f10a 0801 	add.w	r8, sl, #1
 801a62c:	f109 0b01 	add.w	fp, r9, #1
 801a630:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801a634:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a638:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a63c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a640:	f886 a002 	strb.w	sl, [r6, #2]
 801a644:	f886 9001 	strb.w	r9, [r6, #1]
 801a648:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a64a:	4474      	add	r4, lr
 801a64c:	3701      	adds	r7, #1
 801a64e:	4410      	add	r0, r2
 801a650:	e755      	b.n	801a4fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801a652:	b007      	add	sp, #28
 801a654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a658:	20011b44 	.word	0x20011b44

0801a65c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a660:	b085      	sub	sp, #20
 801a662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a666:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a668:	9203      	str	r2, [sp, #12]
 801a66a:	6860      	ldr	r0, [r4, #4]
 801a66c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a670:	9100      	str	r1, [sp, #0]
 801a672:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801a676:	fb00 2606 	mla	r6, r0, r6, r2
 801a67a:	6822      	ldr	r2, [r4, #0]
 801a67c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a680:	4416      	add	r6, r2
 801a682:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a686:	3201      	adds	r2, #1
 801a688:	f022 0201 	bic.w	r2, r2, #1
 801a68c:	9201      	str	r2, [sp, #4]
 801a68e:	f8dc 2000 	ldr.w	r2, [ip]
 801a692:	9202      	str	r2, [sp, #8]
 801a694:	9a00      	ldr	r2, [sp, #0]
 801a696:	2a00      	cmp	r2, #0
 801a698:	dc03      	bgt.n	801a6a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a69a:	9a03      	ldr	r2, [sp, #12]
 801a69c:	2a00      	cmp	r2, #0
 801a69e:	f340 8140 	ble.w	801a922 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801a6a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6a4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a6a8:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801a6ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6ae:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a6b2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	dd0e      	ble.n	801a6d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a6ba:	142a      	asrs	r2, r5, #16
 801a6bc:	d405      	bmi.n	801a6ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a6be:	4572      	cmp	r2, lr
 801a6c0:	da03      	bge.n	801a6ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a6c2:	1422      	asrs	r2, r4, #16
 801a6c4:	d401      	bmi.n	801a6ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a6c6:	42ba      	cmp	r2, r7
 801a6c8:	db07      	blt.n	801a6da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a6ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a6cc:	3b01      	subs	r3, #1
 801a6ce:	3603      	adds	r6, #3
 801a6d0:	4415      	add	r5, r2
 801a6d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a6d4:	4414      	add	r4, r2
 801a6d6:	e7ee      	b.n	801a6b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a6d8:	d072      	beq.n	801a7c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a6da:	1e5a      	subs	r2, r3, #1
 801a6dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a6de:	fb00 5002 	mla	r0, r0, r2, r5
 801a6e2:	1400      	asrs	r0, r0, #16
 801a6e4:	d463      	bmi.n	801a7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a6e6:	4570      	cmp	r0, lr
 801a6e8:	da61      	bge.n	801a7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a6ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a6ec:	fb00 4202 	mla	r2, r0, r2, r4
 801a6f0:	1412      	asrs	r2, r2, #16
 801a6f2:	d45c      	bmi.n	801a7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a6f4:	42ba      	cmp	r2, r7
 801a6f6:	da5a      	bge.n	801a7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a6f8:	1cf0      	adds	r0, r6, #3
 801a6fa:	469a      	mov	sl, r3
 801a6fc:	f1ba 0f00 	cmp.w	sl, #0
 801a700:	dd59      	ble.n	801a7b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801a702:	142a      	asrs	r2, r5, #16
 801a704:	9901      	ldr	r1, [sp, #4]
 801a706:	1427      	asrs	r7, r4, #16
 801a708:	fb01 2707 	mla	r7, r1, r7, r2
 801a70c:	9902      	ldr	r1, [sp, #8]
 801a70e:	087a      	lsrs	r2, r7, #1
 801a710:	5c8a      	ldrb	r2, [r1, r2]
 801a712:	07f9      	lsls	r1, r7, #31
 801a714:	bf54      	ite	pl
 801a716:	f002 020f 	andpl.w	r2, r2, #15
 801a71a:	1112      	asrmi	r2, r2, #4
 801a71c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a720:	b2d2      	uxtb	r2, r2
 801a722:	2a00      	cmp	r2, #0
 801a724:	d03b      	beq.n	801a79e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a726:	4980      	ldr	r1, [pc, #512]	; (801a928 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801a728:	2aff      	cmp	r2, #255	; 0xff
 801a72a:	680f      	ldr	r7, [r1, #0]
 801a72c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a730:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a734:	b2ff      	uxtb	r7, r7
 801a736:	f000 80ed 	beq.w	801a914 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801a73a:	fa1f f882 	uxth.w	r8, r2
 801a73e:	43d2      	mvns	r2, r2
 801a740:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801a744:	fb17 f708 	smulbb	r7, r7, r8
 801a748:	b2d2      	uxtb	r2, r2
 801a74a:	fb19 f908 	smulbb	r9, r9, r8
 801a74e:	fb0e 7702 	mla	r7, lr, r2, r7
 801a752:	fb1b f808 	smulbb	r8, fp, r8
 801a756:	b2bf      	uxth	r7, r7
 801a758:	f107 0e01 	add.w	lr, r7, #1
 801a75c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a760:	123f      	asrs	r7, r7, #8
 801a762:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a766:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801a76a:	fb07 9902 	mla	r9, r7, r2, r9
 801a76e:	fa1f f989 	uxth.w	r9, r9
 801a772:	f109 0701 	add.w	r7, r9, #1
 801a776:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a77a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801a77e:	fb07 8802 	mla	r8, r7, r2, r8
 801a782:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a786:	fa1f f888 	uxth.w	r8, r8
 801a78a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a78e:	f108 0201 	add.w	r2, r8, #1
 801a792:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a796:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a79a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801a79e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a7a0:	3003      	adds	r0, #3
 801a7a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a7a6:	4415      	add	r5, r2
 801a7a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a7aa:	4414      	add	r4, r2
 801a7ac:	e7a6      	b.n	801a6fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a7ae:	2700      	movs	r7, #0
 801a7b0:	1bda      	subs	r2, r3, r7
 801a7b2:	2a00      	cmp	r2, #0
 801a7b4:	dc40      	bgt.n	801a838 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801a7b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a7ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a7be:	441e      	add	r6, r3
 801a7c0:	9b00      	ldr	r3, [sp, #0]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	f340 80ad 	ble.w	801a922 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801a7c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a7cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a7d2:	eeb0 6a62 	vmov.f32	s12, s5
 801a7d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a7da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a7de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a7e6:	eeb0 6a43 	vmov.f32	s12, s6
 801a7ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a7f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a7f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a7fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a7fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a802:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a806:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a80a:	ee12 2a90 	vmov	r2, s5
 801a80e:	eef0 2a47 	vmov.f32	s5, s14
 801a812:	fb92 f3f3 	sdiv	r3, r2, r3
 801a816:	ee13 2a10 	vmov	r2, s6
 801a81a:	9311      	str	r3, [sp, #68]	; 0x44
 801a81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a81e:	eeb0 3a67 	vmov.f32	s6, s15
 801a822:	fb92 f3f3 	sdiv	r3, r2, r3
 801a826:	9312      	str	r3, [sp, #72]	; 0x48
 801a828:	9b00      	ldr	r3, [sp, #0]
 801a82a:	9a03      	ldr	r2, [sp, #12]
 801a82c:	3b01      	subs	r3, #1
 801a82e:	9300      	str	r3, [sp, #0]
 801a830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a832:	bf08      	it	eq
 801a834:	4613      	moveq	r3, r2
 801a836:	e72d      	b.n	801a694 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a838:	1428      	asrs	r0, r5, #16
 801a83a:	d45c      	bmi.n	801a8f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a83c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a840:	4282      	cmp	r2, r0
 801a842:	dd58      	ble.n	801a8f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a844:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801a848:	d455      	bmi.n	801a8f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a84a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a84e:	4572      	cmp	r2, lr
 801a850:	dd51      	ble.n	801a8f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a852:	9a01      	ldr	r2, [sp, #4]
 801a854:	9902      	ldr	r1, [sp, #8]
 801a856:	fb0e 0002 	mla	r0, lr, r2, r0
 801a85a:	0842      	lsrs	r2, r0, #1
 801a85c:	07c0      	lsls	r0, r0, #31
 801a85e:	5c8a      	ldrb	r2, [r1, r2]
 801a860:	bf54      	ite	pl
 801a862:	f002 020f 	andpl.w	r2, r2, #15
 801a866:	1112      	asrmi	r2, r2, #4
 801a868:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a86c:	b2d2      	uxtb	r2, r2
 801a86e:	2a00      	cmp	r2, #0
 801a870:	d041      	beq.n	801a8f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a872:	492d      	ldr	r1, [pc, #180]	; (801a928 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801a874:	2aff      	cmp	r2, #255	; 0xff
 801a876:	6808      	ldr	r0, [r1, #0]
 801a878:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801a87c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a880:	fa5f fe80 	uxtb.w	lr, r0
 801a884:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801a888:	d03b      	beq.n	801a902 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801a88a:	fa1f f982 	uxth.w	r9, r2
 801a88e:	4438      	add	r0, r7
 801a890:	43d2      	mvns	r2, r2
 801a892:	f816 8000 	ldrb.w	r8, [r6, r0]
 801a896:	fb1e fe09 	smulbb	lr, lr, r9
 801a89a:	fb1a fa09 	smulbb	sl, sl, r9
 801a89e:	b2d2      	uxtb	r2, r2
 801a8a0:	fb1b f909 	smulbb	r9, fp, r9
 801a8a4:	fb08 ee02 	mla	lr, r8, r2, lr
 801a8a8:	fa1f fe8e 	uxth.w	lr, lr
 801a8ac:	f10e 0801 	add.w	r8, lr, #1
 801a8b0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801a8b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a8b8:	f806 e000 	strb.w	lr, [r6, r0]
 801a8bc:	4430      	add	r0, r6
 801a8be:	f890 e001 	ldrb.w	lr, [r0, #1]
 801a8c2:	fb0e aa02 	mla	sl, lr, r2, sl
 801a8c6:	fa1f fa8a 	uxth.w	sl, sl
 801a8ca:	f10a 0e01 	add.w	lr, sl, #1
 801a8ce:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801a8d2:	f890 e002 	ldrb.w	lr, [r0, #2]
 801a8d6:	fb0e 9902 	mla	r9, lr, r2, r9
 801a8da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a8de:	fa1f f989 	uxth.w	r9, r9
 801a8e2:	f880 a001 	strb.w	sl, [r0, #1]
 801a8e6:	f109 0201 	add.w	r2, r9, #1
 801a8ea:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a8ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a8f2:	f880 9002 	strb.w	r9, [r0, #2]
 801a8f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8f8:	3701      	adds	r7, #1
 801a8fa:	4415      	add	r5, r2
 801a8fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a8fe:	4414      	add	r4, r2
 801a900:	e756      	b.n	801a7b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a902:	4438      	add	r0, r7
 801a904:	f806 e000 	strb.w	lr, [r6, r0]
 801a908:	4430      	add	r0, r6
 801a90a:	f880 a001 	strb.w	sl, [r0, #1]
 801a90e:	f880 b002 	strb.w	fp, [r0, #2]
 801a912:	e7f0      	b.n	801a8f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a914:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a918:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a91c:	f800 bc01 	strb.w	fp, [r0, #-1]
 801a920:	e73d      	b.n	801a79e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a922:	b005      	add	sp, #20
 801a924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a928:	20011b44 	.word	0x20011b44

0801a92c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a92c:	4770      	bx	lr

0801a92e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a92e:	4770      	bx	lr

0801a930 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a930:	4770      	bx	lr

0801a932 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a932:	4770      	bx	lr

0801a934 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a934:	4770      	bx	lr

0801a936 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a936:	4770      	bx	lr

0801a938 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a938:	4770      	bx	lr

0801a93a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a93a:	4770      	bx	lr

0801a93c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a93c:	4770      	bx	lr

0801a93e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a93e:	4770      	bx	lr

0801a940 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a940:	4770      	bx	lr

0801a942 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a942:	4770      	bx	lr

0801a944 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a944:	4770      	bx	lr

0801a946 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a946:	4770      	bx	lr

0801a948 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a948:	4770      	bx	lr

0801a94a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a94a:	4770      	bx	lr

0801a94c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a94c:	4770      	bx	lr

0801a94e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a94e:	4770      	bx	lr

0801a950 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a950:	4770      	bx	lr

0801a952 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a952:	4770      	bx	lr

0801a954 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a954:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a956:	4606      	mov	r6, r0
 801a958:	b087      	sub	sp, #28
 801a95a:	4615      	mov	r5, r2
 801a95c:	461f      	mov	r7, r3
 801a95e:	b353      	cbz	r3, 801a9b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a960:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a964:	2b00      	cmp	r3, #0
 801a966:	dd26      	ble.n	801a9b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a968:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	dd22      	ble.n	801a9b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a970:	6808      	ldr	r0, [r1, #0]
 801a972:	aa04      	add	r2, sp, #16
 801a974:	6849      	ldr	r1, [r1, #4]
 801a976:	4c1b      	ldr	r4, [pc, #108]	; (801a9e4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a978:	c203      	stmia	r2!, {r0, r1}
 801a97a:	a804      	add	r0, sp, #16
 801a97c:	f7fa ff1a 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a980:	6820      	ldr	r0, [r4, #0]
 801a982:	6803      	ldr	r3, [r0, #0]
 801a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a986:	4798      	blx	r3
 801a988:	2fff      	cmp	r7, #255	; 0xff
 801a98a:	d016      	beq.n	801a9ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a98c:	f010 0f08 	tst.w	r0, #8
 801a990:	6820      	ldr	r0, [r4, #0]
 801a992:	d015      	beq.n	801a9c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801a994:	2400      	movs	r4, #0
 801a996:	6801      	ldr	r1, [r0, #0]
 801a998:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a99c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a9a0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801a9a4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a9a8:	9401      	str	r4, [sp, #4]
 801a9aa:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a9ae:	9400      	str	r4, [sp, #0]
 801a9b0:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801a9b2:	4629      	mov	r1, r5
 801a9b4:	47a0      	blx	r4
 801a9b6:	b007      	add	sp, #28
 801a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9ba:	f010 0f02 	tst.w	r0, #2
 801a9be:	e7e7      	b.n	801a990 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801a9c0:	6803      	ldr	r3, [r0, #0]
 801a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9c4:	4798      	blx	r3
 801a9c6:	4b08      	ldr	r3, [pc, #32]	; (801a9e8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801a9c8:	4601      	mov	r1, r0
 801a9ca:	4630      	mov	r0, r6
 801a9cc:	881a      	ldrh	r2, [r3, #0]
 801a9ce:	6833      	ldr	r3, [r6, #0]
 801a9d0:	e9cd 5700 	strd	r5, r7, [sp]
 801a9d4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a9d6:	ab04      	add	r3, sp, #16
 801a9d8:	47a8      	blx	r5
 801a9da:	6820      	ldr	r0, [r4, #0]
 801a9dc:	6803      	ldr	r3, [r0, #0]
 801a9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9e0:	4798      	blx	r3
 801a9e2:	e7e8      	b.n	801a9b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a9e4:	20011b3c 	.word	0x20011b3c
 801a9e8:	20011b34 	.word	0x20011b34

0801a9ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9f0:	b08b      	sub	sp, #44	; 0x2c
 801a9f2:	460d      	mov	r5, r1
 801a9f4:	4616      	mov	r6, r2
 801a9f6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801a9fa:	f1b8 0f00 	cmp.w	r8, #0
 801a9fe:	d047      	beq.n	801aa90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801aa00:	6810      	ldr	r0, [r2, #0]
 801aa02:	ac06      	add	r4, sp, #24
 801aa04:	6851      	ldr	r1, [r2, #4]
 801aa06:	4f51      	ldr	r7, [pc, #324]	; (801ab4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801aa08:	c403      	stmia	r4!, {r0, r1}
 801aa0a:	6818      	ldr	r0, [r3, #0]
 801aa0c:	ac08      	add	r4, sp, #32
 801aa0e:	6859      	ldr	r1, [r3, #4]
 801aa10:	c403      	stmia	r4!, {r0, r1}
 801aa12:	a806      	add	r0, sp, #24
 801aa14:	f7fa fece 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa18:	4631      	mov	r1, r6
 801aa1a:	a808      	add	r0, sp, #32
 801aa1c:	f7fa fef2 	bl	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aa20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801aa24:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801aa28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aa2c:	6838      	ldr	r0, [r7, #0]
 801aa2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aa32:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801aa36:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801aa3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aa3e:	440d      	add	r5, r1
 801aa40:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801aa44:	440a      	add	r2, r1
 801aa46:	f8ad 2020 	strh.w	r2, [sp, #32]
 801aa4a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801aa4e:	4413      	add	r3, r2
 801aa50:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aa54:	6803      	ldr	r3, [r0, #0]
 801aa56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa58:	4798      	blx	r3
 801aa5a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801aa5e:	d01a      	beq.n	801aa96 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801aa60:	f010 0f04 	tst.w	r0, #4
 801aa64:	6838      	ldr	r0, [r7, #0]
 801aa66:	d019      	beq.n	801aa9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801aa68:	2100      	movs	r1, #0
 801aa6a:	6807      	ldr	r7, [r0, #0]
 801aa6c:	b2a4      	uxth	r4, r4
 801aa6e:	f8cd 800c 	str.w	r8, [sp, #12]
 801aa72:	b2b6      	uxth	r6, r6
 801aa74:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801aa78:	9401      	str	r4, [sp, #4]
 801aa7a:	9600      	str	r6, [sp, #0]
 801aa7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801aa80:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801aa84:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aa88:	9102      	str	r1, [sp, #8]
 801aa8a:	4629      	mov	r1, r5
 801aa8c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801aa8e:	47a0      	blx	r4
 801aa90:	b00b      	add	sp, #44	; 0x2c
 801aa92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa96:	f010 0f01 	tst.w	r0, #1
 801aa9a:	e7e3      	b.n	801aa64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801aa9c:	6803      	ldr	r3, [r0, #0]
 801aa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aaa0:	4798      	blx	r3
 801aaa2:	4a2b      	ldr	r2, [pc, #172]	; (801ab50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801aaa4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801aaa8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801aaac:	8813      	ldrh	r3, [r2, #0]
 801aaae:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801aab2:	fb03 f404 	mul.w	r4, r3, r4
 801aab6:	fb03 c101 	mla	r1, r3, r1, ip
 801aaba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aabe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aac2:	4408      	add	r0, r1
 801aac4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801aac8:	4404      	add	r4, r0
 801aaca:	d02e      	beq.n	801ab2a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801aacc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801aad0:	1b9b      	subs	r3, r3, r6
 801aad2:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801aad6:	1b96      	subs	r6, r2, r6
 801aad8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aadc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801aae0:	42a0      	cmp	r0, r4
 801aae2:	d22d      	bcs.n	801ab40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801aae4:	eb00 0e01 	add.w	lr, r0, r1
 801aae8:	4570      	cmp	r0, lr
 801aaea:	d210      	bcs.n	801ab0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801aaec:	f890 9000 	ldrb.w	r9, [r0]
 801aaf0:	f815 2b01 	ldrb.w	r2, [r5], #1
 801aaf4:	fb19 f90c 	smulbb	r9, r9, ip
 801aaf8:	fb02 9208 	mla	r2, r2, r8, r9
 801aafc:	b292      	uxth	r2, r2
 801aafe:	f102 0901 	add.w	r9, r2, #1
 801ab02:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801ab06:	1212      	asrs	r2, r2, #8
 801ab08:	f800 2b01 	strb.w	r2, [r0], #1
 801ab0c:	e7ec      	b.n	801aae8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801ab0e:	4418      	add	r0, r3
 801ab10:	4435      	add	r5, r6
 801ab12:	e7e5      	b.n	801aae0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801ab14:	8813      	ldrh	r3, [r2, #0]
 801ab16:	1b9b      	subs	r3, r3, r6
 801ab18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab1c:	4418      	add	r0, r3
 801ab1e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ab22:	1b9b      	subs	r3, r3, r6
 801ab24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab28:	441d      	add	r5, r3
 801ab2a:	42a0      	cmp	r0, r4
 801ab2c:	d208      	bcs.n	801ab40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801ab2e:	eb00 0c01 	add.w	ip, r0, r1
 801ab32:	4560      	cmp	r0, ip
 801ab34:	d2ee      	bcs.n	801ab14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801ab36:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ab3a:	f800 3b01 	strb.w	r3, [r0], #1
 801ab3e:	e7f8      	b.n	801ab32 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801ab40:	6838      	ldr	r0, [r7, #0]
 801ab42:	6803      	ldr	r3, [r0, #0]
 801ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab46:	4798      	blx	r3
 801ab48:	e7a2      	b.n	801aa90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801ab4a:	bf00      	nop
 801ab4c:	20011b3c 	.word	0x20011b3c
 801ab50:	20011b34 	.word	0x20011b34

0801ab54 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801ab54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab56:	2300      	movs	r3, #0
 801ab58:	b085      	sub	sp, #20
 801ab5a:	9300      	str	r3, [sp, #0]
 801ab5c:	4b41      	ldr	r3, [pc, #260]	; (801ac64 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801ab5e:	781b      	ldrb	r3, [r3, #0]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d136      	bne.n	801abd2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801ab64:	4a40      	ldr	r2, [pc, #256]	; (801ac68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801ab66:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ab6a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d131      	bne.n	801abd6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801ab72:	4b3e      	ldr	r3, [pc, #248]	; (801ac6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801ab74:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab78:	ac02      	add	r4, sp, #8
 801ab7a:	6808      	ldr	r0, [r1, #0]
 801ab7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ab80:	ab02      	add	r3, sp, #8
 801ab82:	6849      	ldr	r1, [r1, #4]
 801ab84:	4d3a      	ldr	r5, [pc, #232]	; (801ac70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801ab86:	c303      	stmia	r3!, {r0, r1}
 801ab88:	4669      	mov	r1, sp
 801ab8a:	4620      	mov	r0, r4
 801ab8c:	f7fa fe3a 	bl	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab90:	4668      	mov	r0, sp
 801ab92:	f7fa fe0f 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab96:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ab9a:	f8bd 2000 	ldrh.w	r2, [sp]
 801ab9e:	462e      	mov	r6, r5
 801aba0:	6828      	ldr	r0, [r5, #0]
 801aba2:	4413      	add	r3, r2
 801aba4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801aba8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801abac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801abb0:	4413      	add	r3, r2
 801abb2:	f8ad 300a 	strh.w	r3, [sp, #10]
 801abb6:	6803      	ldr	r3, [r0, #0]
 801abb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abba:	4798      	blx	r3
 801abbc:	f010 0f01 	tst.w	r0, #1
 801abc0:	d00b      	beq.n	801abda <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801abc2:	6828      	ldr	r0, [r5, #0]
 801abc4:	6803      	ldr	r3, [r0, #0]
 801abc6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801abca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abcc:	4798      	blx	r3
 801abce:	b005      	add	sp, #20
 801abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abd2:	4a26      	ldr	r2, [pc, #152]	; (801ac6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801abd4:	e7c7      	b.n	801ab66 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801abd6:	4b24      	ldr	r3, [pc, #144]	; (801ac68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801abd8:	e7cc      	b.n	801ab74 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801abda:	6830      	ldr	r0, [r6, #0]
 801abdc:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801abe0:	6803      	ldr	r3, [r0, #0]
 801abe2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801abe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abe8:	4798      	blx	r3
 801abea:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801abee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801abf2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801abf6:	fb14 3402 	smlabb	r4, r4, r2, r3
 801abfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801abfe:	4404      	add	r4, r0
 801ac00:	6830      	ldr	r0, [r6, #0]
 801ac02:	6803      	ldr	r3, [r0, #0]
 801ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac06:	4798      	blx	r3
 801ac08:	4917      	ldr	r1, [pc, #92]	; (801ac68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801ac0a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801ac0e:	880b      	ldrh	r3, [r1, #0]
 801ac10:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801ac14:	fb03 c202 	mla	r2, r3, r2, ip
 801ac18:	437b      	muls	r3, r7
 801ac1a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801ac1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ac22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac26:	4410      	add	r0, r2
 801ac28:	18c2      	adds	r2, r0, r3
 801ac2a:	4290      	cmp	r0, r2
 801ac2c:	d214      	bcs.n	801ac58 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801ac2e:	eb00 0c07 	add.w	ip, r0, r7
 801ac32:	4560      	cmp	r0, ip
 801ac34:	d204      	bcs.n	801ac40 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801ac36:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ac3a:	f800 3b01 	strb.w	r3, [r0], #1
 801ac3e:	e7f8      	b.n	801ac32 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801ac40:	880b      	ldrh	r3, [r1, #0]
 801ac42:	1b5b      	subs	r3, r3, r5
 801ac44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac48:	4418      	add	r0, r3
 801ac4a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801ac4e:	1b5b      	subs	r3, r3, r5
 801ac50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac54:	441c      	add	r4, r3
 801ac56:	e7e8      	b.n	801ac2a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801ac58:	6830      	ldr	r0, [r6, #0]
 801ac5a:	6803      	ldr	r3, [r0, #0]
 801ac5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac5e:	4798      	blx	r3
 801ac60:	e7b5      	b.n	801abce <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801ac62:	bf00      	nop
 801ac64:	20011b32 	.word	0x20011b32
 801ac68:	20011b34 	.word	0x20011b34
 801ac6c:	20011b36 	.word	0x20011b36
 801ac70:	20011b3c 	.word	0x20011b3c

0801ac74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac78:	b089      	sub	sp, #36	; 0x24
 801ac7a:	4607      	mov	r7, r0
 801ac7c:	4689      	mov	r9, r1
 801ac7e:	4692      	mov	sl, r2
 801ac80:	ac08      	add	r4, sp, #32
 801ac82:	461e      	mov	r6, r3
 801ac84:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801ac88:	4620      	mov	r0, r4
 801ac8a:	f7fe f8f1 	bl	8018e70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ac8e:	683b      	ldr	r3, [r7, #0]
 801ac90:	4605      	mov	r5, r0
 801ac92:	4620      	mov	r0, r4
 801ac94:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801ac98:	f7fe f836 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ac9c:	4683      	mov	fp, r0
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f7fe f866 	bl	8018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aca4:	4653      	mov	r3, sl
 801aca6:	464a      	mov	r2, r9
 801aca8:	4639      	mov	r1, r7
 801acaa:	9500      	str	r5, [sp, #0]
 801acac:	e9cd b001 	strd	fp, r0, [sp, #4]
 801acb0:	a806      	add	r0, sp, #24
 801acb2:	47c0      	blx	r8
 801acb4:	a906      	add	r1, sp, #24
 801acb6:	4630      	mov	r0, r6
 801acb8:	f7fd ff0a 	bl	8018ad0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801acbc:	4628      	mov	r0, r5
 801acbe:	b009      	add	sp, #36	; 0x24
 801acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801acc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801acc4:	b510      	push	{r4, lr}
 801acc6:	4604      	mov	r4, r0
 801acc8:	2104      	movs	r1, #4
 801acca:	f006 f8ee 	bl	8020eaa <_ZdlPvj>
 801acce:	4620      	mov	r0, r4
 801acd0:	bd10      	pop	{r4, pc}

0801acd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801acd2:	b510      	push	{r4, lr}
 801acd4:	4604      	mov	r4, r0
 801acd6:	2104      	movs	r1, #4
 801acd8:	f006 f8e7 	bl	8020eaa <_ZdlPvj>
 801acdc:	4620      	mov	r0, r4
 801acde:	bd10      	pop	{r4, pc}

0801ace0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ace0:	b510      	push	{r4, lr}
 801ace2:	4604      	mov	r4, r0
 801ace4:	2104      	movs	r1, #4
 801ace6:	f006 f8e0 	bl	8020eaa <_ZdlPvj>
 801acea:	4620      	mov	r0, r4
 801acec:	bd10      	pop	{r4, pc}

0801acee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801acee:	b510      	push	{r4, lr}
 801acf0:	4604      	mov	r4, r0
 801acf2:	2104      	movs	r1, #4
 801acf4:	f006 f8d9 	bl	8020eaa <_ZdlPvj>
 801acf8:	4620      	mov	r0, r4
 801acfa:	bd10      	pop	{r4, pc}

0801acfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801acfc:	b510      	push	{r4, lr}
 801acfe:	4604      	mov	r4, r0
 801ad00:	2104      	movs	r1, #4
 801ad02:	f006 f8d2 	bl	8020eaa <_ZdlPvj>
 801ad06:	4620      	mov	r0, r4
 801ad08:	bd10      	pop	{r4, pc}

0801ad0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ad0a:	b510      	push	{r4, lr}
 801ad0c:	4604      	mov	r4, r0
 801ad0e:	2104      	movs	r1, #4
 801ad10:	f006 f8cb 	bl	8020eaa <_ZdlPvj>
 801ad14:	4620      	mov	r0, r4
 801ad16:	bd10      	pop	{r4, pc}

0801ad18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ad18:	b510      	push	{r4, lr}
 801ad1a:	4604      	mov	r4, r0
 801ad1c:	2104      	movs	r1, #4
 801ad1e:	f006 f8c4 	bl	8020eaa <_ZdlPvj>
 801ad22:	4620      	mov	r0, r4
 801ad24:	bd10      	pop	{r4, pc}

0801ad26 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ad26:	b510      	push	{r4, lr}
 801ad28:	4604      	mov	r4, r0
 801ad2a:	2104      	movs	r1, #4
 801ad2c:	f006 f8bd 	bl	8020eaa <_ZdlPvj>
 801ad30:	4620      	mov	r0, r4
 801ad32:	bd10      	pop	{r4, pc}

0801ad34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ad34:	b510      	push	{r4, lr}
 801ad36:	4604      	mov	r4, r0
 801ad38:	2104      	movs	r1, #4
 801ad3a:	f006 f8b6 	bl	8020eaa <_ZdlPvj>
 801ad3e:	4620      	mov	r0, r4
 801ad40:	bd10      	pop	{r4, pc}

0801ad42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ad42:	b510      	push	{r4, lr}
 801ad44:	4604      	mov	r4, r0
 801ad46:	2104      	movs	r1, #4
 801ad48:	f006 f8af 	bl	8020eaa <_ZdlPvj>
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	bd10      	pop	{r4, pc}

0801ad50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ad50:	b510      	push	{r4, lr}
 801ad52:	4604      	mov	r4, r0
 801ad54:	2104      	movs	r1, #4
 801ad56:	f006 f8a8 	bl	8020eaa <_ZdlPvj>
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	bd10      	pop	{r4, pc}

0801ad5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ad5e:	b510      	push	{r4, lr}
 801ad60:	4604      	mov	r4, r0
 801ad62:	2104      	movs	r1, #4
 801ad64:	f006 f8a1 	bl	8020eaa <_ZdlPvj>
 801ad68:	4620      	mov	r0, r4
 801ad6a:	bd10      	pop	{r4, pc}

0801ad6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ad6c:	b510      	push	{r4, lr}
 801ad6e:	4604      	mov	r4, r0
 801ad70:	2104      	movs	r1, #4
 801ad72:	f006 f89a 	bl	8020eaa <_ZdlPvj>
 801ad76:	4620      	mov	r0, r4
 801ad78:	bd10      	pop	{r4, pc}

0801ad7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ad7a:	b510      	push	{r4, lr}
 801ad7c:	4604      	mov	r4, r0
 801ad7e:	2104      	movs	r1, #4
 801ad80:	f006 f893 	bl	8020eaa <_ZdlPvj>
 801ad84:	4620      	mov	r0, r4
 801ad86:	bd10      	pop	{r4, pc}

0801ad88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ad88:	b510      	push	{r4, lr}
 801ad8a:	4604      	mov	r4, r0
 801ad8c:	2104      	movs	r1, #4
 801ad8e:	f006 f88c 	bl	8020eaa <_ZdlPvj>
 801ad92:	4620      	mov	r0, r4
 801ad94:	bd10      	pop	{r4, pc}

0801ad96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ad96:	b510      	push	{r4, lr}
 801ad98:	4604      	mov	r4, r0
 801ad9a:	2104      	movs	r1, #4
 801ad9c:	f006 f885 	bl	8020eaa <_ZdlPvj>
 801ada0:	4620      	mov	r0, r4
 801ada2:	bd10      	pop	{r4, pc}

0801ada4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ada4:	b510      	push	{r4, lr}
 801ada6:	4604      	mov	r4, r0
 801ada8:	2104      	movs	r1, #4
 801adaa:	f006 f87e 	bl	8020eaa <_ZdlPvj>
 801adae:	4620      	mov	r0, r4
 801adb0:	bd10      	pop	{r4, pc}

0801adb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801adb2:	b510      	push	{r4, lr}
 801adb4:	4604      	mov	r4, r0
 801adb6:	2104      	movs	r1, #4
 801adb8:	f006 f877 	bl	8020eaa <_ZdlPvj>
 801adbc:	4620      	mov	r0, r4
 801adbe:	bd10      	pop	{r4, pc}

0801adc0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801adc0:	b510      	push	{r4, lr}
 801adc2:	4604      	mov	r4, r0
 801adc4:	2104      	movs	r1, #4
 801adc6:	f006 f870 	bl	8020eaa <_ZdlPvj>
 801adca:	4620      	mov	r0, r4
 801adcc:	bd10      	pop	{r4, pc}

0801adce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801adce:	b510      	push	{r4, lr}
 801add0:	4604      	mov	r4, r0
 801add2:	2104      	movs	r1, #4
 801add4:	f006 f869 	bl	8020eaa <_ZdlPvj>
 801add8:	4620      	mov	r0, r4
 801adda:	bd10      	pop	{r4, pc}

0801addc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ade0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801ade4:	9c06      	ldr	r4, [sp, #24]
 801ade6:	2800      	cmp	r0, #0
 801ade8:	d06e      	beq.n	801aec8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801adea:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801adee:	2d00      	cmp	r5, #0
 801adf0:	dd6a      	ble.n	801aec8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801adf2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801adf6:	f1bc 0f00 	cmp.w	ip, #0
 801adfa:	dd65      	ble.n	801aec8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801adfc:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801ae00:	28ff      	cmp	r0, #255	; 0xff
 801ae02:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae06:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801ae0a:	fb02 3306 	mla	r3, r2, r6, r3
 801ae0e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801ae12:	b2e4      	uxtb	r4, r4
 801ae14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae18:	4419      	add	r1, r3
 801ae1a:	fb02 f30c 	mul.w	r3, r2, ip
 801ae1e:	eba2 0205 	sub.w	r2, r2, r5
 801ae22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ae2e:	440b      	add	r3, r1
 801ae30:	d03e      	beq.n	801aeb0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801ae32:	fa1f fc80 	uxth.w	ip, r0
 801ae36:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ae3a:	fb06 f60c 	mul.w	r6, r6, ip
 801ae3e:	b280      	uxth	r0, r0
 801ae40:	fb07 f70c 	mul.w	r7, r7, ip
 801ae44:	fb04 f40c 	mul.w	r4, r4, ip
 801ae48:	4299      	cmp	r1, r3
 801ae4a:	d23d      	bcs.n	801aec8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ae4c:	eb01 0c05 	add.w	ip, r1, r5
 801ae50:	458c      	cmp	ip, r1
 801ae52:	f101 0e03 	add.w	lr, r1, #3
 801ae56:	d928      	bls.n	801aeaa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801ae58:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801ae5c:	fb11 f100 	smulbb	r1, r1, r0
 801ae60:	4421      	add	r1, r4
 801ae62:	b289      	uxth	r1, r1
 801ae64:	f101 0801 	add.w	r8, r1, #1
 801ae68:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ae6c:	1209      	asrs	r1, r1, #8
 801ae6e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801ae72:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801ae76:	fb11 f100 	smulbb	r1, r1, r0
 801ae7a:	4439      	add	r1, r7
 801ae7c:	b289      	uxth	r1, r1
 801ae7e:	f101 0801 	add.w	r8, r1, #1
 801ae82:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ae86:	1209      	asrs	r1, r1, #8
 801ae88:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801ae8c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ae90:	fb11 f100 	smulbb	r1, r1, r0
 801ae94:	4431      	add	r1, r6
 801ae96:	b289      	uxth	r1, r1
 801ae98:	f101 0801 	add.w	r8, r1, #1
 801ae9c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aea0:	1209      	asrs	r1, r1, #8
 801aea2:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801aea6:	4671      	mov	r1, lr
 801aea8:	e7d2      	b.n	801ae50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801aeaa:	4411      	add	r1, r2
 801aeac:	e7cc      	b.n	801ae48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801aeae:	4411      	add	r1, r2
 801aeb0:	4299      	cmp	r1, r3
 801aeb2:	d209      	bcs.n	801aec8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aeb4:	1948      	adds	r0, r1, r5
 801aeb6:	4281      	cmp	r1, r0
 801aeb8:	d2f9      	bcs.n	801aeae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801aeba:	700c      	strb	r4, [r1, #0]
 801aebc:	3103      	adds	r1, #3
 801aebe:	f801 7c02 	strb.w	r7, [r1, #-2]
 801aec2:	f801 6c01 	strb.w	r6, [r1, #-1]
 801aec6:	e7f6      	b.n	801aeb6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801aec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aecc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed0:	b093      	sub	sp, #76	; 0x4c
 801aed2:	4699      	mov	r9, r3
 801aed4:	4617      	mov	r7, r2
 801aed6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aeda:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801aede:	4604      	mov	r4, r0
 801aee0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aee4:	a80c      	add	r0, sp, #48	; 0x30
 801aee6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801aeea:	460d      	mov	r5, r1
 801aeec:	4649      	mov	r1, r9
 801aeee:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801aef2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801aef6:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801aefa:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801aefe:	f7f6 fff3 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 801af02:	4639      	mov	r1, r7
 801af04:	a80c      	add	r0, sp, #48	; 0x30
 801af06:	f7f6 ffef 	bl	8011ee8 <_ZN8touchgfx4RectaNERKS0_>
 801af0a:	4b78      	ldr	r3, [pc, #480]	; (801b0ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801af0c:	8818      	ldrh	r0, [r3, #0]
 801af0e:	4b78      	ldr	r3, [pc, #480]	; (801b0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801af10:	b202      	sxth	r2, r0
 801af12:	8819      	ldrh	r1, [r3, #0]
 801af14:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801af18:	b20f      	sxth	r7, r1
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	da07      	bge.n	801af2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801af1e:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801af22:	4463      	add	r3, ip
 801af24:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801af28:	2300      	movs	r3, #0
 801af2a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801af2e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801af32:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801af36:	1ad2      	subs	r2, r2, r3
 801af38:	4594      	cmp	ip, r2
 801af3a:	bfc4      	itt	gt
 801af3c:	1ac2      	subgt	r2, r0, r3
 801af3e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801af42:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801af46:	2a00      	cmp	r2, #0
 801af48:	da07      	bge.n	801af5a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801af4a:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801af4e:	4462      	add	r2, ip
 801af50:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801af54:	2200      	movs	r2, #0
 801af56:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801af5a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801af5e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801af62:	1abf      	subs	r7, r7, r2
 801af64:	45bc      	cmp	ip, r7
 801af66:	f8df c190 	ldr.w	ip, [pc, #400]	; 801b0f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801af6a:	bfc8      	it	gt
 801af6c:	1a8f      	subgt	r7, r1, r2
 801af6e:	f89c c000 	ldrb.w	ip, [ip]
 801af72:	bfc8      	it	gt
 801af74:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801af78:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801af7c:	f1bc 0f00 	cmp.w	ip, #0
 801af80:	d176      	bne.n	801b070 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801af82:	4287      	cmp	r7, r0
 801af84:	bf14      	ite	ne
 801af86:	2100      	movne	r1, #0
 801af88:	2101      	moveq	r1, #1
 801af8a:	2f00      	cmp	r7, #0
 801af8c:	9107      	str	r1, [sp, #28]
 801af8e:	dd73      	ble.n	801b078 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801af90:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801af94:	2900      	cmp	r1, #0
 801af96:	9104      	str	r1, [sp, #16]
 801af98:	dd6e      	ble.n	801b078 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801af9a:	f8b9 1000 	ldrh.w	r1, [r9]
 801af9e:	a80e      	add	r0, sp, #56	; 0x38
 801afa0:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801afa4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801afa8:	1a5b      	subs	r3, r3, r1
 801afaa:	a910      	add	r1, sp, #64	; 0x40
 801afac:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801afb0:	b21b      	sxth	r3, r3
 801afb2:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801afb6:	f8df a144 	ldr.w	sl, [pc, #324]	; 801b0fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801afba:	9305      	str	r3, [sp, #20]
 801afbc:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801afc0:	1ad2      	subs	r2, r2, r3
 801afc2:	b213      	sxth	r3, r2
 801afc4:	9306      	str	r3, [sp, #24]
 801afc6:	9b05      	ldr	r3, [sp, #20]
 801afc8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801afcc:	9b06      	ldr	r3, [sp, #24]
 801afce:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801afd2:	9b04      	ldr	r3, [sp, #16]
 801afd4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801afd8:	2300      	movs	r3, #0
 801afda:	9310      	str	r3, [sp, #64]	; 0x40
 801afdc:	f7fa fc12 	bl	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801afe0:	4640      	mov	r0, r8
 801afe2:	f7fa fbe7 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801afe6:	a810      	add	r0, sp, #64	; 0x40
 801afe8:	f7fa fbe4 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801afec:	4b41      	ldr	r3, [pc, #260]	; (801b0f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801afee:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801aff2:	4628      	mov	r0, r5
 801aff4:	881b      	ldrh	r3, [r3, #0]
 801aff6:	9308      	str	r3, [sp, #32]
 801aff8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801affc:	b21b      	sxth	r3, r3
 801affe:	9303      	str	r3, [sp, #12]
 801b000:	682b      	ldr	r3, [r5, #0]
 801b002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b004:	4798      	blx	r3
 801b006:	9a03      	ldr	r2, [sp, #12]
 801b008:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801b00c:	4681      	mov	r9, r0
 801b00e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801b012:	fb13 f302 	smulbb	r3, r3, r2
 801b016:	2203      	movs	r2, #3
 801b018:	f8da 0000 	ldr.w	r0, [sl]
 801b01c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b020:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801b022:	920b      	str	r2, [sp, #44]	; 0x2c
 801b024:	441d      	add	r5, r3
 801b026:	6803      	ldr	r3, [r0, #0]
 801b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b02a:	4798      	blx	r3
 801b02c:	9009      	str	r0, [sp, #36]	; 0x24
 801b02e:	f8da 0000 	ldr.w	r0, [sl]
 801b032:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b036:	6803      	ldr	r3, [r0, #0]
 801b038:	910a      	str	r1, [sp, #40]	; 0x28
 801b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b03c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801b040:	4798      	blx	r3
 801b042:	f010 0f01 	tst.w	r0, #1
 801b046:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801b04a:	d01e      	beq.n	801b08a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801b04c:	f8da 0000 	ldr.w	r0, [sl]
 801b050:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801b054:	6803      	ldr	r3, [r0, #0]
 801b056:	9200      	str	r2, [sp, #0]
 801b058:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801b05a:	462b      	mov	r3, r5
 801b05c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b060:	47b0      	blx	r6
 801b062:	9b05      	ldr	r3, [sp, #20]
 801b064:	80a7      	strh	r7, [r4, #4]
 801b066:	8023      	strh	r3, [r4, #0]
 801b068:	9b06      	ldr	r3, [sp, #24]
 801b06a:	8063      	strh	r3, [r4, #2]
 801b06c:	9b04      	ldr	r3, [sp, #16]
 801b06e:	e007      	b.n	801b080 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801b070:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801b074:	4288      	cmp	r0, r1
 801b076:	e785      	b.n	801af84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801b078:	2300      	movs	r3, #0
 801b07a:	8023      	strh	r3, [r4, #0]
 801b07c:	8063      	strh	r3, [r4, #2]
 801b07e:	80a3      	strh	r3, [r4, #4]
 801b080:	4620      	mov	r0, r4
 801b082:	80e3      	strh	r3, [r4, #6]
 801b084:	b013      	add	sp, #76	; 0x4c
 801b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b08a:	fb09 f606 	mul.w	r6, r9, r6
 801b08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b090:	fb11 6602 	smlabb	r6, r1, r2, r6
 801b094:	9a07      	ldr	r2, [sp, #28]
 801b096:	4433      	add	r3, r6
 801b098:	461e      	mov	r6, r3
 801b09a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b09e:	b16a      	cbz	r2, 801b0bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b0a0:	9a08      	ldr	r2, [sp, #32]
 801b0a2:	4593      	cmp	fp, r2
 801b0a4:	d10a      	bne.n	801b0bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b0a6:	f8da 0000 	ldr.w	r0, [sl]
 801b0aa:	fb09 f303 	mul.w	r3, r9, r3
 801b0ae:	4629      	mov	r1, r5
 801b0b0:	6802      	ldr	r2, [r0, #0]
 801b0b2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801b0b6:	4632      	mov	r2, r6
 801b0b8:	47d0      	blx	sl
 801b0ba:	e7d2      	b.n	801b062 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b0bc:	9a03      	ldr	r2, [sp, #12]
 801b0be:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801b0fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b0c2:	fb02 5803 	mla	r8, r2, r3, r5
 801b0c6:	4545      	cmp	r5, r8
 801b0c8:	d2cb      	bcs.n	801b062 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b0ca:	f8db 0000 	ldr.w	r0, [fp]
 801b0ce:	4629      	mov	r1, r5
 801b0d0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b0d4:	6802      	ldr	r2, [r0, #0]
 801b0d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0da:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801b0de:	4632      	mov	r2, r6
 801b0e0:	47d0      	blx	sl
 801b0e2:	9b03      	ldr	r3, [sp, #12]
 801b0e4:	444e      	add	r6, r9
 801b0e6:	441d      	add	r5, r3
 801b0e8:	e7ed      	b.n	801b0c6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801b0ea:	bf00      	nop
 801b0ec:	20011b2e 	.word	0x20011b2e
 801b0f0:	20011b30 	.word	0x20011b30
 801b0f4:	20011b34 	.word	0x20011b34
 801b0f8:	20011b32 	.word	0x20011b32
 801b0fc:	20011b3c 	.word	0x20011b3c

0801b100 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b100:	2200      	movs	r2, #0
 801b102:	490c      	ldr	r1, [pc, #48]	; (801b134 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801b104:	6042      	str	r2, [r0, #4]
 801b106:	6001      	str	r1, [r0, #0]
 801b108:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801b10c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801b110:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b114:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801b118:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801b11c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801b120:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801b124:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801b128:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801b12c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801b130:	4770      	bx	lr
 801b132:	bf00      	nop
 801b134:	08024500 	.word	0x08024500

0801b138 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b13c:	b091      	sub	sp, #68	; 0x44
 801b13e:	4607      	mov	r7, r0
 801b140:	4688      	mov	r8, r1
 801b142:	6810      	ldr	r0, [r2, #0]
 801b144:	6851      	ldr	r1, [r2, #4]
 801b146:	ac0c      	add	r4, sp, #48	; 0x30
 801b148:	4616      	mov	r6, r2
 801b14a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801b14e:	4d64      	ldr	r5, [pc, #400]	; (801b2e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b150:	f8df a190 	ldr.w	sl, [pc, #400]	; 801b2e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801b154:	c403      	stmia	r4!, {r0, r1}
 801b156:	6818      	ldr	r0, [r3, #0]
 801b158:	ac0e      	add	r4, sp, #56	; 0x38
 801b15a:	6859      	ldr	r1, [r3, #4]
 801b15c:	c403      	stmia	r4!, {r0, r1}
 801b15e:	a80c      	add	r0, sp, #48	; 0x30
 801b160:	f7fa fb28 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b164:	4631      	mov	r1, r6
 801b166:	a80e      	add	r0, sp, #56	; 0x38
 801b168:	f7fa fb4c 	bl	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b16c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b170:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b174:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b178:	6828      	ldr	r0, [r5, #0]
 801b17a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b17e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801b182:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801b186:	440f      	add	r7, r1
 801b188:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b18c:	440a      	add	r2, r1
 801b18e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b192:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b196:	4413      	add	r3, r2
 801b198:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b19c:	6803      	ldr	r3, [r0, #0]
 801b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1a0:	4798      	blx	r3
 801b1a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b1a6:	6828      	ldr	r0, [r5, #0]
 801b1a8:	d01f      	beq.n	801b1ea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801b1aa:	2201      	movs	r2, #1
 801b1ac:	2500      	movs	r5, #0
 801b1ae:	6801      	ldr	r1, [r0, #0]
 801b1b0:	b2a4      	uxth	r4, r4
 801b1b2:	b2b6      	uxth	r6, r6
 801b1b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b1b8:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801b1bc:	250b      	movs	r5, #11
 801b1be:	9507      	str	r5, [sp, #28]
 801b1c0:	f8ba 5000 	ldrh.w	r5, [sl]
 801b1c4:	f8cd 9010 	str.w	r9, [sp, #16]
 801b1c8:	9602      	str	r6, [sp, #8]
 801b1ca:	9401      	str	r4, [sp, #4]
 801b1cc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801b1d0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b1d4:	9203      	str	r2, [sp, #12]
 801b1d6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b1da:	9200      	str	r2, [sp, #0]
 801b1dc:	4642      	mov	r2, r8
 801b1de:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801b1e0:	4639      	mov	r1, r7
 801b1e2:	47a0      	blx	r4
 801b1e4:	b011      	add	sp, #68	; 0x44
 801b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ea:	6803      	ldr	r3, [r0, #0]
 801b1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1ee:	4798      	blx	r3
 801b1f0:	f8ba 5000 	ldrh.w	r5, [sl]
 801b1f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b1f8:	f04f 0e04 	mov.w	lr, #4
 801b1fc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b200:	436e      	muls	r6, r5
 801b202:	fb05 2303 	mla	r3, r5, r3, r2
 801b206:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b20a:	1b2d      	subs	r5, r5, r4
 801b20c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b214:	4418      	add	r0, r3
 801b216:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b21a:	1982      	adds	r2, r0, r6
 801b21c:	1b1b      	subs	r3, r3, r4
 801b21e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b222:	930b      	str	r3, [sp, #44]	; 0x2c
 801b224:	4290      	cmp	r0, r2
 801b226:	d254      	bcs.n	801b2d2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801b228:	eb00 0a04 	add.w	sl, r0, r4
 801b22c:	4550      	cmp	r0, sl
 801b22e:	d24c      	bcs.n	801b2ca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801b230:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b234:	fb1e e101 	smlabb	r1, lr, r1, lr
 801b238:	eb08 0c01 	add.w	ip, r8, r1
 801b23c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b240:	b173      	cbz	r3, 801b260 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b242:	2bff      	cmp	r3, #255	; 0xff
 801b244:	f818 b001 	ldrb.w	fp, [r8, r1]
 801b248:	d10c      	bne.n	801b264 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b24a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b24e:	d109      	bne.n	801b264 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b250:	f880 b000 	strb.w	fp, [r0]
 801b254:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b258:	7043      	strb	r3, [r0, #1]
 801b25a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b25e:	7083      	strb	r3, [r0, #2]
 801b260:	3003      	adds	r0, #3
 801b262:	e7e3      	b.n	801b22c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801b264:	fb09 f103 	mul.w	r1, r9, r3
 801b268:	1c4b      	adds	r3, r1, #1
 801b26a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b26e:	7801      	ldrb	r1, [r0, #0]
 801b270:	121b      	asrs	r3, r3, #8
 801b272:	b29e      	uxth	r6, r3
 801b274:	43db      	mvns	r3, r3
 801b276:	fb1b fb06 	smulbb	fp, fp, r6
 801b27a:	b2db      	uxtb	r3, r3
 801b27c:	fb01 b103 	mla	r1, r1, r3, fp
 801b280:	b289      	uxth	r1, r1
 801b282:	f101 0b01 	add.w	fp, r1, #1
 801b286:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b28a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b28e:	fb1b fb03 	smulbb	fp, fp, r3
 801b292:	1209      	asrs	r1, r1, #8
 801b294:	7001      	strb	r1, [r0, #0]
 801b296:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801b29a:	fb01 b106 	mla	r1, r1, r6, fp
 801b29e:	b289      	uxth	r1, r1
 801b2a0:	f101 0b01 	add.w	fp, r1, #1
 801b2a4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b2a8:	1209      	asrs	r1, r1, #8
 801b2aa:	7041      	strb	r1, [r0, #1]
 801b2ac:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801b2b0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801b2b4:	fb1c f303 	smulbb	r3, ip, r3
 801b2b8:	fb01 3606 	mla	r6, r1, r6, r3
 801b2bc:	b2b6      	uxth	r6, r6
 801b2be:	1c73      	adds	r3, r6, #1
 801b2c0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801b2c4:	1236      	asrs	r6, r6, #8
 801b2c6:	7086      	strb	r6, [r0, #2]
 801b2c8:	e7ca      	b.n	801b260 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2cc:	4428      	add	r0, r5
 801b2ce:	441f      	add	r7, r3
 801b2d0:	e7a8      	b.n	801b224 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801b2d2:	4b03      	ldr	r3, [pc, #12]	; (801b2e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b2d4:	6818      	ldr	r0, [r3, #0]
 801b2d6:	6803      	ldr	r3, [r0, #0]
 801b2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2da:	4798      	blx	r3
 801b2dc:	e782      	b.n	801b1e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801b2de:	bf00      	nop
 801b2e0:	20011b3c 	.word	0x20011b3c
 801b2e4:	20011b34 	.word	0x20011b34

0801b2e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ec:	b091      	sub	sp, #68	; 0x44
 801b2ee:	4680      	mov	r8, r0
 801b2f0:	460e      	mov	r6, r1
 801b2f2:	6810      	ldr	r0, [r2, #0]
 801b2f4:	6851      	ldr	r1, [r2, #4]
 801b2f6:	ad0c      	add	r5, sp, #48	; 0x30
 801b2f8:	4614      	mov	r4, r2
 801b2fa:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801b2fe:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801b498 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801b302:	f8df a198 	ldr.w	sl, [pc, #408]	; 801b49c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801b306:	c503      	stmia	r5!, {r0, r1}
 801b308:	6818      	ldr	r0, [r3, #0]
 801b30a:	ad0e      	add	r5, sp, #56	; 0x38
 801b30c:	6859      	ldr	r1, [r3, #4]
 801b30e:	c503      	stmia	r5!, {r0, r1}
 801b310:	a80c      	add	r0, sp, #48	; 0x30
 801b312:	f7fa fa4f 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b316:	4621      	mov	r1, r4
 801b318:	a80e      	add	r0, sp, #56	; 0x38
 801b31a:	f7fa fa73 	bl	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b31e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b322:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b326:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b32a:	f8d9 0000 	ldr.w	r0, [r9]
 801b32e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b332:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801b336:	eb08 0401 	add.w	r4, r8, r1
 801b33a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b33e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801b342:	440a      	add	r2, r1
 801b344:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b348:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b34c:	4413      	add	r3, r2
 801b34e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b352:	6803      	ldr	r3, [r0, #0]
 801b354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b356:	4798      	blx	r3
 801b358:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b35c:	f8d9 0000 	ldr.w	r0, [r9]
 801b360:	d022      	beq.n	801b3a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b362:	2200      	movs	r2, #0
 801b364:	f04f 0c01 	mov.w	ip, #1
 801b368:	6801      	ldr	r1, [r0, #0]
 801b36a:	b2ad      	uxth	r5, r5
 801b36c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b370:	e9cd c208 	strd	ip, r2, [sp, #32]
 801b374:	f04f 0c0b 	mov.w	ip, #11
 801b378:	f8cd c01c 	str.w	ip, [sp, #28]
 801b37c:	f8ba c000 	ldrh.w	ip, [sl]
 801b380:	9704      	str	r7, [sp, #16]
 801b382:	9502      	str	r5, [sp, #8]
 801b384:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801b388:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b38c:	9203      	str	r2, [sp, #12]
 801b38e:	fa1f f288 	uxth.w	r2, r8
 801b392:	9201      	str	r2, [sp, #4]
 801b394:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b398:	9200      	str	r2, [sp, #0]
 801b39a:	4632      	mov	r2, r6
 801b39c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801b39e:	4621      	mov	r1, r4
 801b3a0:	47a8      	blx	r5
 801b3a2:	b011      	add	sp, #68	; 0x44
 801b3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3a8:	6803      	ldr	r3, [r0, #0]
 801b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3ac:	4798      	blx	r3
 801b3ae:	f8ba 2000 	ldrh.w	r2, [sl]
 801b3b2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b3b6:	f04f 0e03 	mov.w	lr, #3
 801b3ba:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801b3be:	4355      	muls	r5, r2
 801b3c0:	fa1f fc87 	uxth.w	ip, r7
 801b3c4:	fb02 1303 	mla	r3, r2, r3, r1
 801b3c8:	eba2 0208 	sub.w	r2, r2, r8
 801b3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b3d8:	4418      	add	r0, r3
 801b3da:	920b      	str	r2, [sp, #44]	; 0x2c
 801b3dc:	1943      	adds	r3, r0, r5
 801b3de:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b3e2:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801b3e6:	eba2 0208 	sub.w	r2, r2, r8
 801b3ea:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b3ee:	b2ad      	uxth	r5, r5
 801b3f0:	4298      	cmp	r0, r3
 801b3f2:	d24a      	bcs.n	801b48a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801b3f4:	eb00 0908 	add.w	r9, r0, r8
 801b3f8:	4621      	mov	r1, r4
 801b3fa:	4548      	cmp	r0, r9
 801b3fc:	460c      	mov	r4, r1
 801b3fe:	d240      	bcs.n	801b482 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801b400:	f04f 0a04 	mov.w	sl, #4
 801b404:	7824      	ldrb	r4, [r4, #0]
 801b406:	2fff      	cmp	r7, #255	; 0xff
 801b408:	f101 0101 	add.w	r1, r1, #1
 801b40c:	fb1e a404 	smlabb	r4, lr, r4, sl
 801b410:	eb06 0a04 	add.w	sl, r6, r4
 801b414:	f816 b004 	ldrb.w	fp, [r6, r4]
 801b418:	d02b      	beq.n	801b472 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801b41a:	7804      	ldrb	r4, [r0, #0]
 801b41c:	fb14 f405 	smulbb	r4, r4, r5
 801b420:	fb0b 440c 	mla	r4, fp, ip, r4
 801b424:	b2a4      	uxth	r4, r4
 801b426:	f104 0b01 	add.w	fp, r4, #1
 801b42a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b42e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b432:	fb1b fb05 	smulbb	fp, fp, r5
 801b436:	1224      	asrs	r4, r4, #8
 801b438:	7004      	strb	r4, [r0, #0]
 801b43a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b43e:	fb04 b40c 	mla	r4, r4, ip, fp
 801b442:	b2a4      	uxth	r4, r4
 801b444:	f104 0b01 	add.w	fp, r4, #1
 801b448:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b44c:	1224      	asrs	r4, r4, #8
 801b44e:	7044      	strb	r4, [r0, #1]
 801b450:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b454:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b458:	fb1a fa05 	smulbb	sl, sl, r5
 801b45c:	fb04 a40c 	mla	r4, r4, ip, sl
 801b460:	b2a4      	uxth	r4, r4
 801b462:	f104 0a01 	add.w	sl, r4, #1
 801b466:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b46a:	1224      	asrs	r4, r4, #8
 801b46c:	7084      	strb	r4, [r0, #2]
 801b46e:	3003      	adds	r0, #3
 801b470:	e7c3      	b.n	801b3fa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801b472:	f880 b000 	strb.w	fp, [r0]
 801b476:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b47a:	7044      	strb	r4, [r0, #1]
 801b47c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b480:	e7f4      	b.n	801b46c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801b482:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b484:	4420      	add	r0, r4
 801b486:	188c      	adds	r4, r1, r2
 801b488:	e7b2      	b.n	801b3f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801b48a:	4b03      	ldr	r3, [pc, #12]	; (801b498 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801b48c:	6818      	ldr	r0, [r3, #0]
 801b48e:	6803      	ldr	r3, [r0, #0]
 801b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b492:	4798      	blx	r3
 801b494:	e785      	b.n	801b3a2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801b496:	bf00      	nop
 801b498:	20011b3c 	.word	0x20011b3c
 801b49c:	20011b34 	.word	0x20011b34

0801b4a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b4a0:	b430      	push	{r4, r5}
 801b4a2:	780d      	ldrb	r5, [r1, #0]
 801b4a4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801b4a8:	b11d      	cbz	r5, 801b4b2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801b4aa:	2d01      	cmp	r5, #1
 801b4ac:	d005      	beq.n	801b4ba <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801b4ae:	bc30      	pop	{r4, r5}
 801b4b0:	4770      	bx	lr
 801b4b2:	9402      	str	r4, [sp, #8]
 801b4b4:	bc30      	pop	{r4, r5}
 801b4b6:	f7ff be3f 	b.w	801b138 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b4ba:	9402      	str	r4, [sp, #8]
 801b4bc:	bc30      	pop	{r4, r5}
 801b4be:	f7ff bf13 	b.w	801b2e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801b4c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801b4c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4c8:	4605      	mov	r5, r0
 801b4ca:	b08f      	sub	sp, #60	; 0x3c
 801b4cc:	460c      	mov	r4, r1
 801b4ce:	461f      	mov	r7, r3
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d052      	beq.n	801b57a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801b4d4:	6808      	ldr	r0, [r1, #0]
 801b4d6:	ab0a      	add	r3, sp, #40	; 0x28
 801b4d8:	6849      	ldr	r1, [r1, #4]
 801b4da:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801b6a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801b4de:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801b6a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801b4e2:	c303      	stmia	r3!, {r0, r1}
 801b4e4:	6810      	ldr	r0, [r2, #0]
 801b4e6:	ab0c      	add	r3, sp, #48	; 0x30
 801b4e8:	6851      	ldr	r1, [r2, #4]
 801b4ea:	c303      	stmia	r3!, {r0, r1}
 801b4ec:	a80a      	add	r0, sp, #40	; 0x28
 801b4ee:	f7fa f961 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b4f2:	4621      	mov	r1, r4
 801b4f4:	a80c      	add	r0, sp, #48	; 0x30
 801b4f6:	f7fa f985 	bl	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b4fa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801b4fe:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b502:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b506:	f8d8 0000 	ldr.w	r0, [r8]
 801b50a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b50e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801b512:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801b516:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801b51a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801b51e:	440a      	add	r2, r1
 801b520:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801b524:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801b528:	4413      	add	r3, r2
 801b52a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b52e:	6803      	ldr	r3, [r0, #0]
 801b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b532:	4798      	blx	r3
 801b534:	2fff      	cmp	r7, #255	; 0xff
 801b536:	d023      	beq.n	801b580 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801b538:	f010 0f04 	tst.w	r0, #4
 801b53c:	f8d8 0000 	ldr.w	r0, [r8]
 801b540:	d021      	beq.n	801b586 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801b542:	2100      	movs	r1, #0
 801b544:	f04f 0e01 	mov.w	lr, #1
 801b548:	f8d0 c000 	ldr.w	ip, [r0]
 801b54c:	b2a4      	uxth	r4, r4
 801b54e:	9106      	str	r1, [sp, #24]
 801b550:	b2b6      	uxth	r6, r6
 801b552:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b556:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801b55a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801b55e:	f8b9 e000 	ldrh.w	lr, [r9]
 801b562:	9703      	str	r7, [sp, #12]
 801b564:	9401      	str	r4, [sp, #4]
 801b566:	9600      	str	r6, [sp, #0]
 801b568:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801b56c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b570:	9102      	str	r1, [sp, #8]
 801b572:	4629      	mov	r1, r5
 801b574:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801b578:	47a0      	blx	r4
 801b57a:	b00f      	add	sp, #60	; 0x3c
 801b57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b580:	f010 0f01 	tst.w	r0, #1
 801b584:	e7da      	b.n	801b53c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801b586:	6803      	ldr	r3, [r0, #0]
 801b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b58a:	4798      	blx	r3
 801b58c:	f8b9 1000 	ldrh.w	r1, [r9]
 801b590:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b594:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801b598:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801b59c:	434c      	muls	r4, r1
 801b59e:	2fff      	cmp	r7, #255	; 0xff
 801b5a0:	fb01 2303 	mla	r3, r1, r3, r2
 801b5a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b5a8:	eba1 0106 	sub.w	r1, r1, r6
 801b5ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b5b4:	4418      	add	r0, r3
 801b5b6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801b5ba:	eba3 0606 	sub.w	r6, r3, r6
 801b5be:	4404      	add	r4, r0
 801b5c0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801b5c4:	d04a      	beq.n	801b65c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801b5c6:	43fa      	mvns	r2, r7
 801b5c8:	b2bb      	uxth	r3, r7
 801b5ca:	b2d7      	uxtb	r7, r2
 801b5cc:	42a0      	cmp	r0, r4
 801b5ce:	d263      	bcs.n	801b698 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801b5d0:	eb00 0e0c 	add.w	lr, r0, ip
 801b5d4:	4586      	cmp	lr, r0
 801b5d6:	f100 0803 	add.w	r8, r0, #3
 801b5da:	d93a      	bls.n	801b652 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801b5dc:	f835 2b02 	ldrh.w	r2, [r5], #2
 801b5e0:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801b5e4:	00d0      	lsls	r0, r2, #3
 801b5e6:	fb19 f907 	smulbb	r9, r9, r7
 801b5ea:	b2c0      	uxtb	r0, r0
 801b5ec:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801b5f0:	fb00 9003 	mla	r0, r0, r3, r9
 801b5f4:	b280      	uxth	r0, r0
 801b5f6:	f100 0901 	add.w	r9, r0, #1
 801b5fa:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801b5fe:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801b602:	fb19 f907 	smulbb	r9, r9, r7
 801b606:	1200      	asrs	r0, r0, #8
 801b608:	f808 0c03 	strb.w	r0, [r8, #-3]
 801b60c:	10d0      	asrs	r0, r2, #3
 801b60e:	1212      	asrs	r2, r2, #8
 801b610:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b614:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b618:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801b61c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b620:	fb00 9003 	mla	r0, r0, r3, r9
 801b624:	b280      	uxth	r0, r0
 801b626:	f100 0901 	add.w	r9, r0, #1
 801b62a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801b62e:	1200      	asrs	r0, r0, #8
 801b630:	f808 0c02 	strb.w	r0, [r8, #-2]
 801b634:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801b638:	fb10 f007 	smulbb	r0, r0, r7
 801b63c:	fb02 0203 	mla	r2, r2, r3, r0
 801b640:	b292      	uxth	r2, r2
 801b642:	1c50      	adds	r0, r2, #1
 801b644:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b648:	4640      	mov	r0, r8
 801b64a:	1212      	asrs	r2, r2, #8
 801b64c:	f808 2c01 	strb.w	r2, [r8, #-1]
 801b650:	e7c0      	b.n	801b5d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801b652:	4408      	add	r0, r1
 801b654:	4435      	add	r5, r6
 801b656:	e7b9      	b.n	801b5cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801b658:	4408      	add	r0, r1
 801b65a:	4435      	add	r5, r6
 801b65c:	42a0      	cmp	r0, r4
 801b65e:	d21b      	bcs.n	801b698 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801b660:	eb00 070c 	add.w	r7, r0, ip
 801b664:	42b8      	cmp	r0, r7
 801b666:	d2f7      	bcs.n	801b658 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801b668:	f835 3b02 	ldrh.w	r3, [r5], #2
 801b66c:	3003      	adds	r0, #3
 801b66e:	00da      	lsls	r2, r3, #3
 801b670:	b2d2      	uxtb	r2, r2
 801b672:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b676:	f800 2c03 	strb.w	r2, [r0, #-3]
 801b67a:	10da      	asrs	r2, r3, #3
 801b67c:	121b      	asrs	r3, r3, #8
 801b67e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b682:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b686:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801b68a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801b68e:	f800 2c02 	strb.w	r2, [r0, #-2]
 801b692:	f800 3c01 	strb.w	r3, [r0, #-1]
 801b696:	e7e5      	b.n	801b664 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801b698:	4b02      	ldr	r3, [pc, #8]	; (801b6a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801b69a:	6818      	ldr	r0, [r3, #0]
 801b69c:	6803      	ldr	r3, [r0, #0]
 801b69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6a0:	4798      	blx	r3
 801b6a2:	e76a      	b.n	801b57a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801b6a4:	20011b3c 	.word	0x20011b3c
 801b6a8:	20011b34 	.word	0x20011b34

0801b6ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801b6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6b0:	b08a      	sub	sp, #40	; 0x28
 801b6b2:	460d      	mov	r5, r1
 801b6b4:	4604      	mov	r4, r0
 801b6b6:	461e      	mov	r6, r3
 801b6b8:	6808      	ldr	r0, [r1, #0]
 801b6ba:	ab06      	add	r3, sp, #24
 801b6bc:	6849      	ldr	r1, [r1, #4]
 801b6be:	4f5d      	ldr	r7, [pc, #372]	; (801b834 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801b6c0:	c303      	stmia	r3!, {r0, r1}
 801b6c2:	6810      	ldr	r0, [r2, #0]
 801b6c4:	ab08      	add	r3, sp, #32
 801b6c6:	6851      	ldr	r1, [r2, #4]
 801b6c8:	c303      	stmia	r3!, {r0, r1}
 801b6ca:	a806      	add	r0, sp, #24
 801b6cc:	f7fa f872 	bl	80157b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b6d0:	4629      	mov	r1, r5
 801b6d2:	a808      	add	r0, sp, #32
 801b6d4:	f7fa f896 	bl	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b6d8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b6dc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b6e0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b6e4:	6838      	ldr	r0, [r7, #0]
 801b6e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b6ea:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b6ee:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b6f2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b6f6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b6fa:	440a      	add	r2, r1
 801b6fc:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b700:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b704:	4413      	add	r3, r2
 801b706:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b70a:	6803      	ldr	r3, [r0, #0]
 801b70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b70e:	4798      	blx	r3
 801b710:	2eff      	cmp	r6, #255	; 0xff
 801b712:	d119      	bne.n	801b748 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801b714:	f010 0f20 	tst.w	r0, #32
 801b718:	6838      	ldr	r0, [r7, #0]
 801b71a:	d018      	beq.n	801b74e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801b71c:	b2ad      	uxth	r5, r5
 801b71e:	2700      	movs	r7, #0
 801b720:	6801      	ldr	r1, [r0, #0]
 801b722:	9501      	str	r5, [sp, #4]
 801b724:	fa1f f588 	uxth.w	r5, r8
 801b728:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b72c:	9500      	str	r5, [sp, #0]
 801b72e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b732:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801b736:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b73a:	9602      	str	r6, [sp, #8]
 801b73c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801b73e:	4621      	mov	r1, r4
 801b740:	47a8      	blx	r5
 801b742:	b00a      	add	sp, #40	; 0x28
 801b744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b748:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b74c:	e7e4      	b.n	801b718 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801b74e:	6803      	ldr	r3, [r0, #0]
 801b750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b752:	4798      	blx	r3
 801b754:	4b38      	ldr	r3, [pc, #224]	; (801b838 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801b756:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b75a:	f8b3 c000 	ldrh.w	ip, [r3]
 801b75e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b762:	fb0c f505 	mul.w	r5, ip, r5
 801b766:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801b76a:	fb0c 2303 	mla	r3, ip, r3, r2
 801b76e:	ebac 0c08 	sub.w	ip, ip, r8
 801b772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b776:	ebae 0e08 	sub.w	lr, lr, r8
 801b77a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b77e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b782:	4418      	add	r0, r3
 801b784:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801b788:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b78c:	4405      	add	r5, r0
 801b78e:	42a8      	cmp	r0, r5
 801b790:	d24a      	bcs.n	801b828 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801b792:	eb00 0803 	add.w	r8, r0, r3
 801b796:	4540      	cmp	r0, r8
 801b798:	d243      	bcs.n	801b822 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801b79a:	78e2      	ldrb	r2, [r4, #3]
 801b79c:	b15a      	cbz	r2, 801b7b6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801b79e:	2aff      	cmp	r2, #255	; 0xff
 801b7a0:	f894 9000 	ldrb.w	r9, [r4]
 801b7a4:	d10a      	bne.n	801b7bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b7a6:	2eff      	cmp	r6, #255	; 0xff
 801b7a8:	d108      	bne.n	801b7bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b7aa:	f880 9000 	strb.w	r9, [r0]
 801b7ae:	7862      	ldrb	r2, [r4, #1]
 801b7b0:	7042      	strb	r2, [r0, #1]
 801b7b2:	78a2      	ldrb	r2, [r4, #2]
 801b7b4:	7082      	strb	r2, [r0, #2]
 801b7b6:	3003      	adds	r0, #3
 801b7b8:	3404      	adds	r4, #4
 801b7ba:	e7ec      	b.n	801b796 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801b7bc:	4372      	muls	r2, r6
 801b7be:	1c51      	adds	r1, r2, #1
 801b7c0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801b7c4:	1209      	asrs	r1, r1, #8
 801b7c6:	fa1f fa81 	uxth.w	sl, r1
 801b7ca:	43c9      	mvns	r1, r1
 801b7cc:	fb19 f90a 	smulbb	r9, r9, sl
 801b7d0:	b2ca      	uxtb	r2, r1
 801b7d2:	7801      	ldrb	r1, [r0, #0]
 801b7d4:	fb01 9902 	mla	r9, r1, r2, r9
 801b7d8:	fa1f f989 	uxth.w	r9, r9
 801b7dc:	f109 0101 	add.w	r1, r9, #1
 801b7e0:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801b7e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b7e8:	f880 9000 	strb.w	r9, [r0]
 801b7ec:	f890 9001 	ldrb.w	r9, [r0, #1]
 801b7f0:	7861      	ldrb	r1, [r4, #1]
 801b7f2:	fb19 f902 	smulbb	r9, r9, r2
 801b7f6:	fb01 910a 	mla	r1, r1, sl, r9
 801b7fa:	b289      	uxth	r1, r1
 801b7fc:	f101 0901 	add.w	r9, r1, #1
 801b800:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801b804:	1209      	asrs	r1, r1, #8
 801b806:	7041      	strb	r1, [r0, #1]
 801b808:	7881      	ldrb	r1, [r0, #2]
 801b80a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801b80e:	fb11 f202 	smulbb	r2, r1, r2
 801b812:	fb09 220a 	mla	r2, r9, sl, r2
 801b816:	b292      	uxth	r2, r2
 801b818:	1c51      	adds	r1, r2, #1
 801b81a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b81e:	1212      	asrs	r2, r2, #8
 801b820:	e7c8      	b.n	801b7b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801b822:	4460      	add	r0, ip
 801b824:	4474      	add	r4, lr
 801b826:	e7b2      	b.n	801b78e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801b828:	6838      	ldr	r0, [r7, #0]
 801b82a:	6803      	ldr	r3, [r0, #0]
 801b82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b82e:	4798      	blx	r3
 801b830:	e787      	b.n	801b742 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801b832:	bf00      	nop
 801b834:	20011b3c 	.word	0x20011b3c
 801b838:	20011b34 	.word	0x20011b34

0801b83c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b840:	b085      	sub	sp, #20
 801b842:	4606      	mov	r6, r0
 801b844:	460c      	mov	r4, r1
 801b846:	4691      	mov	r9, r2
 801b848:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801b84c:	4698      	mov	r8, r3
 801b84e:	b31d      	cbz	r5, 801b898 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b850:	4608      	mov	r0, r1
 801b852:	f7fd fa59 	bl	8018d08 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b856:	4607      	mov	r7, r0
 801b858:	4620      	mov	r0, r4
 801b85a:	f7fd fa89 	bl	8018d70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b85e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b862:	4620      	mov	r0, r4
 801b864:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b868:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b86c:	f8ad 700c 	strh.w	r7, [sp, #12]
 801b870:	f7fd fb82 	bl	8018f78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b874:	280b      	cmp	r0, #11
 801b876:	d80f      	bhi.n	801b898 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b878:	e8df f000 	tbb	[pc, r0]
 801b87c:	0e062920 	.word	0x0e062920
 801b880:	0e0e0e0e 	.word	0x0e0e0e0e
 801b884:	110e0e0e 	.word	0x110e0e0e
 801b888:	4620      	mov	r0, r4
 801b88a:	f7fd faf1 	bl	8018e70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b88e:	462b      	mov	r3, r5
 801b890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b892:	a902      	add	r1, sp, #8
 801b894:	f7ff ff0a 	bl	801b6ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b898:	b005      	add	sp, #20
 801b89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b89e:	4620      	mov	r0, r4
 801b8a0:	f7fd fae6 	bl	8018e70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b8a4:	4606      	mov	r6, r0
 801b8a6:	4620      	mov	r0, r4
 801b8a8:	f7fd fb12 	bl	8018ed0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b8ac:	9500      	str	r5, [sp, #0]
 801b8ae:	4601      	mov	r1, r0
 801b8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8b2:	aa02      	add	r2, sp, #8
 801b8b4:	4630      	mov	r0, r6
 801b8b6:	f7ff fdf3 	bl	801b4a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b8ba:	e7ed      	b.n	801b898 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b8bc:	4620      	mov	r0, r4
 801b8be:	f7fd fad7 	bl	8018e70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b8c2:	462b      	mov	r3, r5
 801b8c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8c6:	a902      	add	r1, sp, #8
 801b8c8:	f7ff fdfc 	bl	801b4c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b8cc:	e7e4      	b.n	801b898 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b8ce:	6833      	ldr	r3, [r6, #0]
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	68df      	ldr	r7, [r3, #12]
 801b8d4:	f7fd facc 	bl	8018e70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b8d8:	2300      	movs	r3, #0
 801b8da:	4601      	mov	r1, r0
 801b8dc:	aa02      	add	r2, sp, #8
 801b8de:	4630      	mov	r0, r6
 801b8e0:	e9cd 5300 	strd	r5, r3, [sp]
 801b8e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8e6:	47b8      	blx	r7
 801b8e8:	e7d6      	b.n	801b898 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801b8ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b8ea:	b4f0      	push	{r4, r5, r6, r7}
 801b8ec:	4616      	mov	r6, r2
 801b8ee:	461c      	mov	r4, r3
 801b8f0:	460d      	mov	r5, r1
 801b8f2:	9a04      	ldr	r2, [sp, #16]
 801b8f4:	2e01      	cmp	r6, #1
 801b8f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b8fa:	d00e      	beq.n	801b91a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801b8fc:	d303      	bcc.n	801b906 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801b8fe:	2e02      	cmp	r6, #2
 801b900:	d006      	beq.n	801b910 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801b902:	bcf0      	pop	{r4, r5, r6, r7}
 801b904:	4770      	bx	lr
 801b906:	4621      	mov	r1, r4
 801b908:	4628      	mov	r0, r5
 801b90a:	bcf0      	pop	{r4, r5, r6, r7}
 801b90c:	f7ff bdda 	b.w	801b4c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b910:	4621      	mov	r1, r4
 801b912:	4628      	mov	r0, r5
 801b914:	bcf0      	pop	{r4, r5, r6, r7}
 801b916:	f7ff bec9 	b.w	801b6ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b91a:	6805      	ldr	r5, [r0, #0]
 801b91c:	2600      	movs	r6, #0
 801b91e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801b922:	68ed      	ldr	r5, [r5, #12]
 801b924:	4613      	mov	r3, r2
 801b926:	4622      	mov	r2, r4
 801b928:	46ac      	mov	ip, r5
 801b92a:	bcf0      	pop	{r4, r5, r6, r7}
 801b92c:	4760      	bx	ip
	...

0801b930 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801b930:	b160      	cbz	r0, 801b94c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801b932:	2903      	cmp	r1, #3
 801b934:	d818      	bhi.n	801b968 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b936:	e8df f001 	tbb	[pc, r1]
 801b93a:	1902      	.short	0x1902
 801b93c:	1b06      	.short	0x1b06
 801b93e:	4b0e      	ldr	r3, [pc, #56]	; (801b978 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b940:	8818      	ldrh	r0, [r3, #0]
 801b942:	4240      	negs	r0, r0
 801b944:	4770      	bx	lr
 801b946:	4b0c      	ldr	r3, [pc, #48]	; (801b978 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b948:	8818      	ldrh	r0, [r3, #0]
 801b94a:	4770      	bx	lr
 801b94c:	2903      	cmp	r1, #3
 801b94e:	d80b      	bhi.n	801b968 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b950:	a301      	add	r3, pc, #4	; (adr r3, 801b958 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801b952:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b956:	bf00      	nop
 801b958:	0801b96d 	.word	0x0801b96d
 801b95c:	0801b947 	.word	0x0801b947
 801b960:	0801b971 	.word	0x0801b971
 801b964:	0801b93f 	.word	0x0801b93f
 801b968:	2000      	movs	r0, #0
 801b96a:	4770      	bx	lr
 801b96c:	2001      	movs	r0, #1
 801b96e:	4770      	bx	lr
 801b970:	f04f 30ff 	mov.w	r0, #4294967295
 801b974:	4770      	bx	lr
 801b976:	bf00      	nop
 801b978:	20011b34 	.word	0x20011b34

0801b97c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801b97c:	b160      	cbz	r0, 801b998 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801b97e:	2903      	cmp	r1, #3
 801b980:	d818      	bhi.n	801b9b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b982:	e8df f001 	tbb	[pc, r1]
 801b986:	0219      	.short	0x0219
 801b988:	051b      	.short	0x051b
 801b98a:	4b0e      	ldr	r3, [pc, #56]	; (801b9c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b98c:	8818      	ldrh	r0, [r3, #0]
 801b98e:	4770      	bx	lr
 801b990:	4b0c      	ldr	r3, [pc, #48]	; (801b9c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b992:	8818      	ldrh	r0, [r3, #0]
 801b994:	4240      	negs	r0, r0
 801b996:	4770      	bx	lr
 801b998:	2903      	cmp	r1, #3
 801b99a:	d80b      	bhi.n	801b9b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b99c:	a301      	add	r3, pc, #4	; (adr r3, 801b9a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801b99e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b9a2:	bf00      	nop
 801b9a4:	0801b98b 	.word	0x0801b98b
 801b9a8:	0801b9bd 	.word	0x0801b9bd
 801b9ac:	0801b991 	.word	0x0801b991
 801b9b0:	0801b9b9 	.word	0x0801b9b9
 801b9b4:	2000      	movs	r0, #0
 801b9b6:	4770      	bx	lr
 801b9b8:	2001      	movs	r0, #1
 801b9ba:	4770      	bx	lr
 801b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 801b9c0:	4770      	bx	lr
 801b9c2:	bf00      	nop
 801b9c4:	20011b34 	.word	0x20011b34

0801b9c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9cc:	b097      	sub	sp, #92	; 0x5c
 801b9ce:	910b      	str	r1, [sp, #44]	; 0x2c
 801b9d0:	a912      	add	r1, sp, #72	; 0x48
 801b9d2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801b9d6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801b9da:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801b9de:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801b9e2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801b9e6:	e881 000c 	stmia.w	r1, {r2, r3}
 801b9ea:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801b9ee:	930a      	str	r3, [sp, #40]	; 0x28
 801b9f0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801b9f4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801b9f8:	9311      	str	r3, [sp, #68]	; 0x44
 801b9fa:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801b9fe:	798d      	ldrb	r5, [r1, #6]
 801ba00:	930c      	str	r3, [sp, #48]	; 0x30
 801ba02:	7b4b      	ldrb	r3, [r1, #13]
 801ba04:	0158      	lsls	r0, r3, #5
 801ba06:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ba0a:	4328      	orrs	r0, r5
 801ba0c:	9009      	str	r0, [sp, #36]	; 0x24
 801ba0e:	f000 817c 	beq.w	801bd0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ba12:	011b      	lsls	r3, r3, #4
 801ba14:	79c8      	ldrb	r0, [r1, #7]
 801ba16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba1a:	4303      	orrs	r3, r0
 801ba1c:	930e      	str	r3, [sp, #56]	; 0x38
 801ba1e:	f000 8174 	beq.w	801bd0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ba22:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ba26:	b29b      	uxth	r3, r3
 801ba28:	2f00      	cmp	r7, #0
 801ba2a:	f000 8116 	beq.w	801bc5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801ba2e:	1aff      	subs	r7, r7, r3
 801ba30:	b2bf      	uxth	r7, r7
 801ba32:	043b      	lsls	r3, r7, #16
 801ba34:	d502      	bpl.n	801ba3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ba36:	1bf6      	subs	r6, r6, r7
 801ba38:	2700      	movs	r7, #0
 801ba3a:	b236      	sxth	r6, r6
 801ba3c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ba40:	a812      	add	r0, sp, #72	; 0x48
 801ba42:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ba46:	428e      	cmp	r6, r1
 801ba48:	b28b      	uxth	r3, r1
 801ba4a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801ba4e:	bfbf      	itttt	lt
 801ba50:	18ff      	addlt	r7, r7, r3
 801ba52:	1bbe      	sublt	r6, r7, r6
 801ba54:	b2b7      	uxthlt	r7, r6
 801ba56:	460e      	movlt	r6, r1
 801ba58:	8891      	ldrh	r1, [r2, #4]
 801ba5a:	440b      	add	r3, r1
 801ba5c:	4631      	mov	r1, r6
 801ba5e:	b21b      	sxth	r3, r3
 801ba60:	9310      	str	r3, [sp, #64]	; 0x40
 801ba62:	88d3      	ldrh	r3, [r2, #6]
 801ba64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ba66:	449a      	add	sl, r3
 801ba68:	fa0f f38a 	sxth.w	r3, sl
 801ba6c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ba70:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba72:	4bb5      	ldr	r3, [pc, #724]	; (801bd48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801ba74:	f893 b000 	ldrb.w	fp, [r3]
 801ba78:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ba7c:	f1dc 0300 	rsbs	r3, ip, #0
 801ba80:	eb43 030c 	adc.w	r3, r3, ip
 801ba84:	930d      	str	r3, [sp, #52]	; 0x34
 801ba86:	464b      	mov	r3, r9
 801ba88:	f7f9 fd0e 	bl	80154a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ba8c:	4631      	mov	r1, r6
 801ba8e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801ba92:	464b      	mov	r3, r9
 801ba94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ba96:	a812      	add	r0, sp, #72	; 0x48
 801ba98:	f7f9 fd23 	bl	80154e2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ba9c:	a916      	add	r1, sp, #88	; 0x58
 801ba9e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801baa2:	a815      	add	r0, sp, #84	; 0x54
 801baa4:	f7f9 fe44 	bl	8015730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801baa8:	f1b9 0f00 	cmp.w	r9, #0
 801baac:	f040 80d8 	bne.w	801bc60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801bab0:	f1bb 0f01 	cmp.w	fp, #1
 801bab4:	f040 80dc 	bne.w	801bc70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801bab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801baba:	b153      	cbz	r3, 801bad2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801babc:	2508      	movs	r5, #8
 801babe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bac0:	fb95 f3f8 	sdiv	r3, r5, r8
 801bac4:	1e5d      	subs	r5, r3, #1
 801bac6:	4415      	add	r5, r2
 801bac8:	fb95 f5f3 	sdiv	r5, r5, r3
 801bacc:	fb15 f503 	smulbb	r5, r5, r3
 801bad0:	b2ad      	uxth	r5, r5
 801bad2:	b907      	cbnz	r7, 801bad6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801bad4:	b16c      	cbz	r4, 801baf2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801bad6:	fb04 7305 	mla	r3, r4, r5, r7
 801bada:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801badc:	ebaa 0a04 	sub.w	sl, sl, r4
 801bae0:	fb08 f303 	mul.w	r3, r8, r3
 801bae4:	fa1f fa8a 	uxth.w	sl, sl
 801bae8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801baec:	f003 0407 	and.w	r4, r3, #7
 801baf0:	9226      	str	r2, [sp, #152]	; 0x98
 801baf2:	4649      	mov	r1, r9
 801baf4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801baf6:	f7ff ff1b 	bl	801b930 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801bafa:	4683      	mov	fp, r0
 801bafc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bafe:	f7ff ff3d 	bl	801b97c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801bb02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb06:	4681      	mov	r9, r0
 801bb08:	1a9b      	subs	r3, r3, r2
 801bb0a:	459a      	cmp	sl, r3
 801bb0c:	bfa8      	it	ge
 801bb0e:	469a      	movge	sl, r3
 801bb10:	f1ba 0f00 	cmp.w	sl, #0
 801bb14:	f340 80f9 	ble.w	801bd0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bb18:	1bf6      	subs	r6, r6, r7
 801bb1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb1c:	1b9e      	subs	r6, r3, r6
 801bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb20:	429e      	cmp	r6, r3
 801bb22:	bfd4      	ite	le
 801bb24:	ebc7 0706 	rsble	r7, r7, r6
 801bb28:	ebc7 0703 	rsbgt	r7, r7, r3
 801bb2c:	2f00      	cmp	r7, #0
 801bb2e:	f340 80ec 	ble.w	801bd0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bb32:	1bed      	subs	r5, r5, r7
 801bb34:	fb08 f305 	mul.w	r3, r8, r5
 801bb38:	930d      	str	r3, [sp, #52]	; 0x34
 801bb3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb3c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801bb40:	930e      	str	r3, [sp, #56]	; 0x38
 801bb42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bb48:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb4c:	b2db      	uxtb	r3, r3
 801bb4e:	9310      	str	r3, [sp, #64]	; 0x40
 801bb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	f040 80de 	bne.w	801bd14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801bb58:	4b7c      	ldr	r3, [pc, #496]	; (801bd4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801bb5a:	6818      	ldr	r0, [r3, #0]
 801bb5c:	6803      	ldr	r3, [r0, #0]
 801bb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb60:	4798      	blx	r3
 801bb62:	2301      	movs	r3, #1
 801bb64:	4a7a      	ldr	r2, [pc, #488]	; (801bd50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801bb66:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801bb6a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801bb6e:	fa03 f308 	lsl.w	r3, r3, r8
 801bb72:	8811      	ldrh	r1, [r2, #0]
 801bb74:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801bb78:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801bb7c:	3b01      	subs	r3, #1
 801bb7e:	fb06 bb07 	mla	fp, r6, r7, fp
 801bb82:	b2db      	uxtb	r3, r3
 801bb84:	930a      	str	r3, [sp, #40]	; 0x28
 801bb86:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801bb8a:	fb01 2303 	mla	r3, r1, r3, r2
 801bb8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb92:	18c3      	adds	r3, r0, r3
 801bb94:	9309      	str	r3, [sp, #36]	; 0x24
 801bb96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bb98:	781a      	ldrb	r2, [r3, #0]
 801bb9a:	4122      	asrs	r2, r4
 801bb9c:	b2d2      	uxtb	r2, r2
 801bb9e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801bba2:	f0c0 80d7 	bcc.w	801bd54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801bba6:	46be      	mov	lr, r7
 801bba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bbaa:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801bbae:	f0c0 80ba 	bcc.w	801bd26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801bbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbb4:	4013      	ands	r3, r2
 801bbb6:	d041      	beq.n	801bc3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801bbb8:	20ff      	movs	r0, #255	; 0xff
 801bbba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bbbc:	fb90 f5f5 	sdiv	r5, r0, r5
 801bbc0:	436b      	muls	r3, r5
 801bbc2:	2bfe      	cmp	r3, #254	; 0xfe
 801bbc4:	dd03      	ble.n	801bbce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801bbc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bbc8:	4285      	cmp	r5, r0
 801bbca:	f000 80a5 	beq.w	801bd18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801bbce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bbd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bbd2:	fb15 f303 	smulbb	r3, r5, r3
 801bbd6:	b29b      	uxth	r3, r3
 801bbd8:	1c5d      	adds	r5, r3, #1
 801bbda:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801bbde:	780d      	ldrb	r5, [r1, #0]
 801bbe0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bbe4:	fa1f fc83 	uxth.w	ip, r3
 801bbe8:	43db      	mvns	r3, r3
 801bbea:	fb10 f90c 	smulbb	r9, r0, ip
 801bbee:	b2db      	uxtb	r3, r3
 801bbf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bbf2:	fb05 9503 	mla	r5, r5, r3, r9
 801bbf6:	b2ad      	uxth	r5, r5
 801bbf8:	f105 0901 	add.w	r9, r5, #1
 801bbfc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801bc00:	fb10 f90c 	smulbb	r9, r0, ip
 801bc04:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bc06:	122d      	asrs	r5, r5, #8
 801bc08:	fb10 fc0c 	smulbb	ip, r0, ip
 801bc0c:	700d      	strb	r5, [r1, #0]
 801bc0e:	784d      	ldrb	r5, [r1, #1]
 801bc10:	fb05 9503 	mla	r5, r5, r3, r9
 801bc14:	b2ad      	uxth	r5, r5
 801bc16:	f105 0901 	add.w	r9, r5, #1
 801bc1a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801bc1e:	122d      	asrs	r5, r5, #8
 801bc20:	704d      	strb	r5, [r1, #1]
 801bc22:	788d      	ldrb	r5, [r1, #2]
 801bc24:	fb05 cc03 	mla	ip, r5, r3, ip
 801bc28:	fa1f fc8c 	uxth.w	ip, ip
 801bc2c:	f10c 0301 	add.w	r3, ip, #1
 801bc30:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bc34:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc38:	f881 c002 	strb.w	ip, [r1, #2]
 801bc3c:	4444      	add	r4, r8
 801bc3e:	4431      	add	r1, r6
 801bc40:	b2a4      	uxth	r4, r4
 801bc42:	2c07      	cmp	r4, #7
 801bc44:	bf89      	itett	hi
 801bc46:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801bc48:	fa42 f208 	asrls.w	r2, r2, r8
 801bc4c:	2400      	movhi	r4, #0
 801bc4e:	785a      	ldrbhi	r2, [r3, #1]
 801bc50:	bf8a      	itet	hi
 801bc52:	3301      	addhi	r3, #1
 801bc54:	b2d2      	uxtbls	r2, r2
 801bc56:	9326      	strhi	r3, [sp, #152]	; 0x98
 801bc58:	e7a7      	b.n	801bbaa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801bc5a:	441e      	add	r6, r3
 801bc5c:	b236      	sxth	r6, r6
 801bc5e:	e6ed      	b.n	801ba3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801bc60:	f1b9 0f01 	cmp.w	r9, #1
 801bc64:	f47f af28 	bne.w	801bab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc68:	f1bb 0f01 	cmp.w	fp, #1
 801bc6c:	f47f af24 	bne.w	801bab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc70:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801bd4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801bc74:	f8db 0000 	ldr.w	r0, [fp]
 801bc78:	6803      	ldr	r3, [r0, #0]
 801bc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc7c:	4798      	blx	r3
 801bc7e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801bc82:	465a      	mov	r2, fp
 801bc84:	d006      	beq.n	801bc94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801bc86:	f1b8 0f04 	cmp.w	r8, #4
 801bc8a:	d141      	bne.n	801bd10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801bc8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc8e:	3300      	adds	r3, #0
 801bc90:	bf18      	it	ne
 801bc92:	2301      	movne	r3, #1
 801bc94:	0580      	lsls	r0, r0, #22
 801bc96:	d566      	bpl.n	801bd66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801bc98:	f1b8 0f08 	cmp.w	r8, #8
 801bc9c:	d163      	bne.n	801bd66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	bf0c      	ite	eq
 801bca2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801bca6:	f44f 7180 	movne.w	r1, #256	; 0x100
 801bcaa:	2f00      	cmp	r7, #0
 801bcac:	f47f af04 	bne.w	801bab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bcb0:	2c00      	cmp	r4, #0
 801bcb2:	f47f af01 	bne.w	801bab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bcba:	18f3      	adds	r3, r6, r3
 801bcbc:	4283      	cmp	r3, r0
 801bcbe:	f73f aefb 	bgt.w	801bab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bcc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801bcc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bcc6:	4403      	add	r3, r0
 801bcc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bcca:	4283      	cmp	r3, r0
 801bccc:	f73f aef4 	bgt.w	801bab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bcd0:	f1b8 0f08 	cmp.w	r8, #8
 801bcd4:	6810      	ldr	r0, [r2, #0]
 801bcd6:	f04f 0600 	mov.w	r6, #0
 801bcda:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801bcde:	bf18      	it	ne
 801bce0:	3501      	addne	r5, #1
 801bce2:	6804      	ldr	r4, [r0, #0]
 801bce4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801bce8:	bf18      	it	ne
 801bcea:	f025 0501 	bicne.w	r5, r5, #1
 801bcee:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801bcf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bcf4:	bf18      	it	ne
 801bcf6:	b2ad      	uxthne	r5, r5
 801bcf8:	9104      	str	r1, [sp, #16]
 801bcfa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bcfc:	e9cd 5a00 	strd	r5, sl, [sp]
 801bd00:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801bd04:	9926      	ldr	r1, [sp, #152]	; 0x98
 801bd06:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801bd08:	47a0      	blx	r4
 801bd0a:	b017      	add	sp, #92	; 0x5c
 801bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd10:	2300      	movs	r3, #0
 801bd12:	e7bf      	b.n	801bc94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801bd14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bd16:	e724      	b.n	801bb62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801bd18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd1a:	700b      	strb	r3, [r1, #0]
 801bd1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd1e:	704b      	strb	r3, [r1, #1]
 801bd20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd22:	708b      	strb	r3, [r1, #2]
 801bd24:	e78a      	b.n	801bc3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801bd26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd28:	b153      	cbz	r3, 801bd40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801bd2a:	441c      	add	r4, r3
 801bd2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bd2e:	b2a4      	uxth	r4, r4
 801bd30:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801bd34:	f004 0407 	and.w	r4, r4, #7
 801bd38:	781a      	ldrb	r2, [r3, #0]
 801bd3a:	9326      	str	r3, [sp, #152]	; 0x98
 801bd3c:	4122      	asrs	r2, r4
 801bd3e:	b2d2      	uxtb	r2, r2
 801bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd42:	445b      	add	r3, fp
 801bd44:	9309      	str	r3, [sp, #36]	; 0x24
 801bd46:	e72a      	b.n	801bb9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801bd48:	20011b32 	.word	0x20011b32
 801bd4c:	20011b3c 	.word	0x20011b3c
 801bd50:	20011b34 	.word	0x20011b34
 801bd54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d1d7      	bne.n	801bd0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bd5a:	4b06      	ldr	r3, [pc, #24]	; (801bd74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801bd5c:	6818      	ldr	r0, [r3, #0]
 801bd5e:	6803      	ldr	r3, [r0, #0]
 801bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd62:	4798      	blx	r3
 801bd64:	e7d1      	b.n	801bd0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	f43f aea6 	beq.w	801bab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bd6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801bd70:	e79b      	b.n	801bcaa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801bd72:	bf00      	nop
 801bd74:	20011b3c 	.word	0x20011b3c

0801bd78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801bd78:	b538      	push	{r3, r4, r5, lr}
 801bd7a:	4c15      	ldr	r4, [pc, #84]	; (801bdd0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801bd7c:	4605      	mov	r5, r0
 801bd7e:	7823      	ldrb	r3, [r4, #0]
 801bd80:	f3bf 8f5b 	dmb	ish
 801bd84:	07da      	lsls	r2, r3, #31
 801bd86:	d40b      	bmi.n	801bda0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bd88:	4620      	mov	r0, r4
 801bd8a:	f005 f890 	bl	8020eae <__cxa_guard_acquire>
 801bd8e:	b138      	cbz	r0, 801bda0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bd90:	4620      	mov	r0, r4
 801bd92:	f005 f898 	bl	8020ec6 <__cxa_guard_release>
 801bd96:	4a0f      	ldr	r2, [pc, #60]	; (801bdd4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bd98:	490f      	ldr	r1, [pc, #60]	; (801bdd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bd9a:	4810      	ldr	r0, [pc, #64]	; (801bddc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bd9c:	f005 f880 	bl	8020ea0 <__aeabi_atexit>
 801bda0:	4c0f      	ldr	r4, [pc, #60]	; (801bde0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bda2:	7823      	ldrb	r3, [r4, #0]
 801bda4:	f3bf 8f5b 	dmb	ish
 801bda8:	07db      	lsls	r3, r3, #31
 801bdaa:	d40b      	bmi.n	801bdc4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bdac:	4620      	mov	r0, r4
 801bdae:	f005 f87e 	bl	8020eae <__cxa_guard_acquire>
 801bdb2:	b138      	cbz	r0, 801bdc4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bdb4:	4620      	mov	r0, r4
 801bdb6:	f005 f886 	bl	8020ec6 <__cxa_guard_release>
 801bdba:	4a06      	ldr	r2, [pc, #24]	; (801bdd4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bdbc:	4909      	ldr	r1, [pc, #36]	; (801bde4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bdbe:	480a      	ldr	r0, [pc, #40]	; (801bde8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bdc0:	f005 f86e 	bl	8020ea0 <__aeabi_atexit>
 801bdc4:	4b05      	ldr	r3, [pc, #20]	; (801bddc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bdc6:	612b      	str	r3, [r5, #16]
 801bdc8:	4b07      	ldr	r3, [pc, #28]	; (801bde8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bdca:	616b      	str	r3, [r5, #20]
 801bdcc:	bd38      	pop	{r3, r4, r5, pc}
 801bdce:	bf00      	nop
 801bdd0:	20011c08 	.word	0x20011c08
 801bdd4:	20000000 	.word	0x20000000
 801bdd8:	0801a94f 	.word	0x0801a94f
 801bddc:	20000084 	.word	0x20000084
 801bde0:	20011c0c 	.word	0x20011c0c
 801bde4:	0801a94d 	.word	0x0801a94d
 801bde8:	20000088 	.word	0x20000088

0801bdec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bdec:	b538      	push	{r3, r4, r5, lr}
 801bdee:	4c15      	ldr	r4, [pc, #84]	; (801be44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bdf0:	4605      	mov	r5, r0
 801bdf2:	7823      	ldrb	r3, [r4, #0]
 801bdf4:	f3bf 8f5b 	dmb	ish
 801bdf8:	07da      	lsls	r2, r3, #31
 801bdfa:	d40b      	bmi.n	801be14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f005 f856 	bl	8020eae <__cxa_guard_acquire>
 801be02:	b138      	cbz	r0, 801be14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801be04:	4620      	mov	r0, r4
 801be06:	f005 f85e 	bl	8020ec6 <__cxa_guard_release>
 801be0a:	4a0f      	ldr	r2, [pc, #60]	; (801be48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801be0c:	490f      	ldr	r1, [pc, #60]	; (801be4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801be0e:	4810      	ldr	r0, [pc, #64]	; (801be50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801be10:	f005 f846 	bl	8020ea0 <__aeabi_atexit>
 801be14:	4c0f      	ldr	r4, [pc, #60]	; (801be54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801be16:	7823      	ldrb	r3, [r4, #0]
 801be18:	f3bf 8f5b 	dmb	ish
 801be1c:	07db      	lsls	r3, r3, #31
 801be1e:	d40b      	bmi.n	801be38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801be20:	4620      	mov	r0, r4
 801be22:	f005 f844 	bl	8020eae <__cxa_guard_acquire>
 801be26:	b138      	cbz	r0, 801be38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801be28:	4620      	mov	r0, r4
 801be2a:	f005 f84c 	bl	8020ec6 <__cxa_guard_release>
 801be2e:	4a06      	ldr	r2, [pc, #24]	; (801be48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801be30:	4909      	ldr	r1, [pc, #36]	; (801be58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801be32:	480a      	ldr	r0, [pc, #40]	; (801be5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801be34:	f005 f834 	bl	8020ea0 <__aeabi_atexit>
 801be38:	4b05      	ldr	r3, [pc, #20]	; (801be50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801be3a:	60ab      	str	r3, [r5, #8]
 801be3c:	4b07      	ldr	r3, [pc, #28]	; (801be5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801be3e:	60eb      	str	r3, [r5, #12]
 801be40:	bd38      	pop	{r3, r4, r5, pc}
 801be42:	bf00      	nop
 801be44:	20011be8 	.word	0x20011be8
 801be48:	20000000 	.word	0x20000000
 801be4c:	0801a953 	.word	0x0801a953
 801be50:	20000064 	.word	0x20000064
 801be54:	20011bec 	.word	0x20011bec
 801be58:	0801a951 	.word	0x0801a951
 801be5c:	20000068 	.word	0x20000068

0801be60 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801be60:	b510      	push	{r4, lr}
 801be62:	4604      	mov	r4, r0
 801be64:	f7ff ff88 	bl	801bd78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801be68:	4620      	mov	r0, r4
 801be6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be6e:	f7ff bfbd 	b.w	801bdec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801be74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801be74:	b538      	push	{r3, r4, r5, lr}
 801be76:	4c15      	ldr	r4, [pc, #84]	; (801becc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801be78:	4605      	mov	r5, r0
 801be7a:	7823      	ldrb	r3, [r4, #0]
 801be7c:	f3bf 8f5b 	dmb	ish
 801be80:	07da      	lsls	r2, r3, #31
 801be82:	d40b      	bmi.n	801be9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801be84:	4620      	mov	r0, r4
 801be86:	f005 f812 	bl	8020eae <__cxa_guard_acquire>
 801be8a:	b138      	cbz	r0, 801be9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801be8c:	4620      	mov	r0, r4
 801be8e:	f005 f81a 	bl	8020ec6 <__cxa_guard_release>
 801be92:	4a0f      	ldr	r2, [pc, #60]	; (801bed0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801be94:	490f      	ldr	r1, [pc, #60]	; (801bed4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801be96:	4810      	ldr	r0, [pc, #64]	; (801bed8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801be98:	f005 f802 	bl	8020ea0 <__aeabi_atexit>
 801be9c:	4c0f      	ldr	r4, [pc, #60]	; (801bedc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801be9e:	7823      	ldrb	r3, [r4, #0]
 801bea0:	f3bf 8f5b 	dmb	ish
 801bea4:	07db      	lsls	r3, r3, #31
 801bea6:	d40b      	bmi.n	801bec0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bea8:	4620      	mov	r0, r4
 801beaa:	f005 f800 	bl	8020eae <__cxa_guard_acquire>
 801beae:	b138      	cbz	r0, 801bec0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801beb0:	4620      	mov	r0, r4
 801beb2:	f005 f808 	bl	8020ec6 <__cxa_guard_release>
 801beb6:	4a06      	ldr	r2, [pc, #24]	; (801bed0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801beb8:	4909      	ldr	r1, [pc, #36]	; (801bee0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801beba:	480a      	ldr	r0, [pc, #40]	; (801bee4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bebc:	f004 fff0 	bl	8020ea0 <__aeabi_atexit>
 801bec0:	4b05      	ldr	r3, [pc, #20]	; (801bed8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bec2:	622b      	str	r3, [r5, #32]
 801bec4:	4b07      	ldr	r3, [pc, #28]	; (801bee4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bec6:	626b      	str	r3, [r5, #36]	; 0x24
 801bec8:	bd38      	pop	{r3, r4, r5, pc}
 801beca:	bf00      	nop
 801becc:	20011c10 	.word	0x20011c10
 801bed0:	20000000 	.word	0x20000000
 801bed4:	0801a947 	.word	0x0801a947
 801bed8:	2000008c 	.word	0x2000008c
 801bedc:	20011c14 	.word	0x20011c14
 801bee0:	0801a945 	.word	0x0801a945
 801bee4:	20000090 	.word	0x20000090

0801bee8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801bee8:	b538      	push	{r3, r4, r5, lr}
 801beea:	4c15      	ldr	r4, [pc, #84]	; (801bf40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801beec:	4605      	mov	r5, r0
 801beee:	7823      	ldrb	r3, [r4, #0]
 801bef0:	f3bf 8f5b 	dmb	ish
 801bef4:	07da      	lsls	r2, r3, #31
 801bef6:	d40b      	bmi.n	801bf10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bef8:	4620      	mov	r0, r4
 801befa:	f004 ffd8 	bl	8020eae <__cxa_guard_acquire>
 801befe:	b138      	cbz	r0, 801bf10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bf00:	4620      	mov	r0, r4
 801bf02:	f004 ffe0 	bl	8020ec6 <__cxa_guard_release>
 801bf06:	4a0f      	ldr	r2, [pc, #60]	; (801bf44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bf08:	490f      	ldr	r1, [pc, #60]	; (801bf48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801bf0a:	4810      	ldr	r0, [pc, #64]	; (801bf4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bf0c:	f004 ffc8 	bl	8020ea0 <__aeabi_atexit>
 801bf10:	4c0f      	ldr	r4, [pc, #60]	; (801bf50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801bf12:	7823      	ldrb	r3, [r4, #0]
 801bf14:	f3bf 8f5b 	dmb	ish
 801bf18:	07db      	lsls	r3, r3, #31
 801bf1a:	d40b      	bmi.n	801bf34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f004 ffc6 	bl	8020eae <__cxa_guard_acquire>
 801bf22:	b138      	cbz	r0, 801bf34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bf24:	4620      	mov	r0, r4
 801bf26:	f004 ffce 	bl	8020ec6 <__cxa_guard_release>
 801bf2a:	4a06      	ldr	r2, [pc, #24]	; (801bf44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bf2c:	4909      	ldr	r1, [pc, #36]	; (801bf54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801bf2e:	480a      	ldr	r0, [pc, #40]	; (801bf58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bf30:	f004 ffb6 	bl	8020ea0 <__aeabi_atexit>
 801bf34:	4b05      	ldr	r3, [pc, #20]	; (801bf4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bf36:	61ab      	str	r3, [r5, #24]
 801bf38:	4b07      	ldr	r3, [pc, #28]	; (801bf58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bf3a:	61eb      	str	r3, [r5, #28]
 801bf3c:	bd38      	pop	{r3, r4, r5, pc}
 801bf3e:	bf00      	nop
 801bf40:	20011bf0 	.word	0x20011bf0
 801bf44:	20000000 	.word	0x20000000
 801bf48:	0801a94b 	.word	0x0801a94b
 801bf4c:	2000006c 	.word	0x2000006c
 801bf50:	20011bf4 	.word	0x20011bf4
 801bf54:	0801a949 	.word	0x0801a949
 801bf58:	20000070 	.word	0x20000070

0801bf5c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bf5c:	b510      	push	{r4, lr}
 801bf5e:	4604      	mov	r4, r0
 801bf60:	f7ff ff88 	bl	801be74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801bf64:	4620      	mov	r0, r4
 801bf66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf6a:	f7ff bfbd 	b.w	801bee8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bf70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801bf70:	b538      	push	{r3, r4, r5, lr}
 801bf72:	4c15      	ldr	r4, [pc, #84]	; (801bfc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801bf74:	4605      	mov	r5, r0
 801bf76:	7823      	ldrb	r3, [r4, #0]
 801bf78:	f3bf 8f5b 	dmb	ish
 801bf7c:	07da      	lsls	r2, r3, #31
 801bf7e:	d40b      	bmi.n	801bf98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bf80:	4620      	mov	r0, r4
 801bf82:	f004 ff94 	bl	8020eae <__cxa_guard_acquire>
 801bf86:	b138      	cbz	r0, 801bf98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f004 ff9c 	bl	8020ec6 <__cxa_guard_release>
 801bf8e:	4a0f      	ldr	r2, [pc, #60]	; (801bfcc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bf90:	490f      	ldr	r1, [pc, #60]	; (801bfd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801bf92:	4810      	ldr	r0, [pc, #64]	; (801bfd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bf94:	f004 ff84 	bl	8020ea0 <__aeabi_atexit>
 801bf98:	4c0f      	ldr	r4, [pc, #60]	; (801bfd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801bf9a:	7823      	ldrb	r3, [r4, #0]
 801bf9c:	f3bf 8f5b 	dmb	ish
 801bfa0:	07db      	lsls	r3, r3, #31
 801bfa2:	d40b      	bmi.n	801bfbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	f004 ff82 	bl	8020eae <__cxa_guard_acquire>
 801bfaa:	b138      	cbz	r0, 801bfbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bfac:	4620      	mov	r0, r4
 801bfae:	f004 ff8a 	bl	8020ec6 <__cxa_guard_release>
 801bfb2:	4a06      	ldr	r2, [pc, #24]	; (801bfcc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bfb4:	4909      	ldr	r1, [pc, #36]	; (801bfdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801bfb6:	480a      	ldr	r0, [pc, #40]	; (801bfe0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bfb8:	f004 ff72 	bl	8020ea0 <__aeabi_atexit>
 801bfbc:	4b05      	ldr	r3, [pc, #20]	; (801bfd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bfbe:	632b      	str	r3, [r5, #48]	; 0x30
 801bfc0:	4b07      	ldr	r3, [pc, #28]	; (801bfe0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bfc2:	636b      	str	r3, [r5, #52]	; 0x34
 801bfc4:	bd38      	pop	{r3, r4, r5, pc}
 801bfc6:	bf00      	nop
 801bfc8:	20011bf8 	.word	0x20011bf8
 801bfcc:	20000000 	.word	0x20000000
 801bfd0:	0801a93f 	.word	0x0801a93f
 801bfd4:	20000074 	.word	0x20000074
 801bfd8:	20011bfc 	.word	0x20011bfc
 801bfdc:	0801a93d 	.word	0x0801a93d
 801bfe0:	20000078 	.word	0x20000078

0801bfe4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801bfe4:	b538      	push	{r3, r4, r5, lr}
 801bfe6:	4c15      	ldr	r4, [pc, #84]	; (801c03c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801bfe8:	4605      	mov	r5, r0
 801bfea:	7823      	ldrb	r3, [r4, #0]
 801bfec:	f3bf 8f5b 	dmb	ish
 801bff0:	07da      	lsls	r2, r3, #31
 801bff2:	d40b      	bmi.n	801c00c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bff4:	4620      	mov	r0, r4
 801bff6:	f004 ff5a 	bl	8020eae <__cxa_guard_acquire>
 801bffa:	b138      	cbz	r0, 801c00c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bffc:	4620      	mov	r0, r4
 801bffe:	f004 ff62 	bl	8020ec6 <__cxa_guard_release>
 801c002:	4a0f      	ldr	r2, [pc, #60]	; (801c040 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c004:	490f      	ldr	r1, [pc, #60]	; (801c044 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c006:	4810      	ldr	r0, [pc, #64]	; (801c048 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c008:	f004 ff4a 	bl	8020ea0 <__aeabi_atexit>
 801c00c:	4c0f      	ldr	r4, [pc, #60]	; (801c04c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c00e:	7823      	ldrb	r3, [r4, #0]
 801c010:	f3bf 8f5b 	dmb	ish
 801c014:	07db      	lsls	r3, r3, #31
 801c016:	d40b      	bmi.n	801c030 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c018:	4620      	mov	r0, r4
 801c01a:	f004 ff48 	bl	8020eae <__cxa_guard_acquire>
 801c01e:	b138      	cbz	r0, 801c030 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c020:	4620      	mov	r0, r4
 801c022:	f004 ff50 	bl	8020ec6 <__cxa_guard_release>
 801c026:	4a06      	ldr	r2, [pc, #24]	; (801c040 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c028:	4909      	ldr	r1, [pc, #36]	; (801c050 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c02a:	480a      	ldr	r0, [pc, #40]	; (801c054 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c02c:	f004 ff38 	bl	8020ea0 <__aeabi_atexit>
 801c030:	4b05      	ldr	r3, [pc, #20]	; (801c048 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c032:	62ab      	str	r3, [r5, #40]	; 0x28
 801c034:	4b07      	ldr	r3, [pc, #28]	; (801c054 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c036:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c038:	bd38      	pop	{r3, r4, r5, pc}
 801c03a:	bf00      	nop
 801c03c:	20011bd0 	.word	0x20011bd0
 801c040:	20000000 	.word	0x20000000
 801c044:	0801a943 	.word	0x0801a943
 801c048:	2000004c 	.word	0x2000004c
 801c04c:	20011bd4 	.word	0x20011bd4
 801c050:	0801a941 	.word	0x0801a941
 801c054:	20000050 	.word	0x20000050

0801c058 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c058:	b510      	push	{r4, lr}
 801c05a:	4604      	mov	r4, r0
 801c05c:	f7ff ff88 	bl	801bf70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c060:	4620      	mov	r0, r4
 801c062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c066:	f7ff bfbd 	b.w	801bfe4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c06c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c06c:	b538      	push	{r3, r4, r5, lr}
 801c06e:	4c15      	ldr	r4, [pc, #84]	; (801c0c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c070:	4605      	mov	r5, r0
 801c072:	7823      	ldrb	r3, [r4, #0]
 801c074:	f3bf 8f5b 	dmb	ish
 801c078:	07da      	lsls	r2, r3, #31
 801c07a:	d40b      	bmi.n	801c094 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c07c:	4620      	mov	r0, r4
 801c07e:	f004 ff16 	bl	8020eae <__cxa_guard_acquire>
 801c082:	b138      	cbz	r0, 801c094 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c084:	4620      	mov	r0, r4
 801c086:	f004 ff1e 	bl	8020ec6 <__cxa_guard_release>
 801c08a:	4a0f      	ldr	r2, [pc, #60]	; (801c0c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c08c:	490f      	ldr	r1, [pc, #60]	; (801c0cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c08e:	4810      	ldr	r0, [pc, #64]	; (801c0d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c090:	f004 ff06 	bl	8020ea0 <__aeabi_atexit>
 801c094:	4c0f      	ldr	r4, [pc, #60]	; (801c0d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c096:	7823      	ldrb	r3, [r4, #0]
 801c098:	f3bf 8f5b 	dmb	ish
 801c09c:	07db      	lsls	r3, r3, #31
 801c09e:	d40b      	bmi.n	801c0b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c0a0:	4620      	mov	r0, r4
 801c0a2:	f004 ff04 	bl	8020eae <__cxa_guard_acquire>
 801c0a6:	b138      	cbz	r0, 801c0b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	f004 ff0c 	bl	8020ec6 <__cxa_guard_release>
 801c0ae:	4a06      	ldr	r2, [pc, #24]	; (801c0c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c0b0:	4909      	ldr	r1, [pc, #36]	; (801c0d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c0b2:	480a      	ldr	r0, [pc, #40]	; (801c0dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c0b4:	f004 fef4 	bl	8020ea0 <__aeabi_atexit>
 801c0b8:	4b05      	ldr	r3, [pc, #20]	; (801c0d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c0ba:	642b      	str	r3, [r5, #64]	; 0x40
 801c0bc:	4b07      	ldr	r3, [pc, #28]	; (801c0dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c0be:	646b      	str	r3, [r5, #68]	; 0x44
 801c0c0:	bd38      	pop	{r3, r4, r5, pc}
 801c0c2:	bf00      	nop
 801c0c4:	20011c00 	.word	0x20011c00
 801c0c8:	20000000 	.word	0x20000000
 801c0cc:	0801a937 	.word	0x0801a937
 801c0d0:	2000007c 	.word	0x2000007c
 801c0d4:	20011c04 	.word	0x20011c04
 801c0d8:	0801a935 	.word	0x0801a935
 801c0dc:	20000080 	.word	0x20000080

0801c0e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c0e0:	b538      	push	{r3, r4, r5, lr}
 801c0e2:	4c15      	ldr	r4, [pc, #84]	; (801c138 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c0e4:	4605      	mov	r5, r0
 801c0e6:	7823      	ldrb	r3, [r4, #0]
 801c0e8:	f3bf 8f5b 	dmb	ish
 801c0ec:	07da      	lsls	r2, r3, #31
 801c0ee:	d40b      	bmi.n	801c108 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c0f0:	4620      	mov	r0, r4
 801c0f2:	f004 fedc 	bl	8020eae <__cxa_guard_acquire>
 801c0f6:	b138      	cbz	r0, 801c108 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c0f8:	4620      	mov	r0, r4
 801c0fa:	f004 fee4 	bl	8020ec6 <__cxa_guard_release>
 801c0fe:	4a0f      	ldr	r2, [pc, #60]	; (801c13c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c100:	490f      	ldr	r1, [pc, #60]	; (801c140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c102:	4810      	ldr	r0, [pc, #64]	; (801c144 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c104:	f004 fecc 	bl	8020ea0 <__aeabi_atexit>
 801c108:	4c0f      	ldr	r4, [pc, #60]	; (801c148 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c10a:	7823      	ldrb	r3, [r4, #0]
 801c10c:	f3bf 8f5b 	dmb	ish
 801c110:	07db      	lsls	r3, r3, #31
 801c112:	d40b      	bmi.n	801c12c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c114:	4620      	mov	r0, r4
 801c116:	f004 feca 	bl	8020eae <__cxa_guard_acquire>
 801c11a:	b138      	cbz	r0, 801c12c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c11c:	4620      	mov	r0, r4
 801c11e:	f004 fed2 	bl	8020ec6 <__cxa_guard_release>
 801c122:	4a06      	ldr	r2, [pc, #24]	; (801c13c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c124:	4909      	ldr	r1, [pc, #36]	; (801c14c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c126:	480a      	ldr	r0, [pc, #40]	; (801c150 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c128:	f004 feba 	bl	8020ea0 <__aeabi_atexit>
 801c12c:	4b05      	ldr	r3, [pc, #20]	; (801c144 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c12e:	63ab      	str	r3, [r5, #56]	; 0x38
 801c130:	4b07      	ldr	r3, [pc, #28]	; (801c150 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c132:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c134:	bd38      	pop	{r3, r4, r5, pc}
 801c136:	bf00      	nop
 801c138:	20011be0 	.word	0x20011be0
 801c13c:	20000000 	.word	0x20000000
 801c140:	0801a93b 	.word	0x0801a93b
 801c144:	2000005c 	.word	0x2000005c
 801c148:	20011be4 	.word	0x20011be4
 801c14c:	0801a939 	.word	0x0801a939
 801c150:	20000060 	.word	0x20000060

0801c154 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801c154:	b510      	push	{r4, lr}
 801c156:	4604      	mov	r4, r0
 801c158:	f7ff ff88 	bl	801c06c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c15c:	4620      	mov	r0, r4
 801c15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c162:	f7ff bfbd 	b.w	801c0e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c168 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c168:	b538      	push	{r3, r4, r5, lr}
 801c16a:	4c15      	ldr	r4, [pc, #84]	; (801c1c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c16c:	4605      	mov	r5, r0
 801c16e:	7823      	ldrb	r3, [r4, #0]
 801c170:	f3bf 8f5b 	dmb	ish
 801c174:	07da      	lsls	r2, r3, #31
 801c176:	d40b      	bmi.n	801c190 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c178:	4620      	mov	r0, r4
 801c17a:	f004 fe98 	bl	8020eae <__cxa_guard_acquire>
 801c17e:	b138      	cbz	r0, 801c190 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c180:	4620      	mov	r0, r4
 801c182:	f004 fea0 	bl	8020ec6 <__cxa_guard_release>
 801c186:	4a0f      	ldr	r2, [pc, #60]	; (801c1c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c188:	490f      	ldr	r1, [pc, #60]	; (801c1c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c18a:	4810      	ldr	r0, [pc, #64]	; (801c1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c18c:	f004 fe88 	bl	8020ea0 <__aeabi_atexit>
 801c190:	4c0f      	ldr	r4, [pc, #60]	; (801c1d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c192:	7823      	ldrb	r3, [r4, #0]
 801c194:	f3bf 8f5b 	dmb	ish
 801c198:	07db      	lsls	r3, r3, #31
 801c19a:	d40b      	bmi.n	801c1b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c19c:	4620      	mov	r0, r4
 801c19e:	f004 fe86 	bl	8020eae <__cxa_guard_acquire>
 801c1a2:	b138      	cbz	r0, 801c1b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c1a4:	4620      	mov	r0, r4
 801c1a6:	f004 fe8e 	bl	8020ec6 <__cxa_guard_release>
 801c1aa:	4a06      	ldr	r2, [pc, #24]	; (801c1c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c1ac:	4909      	ldr	r1, [pc, #36]	; (801c1d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c1ae:	480a      	ldr	r0, [pc, #40]	; (801c1d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c1b0:	f004 fe76 	bl	8020ea0 <__aeabi_atexit>
 801c1b4:	4b05      	ldr	r3, [pc, #20]	; (801c1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c1b6:	652b      	str	r3, [r5, #80]	; 0x50
 801c1b8:	4b07      	ldr	r3, [pc, #28]	; (801c1d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c1ba:	656b      	str	r3, [r5, #84]	; 0x54
 801c1bc:	bd38      	pop	{r3, r4, r5, pc}
 801c1be:	bf00      	nop
 801c1c0:	20011bd8 	.word	0x20011bd8
 801c1c4:	20000000 	.word	0x20000000
 801c1c8:	0801a92f 	.word	0x0801a92f
 801c1cc:	20000054 	.word	0x20000054
 801c1d0:	20011bdc 	.word	0x20011bdc
 801c1d4:	0801a92d 	.word	0x0801a92d
 801c1d8:	20000058 	.word	0x20000058

0801c1dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c1dc:	b538      	push	{r3, r4, r5, lr}
 801c1de:	4c15      	ldr	r4, [pc, #84]	; (801c234 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c1e0:	4605      	mov	r5, r0
 801c1e2:	7823      	ldrb	r3, [r4, #0]
 801c1e4:	f3bf 8f5b 	dmb	ish
 801c1e8:	07da      	lsls	r2, r3, #31
 801c1ea:	d40b      	bmi.n	801c204 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f004 fe5e 	bl	8020eae <__cxa_guard_acquire>
 801c1f2:	b138      	cbz	r0, 801c204 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f004 fe66 	bl	8020ec6 <__cxa_guard_release>
 801c1fa:	4a0f      	ldr	r2, [pc, #60]	; (801c238 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c1fc:	490f      	ldr	r1, [pc, #60]	; (801c23c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c1fe:	4810      	ldr	r0, [pc, #64]	; (801c240 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c200:	f004 fe4e 	bl	8020ea0 <__aeabi_atexit>
 801c204:	4c0f      	ldr	r4, [pc, #60]	; (801c244 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c206:	7823      	ldrb	r3, [r4, #0]
 801c208:	f3bf 8f5b 	dmb	ish
 801c20c:	07db      	lsls	r3, r3, #31
 801c20e:	d40b      	bmi.n	801c228 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c210:	4620      	mov	r0, r4
 801c212:	f004 fe4c 	bl	8020eae <__cxa_guard_acquire>
 801c216:	b138      	cbz	r0, 801c228 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c218:	4620      	mov	r0, r4
 801c21a:	f004 fe54 	bl	8020ec6 <__cxa_guard_release>
 801c21e:	4a06      	ldr	r2, [pc, #24]	; (801c238 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c220:	4909      	ldr	r1, [pc, #36]	; (801c248 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c222:	480a      	ldr	r0, [pc, #40]	; (801c24c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c224:	f004 fe3c 	bl	8020ea0 <__aeabi_atexit>
 801c228:	4b05      	ldr	r3, [pc, #20]	; (801c240 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c22a:	64ab      	str	r3, [r5, #72]	; 0x48
 801c22c:	4b07      	ldr	r3, [pc, #28]	; (801c24c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c22e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c230:	bd38      	pop	{r3, r4, r5, pc}
 801c232:	bf00      	nop
 801c234:	20011bc8 	.word	0x20011bc8
 801c238:	20000000 	.word	0x20000000
 801c23c:	0801a933 	.word	0x0801a933
 801c240:	20000044 	.word	0x20000044
 801c244:	20011bcc 	.word	0x20011bcc
 801c248:	0801a931 	.word	0x0801a931
 801c24c:	20000048 	.word	0x20000048

0801c250 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801c250:	b510      	push	{r4, lr}
 801c252:	4604      	mov	r4, r0
 801c254:	f7ff ff88 	bl	801c168 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c258:	4620      	mov	r0, r4
 801c25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c25e:	f7ff bfbd 	b.w	801c1dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801c262 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801c262:	b510      	push	{r4, lr}
 801c264:	4604      	mov	r4, r0
 801c266:	f7ff fff3 	bl	801c250 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801c26a:	4620      	mov	r0, r4
 801c26c:	f7ff ff72 	bl	801c154 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801c270:	4620      	mov	r0, r4
 801c272:	f7ff fe73 	bl	801bf5c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801c276:	4620      	mov	r0, r4
 801c278:	f7ff fdf2 	bl	801be60 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801c27c:	4620      	mov	r0, r4
 801c27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c282:	f7ff bee9 	b.w	801c058 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801c286 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c28a:	b087      	sub	sp, #28
 801c28c:	788d      	ldrb	r5, [r1, #2]
 801c28e:	f891 9000 	ldrb.w	r9, [r1]
 801c292:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801c296:	9501      	str	r5, [sp, #4]
 801c298:	784d      	ldrb	r5, [r1, #1]
 801c29a:	9203      	str	r2, [sp, #12]
 801c29c:	9502      	str	r5, [sp, #8]
 801c29e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c2a2:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801c2a6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801c2aa:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801c2ae:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801c2b2:	fb06 0708 	mla	r7, r6, r8, r0
 801c2b6:	2e00      	cmp	r6, #0
 801c2b8:	eb02 0a07 	add.w	sl, r2, r7
 801c2bc:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801c2c0:	9d01      	ldr	r5, [sp, #4]
 801c2c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801c2c6:	ea45 0509 	orr.w	r5, r5, r9
 801c2ca:	9505      	str	r5, [sp, #20]
 801c2cc:	f2c0 80b2 	blt.w	801c434 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c2d0:	45b3      	cmp	fp, r6
 801c2d2:	f340 80af 	ble.w	801c434 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c2d6:	2800      	cmp	r0, #0
 801c2d8:	f2c0 80aa 	blt.w	801c430 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c2dc:	4580      	cmp	r8, r0
 801c2de:	f340 80a7 	ble.w	801c430 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c2e2:	9a03      	ldr	r2, [sp, #12]
 801c2e4:	5dd7      	ldrb	r7, [r2, r7]
 801c2e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c2ea:	441f      	add	r7, r3
 801c2ec:	1c42      	adds	r2, r0, #1
 801c2ee:	f100 80a4 	bmi.w	801c43a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c2f2:	4590      	cmp	r8, r2
 801c2f4:	f340 80a1 	ble.w	801c43a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c2f8:	2c00      	cmp	r4, #0
 801c2fa:	f000 809e 	beq.w	801c43a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c2fe:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c306:	441d      	add	r5, r3
 801c308:	3601      	adds	r6, #1
 801c30a:	f100 809a 	bmi.w	801c442 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c30e:	45b3      	cmp	fp, r6
 801c310:	f340 8097 	ble.w	801c442 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c314:	f1bc 0f00 	cmp.w	ip, #0
 801c318:	f000 8093 	beq.w	801c442 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c31c:	2800      	cmp	r0, #0
 801c31e:	f2c0 808e 	blt.w	801c43e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c322:	4580      	cmp	r8, r0
 801c324:	f340 808b 	ble.w	801c43e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c328:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801c32c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c330:	441e      	add	r6, r3
 801c332:	3001      	adds	r0, #1
 801c334:	f100 8088 	bmi.w	801c448 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c338:	4580      	cmp	r8, r0
 801c33a:	f340 8085 	ble.w	801c448 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c33e:	2c00      	cmp	r4, #0
 801c340:	f000 8082 	beq.w	801c448 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c344:	44d0      	add	r8, sl
 801c346:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c34a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c34e:	4413      	add	r3, r2
 801c350:	b2a4      	uxth	r4, r4
 801c352:	f895 a000 	ldrb.w	sl, [r5]
 801c356:	fa1f fc8c 	uxth.w	ip, ip
 801c35a:	fb04 fb0c 	mul.w	fp, r4, ip
 801c35e:	0124      	lsls	r4, r4, #4
 801c360:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801c364:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801c368:	eba4 040b 	sub.w	r4, r4, fp
 801c36c:	fa1f f08c 	uxth.w	r0, ip
 801c370:	b2a2      	uxth	r2, r4
 801c372:	783c      	ldrb	r4, [r7, #0]
 801c374:	eba8 0800 	sub.w	r8, r8, r0
 801c378:	fa1f fc8e 	uxth.w	ip, lr
 801c37c:	fb02 fa0a 	mul.w	sl, r2, sl
 801c380:	ea6f 0e0e 	mvn.w	lr, lr
 801c384:	fa1f f888 	uxth.w	r8, r8
 801c388:	fa5f fe8e 	uxtb.w	lr, lr
 801c38c:	fb08 aa04 	mla	sl, r8, r4, sl
 801c390:	7834      	ldrb	r4, [r6, #0]
 801c392:	fb19 f90e 	smulbb	r9, r9, lr
 801c396:	fb00 aa04 	mla	sl, r0, r4, sl
 801c39a:	781c      	ldrb	r4, [r3, #0]
 801c39c:	fb0b a404 	mla	r4, fp, r4, sl
 801c3a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c3a4:	fb04 990c 	mla	r9, r4, ip, r9
 801c3a8:	fa1f f989 	uxth.w	r9, r9
 801c3ac:	f109 0401 	add.w	r4, r9, #1
 801c3b0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c3b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c3b8:	f881 9000 	strb.w	r9, [r1]
 801c3bc:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c3c0:	787c      	ldrb	r4, [r7, #1]
 801c3c2:	fb02 f909 	mul.w	r9, r2, r9
 801c3c6:	fb08 9904 	mla	r9, r8, r4, r9
 801c3ca:	7874      	ldrb	r4, [r6, #1]
 801c3cc:	fb00 9904 	mla	r9, r0, r4, r9
 801c3d0:	785c      	ldrb	r4, [r3, #1]
 801c3d2:	fb0b 9404 	mla	r4, fp, r4, r9
 801c3d6:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801c3da:	9c02      	ldr	r4, [sp, #8]
 801c3dc:	fb14 f90e 	smulbb	r9, r4, lr
 801c3e0:	fb0a 940c 	mla	r4, sl, ip, r9
 801c3e4:	b2a4      	uxth	r4, r4
 801c3e6:	f104 0901 	add.w	r9, r4, #1
 801c3ea:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801c3ee:	1224      	asrs	r4, r4, #8
 801c3f0:	704c      	strb	r4, [r1, #1]
 801c3f2:	78ad      	ldrb	r5, [r5, #2]
 801c3f4:	78bc      	ldrb	r4, [r7, #2]
 801c3f6:	436a      	muls	r2, r5
 801c3f8:	789b      	ldrb	r3, [r3, #2]
 801c3fa:	fb08 2204 	mla	r2, r8, r4, r2
 801c3fe:	78b4      	ldrb	r4, [r6, #2]
 801c400:	fb00 2004 	mla	r0, r0, r4, r2
 801c404:	fb0b 0b03 	mla	fp, fp, r3, r0
 801c408:	9b01      	ldr	r3, [sp, #4]
 801c40a:	fb13 fe0e 	smulbb	lr, r3, lr
 801c40e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801c412:	fb0b ec0c 	mla	ip, fp, ip, lr
 801c416:	fa1f fc8c 	uxth.w	ip, ip
 801c41a:	f10c 0e01 	add.w	lr, ip, #1
 801c41e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801c422:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c426:	f881 c002 	strb.w	ip, [r1, #2]
 801c42a:	b007      	add	sp, #28
 801c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c430:	af05      	add	r7, sp, #20
 801c432:	e75b      	b.n	801c2ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801c434:	ad05      	add	r5, sp, #20
 801c436:	462f      	mov	r7, r5
 801c438:	e766      	b.n	801c308 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c43a:	ad05      	add	r5, sp, #20
 801c43c:	e764      	b.n	801c308 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c43e:	ae05      	add	r6, sp, #20
 801c440:	e777      	b.n	801c332 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801c442:	ab05      	add	r3, sp, #20
 801c444:	461e      	mov	r6, r3
 801c446:	e783      	b.n	801c350 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801c448:	ab05      	add	r3, sp, #20
 801c44a:	e781      	b.n	801c350 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801c44c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c450:	b093      	sub	sp, #76	; 0x4c
 801c452:	9210      	str	r2, [sp, #64]	; 0x40
 801c454:	9309      	str	r3, [sp, #36]	; 0x24
 801c456:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c458:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801c45c:	9011      	str	r0, [sp, #68]	; 0x44
 801c45e:	930e      	str	r3, [sp, #56]	; 0x38
 801c460:	6850      	ldr	r0, [r2, #4]
 801c462:	910d      	str	r1, [sp, #52]	; 0x34
 801c464:	6812      	ldr	r2, [r2, #0]
 801c466:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801c46a:	fb00 1303 	mla	r3, r0, r3, r1
 801c46e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c472:	18d3      	adds	r3, r2, r3
 801c474:	930a      	str	r3, [sp, #40]	; 0x28
 801c476:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	930c      	str	r3, [sp, #48]	; 0x30
 801c47c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c47e:	685c      	ldr	r4, [r3, #4]
 801c480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c482:	3404      	adds	r4, #4
 801c484:	43db      	mvns	r3, r3
 801c486:	b2db      	uxtb	r3, r3
 801c488:	930b      	str	r3, [sp, #44]	; 0x2c
 801c48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	dc03      	bgt.n	801c498 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c492:	2b00      	cmp	r3, #0
 801c494:	f340 8250 	ble.w	801c938 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801c498:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c49a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c49e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c4a2:	1e48      	subs	r0, r1, #1
 801c4a4:	1e55      	subs	r5, r2, #1
 801c4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	f340 80ee 	ble.w	801c68a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801c4ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c4b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c4b2:	1436      	asrs	r6, r6, #16
 801c4b4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c4b8:	d406      	bmi.n	801c4c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c4ba:	4286      	cmp	r6, r0
 801c4bc:	da04      	bge.n	801c4c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	db02      	blt.n	801c4c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c4c2:	42ab      	cmp	r3, r5
 801c4c4:	f2c0 80e2 	blt.w	801c68c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801c4c8:	3601      	adds	r6, #1
 801c4ca:	f100 80cf 	bmi.w	801c66c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c4ce:	42b1      	cmp	r1, r6
 801c4d0:	f2c0 80cc 	blt.w	801c66c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c4d4:	3301      	adds	r3, #1
 801c4d6:	f100 80c9 	bmi.w	801c66c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c4da:	429a      	cmp	r2, r3
 801c4dc:	f2c0 80c6 	blt.w	801c66c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c4e0:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801c4e4:	f1bb 0f00 	cmp.w	fp, #0
 801c4e8:	f340 80f1 	ble.w	801c6ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c4ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c4ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c4f0:	9824      	ldr	r0, [sp, #144]	; 0x90
 801c4f2:	141d      	asrs	r5, r3, #16
 801c4f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4f6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c4fa:	68c7      	ldr	r7, [r0, #12]
 801c4fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c4fe:	1418      	asrs	r0, r3, #16
 801c500:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801c504:	6892      	ldr	r2, [r2, #8]
 801c506:	f100 8137 	bmi.w	801c778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c50a:	f102 3cff 	add.w	ip, r2, #4294967295
 801c50e:	4560      	cmp	r0, ip
 801c510:	f280 8132 	bge.w	801c778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c514:	2d00      	cmp	r5, #0
 801c516:	f2c0 812f 	blt.w	801c778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c51a:	f107 3cff 	add.w	ip, r7, #4294967295
 801c51e:	4565      	cmp	r5, ip
 801c520:	f280 812a 	bge.w	801c778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c524:	b212      	sxth	r2, r2
 801c526:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c528:	fb05 0002 	mla	r0, r5, r2, r0
 801c52c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c52e:	f817 c000 	ldrb.w	ip, [r7, r0]
 801c532:	4405      	add	r5, r0
 801c534:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c538:	eb04 0e0c 	add.w	lr, r4, ip
 801c53c:	f1b8 0f00 	cmp.w	r8, #0
 801c540:	f000 810c 	beq.w	801c75c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801c544:	786f      	ldrb	r7, [r5, #1]
 801c546:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c54a:	4427      	add	r7, r4
 801c54c:	2900      	cmp	r1, #0
 801c54e:	f000 810d 	beq.w	801c76c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801c552:	18a8      	adds	r0, r5, r2
 801c554:	5caa      	ldrb	r2, [r5, r2]
 801c556:	7840      	ldrb	r0, [r0, #1]
 801c558:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c55c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c560:	4422      	add	r2, r4
 801c562:	4420      	add	r0, r4
 801c564:	fa1f f388 	uxth.w	r3, r8
 801c568:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801c56c:	b289      	uxth	r1, r1
 801c56e:	f897 c000 	ldrb.w	ip, [r7]
 801c572:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801c576:	fb03 f901 	mul.w	r9, r3, r1
 801c57a:	011b      	lsls	r3, r3, #4
 801c57c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c580:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801c584:	eba3 0309 	sub.w	r3, r3, r9
 801c588:	b289      	uxth	r1, r1
 801c58a:	b29b      	uxth	r3, r3
 801c58c:	eba8 0801 	sub.w	r8, r8, r1
 801c590:	fb03 fc0c 	mul.w	ip, r3, ip
 801c594:	fa1f f888 	uxth.w	r8, r8
 801c598:	930f      	str	r3, [sp, #60]	; 0x3c
 801c59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c59c:	fb08 cc0a 	mla	ip, r8, sl, ip
 801c5a0:	f892 a000 	ldrb.w	sl, [r2]
 801c5a4:	fb01 cc0a 	mla	ip, r1, sl, ip
 801c5a8:	f890 a000 	ldrb.w	sl, [r0]
 801c5ac:	fb09 cc0a 	mla	ip, r9, sl, ip
 801c5b0:	f896 a000 	ldrb.w	sl, [r6]
 801c5b4:	fb1a fa03 	smulbb	sl, sl, r3
 801c5b8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c5bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c5be:	fb0c ac05 	mla	ip, ip, r5, sl
 801c5c2:	fa1f fc8c 	uxth.w	ip, ip
 801c5c6:	f10c 0a01 	add.w	sl, ip, #1
 801c5ca:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c5ce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c5d2:	f886 a000 	strb.w	sl, [r6]
 801c5d6:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c5da:	f89e a001 	ldrb.w	sl, [lr, #1]
 801c5de:	fb03 fc0c 	mul.w	ip, r3, ip
 801c5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c5e4:	fb08 cc0a 	mla	ip, r8, sl, ip
 801c5e8:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c5ec:	fb01 cc0a 	mla	ip, r1, sl, ip
 801c5f0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c5f4:	fb09 cc0a 	mla	ip, r9, sl, ip
 801c5f8:	f896 a001 	ldrb.w	sl, [r6, #1]
 801c5fc:	fb1a fa03 	smulbb	sl, sl, r3
 801c600:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c606:	fb0c ac05 	mla	ip, ip, r5, sl
 801c60a:	fa1f fc8c 	uxth.w	ip, ip
 801c60e:	f10c 0a01 	add.w	sl, ip, #1
 801c612:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801c616:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c61a:	f886 c001 	strb.w	ip, [r6, #1]
 801c61e:	78bf      	ldrb	r7, [r7, #2]
 801c620:	f89e c002 	ldrb.w	ip, [lr, #2]
 801c624:	437b      	muls	r3, r7
 801c626:	fb08 330c 	mla	r3, r8, ip, r3
 801c62a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801c62e:	7882      	ldrb	r2, [r0, #2]
 801c630:	fb01 310c 	mla	r1, r1, ip, r3
 801c634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c636:	fb09 1902 	mla	r9, r9, r2, r1
 801c63a:	78b1      	ldrb	r1, [r6, #2]
 801c63c:	fb11 f103 	smulbb	r1, r1, r3
 801c640:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c644:	fb09 1505 	mla	r5, r9, r5, r1
 801c648:	b2ad      	uxth	r5, r5
 801c64a:	1c6b      	adds	r3, r5, #1
 801c64c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c650:	122d      	asrs	r5, r5, #8
 801c652:	70b5      	strb	r5, [r6, #2]
 801c654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c656:	3603      	adds	r6, #3
 801c658:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c65a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c65e:	4413      	add	r3, r2
 801c660:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c662:	931d      	str	r3, [sp, #116]	; 0x74
 801c664:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c666:	4413      	add	r3, r2
 801c668:	931e      	str	r3, [sp, #120]	; 0x78
 801c66a:	e73b      	b.n	801c4e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c66c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c66e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801c670:	4433      	add	r3, r6
 801c672:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801c674:	931d      	str	r3, [sp, #116]	; 0x74
 801c676:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c678:	4433      	add	r3, r6
 801c67a:	931e      	str	r3, [sp, #120]	; 0x78
 801c67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c67e:	3b01      	subs	r3, #1
 801c680:	9309      	str	r3, [sp, #36]	; 0x24
 801c682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c684:	3303      	adds	r3, #3
 801c686:	930a      	str	r3, [sp, #40]	; 0x28
 801c688:	e70d      	b.n	801c4a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c68a:	d028      	beq.n	801c6de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c68e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c690:	3b01      	subs	r3, #1
 801c692:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c694:	fb00 5003 	mla	r0, r0, r3, r5
 801c698:	1400      	asrs	r0, r0, #16
 801c69a:	f53f af21 	bmi.w	801c4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c69e:	3901      	subs	r1, #1
 801c6a0:	4288      	cmp	r0, r1
 801c6a2:	f6bf af1d 	bge.w	801c4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c6a6:	9920      	ldr	r1, [sp, #128]	; 0x80
 801c6a8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c6aa:	fb01 0303 	mla	r3, r1, r3, r0
 801c6ae:	141b      	asrs	r3, r3, #16
 801c6b0:	f53f af16 	bmi.w	801c4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c6b4:	3a01      	subs	r2, #1
 801c6b6:	4293      	cmp	r3, r2
 801c6b8:	f6bf af12 	bge.w	801c4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c6c2:	1cdf      	adds	r7, r3, #3
 801c6c4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801c6c8:	f1b9 0f00 	cmp.w	r9, #0
 801c6cc:	dc73      	bgt.n	801c7b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c6d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6da:	441a      	add	r2, r3
 801c6dc:	920a      	str	r2, [sp, #40]	; 0x28
 801c6de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	f340 8129 	ble.w	801c938 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801c6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c6ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c6ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6f4:	eef0 6a62 	vmov.f32	s13, s5
 801c6f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c6fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c700:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c704:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801c708:	eef0 6a43 	vmov.f32	s13, s6
 801c70c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c710:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801c714:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c718:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c71c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c720:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c724:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c728:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c72c:	ee12 2a90 	vmov	r2, s5
 801c730:	eef0 2a47 	vmov.f32	s5, s14
 801c734:	fb92 f3f3 	sdiv	r3, r2, r3
 801c738:	ee13 2a10 	vmov	r2, s6
 801c73c:	931f      	str	r3, [sp, #124]	; 0x7c
 801c73e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c740:	eeb0 3a67 	vmov.f32	s6, s15
 801c744:	fb92 f3f3 	sdiv	r3, r2, r3
 801c748:	9320      	str	r3, [sp, #128]	; 0x80
 801c74a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c74c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c74e:	3b01      	subs	r3, #1
 801c750:	930d      	str	r3, [sp, #52]	; 0x34
 801c752:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c754:	bf08      	it	eq
 801c756:	4613      	moveq	r3, r2
 801c758:	9309      	str	r3, [sp, #36]	; 0x24
 801c75a:	e696      	b.n	801c48a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c75c:	b149      	cbz	r1, 801c772 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c75e:	5caa      	ldrb	r2, [r5, r2]
 801c760:	4670      	mov	r0, lr
 801c762:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c766:	4422      	add	r2, r4
 801c768:	4677      	mov	r7, lr
 801c76a:	e6fb      	b.n	801c564 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c76c:	4670      	mov	r0, lr
 801c76e:	4672      	mov	r2, lr
 801c770:	e6f8      	b.n	801c564 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c772:	4670      	mov	r0, lr
 801c774:	4672      	mov	r2, lr
 801c776:	e7f7      	b.n	801c768 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801c778:	f110 0c01 	adds.w	ip, r0, #1
 801c77c:	f53f af6a 	bmi.w	801c654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c780:	4562      	cmp	r2, ip
 801c782:	f6ff af67 	blt.w	801c654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c786:	f115 0c01 	adds.w	ip, r5, #1
 801c78a:	f53f af63 	bmi.w	801c654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c78e:	4567      	cmp	r7, ip
 801c790:	f6ff af60 	blt.w	801c654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c796:	b23f      	sxth	r7, r7
 801c798:	b212      	sxth	r2, r2
 801c79a:	9002      	str	r0, [sp, #8]
 801c79c:	9701      	str	r7, [sp, #4]
 801c79e:	9200      	str	r2, [sp, #0]
 801c7a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c7a4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801c7a8:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801c7ac:	4623      	mov	r3, r4
 801c7ae:	4631      	mov	r1, r6
 801c7b0:	f7ff fd69 	bl	801c286 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801c7b4:	e74e      	b.n	801c654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c7b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c7b8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c7ba:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c7be:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c7c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c7c2:	1400      	asrs	r0, r0, #16
 801c7c4:	142d      	asrs	r5, r5, #16
 801c7c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c7c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c7cc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c7d0:	fb02 5000 	mla	r0, r2, r0, r5
 801c7d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c7d6:	f815 e000 	ldrb.w	lr, [r5, r0]
 801c7da:	eb05 0c00 	add.w	ip, r5, r0
 801c7de:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c7e2:	eb04 060e 	add.w	r6, r4, lr
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	f000 8097 	beq.w	801c91a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801c7ec:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7f4:	4425      	add	r5, r4
 801c7f6:	2900      	cmp	r1, #0
 801c7f8:	f000 8098 	beq.w	801c92c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801c7fc:	eb0c 0002 	add.w	r0, ip, r2
 801c800:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c804:	7840      	ldrb	r0, [r0, #1]
 801c806:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c80a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c80e:	4422      	add	r2, r4
 801c810:	4420      	add	r0, r4
 801c812:	b29b      	uxth	r3, r3
 801c814:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801c818:	b289      	uxth	r1, r1
 801c81a:	f895 e000 	ldrb.w	lr, [r5]
 801c81e:	3703      	adds	r7, #3
 801c820:	f109 39ff 	add.w	r9, r9, #4294967295
 801c824:	fb03 f801 	mul.w	r8, r3, r1
 801c828:	011b      	lsls	r3, r3, #4
 801c82a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c82e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801c832:	eba3 0308 	sub.w	r3, r3, r8
 801c836:	b289      	uxth	r1, r1
 801c838:	b29b      	uxth	r3, r3
 801c83a:	ebac 0c01 	sub.w	ip, ip, r1
 801c83e:	fb03 fe0e 	mul.w	lr, r3, lr
 801c842:	fa1f fc8c 	uxth.w	ip, ip
 801c846:	930f      	str	r3, [sp, #60]	; 0x3c
 801c848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c84a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c84e:	f892 b000 	ldrb.w	fp, [r2]
 801c852:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c856:	f890 b000 	ldrb.w	fp, [r0]
 801c85a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c85e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801c862:	fb1b fb03 	smulbb	fp, fp, r3
 801c866:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c86a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c86c:	fb0e be0a 	mla	lr, lr, sl, fp
 801c870:	fa1f fe8e 	uxth.w	lr, lr
 801c874:	f10e 0b01 	add.w	fp, lr, #1
 801c878:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c87c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c880:	f807 ec06 	strb.w	lr, [r7, #-6]
 801c884:	f895 e001 	ldrb.w	lr, [r5, #1]
 801c888:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c88c:	fb03 fe0e 	mul.w	lr, r3, lr
 801c890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c892:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c896:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c89a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c89e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c8a2:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c8a6:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801c8aa:	fb1b fb03 	smulbb	fp, fp, r3
 801c8ae:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c8b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c8b4:	fb0e be0a 	mla	lr, lr, sl, fp
 801c8b8:	fa1f fe8e 	uxth.w	lr, lr
 801c8bc:	f10e 0b01 	add.w	fp, lr, #1
 801c8c0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c8c4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c8c8:	f807 ec05 	strb.w	lr, [r7, #-5]
 801c8cc:	78ad      	ldrb	r5, [r5, #2]
 801c8ce:	78b6      	ldrb	r6, [r6, #2]
 801c8d0:	436b      	muls	r3, r5
 801c8d2:	7895      	ldrb	r5, [r2, #2]
 801c8d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c8d6:	fb0c 3306 	mla	r3, ip, r6, r3
 801c8da:	fb01 3305 	mla	r3, r1, r5, r3
 801c8de:	7885      	ldrb	r5, [r0, #2]
 801c8e0:	fb08 3805 	mla	r8, r8, r5, r3
 801c8e4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801c8e8:	fb13 f302 	smulbb	r3, r3, r2
 801c8ec:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c8f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c8f2:	fb08 380a 	mla	r8, r8, sl, r3
 801c8f6:	fa1f f888 	uxth.w	r8, r8
 801c8fa:	f108 0301 	add.w	r3, r8, #1
 801c8fe:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801c902:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c904:	4413      	add	r3, r2
 801c906:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c908:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c90c:	931d      	str	r3, [sp, #116]	; 0x74
 801c90e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c910:	f807 8c04 	strb.w	r8, [r7, #-4]
 801c914:	4413      	add	r3, r2
 801c916:	931e      	str	r3, [sp, #120]	; 0x78
 801c918:	e6d6      	b.n	801c6c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c91a:	b151      	cbz	r1, 801c932 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801c91c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c920:	4630      	mov	r0, r6
 801c922:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c926:	4422      	add	r2, r4
 801c928:	4635      	mov	r5, r6
 801c92a:	e772      	b.n	801c812 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c92c:	4630      	mov	r0, r6
 801c92e:	4632      	mov	r2, r6
 801c930:	e76f      	b.n	801c812 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c932:	4630      	mov	r0, r6
 801c934:	4632      	mov	r2, r6
 801c936:	e7f7      	b.n	801c928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c938:	b013      	add	sp, #76	; 0x4c
 801c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c93e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801c93e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c942:	784c      	ldrb	r4, [r1, #1]
 801c944:	f891 a002 	ldrb.w	sl, [r1, #2]
 801c948:	0224      	lsls	r4, r4, #8
 801c94a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801c94e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801c952:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c956:	f891 a000 	ldrb.w	sl, [r1]
 801c95a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801c95e:	ea44 040a 	orr.w	r4, r4, sl
 801c962:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801c966:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801c96a:	9401      	str	r4, [sp, #4]
 801c96c:	fb05 c70e 	mla	r7, r5, lr, ip
 801c970:	2d00      	cmp	r5, #0
 801c972:	eb02 0807 	add.w	r8, r2, r7
 801c976:	db72      	blt.n	801ca5e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c978:	45a9      	cmp	r9, r5
 801c97a:	dd70      	ble.n	801ca5e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c97c:	f1bc 0f00 	cmp.w	ip, #0
 801c980:	db6b      	blt.n	801ca5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c982:	45e6      	cmp	lr, ip
 801c984:	dd69      	ble.n	801ca5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c986:	5dd7      	ldrb	r7, [r2, r7]
 801c988:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c98c:	441f      	add	r7, r3
 801c98e:	f11c 0201 	adds.w	r2, ip, #1
 801c992:	d467      	bmi.n	801ca64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c994:	4596      	cmp	lr, r2
 801c996:	dd65      	ble.n	801ca64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c998:	2800      	cmp	r0, #0
 801c99a:	d063      	beq.n	801ca64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c99c:	f898 4001 	ldrb.w	r4, [r8, #1]
 801c9a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c9a4:	441c      	add	r4, r3
 801c9a6:	3501      	adds	r5, #1
 801c9a8:	d460      	bmi.n	801ca6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c9aa:	45a9      	cmp	r9, r5
 801c9ac:	dd5e      	ble.n	801ca6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c9ae:	2e00      	cmp	r6, #0
 801c9b0:	d05c      	beq.n	801ca6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c9b2:	f1bc 0f00 	cmp.w	ip, #0
 801c9b6:	db57      	blt.n	801ca68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c9b8:	45e6      	cmp	lr, ip
 801c9ba:	dd55      	ble.n	801ca68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c9bc:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c9c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c9c4:	441d      	add	r5, r3
 801c9c6:	f11c 0201 	adds.w	r2, ip, #1
 801c9ca:	d452      	bmi.n	801ca72 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c9cc:	4596      	cmp	lr, r2
 801c9ce:	dd50      	ble.n	801ca72 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c9d0:	2800      	cmp	r0, #0
 801c9d2:	d04e      	beq.n	801ca72 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c9d4:	44c6      	add	lr, r8
 801c9d6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c9da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c9de:	4413      	add	r3, r2
 801c9e0:	b280      	uxth	r0, r0
 801c9e2:	f897 8000 	ldrb.w	r8, [r7]
 801c9e6:	b2b2      	uxth	r2, r6
 801c9e8:	fb00 f602 	mul.w	r6, r0, r2
 801c9ec:	0100      	lsls	r0, r0, #4
 801c9ee:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801c9f2:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801c9f6:	1b80      	subs	r0, r0, r6
 801c9f8:	fa1f fc82 	uxth.w	ip, r2
 801c9fc:	b282      	uxth	r2, r0
 801c9fe:	7820      	ldrb	r0, [r4, #0]
 801ca00:	ebae 0e0c 	sub.w	lr, lr, ip
 801ca04:	4350      	muls	r0, r2
 801ca06:	fa1f fe8e 	uxth.w	lr, lr
 801ca0a:	fb0e 0808 	mla	r8, lr, r8, r0
 801ca0e:	7828      	ldrb	r0, [r5, #0]
 801ca10:	fb0c 8800 	mla	r8, ip, r0, r8
 801ca14:	7818      	ldrb	r0, [r3, #0]
 801ca16:	fb06 8000 	mla	r0, r6, r0, r8
 801ca1a:	1200      	asrs	r0, r0, #8
 801ca1c:	7008      	strb	r0, [r1, #0]
 801ca1e:	7860      	ldrb	r0, [r4, #1]
 801ca20:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ca24:	4350      	muls	r0, r2
 801ca26:	fb0e 0808 	mla	r8, lr, r8, r0
 801ca2a:	7868      	ldrb	r0, [r5, #1]
 801ca2c:	fb0c 8800 	mla	r8, ip, r0, r8
 801ca30:	7858      	ldrb	r0, [r3, #1]
 801ca32:	fb06 8000 	mla	r0, r6, r0, r8
 801ca36:	1200      	asrs	r0, r0, #8
 801ca38:	7048      	strb	r0, [r1, #1]
 801ca3a:	78a0      	ldrb	r0, [r4, #2]
 801ca3c:	78bf      	ldrb	r7, [r7, #2]
 801ca3e:	4350      	muls	r0, r2
 801ca40:	78aa      	ldrb	r2, [r5, #2]
 801ca42:	fb0e 0007 	mla	r0, lr, r7, r0
 801ca46:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ca4a:	789a      	ldrb	r2, [r3, #2]
 801ca4c:	fb06 c202 	mla	r2, r6, r2, ip
 801ca50:	1212      	asrs	r2, r2, #8
 801ca52:	708a      	strb	r2, [r1, #2]
 801ca54:	b002      	add	sp, #8
 801ca56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca5a:	af01      	add	r7, sp, #4
 801ca5c:	e797      	b.n	801c98e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ca5e:	ac01      	add	r4, sp, #4
 801ca60:	4627      	mov	r7, r4
 801ca62:	e7a0      	b.n	801c9a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ca64:	ac01      	add	r4, sp, #4
 801ca66:	e79e      	b.n	801c9a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ca68:	ad01      	add	r5, sp, #4
 801ca6a:	e7ac      	b.n	801c9c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801ca6c:	ab01      	add	r3, sp, #4
 801ca6e:	461d      	mov	r5, r3
 801ca70:	e7b6      	b.n	801c9e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801ca72:	ab01      	add	r3, sp, #4
 801ca74:	e7b4      	b.n	801c9e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801ca76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca7a:	b08d      	sub	sp, #52	; 0x34
 801ca7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca80:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801ca84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ca86:	900b      	str	r0, [sp, #44]	; 0x2c
 801ca88:	9306      	str	r3, [sp, #24]
 801ca8a:	6850      	ldr	r0, [r2, #4]
 801ca8c:	6812      	ldr	r2, [r2, #0]
 801ca8e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ca90:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801ca94:	fb00 1303 	mla	r3, r0, r3, r1
 801ca98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca9c:	18d3      	adds	r3, r2, r3
 801ca9e:	9307      	str	r3, [sp, #28]
 801caa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	9308      	str	r3, [sp, #32]
 801caa6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801caa8:	685d      	ldr	r5, [r3, #4]
 801caaa:	3504      	adds	r5, #4
 801caac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801caae:	2b00      	cmp	r3, #0
 801cab0:	dc03      	bgt.n	801caba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801cab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	f340 81e6 	ble.w	801ce86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801caba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cabc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cac0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cac4:	1e48      	subs	r0, r1, #1
 801cac6:	1e56      	subs	r6, r2, #1
 801cac8:	9b06      	ldr	r3, [sp, #24]
 801caca:	2b00      	cmp	r3, #0
 801cacc:	f340 80bd 	ble.w	801cc4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801cad0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cad2:	1427      	asrs	r7, r4, #16
 801cad4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801cad8:	d406      	bmi.n	801cae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cada:	4287      	cmp	r7, r0
 801cadc:	da04      	bge.n	801cae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cade:	2b00      	cmp	r3, #0
 801cae0:	db02      	blt.n	801cae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cae2:	42b3      	cmp	r3, r6
 801cae4:	f2c0 80b2 	blt.w	801cc4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801cae8:	3701      	adds	r7, #1
 801caea:	f100 80a1 	bmi.w	801cc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801caee:	42b9      	cmp	r1, r7
 801caf0:	f2c0 809e 	blt.w	801cc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801caf4:	3301      	adds	r3, #1
 801caf6:	f100 809b 	bmi.w	801cc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801cafa:	429a      	cmp	r2, r3
 801cafc:	f2c0 8098 	blt.w	801cc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801cb00:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801cb04:	f1bb 0f00 	cmp.w	fp, #0
 801cb08:	f340 80bf 	ble.w	801cc8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801cb0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cb0e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801cb10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cb12:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cb16:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801cb1a:	1420      	asrs	r0, r4, #16
 801cb1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801cb1e:	ea4f 4723 	mov.w	r7, r3, asr #16
 801cb22:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801cb26:	6892      	ldr	r2, [r2, #8]
 801cb28:	f100 8103 	bmi.w	801cd32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801cb2c:	f102 3eff 	add.w	lr, r2, #4294967295
 801cb30:	4570      	cmp	r0, lr
 801cb32:	f280 80fe 	bge.w	801cd32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801cb36:	2f00      	cmp	r7, #0
 801cb38:	f2c0 80fb 	blt.w	801cd32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801cb3c:	f10c 3eff 	add.w	lr, ip, #4294967295
 801cb40:	4577      	cmp	r7, lr
 801cb42:	f280 80f6 	bge.w	801cd32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801cb46:	b212      	sxth	r2, r2
 801cb48:	fb07 0002 	mla	r0, r7, r2, r0
 801cb4c:	9f08      	ldr	r7, [sp, #32]
 801cb4e:	f817 8000 	ldrb.w	r8, [r7, r0]
 801cb52:	eb07 0e00 	add.w	lr, r7, r0
 801cb56:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cb5a:	eb05 0c08 	add.w	ip, r5, r8
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	f000 80d8 	beq.w	801cd14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801cb64:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801cb68:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb6c:	442f      	add	r7, r5
 801cb6e:	2900      	cmp	r1, #0
 801cb70:	f000 80d9 	beq.w	801cd26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb74:	eb0e 0002 	add.w	r0, lr, r2
 801cb78:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801cb7c:	7840      	ldrb	r0, [r0, #1]
 801cb7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cb86:	442a      	add	r2, r5
 801cb88:	4428      	add	r0, r5
 801cb8a:	b29b      	uxth	r3, r3
 801cb8c:	f815 a008 	ldrb.w	sl, [r5, r8]
 801cb90:	b289      	uxth	r1, r1
 801cb92:	f897 8000 	ldrb.w	r8, [r7]
 801cb96:	fb03 f901 	mul.w	r9, r3, r1
 801cb9a:	011b      	lsls	r3, r3, #4
 801cb9c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cba0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cba4:	eba3 0309 	sub.w	r3, r3, r9
 801cba8:	b289      	uxth	r1, r1
 801cbaa:	b29b      	uxth	r3, r3
 801cbac:	ebae 0e01 	sub.w	lr, lr, r1
 801cbb0:	fb03 f808 	mul.w	r8, r3, r8
 801cbb4:	fa1f fe8e 	uxth.w	lr, lr
 801cbb8:	fb0e 880a 	mla	r8, lr, sl, r8
 801cbbc:	f892 a000 	ldrb.w	sl, [r2]
 801cbc0:	fb01 880a 	mla	r8, r1, sl, r8
 801cbc4:	f890 a000 	ldrb.w	sl, [r0]
 801cbc8:	fb09 880a 	mla	r8, r9, sl, r8
 801cbcc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbd0:	f886 8000 	strb.w	r8, [r6]
 801cbd4:	f897 8001 	ldrb.w	r8, [r7, #1]
 801cbd8:	f89c a001 	ldrb.w	sl, [ip, #1]
 801cbdc:	fb03 f808 	mul.w	r8, r3, r8
 801cbe0:	fb0e 880a 	mla	r8, lr, sl, r8
 801cbe4:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cbe8:	fb01 880a 	mla	r8, r1, sl, r8
 801cbec:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cbf0:	fb09 880a 	mla	r8, r9, sl, r8
 801cbf4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbf8:	f886 8001 	strb.w	r8, [r6, #1]
 801cbfc:	78bf      	ldrb	r7, [r7, #2]
 801cbfe:	f89c c002 	ldrb.w	ip, [ip, #2]
 801cc02:	437b      	muls	r3, r7
 801cc04:	7892      	ldrb	r2, [r2, #2]
 801cc06:	fb0e 330c 	mla	r3, lr, ip, r3
 801cc0a:	fb01 3102 	mla	r1, r1, r2, r3
 801cc0e:	7882      	ldrb	r2, [r0, #2]
 801cc10:	fb09 1902 	mla	r9, r9, r2, r1
 801cc14:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc18:	f886 9002 	strb.w	r9, [r6, #2]
 801cc1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cc1e:	3603      	adds	r6, #3
 801cc20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cc22:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc26:	441c      	add	r4, r3
 801cc28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cc2a:	4413      	add	r3, r2
 801cc2c:	9318      	str	r3, [sp, #96]	; 0x60
 801cc2e:	e769      	b.n	801cb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cc30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cc32:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801cc34:	441c      	add	r4, r3
 801cc36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cc38:	443b      	add	r3, r7
 801cc3a:	9318      	str	r3, [sp, #96]	; 0x60
 801cc3c:	9b06      	ldr	r3, [sp, #24]
 801cc3e:	3b01      	subs	r3, #1
 801cc40:	9306      	str	r3, [sp, #24]
 801cc42:	9b07      	ldr	r3, [sp, #28]
 801cc44:	3303      	adds	r3, #3
 801cc46:	9307      	str	r3, [sp, #28]
 801cc48:	e73e      	b.n	801cac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cc4a:	d026      	beq.n	801cc9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801cc4c:	9b06      	ldr	r3, [sp, #24]
 801cc4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801cc50:	3b01      	subs	r3, #1
 801cc52:	fb00 4003 	mla	r0, r0, r3, r4
 801cc56:	1400      	asrs	r0, r0, #16
 801cc58:	f53f af52 	bmi.w	801cb00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cc5c:	3901      	subs	r1, #1
 801cc5e:	4288      	cmp	r0, r1
 801cc60:	f6bf af4e 	bge.w	801cb00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cc64:	991a      	ldr	r1, [sp, #104]	; 0x68
 801cc66:	9818      	ldr	r0, [sp, #96]	; 0x60
 801cc68:	fb01 0303 	mla	r3, r1, r3, r0
 801cc6c:	141b      	asrs	r3, r3, #16
 801cc6e:	f53f af47 	bmi.w	801cb00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cc72:	3a01      	subs	r2, #1
 801cc74:	4293      	cmp	r3, r2
 801cc76:	f6bf af43 	bge.w	801cb00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cc7a:	9b07      	ldr	r3, [sp, #28]
 801cc7c:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cc80:	f103 0803 	add.w	r8, r3, #3
 801cc84:	f1ba 0f00 	cmp.w	sl, #0
 801cc88:	dc71      	bgt.n	801cd6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801cc8a:	9b06      	ldr	r3, [sp, #24]
 801cc8c:	9a07      	ldr	r2, [sp, #28]
 801cc8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc96:	441a      	add	r2, r3
 801cc98:	9207      	str	r2, [sp, #28]
 801cc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	f340 80f2 	ble.w	801ce86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801cca2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cca6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801cca8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ccac:	eeb0 6a62 	vmov.f32	s12, s5
 801ccb0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ccb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ccb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccbc:	ee16 4a10 	vmov	r4, s12
 801ccc0:	eeb0 6a43 	vmov.f32	s12, s6
 801ccc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccc8:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801cccc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ccd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ccd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ccd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ccdc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cce0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cce4:	ee12 2a90 	vmov	r2, s5
 801cce8:	eef0 2a47 	vmov.f32	s5, s14
 801ccec:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccf0:	ee13 2a10 	vmov	r2, s6
 801ccf4:	9319      	str	r3, [sp, #100]	; 0x64
 801ccf6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ccf8:	eeb0 3a67 	vmov.f32	s6, s15
 801ccfc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd00:	931a      	str	r3, [sp, #104]	; 0x68
 801cd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd06:	3b01      	subs	r3, #1
 801cd08:	9309      	str	r3, [sp, #36]	; 0x24
 801cd0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801cd0c:	bf08      	it	eq
 801cd0e:	4613      	moveq	r3, r2
 801cd10:	9306      	str	r3, [sp, #24]
 801cd12:	e6cb      	b.n	801caac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cd14:	b151      	cbz	r1, 801cd2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cd16:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801cd1a:	4660      	mov	r0, ip
 801cd1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd20:	442a      	add	r2, r5
 801cd22:	4667      	mov	r7, ip
 801cd24:	e731      	b.n	801cb8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801cd26:	4660      	mov	r0, ip
 801cd28:	4662      	mov	r2, ip
 801cd2a:	e72e      	b.n	801cb8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801cd2c:	4660      	mov	r0, ip
 801cd2e:	4662      	mov	r2, ip
 801cd30:	e7f7      	b.n	801cd22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801cd32:	f110 0e01 	adds.w	lr, r0, #1
 801cd36:	f53f af71 	bmi.w	801cc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cd3a:	4572      	cmp	r2, lr
 801cd3c:	f6ff af6e 	blt.w	801cc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cd40:	f117 0e01 	adds.w	lr, r7, #1
 801cd44:	f53f af6a 	bmi.w	801cc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cd48:	45f4      	cmp	ip, lr
 801cd4a:	f6ff af67 	blt.w	801cc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cd4e:	b212      	sxth	r2, r2
 801cd50:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801cd54:	fa0f f38c 	sxth.w	r3, ip
 801cd58:	9200      	str	r2, [sp, #0]
 801cd5a:	4631      	mov	r1, r6
 801cd5c:	9a08      	ldr	r2, [sp, #32]
 801cd5e:	9301      	str	r3, [sp, #4]
 801cd60:	462b      	mov	r3, r5
 801cd62:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801cd66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801cd68:	f7ff fde9 	bl	801c93e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801cd6c:	e756      	b.n	801cc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cd6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cd70:	1426      	asrs	r6, r4, #16
 801cd72:	9818      	ldr	r0, [sp, #96]	; 0x60
 801cd74:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801cd78:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cd7c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801cd7e:	1400      	asrs	r0, r0, #16
 801cd80:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cd84:	fb02 6000 	mla	r0, r2, r0, r6
 801cd88:	9e08      	ldr	r6, [sp, #32]
 801cd8a:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cd8e:	eb06 0c00 	add.w	ip, r6, r0
 801cd92:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cd96:	eb05 070e 	add.w	r7, r5, lr
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d064      	beq.n	801ce68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801cd9e:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801cda2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cda6:	442e      	add	r6, r5
 801cda8:	2900      	cmp	r1, #0
 801cdaa:	d066      	beq.n	801ce7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801cdac:	eb0c 0002 	add.w	r0, ip, r2
 801cdb0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cdb4:	7840      	ldrb	r0, [r0, #1]
 801cdb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cdba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cdbe:	442a      	add	r2, r5
 801cdc0:	4428      	add	r0, r5
 801cdc2:	b29b      	uxth	r3, r3
 801cdc4:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801cdc8:	b289      	uxth	r1, r1
 801cdca:	f896 e000 	ldrb.w	lr, [r6]
 801cdce:	f108 0803 	add.w	r8, r8, #3
 801cdd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cdd6:	fb03 f901 	mul.w	r9, r3, r1
 801cdda:	011b      	lsls	r3, r3, #4
 801cddc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cde0:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801cde4:	eba3 0309 	sub.w	r3, r3, r9
 801cde8:	b289      	uxth	r1, r1
 801cdea:	b29b      	uxth	r3, r3
 801cdec:	ebac 0c01 	sub.w	ip, ip, r1
 801cdf0:	fb03 fe0e 	mul.w	lr, r3, lr
 801cdf4:	fa1f fc8c 	uxth.w	ip, ip
 801cdf8:	fb0c ee0b 	mla	lr, ip, fp, lr
 801cdfc:	f892 b000 	ldrb.w	fp, [r2]
 801ce00:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce04:	f890 b000 	ldrb.w	fp, [r0]
 801ce08:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ce0c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce10:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ce14:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ce18:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ce1c:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce20:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ce24:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ce28:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce2c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ce30:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ce34:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce38:	f808 ec05 	strb.w	lr, [r8, #-5]
 801ce3c:	78b6      	ldrb	r6, [r6, #2]
 801ce3e:	78bf      	ldrb	r7, [r7, #2]
 801ce40:	4373      	muls	r3, r6
 801ce42:	7896      	ldrb	r6, [r2, #2]
 801ce44:	7882      	ldrb	r2, [r0, #2]
 801ce46:	fb0c 3307 	mla	r3, ip, r7, r3
 801ce4a:	fb01 3306 	mla	r3, r1, r6, r3
 801ce4e:	fb09 3902 	mla	r9, r9, r2, r3
 801ce52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ce54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ce56:	441c      	add	r4, r3
 801ce58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ce5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce5e:	4413      	add	r3, r2
 801ce60:	f808 9c04 	strb.w	r9, [r8, #-4]
 801ce64:	9318      	str	r3, [sp, #96]	; 0x60
 801ce66:	e70d      	b.n	801cc84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ce68:	b151      	cbz	r1, 801ce80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801ce6a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ce6e:	4638      	mov	r0, r7
 801ce70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce74:	442a      	add	r2, r5
 801ce76:	463e      	mov	r6, r7
 801ce78:	e7a3      	b.n	801cdc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ce7a:	4638      	mov	r0, r7
 801ce7c:	463a      	mov	r2, r7
 801ce7e:	e7a0      	b.n	801cdc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ce80:	4638      	mov	r0, r7
 801ce82:	463a      	mov	r2, r7
 801ce84:	e7f7      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801ce86:	b00d      	add	sp, #52	; 0x34
 801ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce8c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801ce8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce90:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801ce94:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801ce98:	2d00      	cmp	r5, #0
 801ce9a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801ce9e:	fb05 700c 	mla	r0, r5, ip, r7
 801cea2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801cea6:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801ceaa:	eb02 0800 	add.w	r8, r2, r0
 801ceae:	f2c0 8118 	blt.w	801d0e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801ceb2:	45a9      	cmp	r9, r5
 801ceb4:	f340 8115 	ble.w	801d0e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801ceb8:	2f00      	cmp	r7, #0
 801ceba:	f2c0 8110 	blt.w	801d0de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801cebe:	45bc      	cmp	ip, r7
 801cec0:	f340 810d 	ble.w	801d0de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801cec4:	5c12      	ldrb	r2, [r2, r0]
 801cec6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ceca:	1c7a      	adds	r2, r7, #1
 801cecc:	f100 810c 	bmi.w	801d0e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801ced0:	4594      	cmp	ip, r2
 801ced2:	f340 8109 	ble.w	801d0e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801ced6:	2c00      	cmp	r4, #0
 801ced8:	f000 8108 	beq.w	801d0ec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801cedc:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cee0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cee4:	3501      	adds	r5, #1
 801cee6:	f100 8105 	bmi.w	801d0f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801ceea:	45a9      	cmp	r9, r5
 801ceec:	f340 8102 	ble.w	801d0f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801cef0:	f1be 0f00 	cmp.w	lr, #0
 801cef4:	f000 8101 	beq.w	801d0fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801cef8:	2f00      	cmp	r7, #0
 801cefa:	f2c0 80f9 	blt.w	801d0f0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801cefe:	45bc      	cmp	ip, r7
 801cf00:	f340 80f6 	ble.w	801d0f0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801cf04:	f818 200c 	ldrb.w	r2, [r8, ip]
 801cf08:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cf0c:	3701      	adds	r7, #1
 801cf0e:	f100 80f7 	bmi.w	801d100 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801cf12:	45bc      	cmp	ip, r7
 801cf14:	f340 80f4 	ble.w	801d100 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801cf18:	2c00      	cmp	r4, #0
 801cf1a:	f000 80f3 	beq.w	801d104 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801cf1e:	44c4      	add	ip, r8
 801cf20:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cf24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cf28:	fa1f fc84 	uxth.w	ip, r4
 801cf2c:	fa1f f48e 	uxth.w	r4, lr
 801cf30:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cf34:	fb04 fe0c 	mul.w	lr, r4, ip
 801cf38:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801cf3c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cf40:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801cf44:	ebac 070e 	sub.w	r7, ip, lr
 801cf48:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801cf4c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801cf50:	b2a4      	uxth	r4, r4
 801cf52:	b2bf      	uxth	r7, r7
 801cf54:	1b1b      	subs	r3, r3, r4
 801cf56:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801cf5a:	fb07 fc0a 	mul.w	ip, r7, sl
 801cf5e:	b29b      	uxth	r3, r3
 801cf60:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cf64:	9300      	str	r3, [sp, #0]
 801cf66:	fb04 cc09 	mla	ip, r4, r9, ip
 801cf6a:	fb0e cc08 	mla	ip, lr, r8, ip
 801cf6e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cf72:	9301      	str	r3, [sp, #4]
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	f000 80af 	beq.w	801d0d8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801cf7a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801cf7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cf82:	fb0b fc0c 	mul.w	ip, fp, ip
 801cf86:	fb0b f606 	mul.w	r6, fp, r6
 801cf8a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cf8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cf92:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801cf96:	44dc      	add	ip, fp
 801cf98:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801cf9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cfa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cfa4:	fb0a fb0b 	mul.w	fp, sl, fp
 801cfa8:	fb0a fa00 	mul.w	sl, sl, r0
 801cfac:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801cfb0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801cfb4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801cfb8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cfbc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801cfc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cfc4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801cfc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cfcc:	0a36      	lsrs	r6, r6, #8
 801cfce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cfd2:	44dc      	add	ip, fp
 801cfd4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801cfd8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801cfdc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cfe0:	fb09 fb0b 	mul.w	fp, r9, fp
 801cfe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cfe8:	fb09 f905 	mul.w	r9, r9, r5
 801cfec:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801cff0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cff4:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801cff8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cffc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d000:	fb0c fc07 	mul.w	ip, ip, r7
 801d004:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d008:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801d00c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d010:	4458      	add	r0, fp
 801d012:	fb08 f505 	mul.w	r5, r8, r5
 801d016:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d01a:	fb08 f802 	mul.w	r8, r8, r2
 801d01e:	0a00      	lsrs	r0, r0, #8
 801d020:	0a2a      	lsrs	r2, r5, #8
 801d022:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d026:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d02a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d02e:	4415      	add	r5, r2
 801d030:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d034:	0a2d      	lsrs	r5, r5, #8
 801d036:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d03a:	9a00      	ldr	r2, [sp, #0]
 801d03c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d040:	fb03 cc02 	mla	ip, r3, r2, ip
 801d044:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d048:	9b01      	ldr	r3, [sp, #4]
 801d04a:	fb05 c50e 	mla	r5, r5, lr, ip
 801d04e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d052:	fb00 5004 	mla	r0, r0, r4, r5
 801d056:	0a00      	lsrs	r0, r0, #8
 801d058:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801d05c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801d060:	4378      	muls	r0, r7
 801d062:	fb02 0006 	mla	r0, r2, r6, r0
 801d066:	fb0e 0e08 	mla	lr, lr, r8, r0
 801d06a:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801d06e:	fb04 e000 	mla	r0, r4, r0, lr
 801d072:	0a00      	lsrs	r0, r0, #8
 801d074:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d078:	4328      	orrs	r0, r5
 801d07a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801d07e:	b2ad      	uxth	r5, r5
 801d080:	b2c4      	uxtb	r4, r0
 801d082:	436b      	muls	r3, r5
 801d084:	fb14 f405 	smulbb	r4, r4, r5
 801d088:	1c5a      	adds	r2, r3, #1
 801d08a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d08e:	780b      	ldrb	r3, [r1, #0]
 801d090:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801d094:	b2d2      	uxtb	r2, r2
 801d096:	fb03 4302 	mla	r3, r3, r2, r4
 801d09a:	b29b      	uxth	r3, r3
 801d09c:	1c5c      	adds	r4, r3, #1
 801d09e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d0a2:	784c      	ldrb	r4, [r1, #1]
 801d0a4:	fb14 f402 	smulbb	r4, r4, r2
 801d0a8:	121b      	asrs	r3, r3, #8
 801d0aa:	700b      	strb	r3, [r1, #0]
 801d0ac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801d0b0:	fb03 4305 	mla	r3, r3, r5, r4
 801d0b4:	b29b      	uxth	r3, r3
 801d0b6:	1c5c      	adds	r4, r3, #1
 801d0b8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d0bc:	0c04      	lsrs	r4, r0, #16
 801d0be:	7888      	ldrb	r0, [r1, #2]
 801d0c0:	121b      	asrs	r3, r3, #8
 801d0c2:	fb10 f002 	smulbb	r0, r0, r2
 801d0c6:	704b      	strb	r3, [r1, #1]
 801d0c8:	fb04 0005 	mla	r0, r4, r5, r0
 801d0cc:	b280      	uxth	r0, r0
 801d0ce:	1c43      	adds	r3, r0, #1
 801d0d0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d0d4:	1200      	asrs	r0, r0, #8
 801d0d6:	7088      	strb	r0, [r1, #2]
 801d0d8:	b003      	add	sp, #12
 801d0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0de:	2600      	movs	r6, #0
 801d0e0:	e6f3      	b.n	801ceca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801d0e2:	2000      	movs	r0, #0
 801d0e4:	4606      	mov	r6, r0
 801d0e6:	e6fd      	b.n	801cee4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d0e8:	2000      	movs	r0, #0
 801d0ea:	e6fb      	b.n	801cee4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d0ec:	4620      	mov	r0, r4
 801d0ee:	e6f9      	b.n	801cee4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d0f0:	2500      	movs	r5, #0
 801d0f2:	e70b      	b.n	801cf0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801d0f4:	2200      	movs	r2, #0
 801d0f6:	4615      	mov	r5, r2
 801d0f8:	e716      	b.n	801cf28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d0fa:	4672      	mov	r2, lr
 801d0fc:	4675      	mov	r5, lr
 801d0fe:	e713      	b.n	801cf28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d100:	2200      	movs	r2, #0
 801d102:	e711      	b.n	801cf28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d104:	4622      	mov	r2, r4
 801d106:	e70f      	b.n	801cf28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801d108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d10c:	b09f      	sub	sp, #124	; 0x7c
 801d10e:	921b      	str	r2, [sp, #108]	; 0x6c
 801d110:	9309      	str	r3, [sp, #36]	; 0x24
 801d112:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d114:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d118:	901d      	str	r0, [sp, #116]	; 0x74
 801d11a:	931c      	str	r3, [sp, #112]	; 0x70
 801d11c:	6850      	ldr	r0, [r2, #4]
 801d11e:	9119      	str	r1, [sp, #100]	; 0x64
 801d120:	6812      	ldr	r2, [r2, #0]
 801d122:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801d124:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d128:	fb00 1303 	mla	r3, r0, r3, r1
 801d12c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d130:	18d3      	adds	r3, r2, r3
 801d132:	930c      	str	r3, [sp, #48]	; 0x30
 801d134:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	9312      	str	r3, [sp, #72]	; 0x48
 801d13a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d13c:	685e      	ldr	r6, [r3, #4]
 801d13e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801d142:	3604      	adds	r6, #4
 801d144:	930d      	str	r3, [sp, #52]	; 0x34
 801d146:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d148:	2b00      	cmp	r3, #0
 801d14a:	dc03      	bgt.n	801d154 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d14c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d14e:	2b00      	cmp	r3, #0
 801d150:	f340 8378 	ble.w	801d844 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801d154:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d156:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d15a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d15e:	1e48      	subs	r0, r1, #1
 801d160:	1e57      	subs	r7, r2, #1
 801d162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d164:	2b00      	cmp	r3, #0
 801d166:	f340 818c 	ble.w	801d482 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801d16a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d16c:	142b      	asrs	r3, r5, #16
 801d16e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d172:	d406      	bmi.n	801d182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d174:	4584      	cmp	ip, r0
 801d176:	da04      	bge.n	801d182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d178:	2b00      	cmp	r3, #0
 801d17a:	db02      	blt.n	801d182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d17c:	42bb      	cmp	r3, r7
 801d17e:	f2c0 8181 	blt.w	801d484 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d182:	f11c 0c01 	adds.w	ip, ip, #1
 801d186:	f100 816f 	bmi.w	801d468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d18a:	4561      	cmp	r1, ip
 801d18c:	f2c0 816c 	blt.w	801d468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d190:	3301      	adds	r3, #1
 801d192:	f100 8169 	bmi.w	801d468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d196:	429a      	cmp	r2, r3
 801d198:	f2c0 8166 	blt.w	801d468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d19e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d1a0:	931a      	str	r3, [sp, #104]	; 0x68
 801d1a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	f340 818c 	ble.w	801d4c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801d1aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d1ac:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d1b0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d1b4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d1b8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d1ba:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d1be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d1c0:	141b      	asrs	r3, r3, #16
 801d1c2:	f100 81d0 	bmi.w	801d566 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d1c6:	f100 38ff 	add.w	r8, r0, #4294967295
 801d1ca:	4543      	cmp	r3, r8
 801d1cc:	f280 81cb 	bge.w	801d566 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d1d0:	f1bc 0f00 	cmp.w	ip, #0
 801d1d4:	f2c0 81c7 	blt.w	801d566 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d1d8:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d1dc:	45c4      	cmp	ip, r8
 801d1de:	f280 81c2 	bge.w	801d566 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d1e2:	b200      	sxth	r0, r0
 801d1e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d1e6:	fb0c 3300 	mla	r3, ip, r0, r3
 801d1ea:	eb04 0803 	add.w	r8, r4, r3
 801d1ee:	5ce3      	ldrb	r3, [r4, r3]
 801d1f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d1f4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d1f8:	2a00      	cmp	r2, #0
 801d1fa:	f000 81a9 	beq.w	801d550 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801d1fe:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d202:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d206:	940e      	str	r4, [sp, #56]	; 0x38
 801d208:	0e24      	lsrs	r4, r4, #24
 801d20a:	9415      	str	r4, [sp, #84]	; 0x54
 801d20c:	b179      	cbz	r1, 801d22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d20e:	eb08 0c00 	add.w	ip, r8, r0
 801d212:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d216:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d21a:	900a      	str	r0, [sp, #40]	; 0x28
 801d21c:	0e00      	lsrs	r0, r0, #24
 801d21e:	9013      	str	r0, [sp, #76]	; 0x4c
 801d220:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d224:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d228:	900f      	str	r0, [sp, #60]	; 0x3c
 801d22a:	0e00      	lsrs	r0, r0, #24
 801d22c:	9016      	str	r0, [sp, #88]	; 0x58
 801d22e:	b292      	uxth	r2, r2
 801d230:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d232:	b289      	uxth	r1, r1
 801d234:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d236:	fb02 f901 	mul.w	r9, r2, r1
 801d23a:	0112      	lsls	r2, r2, #4
 801d23c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d240:	eba2 0809 	sub.w	r8, r2, r9
 801d244:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d248:	b289      	uxth	r1, r1
 801d24a:	fa1f f888 	uxth.w	r8, r8
 801d24e:	1a52      	subs	r2, r2, r1
 801d250:	fb08 f000 	mul.w	r0, r8, r0
 801d254:	b292      	uxth	r2, r2
 801d256:	fb02 000e 	mla	r0, r2, lr, r0
 801d25a:	fb01 0004 	mla	r0, r1, r4, r0
 801d25e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d260:	fb09 0004 	mla	r0, r9, r4, r0
 801d264:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d268:	2800      	cmp	r0, #0
 801d26a:	f000 80f2 	beq.w	801d452 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d26e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d272:	d01b      	beq.n	801d2ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d274:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d278:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d27c:	fb0e fa0a 	mul.w	sl, lr, sl
 801d280:	fb0e fe03 	mul.w	lr, lr, r3
 801d284:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d288:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d28c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d290:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d294:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d298:	4453      	add	r3, sl
 801d29a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d29e:	0a1b      	lsrs	r3, r3, #8
 801d2a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d2a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d2a8:	ea43 030c 	orr.w	r3, r3, ip
 801d2ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d2ae:	2cff      	cmp	r4, #255	; 0xff
 801d2b0:	d021      	beq.n	801d2f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801d2b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d2b4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d2b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d2ba:	fb04 fb0b 	mul.w	fp, r4, fp
 801d2be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d2c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d2c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d2c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d2ca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d2ce:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d2da:	44de      	add	lr, fp
 801d2dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d2e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d2e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d2f0:	ea4e 040a 	orr.w	r4, lr, sl
 801d2f4:	940e      	str	r4, [sp, #56]	; 0x38
 801d2f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d2f8:	2cff      	cmp	r4, #255	; 0xff
 801d2fa:	d021      	beq.n	801d340 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d2fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d2fe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d302:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d304:	fb04 fb0b 	mul.w	fp, r4, fp
 801d308:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d30a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d30e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d310:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d314:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d318:	fb04 fa0a 	mul.w	sl, r4, sl
 801d31c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d320:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d324:	44de      	add	lr, fp
 801d326:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d32a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d32e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d332:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d336:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d33a:	ea4e 040a 	orr.w	r4, lr, sl
 801d33e:	940a      	str	r4, [sp, #40]	; 0x28
 801d340:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d342:	2cff      	cmp	r4, #255	; 0xff
 801d344:	d021      	beq.n	801d38a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d346:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d348:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d34c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d34e:	fb04 fb0b 	mul.w	fp, r4, fp
 801d352:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d354:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d358:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d35a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d35e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d362:	fb04 fa0a 	mul.w	sl, r4, sl
 801d366:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d36a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d36e:	44de      	add	lr, fp
 801d370:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d374:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d378:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d37c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d380:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d384:	ea4e 040a 	orr.w	r4, lr, sl
 801d388:	940f      	str	r4, [sp, #60]	; 0x3c
 801d38a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d38c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d394:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d398:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d39a:	fb08 fc0c 	mul.w	ip, r8, ip
 801d39e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d3a2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d3a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d3a8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d3ac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d3b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d3b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d3b6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d3ba:	fb08 f80e 	mul.w	r8, r8, lr
 801d3be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d3c2:	fb02 8303 	mla	r3, r2, r3, r8
 801d3c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3cc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d3d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d3d2:	fb01 330a 	mla	r3, r1, sl, r3
 801d3d6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801d3da:	fb09 3901 	mla	r9, r9, r1, r3
 801d3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d3e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d3e2:	4343      	muls	r3, r0
 801d3e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d3e8:	1c58      	adds	r0, r3, #1
 801d3ea:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d3ee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d3f2:	ea4c 0c09 	orr.w	ip, ip, r9
 801d3f6:	783b      	ldrb	r3, [r7, #0]
 801d3f8:	fa5f f28c 	uxtb.w	r2, ip
 801d3fc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d400:	fb12 f201 	smulbb	r2, r2, r1
 801d404:	b2c0      	uxtb	r0, r0
 801d406:	fb03 2300 	mla	r3, r3, r0, r2
 801d40a:	b29b      	uxth	r3, r3
 801d40c:	1c5a      	adds	r2, r3, #1
 801d40e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d412:	787a      	ldrb	r2, [r7, #1]
 801d414:	fb12 f200 	smulbb	r2, r2, r0
 801d418:	121b      	asrs	r3, r3, #8
 801d41a:	703b      	strb	r3, [r7, #0]
 801d41c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d420:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d424:	fb03 2301 	mla	r3, r3, r1, r2
 801d428:	b29b      	uxth	r3, r3
 801d42a:	1c5a      	adds	r2, r3, #1
 801d42c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d430:	121b      	asrs	r3, r3, #8
 801d432:	707b      	strb	r3, [r7, #1]
 801d434:	78bb      	ldrb	r3, [r7, #2]
 801d436:	fb13 f000 	smulbb	r0, r3, r0
 801d43a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801d43e:	fa1f fc8c 	uxth.w	ip, ip
 801d442:	f10c 0301 	add.w	r3, ip, #1
 801d446:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d44a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d44e:	f887 c002 	strb.w	ip, [r7, #2]
 801d452:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d454:	3703      	adds	r7, #3
 801d456:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d458:	441a      	add	r2, r3
 801d45a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d45c:	441d      	add	r5, r3
 801d45e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d460:	9229      	str	r2, [sp, #164]	; 0xa4
 801d462:	3b01      	subs	r3, #1
 801d464:	931a      	str	r3, [sp, #104]	; 0x68
 801d466:	e69c      	b.n	801d1a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d468:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d46a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d46c:	441c      	add	r4, r3
 801d46e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d470:	441d      	add	r5, r3
 801d472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d474:	9429      	str	r4, [sp, #164]	; 0xa4
 801d476:	3b01      	subs	r3, #1
 801d478:	9309      	str	r3, [sp, #36]	; 0x24
 801d47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d47c:	3303      	adds	r3, #3
 801d47e:	930c      	str	r3, [sp, #48]	; 0x30
 801d480:	e66f      	b.n	801d162 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d482:	d026      	beq.n	801d4d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801d484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d486:	982b      	ldr	r0, [sp, #172]	; 0xac
 801d488:	3b01      	subs	r3, #1
 801d48a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d48c:	fb00 4003 	mla	r0, r0, r3, r4
 801d490:	1400      	asrs	r0, r0, #16
 801d492:	f53f ae83 	bmi.w	801d19c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d496:	3901      	subs	r1, #1
 801d498:	4288      	cmp	r0, r1
 801d49a:	f6bf ae7f 	bge.w	801d19c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d49e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d4a0:	fb01 5303 	mla	r3, r1, r3, r5
 801d4a4:	141b      	asrs	r3, r3, #16
 801d4a6:	f53f ae79 	bmi.w	801d19c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d4aa:	3a01      	subs	r2, #1
 801d4ac:	4293      	cmp	r3, r2
 801d4ae:	f6bf ae75 	bge.w	801d19c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4b4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801d4b8:	f103 0e03 	add.w	lr, r3, #3
 801d4bc:	f1bb 0f00 	cmp.w	fp, #0
 801d4c0:	dc71      	bgt.n	801d5a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d4c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d4ce:	4423      	add	r3, r4
 801d4d0:	930c      	str	r3, [sp, #48]	; 0x30
 801d4d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	f340 81b5 	ble.w	801d844 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801d4da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d4de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d4e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4e8:	eef0 6a62 	vmov.f32	s13, s5
 801d4ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d4f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4f8:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801d4fc:	eef0 6a43 	vmov.f32	s13, s6
 801d500:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d504:	ee16 5a90 	vmov	r5, s13
 801d508:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d50c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d510:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d514:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d518:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d51c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d520:	ee12 2a90 	vmov	r2, s5
 801d524:	eef0 2a47 	vmov.f32	s5, s14
 801d528:	fb92 f3f3 	sdiv	r3, r2, r3
 801d52c:	ee13 2a10 	vmov	r2, s6
 801d530:	932b      	str	r3, [sp, #172]	; 0xac
 801d532:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d534:	eeb0 3a67 	vmov.f32	s6, s15
 801d538:	fb92 f3f3 	sdiv	r3, r2, r3
 801d53c:	932c      	str	r3, [sp, #176]	; 0xb0
 801d53e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d540:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801d542:	3b01      	subs	r3, #1
 801d544:	9319      	str	r3, [sp, #100]	; 0x64
 801d546:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d548:	bf08      	it	eq
 801d54a:	4613      	moveq	r3, r2
 801d54c:	9309      	str	r3, [sp, #36]	; 0x24
 801d54e:	e5fa      	b.n	801d146 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d550:	2900      	cmp	r1, #0
 801d552:	f43f ae6c 	beq.w	801d22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d556:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d55a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d55e:	900a      	str	r0, [sp, #40]	; 0x28
 801d560:	0e00      	lsrs	r0, r0, #24
 801d562:	9013      	str	r0, [sp, #76]	; 0x4c
 801d564:	e663      	b.n	801d22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d566:	f113 0801 	adds.w	r8, r3, #1
 801d56a:	f53f af72 	bmi.w	801d452 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d56e:	4540      	cmp	r0, r8
 801d570:	f6ff af6f 	blt.w	801d452 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d574:	f11c 0801 	adds.w	r8, ip, #1
 801d578:	f53f af6b 	bmi.w	801d452 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d57c:	45c6      	cmp	lr, r8
 801d57e:	f6ff af68 	blt.w	801d452 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d582:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d584:	b200      	sxth	r0, r0
 801d586:	9302      	str	r3, [sp, #8]
 801d588:	fa0f f38e 	sxth.w	r3, lr
 801d58c:	9000      	str	r0, [sp, #0]
 801d58e:	9301      	str	r3, [sp, #4]
 801d590:	4633      	mov	r3, r6
 801d592:	981d      	ldr	r0, [sp, #116]	; 0x74
 801d594:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d598:	e9cd c203 	strd	ip, r2, [sp, #12]
 801d59c:	4639      	mov	r1, r7
 801d59e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d5a0:	f7ff fc74 	bl	801ce8c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801d5a4:	e755      	b.n	801d452 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d5a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d5a8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d5ac:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d5ae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d5b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d5b4:	1427      	asrs	r7, r4, #16
 801d5b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d5b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d5bc:	142b      	asrs	r3, r5, #16
 801d5be:	fb01 7303 	mla	r3, r1, r3, r7
 801d5c2:	18e7      	adds	r7, r4, r3
 801d5c4:	5ce3      	ldrb	r3, [r4, r3]
 801d5c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d5ca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d5ce:	2a00      	cmp	r2, #0
 801d5d0:	f000 812e 	beq.w	801d830 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801d5d4:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d5d8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d5dc:	9410      	str	r4, [sp, #64]	; 0x40
 801d5de:	0e24      	lsrs	r4, r4, #24
 801d5e0:	9417      	str	r4, [sp, #92]	; 0x5c
 801d5e2:	b170      	cbz	r0, 801d602 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d5e4:	eb07 0801 	add.w	r8, r7, r1
 801d5e8:	5c79      	ldrb	r1, [r7, r1]
 801d5ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5ee:	910b      	str	r1, [sp, #44]	; 0x2c
 801d5f0:	0e09      	lsrs	r1, r1, #24
 801d5f2:	9114      	str	r1, [sp, #80]	; 0x50
 801d5f4:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d5f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5fc:	9111      	str	r1, [sp, #68]	; 0x44
 801d5fe:	0e09      	lsrs	r1, r1, #24
 801d600:	9118      	str	r1, [sp, #96]	; 0x60
 801d602:	b292      	uxth	r2, r2
 801d604:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d606:	b280      	uxth	r0, r0
 801d608:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d60a:	fb02 f900 	mul.w	r9, r2, r0
 801d60e:	0112      	lsls	r2, r2, #4
 801d610:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d614:	eba2 0809 	sub.w	r8, r2, r9
 801d618:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d61c:	b280      	uxth	r0, r0
 801d61e:	fa1f f888 	uxth.w	r8, r8
 801d622:	1a12      	subs	r2, r2, r0
 801d624:	fb08 f101 	mul.w	r1, r8, r1
 801d628:	b292      	uxth	r2, r2
 801d62a:	fb02 110c 	mla	r1, r2, ip, r1
 801d62e:	fb00 1104 	mla	r1, r0, r4, r1
 801d632:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d634:	fb09 1104 	mla	r1, r9, r4, r1
 801d638:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d63c:	2900      	cmp	r1, #0
 801d63e:	f000 80ec 	beq.w	801d81a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801d642:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d646:	d019      	beq.n	801d67c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801d648:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d64c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d650:	fb0c fa0a 	mul.w	sl, ip, sl
 801d654:	fb0c fc03 	mul.w	ip, ip, r3
 801d658:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d65c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d660:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d664:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d668:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d66c:	4453      	add	r3, sl
 801d66e:	0a3f      	lsrs	r7, r7, #8
 801d670:	0a1b      	lsrs	r3, r3, #8
 801d672:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d676:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d67a:	433b      	orrs	r3, r7
 801d67c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d67e:	2cff      	cmp	r4, #255	; 0xff
 801d680:	d020      	beq.n	801d6c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801d682:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d684:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d688:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d68a:	4367      	muls	r7, r4
 801d68c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d68e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d692:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d696:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d698:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d69c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6a0:	fb04 fa0a 	mul.w	sl, r4, sl
 801d6a4:	44bc      	add	ip, r7
 801d6a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d6aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d6b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d6be:	ea4c 040a 	orr.w	r4, ip, sl
 801d6c2:	9410      	str	r4, [sp, #64]	; 0x40
 801d6c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d6c6:	2cff      	cmp	r4, #255	; 0xff
 801d6c8:	d020      	beq.n	801d70c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801d6ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d6cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d6d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d6d2:	4367      	muls	r7, r4
 801d6d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d6d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d6da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d6de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d6e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d6e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6e8:	fb04 fa0a 	mul.w	sl, r4, sl
 801d6ec:	44bc      	add	ip, r7
 801d6ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d6f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d6fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d702:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d706:	ea4c 040a 	orr.w	r4, ip, sl
 801d70a:	940b      	str	r4, [sp, #44]	; 0x2c
 801d70c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d70e:	2cff      	cmp	r4, #255	; 0xff
 801d710:	d020      	beq.n	801d754 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801d712:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d714:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d718:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d71a:	4367      	muls	r7, r4
 801d71c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d71e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d722:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d726:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d728:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d72c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d730:	fb04 fa0a 	mul.w	sl, r4, sl
 801d734:	44bc      	add	ip, r7
 801d736:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d73a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d73e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d742:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d746:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d74a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d74e:	ea4c 040a 	orr.w	r4, ip, sl
 801d752:	9411      	str	r4, [sp, #68]	; 0x44
 801d754:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d756:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d75a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d75e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d762:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d764:	fb08 f707 	mul.w	r7, r8, r7
 801d768:	fb02 770c 	mla	r7, r2, ip, r7
 801d76c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d770:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d772:	fb00 770c 	mla	r7, r0, ip, r7
 801d776:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d77a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d77c:	fb09 770c 	mla	r7, r9, ip, r7
 801d780:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d784:	fb08 f80c 	mul.w	r8, r8, ip
 801d788:	0a3f      	lsrs	r7, r7, #8
 801d78a:	fb02 8303 	mla	r3, r2, r3, r8
 801d78e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d790:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d794:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d798:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d79a:	fb00 330a 	mla	r3, r0, sl, r3
 801d79e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d7a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d7a4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d7a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d7ae:	434b      	muls	r3, r1
 801d7b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d7b4:	1c59      	adds	r1, r3, #1
 801d7b6:	ea47 070c 	orr.w	r7, r7, ip
 801d7ba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d7be:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d7c2:	b2fa      	uxtb	r2, r7
 801d7c4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d7c8:	fb12 f200 	smulbb	r2, r2, r0
 801d7cc:	b2c9      	uxtb	r1, r1
 801d7ce:	fb03 2301 	mla	r3, r3, r1, r2
 801d7d2:	b29b      	uxth	r3, r3
 801d7d4:	1c5a      	adds	r2, r3, #1
 801d7d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d7da:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d7de:	fb12 f201 	smulbb	r2, r2, r1
 801d7e2:	121b      	asrs	r3, r3, #8
 801d7e4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d7e8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d7ec:	0c3f      	lsrs	r7, r7, #16
 801d7ee:	fb03 2300 	mla	r3, r3, r0, r2
 801d7f2:	b29b      	uxth	r3, r3
 801d7f4:	1c5a      	adds	r2, r3, #1
 801d7f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d7fa:	121b      	asrs	r3, r3, #8
 801d7fc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d800:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d804:	fb13 f101 	smulbb	r1, r3, r1
 801d808:	fb07 1700 	mla	r7, r7, r0, r1
 801d80c:	b2bf      	uxth	r7, r7
 801d80e:	1c7b      	adds	r3, r7, #1
 801d810:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d814:	123f      	asrs	r7, r7, #8
 801d816:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d81a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d81c:	f10e 0e03 	add.w	lr, lr, #3
 801d820:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d822:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d826:	441a      	add	r2, r3
 801d828:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d82a:	9229      	str	r2, [sp, #164]	; 0xa4
 801d82c:	441d      	add	r5, r3
 801d82e:	e645      	b.n	801d4bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801d830:	2800      	cmp	r0, #0
 801d832:	f43f aee6 	beq.w	801d602 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d836:	5c79      	ldrb	r1, [r7, r1]
 801d838:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d83c:	910b      	str	r1, [sp, #44]	; 0x2c
 801d83e:	0e09      	lsrs	r1, r1, #24
 801d840:	9114      	str	r1, [sp, #80]	; 0x50
 801d842:	e6de      	b.n	801d602 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d844:	b01f      	add	sp, #124	; 0x7c
 801d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d84a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801d84a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d84e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801d852:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d856:	2d00      	cmp	r5, #0
 801d858:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d85c:	fb05 700e 	mla	r0, r5, lr, r7
 801d860:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801d864:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801d868:	eb02 0800 	add.w	r8, r2, r0
 801d86c:	f2c0 8105 	blt.w	801da7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d870:	45a9      	cmp	r9, r5
 801d872:	f340 8102 	ble.w	801da7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d876:	2f00      	cmp	r7, #0
 801d878:	f2c0 80fd 	blt.w	801da76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d87c:	45be      	cmp	lr, r7
 801d87e:	f340 80fa 	ble.w	801da76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d882:	5c12      	ldrb	r2, [r2, r0]
 801d884:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d888:	1c7a      	adds	r2, r7, #1
 801d88a:	f100 80f9 	bmi.w	801da80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d88e:	4596      	cmp	lr, r2
 801d890:	f340 80f6 	ble.w	801da80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d894:	2c00      	cmp	r4, #0
 801d896:	f000 80f5 	beq.w	801da84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801d89a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d89e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d8a2:	3501      	adds	r5, #1
 801d8a4:	f100 80f2 	bmi.w	801da8c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d8a8:	45a9      	cmp	r9, r5
 801d8aa:	f340 80ef 	ble.w	801da8c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d8ae:	f1bc 0f00 	cmp.w	ip, #0
 801d8b2:	f000 80ee 	beq.w	801da92 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801d8b6:	2f00      	cmp	r7, #0
 801d8b8:	f2c0 80e6 	blt.w	801da88 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d8bc:	45be      	cmp	lr, r7
 801d8be:	f340 80e3 	ble.w	801da88 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d8c2:	f818 200e 	ldrb.w	r2, [r8, lr]
 801d8c6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d8ca:	3701      	adds	r7, #1
 801d8cc:	f100 80e4 	bmi.w	801da98 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d8d0:	45be      	cmp	lr, r7
 801d8d2:	f340 80e1 	ble.w	801da98 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d8d6:	2c00      	cmp	r4, #0
 801d8d8:	f000 80e0 	beq.w	801da9c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801d8dc:	44c6      	add	lr, r8
 801d8de:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d8e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d8e6:	b2a3      	uxth	r3, r4
 801d8e8:	fa1f fc8c 	uxth.w	ip, ip
 801d8ec:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d8f0:	fb0c fe03 	mul.w	lr, ip, r3
 801d8f4:	011b      	lsls	r3, r3, #4
 801d8f6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d8fa:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801d8fe:	eba3 070e 	sub.w	r7, r3, lr
 801d902:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801d906:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d90a:	fa1f f48c 	uxth.w	r4, ip
 801d90e:	b2bf      	uxth	r7, r7
 801d910:	1b1b      	subs	r3, r3, r4
 801d912:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d916:	fb07 fc0a 	mul.w	ip, r7, sl
 801d91a:	b29b      	uxth	r3, r3
 801d91c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d920:	9300      	str	r3, [sp, #0]
 801d922:	fb04 cc09 	mla	ip, r4, r9, ip
 801d926:	fb0e cc08 	mla	ip, lr, r8, ip
 801d92a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d92e:	9301      	str	r3, [sp, #4]
 801d930:	2b00      	cmp	r3, #0
 801d932:	f000 809d 	beq.w	801da70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801d936:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d93a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d93e:	fb0b fc0c 	mul.w	ip, fp, ip
 801d942:	fb0b f606 	mul.w	r6, fp, r6
 801d946:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d94a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d94e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d952:	44dc      	add	ip, fp
 801d954:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801d958:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d95c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d960:	fb0a fb0b 	mul.w	fp, sl, fp
 801d964:	fb0a fa00 	mul.w	sl, sl, r0
 801d968:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801d96c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801d970:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801d974:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d978:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d97c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d980:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d984:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d988:	0a36      	lsrs	r6, r6, #8
 801d98a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d98e:	44dc      	add	ip, fp
 801d990:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d994:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d998:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d99c:	fb09 fb0b 	mul.w	fp, r9, fp
 801d9a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9a4:	fb09 f905 	mul.w	r9, r9, r5
 801d9a8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d9ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d9b0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801d9b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d9b8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d9bc:	fb0c fc07 	mul.w	ip, ip, r7
 801d9c0:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d9c4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801d9c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d9cc:	4458      	add	r0, fp
 801d9ce:	fb08 f505 	mul.w	r5, r8, r5
 801d9d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d9d6:	fb08 f802 	mul.w	r8, r8, r2
 801d9da:	0a00      	lsrs	r0, r0, #8
 801d9dc:	0a2a      	lsrs	r2, r5, #8
 801d9de:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d9e2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d9e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d9ea:	4415      	add	r5, r2
 801d9ec:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d9f0:	0a2d      	lsrs	r5, r5, #8
 801d9f2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d9f6:	9a00      	ldr	r2, [sp, #0]
 801d9f8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d9fc:	fb03 cc02 	mla	ip, r3, r2, ip
 801da00:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801da04:	9b01      	ldr	r3, [sp, #4]
 801da06:	fb05 c50e 	mla	r5, r5, lr, ip
 801da0a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801da0e:	43db      	mvns	r3, r3
 801da10:	fb00 5004 	mla	r0, r0, r4, r5
 801da14:	b2db      	uxtb	r3, r3
 801da16:	0a00      	lsrs	r0, r0, #8
 801da18:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801da1c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801da20:	4378      	muls	r0, r7
 801da22:	fb02 0006 	mla	r0, r2, r6, r0
 801da26:	780a      	ldrb	r2, [r1, #0]
 801da28:	fb0e 0e08 	mla	lr, lr, r8, r0
 801da2c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801da30:	fb04 e000 	mla	r0, r4, r0, lr
 801da34:	fb02 f403 	mul.w	r4, r2, r3
 801da38:	0a00      	lsrs	r0, r0, #8
 801da3a:	1c62      	adds	r2, r4, #1
 801da3c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801da40:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801da44:	4328      	orrs	r0, r5
 801da46:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801da4a:	700a      	strb	r2, [r1, #0]
 801da4c:	784a      	ldrb	r2, [r1, #1]
 801da4e:	435a      	muls	r2, r3
 801da50:	1c54      	adds	r4, r2, #1
 801da52:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801da56:	0a02      	lsrs	r2, r0, #8
 801da58:	0c00      	lsrs	r0, r0, #16
 801da5a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801da5e:	704a      	strb	r2, [r1, #1]
 801da60:	788a      	ldrb	r2, [r1, #2]
 801da62:	4353      	muls	r3, r2
 801da64:	1c5a      	adds	r2, r3, #1
 801da66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801da6a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801da6e:	7088      	strb	r0, [r1, #2]
 801da70:	b003      	add	sp, #12
 801da72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da76:	2600      	movs	r6, #0
 801da78:	e706      	b.n	801d888 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801da7a:	2000      	movs	r0, #0
 801da7c:	4606      	mov	r6, r0
 801da7e:	e710      	b.n	801d8a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801da80:	2000      	movs	r0, #0
 801da82:	e70e      	b.n	801d8a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801da84:	4620      	mov	r0, r4
 801da86:	e70c      	b.n	801d8a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801da88:	2500      	movs	r5, #0
 801da8a:	e71e      	b.n	801d8ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801da8c:	2200      	movs	r2, #0
 801da8e:	4615      	mov	r5, r2
 801da90:	e729      	b.n	801d8e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801da92:	4662      	mov	r2, ip
 801da94:	4665      	mov	r5, ip
 801da96:	e726      	b.n	801d8e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801da98:	2200      	movs	r2, #0
 801da9a:	e724      	b.n	801d8e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801da9c:	4622      	mov	r2, r4
 801da9e:	e722      	b.n	801d8e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801daa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daa4:	b09b      	sub	sp, #108	; 0x6c
 801daa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801daaa:	9218      	str	r2, [sp, #96]	; 0x60
 801daac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801daae:	9019      	str	r0, [sp, #100]	; 0x64
 801dab0:	9116      	str	r1, [sp, #88]	; 0x58
 801dab2:	6850      	ldr	r0, [r2, #4]
 801dab4:	9307      	str	r3, [sp, #28]
 801dab6:	6812      	ldr	r2, [r2, #0]
 801dab8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801daba:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801dabe:	fb00 1303 	mla	r3, r0, r3, r1
 801dac2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dac6:	18d3      	adds	r3, r2, r3
 801dac8:	930a      	str	r3, [sp, #40]	; 0x28
 801daca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	930f      	str	r3, [sp, #60]	; 0x3c
 801dad0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dad2:	685e      	ldr	r6, [r3, #4]
 801dad4:	3604      	adds	r6, #4
 801dad6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dad8:	2b00      	cmp	r3, #0
 801dada:	dc03      	bgt.n	801dae4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801dadc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dade:	2b00      	cmp	r3, #0
 801dae0:	f340 834f 	ble.w	801e182 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801dae4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dae6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801daea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801daee:	1e48      	subs	r0, r1, #1
 801daf0:	1e57      	subs	r7, r2, #1
 801daf2:	9b07      	ldr	r3, [sp, #28]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	f340 8178 	ble.w	801ddea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dafa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801dafc:	142b      	asrs	r3, r5, #16
 801dafe:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801db02:	d406      	bmi.n	801db12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801db04:	4584      	cmp	ip, r0
 801db06:	da04      	bge.n	801db12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801db08:	2b00      	cmp	r3, #0
 801db0a:	db02      	blt.n	801db12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801db0c:	42bb      	cmp	r3, r7
 801db0e:	f2c0 816d 	blt.w	801ddec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801db12:	f11c 0c01 	adds.w	ip, ip, #1
 801db16:	f100 815b 	bmi.w	801ddd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801db1a:	4561      	cmp	r1, ip
 801db1c:	f2c0 8158 	blt.w	801ddd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801db20:	3301      	adds	r3, #1
 801db22:	f100 8155 	bmi.w	801ddd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801db26:	429a      	cmp	r2, r3
 801db28:	f2c0 8152 	blt.w	801ddd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801db2c:	9b07      	ldr	r3, [sp, #28]
 801db2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801db30:	9317      	str	r3, [sp, #92]	; 0x5c
 801db32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801db34:	2b00      	cmp	r3, #0
 801db36:	f340 8178 	ble.w	801de2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801db3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801db3c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801db40:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801db44:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801db48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801db4a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801db4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801db50:	141b      	asrs	r3, r3, #16
 801db52:	f100 81ba 	bmi.w	801deca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801db56:	f101 38ff 	add.w	r8, r1, #4294967295
 801db5a:	4543      	cmp	r3, r8
 801db5c:	f280 81b5 	bge.w	801deca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801db60:	f1bc 0f00 	cmp.w	ip, #0
 801db64:	f2c0 81b1 	blt.w	801deca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801db68:	f10e 38ff 	add.w	r8, lr, #4294967295
 801db6c:	45c4      	cmp	ip, r8
 801db6e:	f280 81ac 	bge.w	801deca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801db72:	b209      	sxth	r1, r1
 801db74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801db76:	fb0c 3301 	mla	r3, ip, r1, r3
 801db7a:	eb04 0803 	add.w	r8, r4, r3
 801db7e:	5ce3      	ldrb	r3, [r4, r3]
 801db80:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801db84:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801db88:	2a00      	cmp	r2, #0
 801db8a:	f000 8193 	beq.w	801deb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801db8e:	f898 c001 	ldrb.w	ip, [r8, #1]
 801db92:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801db96:	940b      	str	r4, [sp, #44]	; 0x2c
 801db98:	0e24      	lsrs	r4, r4, #24
 801db9a:	9412      	str	r4, [sp, #72]	; 0x48
 801db9c:	b178      	cbz	r0, 801dbbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801db9e:	eb08 0c01 	add.w	ip, r8, r1
 801dba2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dba6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dbaa:	9108      	str	r1, [sp, #32]
 801dbac:	0e09      	lsrs	r1, r1, #24
 801dbae:	9110      	str	r1, [sp, #64]	; 0x40
 801dbb0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801dbb4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dbb8:	910c      	str	r1, [sp, #48]	; 0x30
 801dbba:	0e09      	lsrs	r1, r1, #24
 801dbbc:	9113      	str	r1, [sp, #76]	; 0x4c
 801dbbe:	b292      	uxth	r2, r2
 801dbc0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dbc2:	b280      	uxth	r0, r0
 801dbc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dbc6:	fb02 f900 	mul.w	r9, r2, r0
 801dbca:	0112      	lsls	r2, r2, #4
 801dbcc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dbd0:	eba2 0809 	sub.w	r8, r2, r9
 801dbd4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801dbd8:	b280      	uxth	r0, r0
 801dbda:	fa1f f888 	uxth.w	r8, r8
 801dbde:	1a12      	subs	r2, r2, r0
 801dbe0:	fb08 f101 	mul.w	r1, r8, r1
 801dbe4:	b292      	uxth	r2, r2
 801dbe6:	fb02 110e 	mla	r1, r2, lr, r1
 801dbea:	fb00 1104 	mla	r1, r0, r4, r1
 801dbee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dbf0:	fb09 1104 	mla	r1, r9, r4, r1
 801dbf4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dbf8:	2900      	cmp	r1, #0
 801dbfa:	f000 80de 	beq.w	801ddba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dbfe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dc02:	d01b      	beq.n	801dc3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801dc04:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dc08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dc0c:	fb0e fa0a 	mul.w	sl, lr, sl
 801dc10:	fb0e fe03 	mul.w	lr, lr, r3
 801dc14:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dc18:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dc1c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801dc20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dc24:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dc28:	4453      	add	r3, sl
 801dc2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc2e:	0a1b      	lsrs	r3, r3, #8
 801dc30:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dc34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dc38:	ea43 030c 	orr.w	r3, r3, ip
 801dc3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dc3e:	2cff      	cmp	r4, #255	; 0xff
 801dc40:	d021      	beq.n	801dc86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801dc42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dc44:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dc4a:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dc50:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dc54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dc56:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dc5a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc5e:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc66:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dc6a:	44de      	add	lr, fp
 801dc6c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dc70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc80:	ea4e 040a 	orr.w	r4, lr, sl
 801dc84:	940b      	str	r4, [sp, #44]	; 0x2c
 801dc86:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dc88:	2cff      	cmp	r4, #255	; 0xff
 801dc8a:	d021      	beq.n	801dcd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801dc8c:	9c08      	ldr	r4, [sp, #32]
 801dc8e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc92:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dc94:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc98:	9c08      	ldr	r4, [sp, #32]
 801dc9a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dc9e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dca0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dca4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dca8:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dcb4:	44de      	add	lr, fp
 801dcb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dcba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dcca:	ea4e 040a 	orr.w	r4, lr, sl
 801dcce:	9408      	str	r4, [sp, #32]
 801dcd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dcd2:	2cff      	cmp	r4, #255	; 0xff
 801dcd4:	d021      	beq.n	801dd1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801dcd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dcd8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dcdc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dcde:	fb04 fb0b 	mul.w	fp, r4, fp
 801dce2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dce4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dce8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dcea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dcee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dcf2:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcf6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcfa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dcfe:	44de      	add	lr, fp
 801dd00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dd10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dd14:	ea4e 040a 	orr.w	r4, lr, sl
 801dd18:	940c      	str	r4, [sp, #48]	; 0x30
 801dd1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd1c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801dd20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd24:	43c9      	mvns	r1, r1
 801dd26:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dd2a:	9c08      	ldr	r4, [sp, #32]
 801dd2c:	b2c9      	uxtb	r1, r1
 801dd2e:	fb08 fc0c 	mul.w	ip, r8, ip
 801dd32:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dd36:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dd3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dd3c:	fb00 cc0e 	mla	ip, r0, lr, ip
 801dd40:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dd44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd46:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dd4a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801dd4e:	fb08 f80e 	mul.w	r8, r8, lr
 801dd52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd56:	fb02 8303 	mla	r3, r2, r3, r8
 801dd5a:	9a08      	ldr	r2, [sp, #32]
 801dd5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd60:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801dd64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dd66:	fb00 330a 	mla	r3, r0, sl, r3
 801dd6a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801dd6e:	fb09 3900 	mla	r9, r9, r0, r3
 801dd72:	783b      	ldrb	r3, [r7, #0]
 801dd74:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dd78:	fb03 f201 	mul.w	r2, r3, r1
 801dd7c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dd80:	1c53      	adds	r3, r2, #1
 801dd82:	ea4c 0c09 	orr.w	ip, ip, r9
 801dd86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dd8a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801dd8e:	703b      	strb	r3, [r7, #0]
 801dd90:	787b      	ldrb	r3, [r7, #1]
 801dd92:	434b      	muls	r3, r1
 801dd94:	1c5a      	adds	r2, r3, #1
 801dd96:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dd9a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801dd9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801dda2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dda6:	707b      	strb	r3, [r7, #1]
 801dda8:	78bb      	ldrb	r3, [r7, #2]
 801ddaa:	4359      	muls	r1, r3
 801ddac:	1c4b      	adds	r3, r1, #1
 801ddae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ddb2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801ddb6:	f887 c002 	strb.w	ip, [r7, #2]
 801ddba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ddbc:	3703      	adds	r7, #3
 801ddbe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ddc0:	441a      	add	r2, r3
 801ddc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ddc4:	441d      	add	r5, r3
 801ddc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ddc8:	9225      	str	r2, [sp, #148]	; 0x94
 801ddca:	3b01      	subs	r3, #1
 801ddcc:	9317      	str	r3, [sp, #92]	; 0x5c
 801ddce:	e6b0      	b.n	801db32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ddd0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ddd2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ddd4:	441c      	add	r4, r3
 801ddd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ddd8:	441d      	add	r5, r3
 801ddda:	9b07      	ldr	r3, [sp, #28]
 801dddc:	9425      	str	r4, [sp, #148]	; 0x94
 801ddde:	3b01      	subs	r3, #1
 801dde0:	9307      	str	r3, [sp, #28]
 801dde2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dde4:	3303      	adds	r3, #3
 801dde6:	930a      	str	r3, [sp, #40]	; 0x28
 801dde8:	e683      	b.n	801daf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ddea:	d026      	beq.n	801de3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801ddec:	9b07      	ldr	r3, [sp, #28]
 801ddee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ddf0:	3b01      	subs	r3, #1
 801ddf2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ddf4:	fb00 4003 	mla	r0, r0, r3, r4
 801ddf8:	1400      	asrs	r0, r0, #16
 801ddfa:	f53f ae97 	bmi.w	801db2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ddfe:	3901      	subs	r1, #1
 801de00:	4288      	cmp	r0, r1
 801de02:	f6bf ae93 	bge.w	801db2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801de06:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801de08:	fb01 5303 	mla	r3, r1, r3, r5
 801de0c:	141b      	asrs	r3, r3, #16
 801de0e:	f53f ae8d 	bmi.w	801db2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801de12:	3a01      	subs	r2, #1
 801de14:	4293      	cmp	r3, r2
 801de16:	f6bf ae89 	bge.w	801db2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801de1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de1c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801de20:	f103 0e03 	add.w	lr, r3, #3
 801de24:	f1bb 0f00 	cmp.w	fp, #0
 801de28:	dc6d      	bgt.n	801df06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801de2a:	9b07      	ldr	r3, [sp, #28]
 801de2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801de30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801de36:	4423      	add	r3, r4
 801de38:	930a      	str	r3, [sp, #40]	; 0x28
 801de3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	f340 81a0 	ble.w	801e182 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801de42:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de4c:	eeb0 6a62 	vmov.f32	s12, s5
 801de50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de54:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de5c:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801de60:	eeb0 6a43 	vmov.f32	s12, s6
 801de64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de68:	ee16 5a10 	vmov	r5, s12
 801de6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de70:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de74:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de84:	ee12 2a90 	vmov	r2, s5
 801de88:	eef0 2a47 	vmov.f32	s5, s14
 801de8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801de90:	ee13 2a10 	vmov	r2, s6
 801de94:	9327      	str	r3, [sp, #156]	; 0x9c
 801de96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de98:	eeb0 3a67 	vmov.f32	s6, s15
 801de9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801dea0:	9328      	str	r3, [sp, #160]	; 0xa0
 801dea2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dea4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801dea6:	3b01      	subs	r3, #1
 801dea8:	9316      	str	r3, [sp, #88]	; 0x58
 801deaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801deac:	bf08      	it	eq
 801deae:	4613      	moveq	r3, r2
 801deb0:	9307      	str	r3, [sp, #28]
 801deb2:	e610      	b.n	801dad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801deb4:	2800      	cmp	r0, #0
 801deb6:	f43f ae82 	beq.w	801dbbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801deba:	f818 1001 	ldrb.w	r1, [r8, r1]
 801debe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dec2:	9108      	str	r1, [sp, #32]
 801dec4:	0e09      	lsrs	r1, r1, #24
 801dec6:	9110      	str	r1, [sp, #64]	; 0x40
 801dec8:	e679      	b.n	801dbbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801deca:	f113 0801 	adds.w	r8, r3, #1
 801dece:	f53f af74 	bmi.w	801ddba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ded2:	4541      	cmp	r1, r8
 801ded4:	f6ff af71 	blt.w	801ddba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ded8:	f11c 0801 	adds.w	r8, ip, #1
 801dedc:	f53f af6d 	bmi.w	801ddba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dee0:	45c6      	cmp	lr, r8
 801dee2:	f6ff af6a 	blt.w	801ddba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dee6:	b209      	sxth	r1, r1
 801dee8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801deec:	fa0f f38e 	sxth.w	r3, lr
 801def0:	9100      	str	r1, [sp, #0]
 801def2:	4639      	mov	r1, r7
 801def4:	9301      	str	r3, [sp, #4]
 801def6:	4633      	mov	r3, r6
 801def8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801defc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801defe:	9819      	ldr	r0, [sp, #100]	; 0x64
 801df00:	f7ff fca3 	bl	801d84a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801df04:	e759      	b.n	801ddba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801df06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801df08:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801df0c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801df0e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801df14:	1427      	asrs	r7, r4, #16
 801df16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801df18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df1c:	142b      	asrs	r3, r5, #16
 801df1e:	fb01 7303 	mla	r3, r1, r3, r7
 801df22:	18e7      	adds	r7, r4, r3
 801df24:	5ce3      	ldrb	r3, [r4, r3]
 801df26:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801df2a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801df2e:	2a00      	cmp	r2, #0
 801df30:	f000 811d 	beq.w	801e16e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801df34:	f897 8001 	ldrb.w	r8, [r7, #1]
 801df38:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801df3c:	940d      	str	r4, [sp, #52]	; 0x34
 801df3e:	0e24      	lsrs	r4, r4, #24
 801df40:	9414      	str	r4, [sp, #80]	; 0x50
 801df42:	b170      	cbz	r0, 801df62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801df44:	eb07 0801 	add.w	r8, r7, r1
 801df48:	5c79      	ldrb	r1, [r7, r1]
 801df4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df4e:	9109      	str	r1, [sp, #36]	; 0x24
 801df50:	0e09      	lsrs	r1, r1, #24
 801df52:	9111      	str	r1, [sp, #68]	; 0x44
 801df54:	f898 1001 	ldrb.w	r1, [r8, #1]
 801df58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df5c:	910e      	str	r1, [sp, #56]	; 0x38
 801df5e:	0e09      	lsrs	r1, r1, #24
 801df60:	9115      	str	r1, [sp, #84]	; 0x54
 801df62:	b292      	uxth	r2, r2
 801df64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801df66:	b280      	uxth	r0, r0
 801df68:	fb02 f900 	mul.w	r9, r2, r0
 801df6c:	0112      	lsls	r2, r2, #4
 801df6e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801df72:	eba2 0809 	sub.w	r8, r2, r9
 801df76:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801df7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df7c:	b280      	uxth	r0, r0
 801df7e:	fa1f f888 	uxth.w	r8, r8
 801df82:	1a09      	subs	r1, r1, r0
 801df84:	fb08 f202 	mul.w	r2, r8, r2
 801df88:	b289      	uxth	r1, r1
 801df8a:	fb01 220c 	mla	r2, r1, ip, r2
 801df8e:	fb00 2204 	mla	r2, r0, r4, r2
 801df92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801df94:	fb09 2204 	mla	r2, r9, r4, r2
 801df98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801df9c:	2a00      	cmp	r2, #0
 801df9e:	f000 80db 	beq.w	801e158 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801dfa2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dfa6:	d019      	beq.n	801dfdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801dfa8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dfac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dfb0:	fb0c fa0a 	mul.w	sl, ip, sl
 801dfb4:	fb0c fc03 	mul.w	ip, ip, r3
 801dfb8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dfbc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dfc0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801dfc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dfc8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dfcc:	4453      	add	r3, sl
 801dfce:	0a3f      	lsrs	r7, r7, #8
 801dfd0:	0a1b      	lsrs	r3, r3, #8
 801dfd2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dfd6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dfda:	433b      	orrs	r3, r7
 801dfdc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dfde:	2cff      	cmp	r4, #255	; 0xff
 801dfe0:	d020      	beq.n	801e024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801dfe2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dfe4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dfe8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dfea:	4367      	muls	r7, r4
 801dfec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dfee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dff2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dff6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dff8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dffc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e000:	fb04 fa0a 	mul.w	sl, r4, sl
 801e004:	44bc      	add	ip, r7
 801e006:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e00a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e00e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e012:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e016:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e01a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e01e:	ea4c 040a 	orr.w	r4, ip, sl
 801e022:	940d      	str	r4, [sp, #52]	; 0x34
 801e024:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e026:	2cff      	cmp	r4, #255	; 0xff
 801e028:	d020      	beq.n	801e06c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801e02a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e02c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e030:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e032:	4367      	muls	r7, r4
 801e034:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e036:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e03a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e03e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e040:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e044:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e048:	fb04 fa0a 	mul.w	sl, r4, sl
 801e04c:	44bc      	add	ip, r7
 801e04e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e052:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e056:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e05a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e05e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e062:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e066:	ea4c 040a 	orr.w	r4, ip, sl
 801e06a:	9409      	str	r4, [sp, #36]	; 0x24
 801e06c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e06e:	2cff      	cmp	r4, #255	; 0xff
 801e070:	d020      	beq.n	801e0b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801e072:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e074:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e078:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e07a:	4367      	muls	r7, r4
 801e07c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e07e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e082:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e086:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e088:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e08c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e090:	fb04 fa0a 	mul.w	sl, r4, sl
 801e094:	44bc      	add	ip, r7
 801e096:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e09a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e09e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e0a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e0ae:	ea4c 040a 	orr.w	r4, ip, sl
 801e0b2:	940e      	str	r4, [sp, #56]	; 0x38
 801e0b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e0b6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e0ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0be:	43d2      	mvns	r2, r2
 801e0c0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e0c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e0c6:	b2d2      	uxtb	r2, r2
 801e0c8:	fb08 f707 	mul.w	r7, r8, r7
 801e0cc:	fb01 770c 	mla	r7, r1, ip, r7
 801e0d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e0d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e0d6:	fb00 770c 	mla	r7, r0, ip, r7
 801e0da:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e0de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e0e0:	fb09 770c 	mla	r7, r9, ip, r7
 801e0e4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e0e8:	fb08 f80c 	mul.w	r8, r8, ip
 801e0ec:	0a3f      	lsrs	r7, r7, #8
 801e0ee:	fb01 8303 	mla	r3, r1, r3, r8
 801e0f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e0f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e0f8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801e0fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e0fe:	fb00 330a 	mla	r3, r0, sl, r3
 801e102:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801e106:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e10a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e10e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e112:	fb03 f102 	mul.w	r1, r3, r2
 801e116:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e11a:	1c4b      	adds	r3, r1, #1
 801e11c:	ea47 070c 	orr.w	r7, r7, ip
 801e120:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e124:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801e128:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e12c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801e130:	4353      	muls	r3, r2
 801e132:	1c59      	adds	r1, r3, #1
 801e134:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e138:	0a3b      	lsrs	r3, r7, #8
 801e13a:	0c3f      	lsrs	r7, r7, #16
 801e13c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e140:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e144:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e148:	435a      	muls	r2, r3
 801e14a:	1c53      	adds	r3, r2, #1
 801e14c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e150:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e154:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e158:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e15a:	f10e 0e03 	add.w	lr, lr, #3
 801e15e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e160:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e164:	441a      	add	r2, r3
 801e166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e168:	9225      	str	r2, [sp, #148]	; 0x94
 801e16a:	441d      	add	r5, r3
 801e16c:	e65a      	b.n	801de24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801e16e:	2800      	cmp	r0, #0
 801e170:	f43f aef7 	beq.w	801df62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e174:	5c79      	ldrb	r1, [r7, r1]
 801e176:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e17a:	9109      	str	r1, [sp, #36]	; 0x24
 801e17c:	0e09      	lsrs	r1, r1, #24
 801e17e:	9111      	str	r1, [sp, #68]	; 0x44
 801e180:	e6ef      	b.n	801df62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e182:	b01b      	add	sp, #108	; 0x6c
 801e184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e188 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e18c:	b08d      	sub	sp, #52	; 0x34
 801e18e:	468b      	mov	fp, r1
 801e190:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801e194:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801e198:	fb0c 5703 	mla	r7, ip, r3, r5
 801e19c:	f1bc 0f00 	cmp.w	ip, #0
 801e1a0:	910b      	str	r1, [sp, #44]	; 0x2c
 801e1a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e1a6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e1aa:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801e1ae:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801e1b2:	eb02 0607 	add.w	r6, r2, r7
 801e1b6:	f89b 4000 	ldrb.w	r4, [fp]
 801e1ba:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801e1be:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801e1c2:	f2c0 80c1 	blt.w	801e348 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e1c6:	45e6      	cmp	lr, ip
 801e1c8:	f340 80be 	ble.w	801e348 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e1cc:	2d00      	cmp	r5, #0
 801e1ce:	f2c0 80b7 	blt.w	801e340 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e1d2:	42ab      	cmp	r3, r5
 801e1d4:	f340 80b4 	ble.w	801e340 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e1d8:	5dd2      	ldrb	r2, [r2, r7]
 801e1da:	9205      	str	r2, [sp, #20]
 801e1dc:	7872      	ldrb	r2, [r6, #1]
 801e1de:	9206      	str	r2, [sp, #24]
 801e1e0:	78b2      	ldrb	r2, [r6, #2]
 801e1e2:	9207      	str	r2, [sp, #28]
 801e1e4:	1c6a      	adds	r2, r5, #1
 801e1e6:	f100 80b6 	bmi.w	801e356 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e1ea:	4293      	cmp	r3, r2
 801e1ec:	f340 80b3 	ble.w	801e356 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e1f0:	f1b8 0f00 	cmp.w	r8, #0
 801e1f4:	f000 80af 	beq.w	801e356 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e1f8:	78f2      	ldrb	r2, [r6, #3]
 801e1fa:	9201      	str	r2, [sp, #4]
 801e1fc:	7932      	ldrb	r2, [r6, #4]
 801e1fe:	9202      	str	r2, [sp, #8]
 801e200:	7972      	ldrb	r2, [r6, #5]
 801e202:	9203      	str	r2, [sp, #12]
 801e204:	f11c 0c01 	adds.w	ip, ip, #1
 801e208:	f100 80ad 	bmi.w	801e366 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e20c:	45e6      	cmp	lr, ip
 801e20e:	f340 80aa 	ble.w	801e366 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e212:	f1ba 0f00 	cmp.w	sl, #0
 801e216:	f000 80a6 	beq.w	801e366 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e21a:	2d00      	cmp	r5, #0
 801e21c:	f2c0 809f 	blt.w	801e35e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e220:	42ab      	cmp	r3, r5
 801e222:	f340 809c 	ble.w	801e35e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e226:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e22a:	f816 9002 	ldrb.w	r9, [r6, r2]
 801e22e:	2203      	movs	r2, #3
 801e230:	fb03 6c02 	mla	ip, r3, r2, r6
 801e234:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801e238:	f89c e002 	ldrb.w	lr, [ip, #2]
 801e23c:	9704      	str	r7, [sp, #16]
 801e23e:	3501      	adds	r5, #1
 801e240:	f100 8098 	bmi.w	801e374 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e244:	42ab      	cmp	r3, r5
 801e246:	f340 8095 	ble.w	801e374 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e24a:	f1b8 0f00 	cmp.w	r8, #0
 801e24e:	f000 8091 	beq.w	801e374 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e252:	f04f 0c03 	mov.w	ip, #3
 801e256:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801e25a:	5cb5      	ldrb	r5, [r6, r2]
 801e25c:	fb03 620c 	mla	r2, r3, ip, r6
 801e260:	fb03 630c 	mla	r3, r3, ip, r6
 801e264:	7912      	ldrb	r2, [r2, #4]
 801e266:	795e      	ldrb	r6, [r3, #5]
 801e268:	fa1f f388 	uxth.w	r3, r8
 801e26c:	fa1f fc8a 	uxth.w	ip, sl
 801e270:	fb03 f70c 	mul.w	r7, r3, ip
 801e274:	011b      	lsls	r3, r3, #4
 801e276:	9708      	str	r7, [sp, #32]
 801e278:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e27c:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801e280:	1bdb      	subs	r3, r3, r7
 801e282:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801e286:	fa1f fc8c 	uxth.w	ip, ip
 801e28a:	b29b      	uxth	r3, r3
 801e28c:	9709      	str	r7, [sp, #36]	; 0x24
 801e28e:	ebaa 0a0c 	sub.w	sl, sl, ip
 801e292:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e294:	930a      	str	r3, [sp, #40]	; 0x28
 801e296:	fa1f fa8a 	uxth.w	sl, sl
 801e29a:	ea6f 0807 	mvn.w	r8, r7
 801e29e:	9f01      	ldr	r7, [sp, #4]
 801e2a0:	435f      	muls	r7, r3
 801e2a2:	9b05      	ldr	r3, [sp, #20]
 801e2a4:	fa5f f888 	uxtb.w	r8, r8
 801e2a8:	fb0a 7703 	mla	r7, sl, r3, r7
 801e2ac:	9b08      	ldr	r3, [sp, #32]
 801e2ae:	fb14 f408 	smulbb	r4, r4, r8
 801e2b2:	fb0c 7709 	mla	r7, ip, r9, r7
 801e2b6:	fb10 f008 	smulbb	r0, r0, r8
 801e2ba:	fb11 f108 	smulbb	r1, r1, r8
 801e2be:	fb03 7705 	mla	r7, r3, r5, r7
 801e2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2c4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e2c8:	fb07 4703 	mla	r7, r7, r3, r4
 801e2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2ce:	b2bf      	uxth	r7, r7
 801e2d0:	1c7c      	adds	r4, r7, #1
 801e2d2:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801e2d6:	1224      	asrs	r4, r4, #8
 801e2d8:	f88b 4000 	strb.w	r4, [fp]
 801e2dc:	9c02      	ldr	r4, [sp, #8]
 801e2de:	435c      	muls	r4, r3
 801e2e0:	9b06      	ldr	r3, [sp, #24]
 801e2e2:	fb0a 4403 	mla	r4, sl, r3, r4
 801e2e6:	9b04      	ldr	r3, [sp, #16]
 801e2e8:	fb0c 4403 	mla	r4, ip, r3, r4
 801e2ec:	9b08      	ldr	r3, [sp, #32]
 801e2ee:	fb03 4402 	mla	r4, r3, r2, r4
 801e2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e2f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e2fa:	fb04 0403 	mla	r4, r4, r3, r0
 801e2fe:	9b03      	ldr	r3, [sp, #12]
 801e300:	435a      	muls	r2, r3
 801e302:	b2a4      	uxth	r4, r4
 801e304:	4613      	mov	r3, r2
 801e306:	9a07      	ldr	r2, [sp, #28]
 801e308:	1c60      	adds	r0, r4, #1
 801e30a:	fb0a 3a02 	mla	sl, sl, r2, r3
 801e30e:	9b08      	ldr	r3, [sp, #32]
 801e310:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801e314:	fb0c ac0e 	mla	ip, ip, lr, sl
 801e318:	1224      	asrs	r4, r4, #8
 801e31a:	fb03 c606 	mla	r6, r3, r6, ip
 801e31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e320:	f88b 4001 	strb.w	r4, [fp, #1]
 801e324:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e328:	fb06 1103 	mla	r1, r6, r3, r1
 801e32c:	b289      	uxth	r1, r1
 801e32e:	1c4e      	adds	r6, r1, #1
 801e330:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e334:	1209      	asrs	r1, r1, #8
 801e336:	f88b 1002 	strb.w	r1, [fp, #2]
 801e33a:	b00d      	add	sp, #52	; 0x34
 801e33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e340:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e344:	9405      	str	r4, [sp, #20]
 801e346:	e74d      	b.n	801e1e4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801e348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e34c:	9401      	str	r4, [sp, #4]
 801e34e:	9405      	str	r4, [sp, #20]
 801e350:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e354:	e756      	b.n	801e204 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e35a:	9401      	str	r4, [sp, #4]
 801e35c:	e752      	b.n	801e204 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e35e:	468e      	mov	lr, r1
 801e360:	9004      	str	r0, [sp, #16]
 801e362:	46a1      	mov	r9, r4
 801e364:	e76b      	b.n	801e23e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801e366:	460e      	mov	r6, r1
 801e368:	4602      	mov	r2, r0
 801e36a:	4625      	mov	r5, r4
 801e36c:	468e      	mov	lr, r1
 801e36e:	9004      	str	r0, [sp, #16]
 801e370:	46a1      	mov	r9, r4
 801e372:	e779      	b.n	801e268 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801e374:	460e      	mov	r6, r1
 801e376:	4602      	mov	r2, r0
 801e378:	4625      	mov	r5, r4
 801e37a:	e775      	b.n	801e268 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801e37c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e380:	b09f      	sub	sp, #124	; 0x7c
 801e382:	920e      	str	r2, [sp, #56]	; 0x38
 801e384:	9307      	str	r3, [sp, #28]
 801e386:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e388:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e38c:	901d      	str	r0, [sp, #116]	; 0x74
 801e38e:	930c      	str	r3, [sp, #48]	; 0x30
 801e390:	6850      	ldr	r0, [r2, #4]
 801e392:	910b      	str	r1, [sp, #44]	; 0x2c
 801e394:	6812      	ldr	r2, [r2, #0]
 801e396:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e39a:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801e39e:	fb00 1303 	mla	r3, r0, r3, r1
 801e3a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3a6:	18d3      	adds	r3, r2, r3
 801e3a8:	9308      	str	r3, [sp, #32]
 801e3aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	930a      	str	r3, [sp, #40]	; 0x28
 801e3b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e3b2:	43db      	mvns	r3, r3
 801e3b4:	b2db      	uxtb	r3, r3
 801e3b6:	9309      	str	r3, [sp, #36]	; 0x24
 801e3b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	dc03      	bgt.n	801e3c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e3be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	f340 81f5 	ble.w	801e7b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e3c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e3c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e3cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e3d0:	1e48      	subs	r0, r1, #1
 801e3d2:	1e54      	subs	r4, r2, #1
 801e3d4:	9b07      	ldr	r3, [sp, #28]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	f340 80d5 	ble.w	801e586 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e3dc:	ea5f 452a 	movs.w	r5, sl, asr #16
 801e3e0:	ea4f 4328 	mov.w	r3, r8, asr #16
 801e3e4:	d406      	bmi.n	801e3f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e3e6:	4285      	cmp	r5, r0
 801e3e8:	da04      	bge.n	801e3f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	db02      	blt.n	801e3f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e3ee:	42a3      	cmp	r3, r4
 801e3f0:	f2c0 80ca 	blt.w	801e588 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e3f4:	3501      	adds	r5, #1
 801e3f6:	f100 80bb 	bmi.w	801e570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e3fa:	42a9      	cmp	r1, r5
 801e3fc:	f2c0 80b8 	blt.w	801e570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e400:	3301      	adds	r3, #1
 801e402:	f100 80b5 	bmi.w	801e570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e406:	429a      	cmp	r2, r3
 801e408:	f2c0 80b2 	blt.w	801e570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e40c:	9b07      	ldr	r3, [sp, #28]
 801e40e:	9d08      	ldr	r5, [sp, #32]
 801e410:	930d      	str	r3, [sp, #52]	; 0x34
 801e412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e414:	2b00      	cmp	r3, #0
 801e416:	f340 80d6 	ble.w	801e5c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801e41a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801e41c:	ea4f 4428 	mov.w	r4, r8, asr #16
 801e420:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e422:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801e426:	68c6      	ldr	r6, [r0, #12]
 801e428:	ea5f 402a 	movs.w	r0, sl, asr #16
 801e42c:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801e430:	689b      	ldr	r3, [r3, #8]
 801e432:	f100 810f 	bmi.w	801e654 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e436:	1e5f      	subs	r7, r3, #1
 801e438:	42b8      	cmp	r0, r7
 801e43a:	f280 810b 	bge.w	801e654 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e43e:	2c00      	cmp	r4, #0
 801e440:	f2c0 8108 	blt.w	801e654 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e444:	1e77      	subs	r7, r6, #1
 801e446:	42bc      	cmp	r4, r7
 801e448:	f280 8104 	bge.w	801e654 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e44c:	b21b      	sxth	r3, r3
 801e44e:	fb04 0003 	mla	r0, r4, r3, r0
 801e452:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e454:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e458:	1826      	adds	r6, r4, r0
 801e45a:	5c24      	ldrb	r4, [r4, r0]
 801e45c:	78b7      	ldrb	r7, [r6, #2]
 801e45e:	7870      	ldrb	r0, [r6, #1]
 801e460:	970f      	str	r7, [sp, #60]	; 0x3c
 801e462:	7977      	ldrb	r7, [r6, #5]
 801e464:	f896 e003 	ldrb.w	lr, [r6, #3]
 801e468:	f896 c004 	ldrb.w	ip, [r6, #4]
 801e46c:	9710      	str	r7, [sp, #64]	; 0x40
 801e46e:	b1c9      	cbz	r1, 801e4a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e470:	f04f 0b03 	mov.w	fp, #3
 801e474:	f06f 0904 	mvn.w	r9, #4
 801e478:	3605      	adds	r6, #5
 801e47a:	fb13 930b 	smlabb	r3, r3, fp, r9
 801e47e:	eb06 0b03 	add.w	fp, r6, r3
 801e482:	5cf3      	ldrb	r3, [r6, r3]
 801e484:	9311      	str	r3, [sp, #68]	; 0x44
 801e486:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801e48a:	9313      	str	r3, [sp, #76]	; 0x4c
 801e48c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801e490:	9315      	str	r3, [sp, #84]	; 0x54
 801e492:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801e496:	9312      	str	r3, [sp, #72]	; 0x48
 801e498:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801e49c:	9314      	str	r3, [sp, #80]	; 0x50
 801e49e:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801e4a2:	9316      	str	r3, [sp, #88]	; 0x58
 801e4a4:	b292      	uxth	r2, r2
 801e4a6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801e4a8:	b289      	uxth	r1, r1
 801e4aa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801e4ae:	fb02 f601 	mul.w	r6, r2, r1
 801e4b2:	0112      	lsls	r2, r2, #4
 801e4b4:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801e4b8:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801e4bc:	1b92      	subs	r2, r2, r6
 801e4be:	b289      	uxth	r1, r1
 801e4c0:	b292      	uxth	r2, r2
 801e4c2:	eba9 0901 	sub.w	r9, r9, r1
 801e4c6:	fb02 fe0e 	mul.w	lr, r2, lr
 801e4ca:	fa1f f989 	uxth.w	r9, r9
 801e4ce:	fb02 fc0c 	mul.w	ip, r2, ip
 801e4d2:	fb09 e404 	mla	r4, r9, r4, lr
 801e4d6:	f895 e000 	ldrb.w	lr, [r5]
 801e4da:	fb09 c000 	mla	r0, r9, r0, ip
 801e4de:	fb01 4407 	mla	r4, r1, r7, r4
 801e4e2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801e4e4:	fb06 4407 	mla	r4, r6, r7, r4
 801e4e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e4ea:	fb1e fe07 	smulbb	lr, lr, r7
 801e4ee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e4f2:	fb04 e403 	mla	r4, r4, r3, lr
 801e4f6:	b2a4      	uxth	r4, r4
 801e4f8:	f104 0e01 	add.w	lr, r4, #1
 801e4fc:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801e500:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e502:	fb01 0004 	mla	r0, r1, r4, r0
 801e506:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e508:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e50c:	fb06 0004 	mla	r0, r6, r4, r0
 801e510:	786c      	ldrb	r4, [r5, #1]
 801e512:	f885 e000 	strb.w	lr, [r5]
 801e516:	fb14 f407 	smulbb	r4, r4, r7
 801e51a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e51e:	fb00 4003 	mla	r0, r0, r3, r4
 801e522:	b280      	uxth	r0, r0
 801e524:	1c44      	adds	r4, r0, #1
 801e526:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e52a:	1200      	asrs	r0, r0, #8
 801e52c:	7068      	strb	r0, [r5, #1]
 801e52e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e530:	4342      	muls	r2, r0
 801e532:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e534:	fb09 2200 	mla	r2, r9, r0, r2
 801e538:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e53a:	fb01 2100 	mla	r1, r1, r0, r2
 801e53e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e540:	fb06 1602 	mla	r6, r6, r2, r1
 801e544:	78a9      	ldrb	r1, [r5, #2]
 801e546:	fb11 f107 	smulbb	r1, r1, r7
 801e54a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e54e:	fb06 1303 	mla	r3, r6, r3, r1
 801e552:	b29b      	uxth	r3, r3
 801e554:	1c5e      	adds	r6, r3, #1
 801e556:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e55a:	121b      	asrs	r3, r3, #8
 801e55c:	70ab      	strb	r3, [r5, #2]
 801e55e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e560:	3503      	adds	r5, #3
 801e562:	449a      	add	sl, r3
 801e564:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e566:	4498      	add	r8, r3
 801e568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e56a:	3b01      	subs	r3, #1
 801e56c:	930d      	str	r3, [sp, #52]	; 0x34
 801e56e:	e750      	b.n	801e412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e570:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e572:	449a      	add	sl, r3
 801e574:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e576:	4498      	add	r8, r3
 801e578:	9b07      	ldr	r3, [sp, #28]
 801e57a:	3b01      	subs	r3, #1
 801e57c:	9307      	str	r3, [sp, #28]
 801e57e:	9b08      	ldr	r3, [sp, #32]
 801e580:	3303      	adds	r3, #3
 801e582:	9308      	str	r3, [sp, #32]
 801e584:	e726      	b.n	801e3d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e586:	d026      	beq.n	801e5d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801e588:	9b07      	ldr	r3, [sp, #28]
 801e58a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801e58c:	3b01      	subs	r3, #1
 801e58e:	fb00 a003 	mla	r0, r0, r3, sl
 801e592:	1400      	asrs	r0, r0, #16
 801e594:	f53f af3a 	bmi.w	801e40c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e598:	3901      	subs	r1, #1
 801e59a:	4288      	cmp	r0, r1
 801e59c:	f6bf af36 	bge.w	801e40c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e5a0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e5a2:	fb01 8303 	mla	r3, r1, r3, r8
 801e5a6:	141b      	asrs	r3, r3, #16
 801e5a8:	f53f af30 	bmi.w	801e40c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e5ac:	3a01      	subs	r2, #1
 801e5ae:	4293      	cmp	r3, r2
 801e5b0:	f6bf af2c 	bge.w	801e40c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e5b4:	9b08      	ldr	r3, [sp, #32]
 801e5b6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e5ba:	1cdd      	adds	r5, r3, #3
 801e5bc:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801e5c0:	f1bc 0f00 	cmp.w	ip, #0
 801e5c4:	dc5f      	bgt.n	801e686 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801e5c6:	9b07      	ldr	r3, [sp, #28]
 801e5c8:	9a08      	ldr	r2, [sp, #32]
 801e5ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5d2:	441a      	add	r2, r3
 801e5d4:	9208      	str	r2, [sp, #32]
 801e5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	f340 80e9 	ble.w	801e7b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e5de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e5e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e5e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5ec:	eef0 6a62 	vmov.f32	s13, s5
 801e5f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e5f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5fc:	ee16 aa90 	vmov	sl, s13
 801e600:	eef0 6a43 	vmov.f32	s13, s6
 801e604:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e608:	ee16 8a90 	vmov	r8, s13
 801e60c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e610:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e614:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e618:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e61c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e620:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e624:	ee12 2a90 	vmov	r2, s5
 801e628:	eef0 2a47 	vmov.f32	s5, s14
 801e62c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e630:	ee13 2a10 	vmov	r2, s6
 801e634:	932b      	str	r3, [sp, #172]	; 0xac
 801e636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e638:	eeb0 3a67 	vmov.f32	s6, s15
 801e63c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e640:	932c      	str	r3, [sp, #176]	; 0xb0
 801e642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e646:	3b01      	subs	r3, #1
 801e648:	930b      	str	r3, [sp, #44]	; 0x2c
 801e64a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e64c:	bf08      	it	eq
 801e64e:	4613      	moveq	r3, r2
 801e650:	9307      	str	r3, [sp, #28]
 801e652:	e6b1      	b.n	801e3b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e654:	1c47      	adds	r7, r0, #1
 801e656:	d482      	bmi.n	801e55e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e658:	42bb      	cmp	r3, r7
 801e65a:	db80      	blt.n	801e55e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e65c:	1c67      	adds	r7, r4, #1
 801e65e:	f53f af7e 	bmi.w	801e55e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e662:	42be      	cmp	r6, r7
 801e664:	f6ff af7b 	blt.w	801e55e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e668:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e66a:	b236      	sxth	r6, r6
 801e66c:	9001      	str	r0, [sp, #4]
 801e66e:	b21b      	sxth	r3, r3
 801e670:	9600      	str	r6, [sp, #0]
 801e672:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e674:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801e678:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801e67c:	4629      	mov	r1, r5
 801e67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e680:	f7ff fd82 	bl	801e188 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801e684:	e76b      	b.n	801e55e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e686:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801e688:	ea4f 402a 	mov.w	r0, sl, asr #16
 801e68c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801e690:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801e694:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801e698:	ea4f 4128 	mov.w	r1, r8, asr #16
 801e69c:	fb07 0101 	mla	r1, r7, r1, r0
 801e6a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e6a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e6a6:	1844      	adds	r4, r0, r1
 801e6a8:	5c40      	ldrb	r0, [r0, r1]
 801e6aa:	78a6      	ldrb	r6, [r4, #2]
 801e6ac:	7861      	ldrb	r1, [r4, #1]
 801e6ae:	960f      	str	r6, [sp, #60]	; 0x3c
 801e6b0:	78e6      	ldrb	r6, [r4, #3]
 801e6b2:	910d      	str	r1, [sp, #52]	; 0x34
 801e6b4:	9610      	str	r6, [sp, #64]	; 0x40
 801e6b6:	f894 9004 	ldrb.w	r9, [r4, #4]
 801e6ba:	f894 b005 	ldrb.w	fp, [r4, #5]
 801e6be:	b192      	cbz	r2, 801e6e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801e6c0:	f06f 0604 	mvn.w	r6, #4
 801e6c4:	2103      	movs	r1, #3
 801e6c6:	3405      	adds	r4, #5
 801e6c8:	fb17 6701 	smlabb	r7, r7, r1, r6
 801e6cc:	19e6      	adds	r6, r4, r7
 801e6ce:	5de4      	ldrb	r4, [r4, r7]
 801e6d0:	9417      	str	r4, [sp, #92]	; 0x5c
 801e6d2:	7874      	ldrb	r4, [r6, #1]
 801e6d4:	9419      	str	r4, [sp, #100]	; 0x64
 801e6d6:	78b4      	ldrb	r4, [r6, #2]
 801e6d8:	941b      	str	r4, [sp, #108]	; 0x6c
 801e6da:	78f4      	ldrb	r4, [r6, #3]
 801e6dc:	9418      	str	r4, [sp, #96]	; 0x60
 801e6de:	7934      	ldrb	r4, [r6, #4]
 801e6e0:	941a      	str	r4, [sp, #104]	; 0x68
 801e6e2:	7974      	ldrb	r4, [r6, #5]
 801e6e4:	941c      	str	r4, [sp, #112]	; 0x70
 801e6e6:	b29b      	uxth	r3, r3
 801e6e8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e6ea:	b292      	uxth	r2, r2
 801e6ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e6ee:	3503      	adds	r5, #3
 801e6f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e6f4:	fb03 f402 	mul.w	r4, r3, r2
 801e6f8:	011b      	lsls	r3, r3, #4
 801e6fa:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801e6fe:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801e702:	1b1b      	subs	r3, r3, r4
 801e704:	b292      	uxth	r2, r2
 801e706:	b29b      	uxth	r3, r3
 801e708:	1ab6      	subs	r6, r6, r2
 801e70a:	435f      	muls	r7, r3
 801e70c:	b2b6      	uxth	r6, r6
 801e70e:	fb03 f909 	mul.w	r9, r3, r9
 801e712:	fb03 fb0b 	mul.w	fp, r3, fp
 801e716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e718:	fb06 7000 	mla	r0, r6, r0, r7
 801e71c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801e71e:	fb06 bb03 	mla	fp, r6, r3, fp
 801e722:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e724:	fb02 0007 	mla	r0, r2, r7, r0
 801e728:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801e72a:	fb02 bb03 	mla	fp, r2, r3, fp
 801e72e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e730:	fb04 0007 	mla	r0, r4, r7, r0
 801e734:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801e738:	fb17 f701 	smulbb	r7, r7, r1
 801e73c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e740:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e742:	fb00 700e 	mla	r0, r0, lr, r7
 801e746:	fb06 9101 	mla	r1, r6, r1, r9
 801e74a:	b280      	uxth	r0, r0
 801e74c:	1c47      	adds	r7, r0, #1
 801e74e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801e752:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e754:	1200      	asrs	r0, r0, #8
 801e756:	f805 0c06 	strb.w	r0, [r5, #-6]
 801e75a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e75c:	fb02 1100 	mla	r1, r2, r0, r1
 801e760:	981a      	ldr	r0, [sp, #104]	; 0x68
 801e762:	fb04 1100 	mla	r1, r4, r0, r1
 801e766:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801e76a:	fb04 b403 	mla	r4, r4, r3, fp
 801e76e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801e772:	fb10 f007 	smulbb	r0, r0, r7
 801e776:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e77a:	fb13 f307 	smulbb	r3, r3, r7
 801e77e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e782:	fb01 010e 	mla	r1, r1, lr, r0
 801e786:	fb04 340e 	mla	r4, r4, lr, r3
 801e78a:	b289      	uxth	r1, r1
 801e78c:	b2a4      	uxth	r4, r4
 801e78e:	1c48      	adds	r0, r1, #1
 801e790:	1c63      	adds	r3, r4, #1
 801e792:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e796:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e79a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e79c:	1209      	asrs	r1, r1, #8
 801e79e:	1224      	asrs	r4, r4, #8
 801e7a0:	449a      	add	sl, r3
 801e7a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e7a4:	f805 1c05 	strb.w	r1, [r5, #-5]
 801e7a8:	f805 4c04 	strb.w	r4, [r5, #-4]
 801e7ac:	4498      	add	r8, r3
 801e7ae:	e707      	b.n	801e5c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e7b0:	b01f      	add	sp, #124	; 0x7c
 801e7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801e7b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7ba:	b087      	sub	sp, #28
 801e7bc:	780d      	ldrb	r5, [r1, #0]
 801e7be:	784c      	ldrb	r4, [r1, #1]
 801e7c0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801e7c4:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801e7c8:	9004      	str	r0, [sp, #16]
 801e7ca:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801e7ce:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801e7d2:	9005      	str	r0, [sp, #20]
 801e7d4:	fb06 bc03 	mla	ip, r6, r3, fp
 801e7d8:	2e00      	cmp	r6, #0
 801e7da:	7888      	ldrb	r0, [r1, #2]
 801e7dc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e7e0:	eb02 090c 	add.w	r9, r2, ip
 801e7e4:	f2c0 8084 	blt.w	801e8f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e7e8:	42b7      	cmp	r7, r6
 801e7ea:	f340 8081 	ble.w	801e8f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e7ee:	f1bb 0f00 	cmp.w	fp, #0
 801e7f2:	db79      	blt.n	801e8e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e7f4:	455b      	cmp	r3, fp
 801e7f6:	dd77      	ble.n	801e8e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e7f8:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e7fc:	9201      	str	r2, [sp, #4]
 801e7fe:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e802:	9202      	str	r2, [sp, #8]
 801e804:	f899 2002 	ldrb.w	r2, [r9, #2]
 801e808:	9203      	str	r2, [sp, #12]
 801e80a:	f11b 0201 	adds.w	r2, fp, #1
 801e80e:	d476      	bmi.n	801e8fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e810:	4293      	cmp	r3, r2
 801e812:	dd74      	ble.n	801e8fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e814:	9a04      	ldr	r2, [sp, #16]
 801e816:	2a00      	cmp	r2, #0
 801e818:	d071      	beq.n	801e8fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e81a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801e81e:	f899 c004 	ldrb.w	ip, [r9, #4]
 801e822:	f899 a005 	ldrb.w	sl, [r9, #5]
 801e826:	3601      	adds	r6, #1
 801e828:	d471      	bmi.n	801e90e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e82a:	42b7      	cmp	r7, r6
 801e82c:	dd6f      	ble.n	801e90e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e82e:	9a05      	ldr	r2, [sp, #20]
 801e830:	2a00      	cmp	r2, #0
 801e832:	d06c      	beq.n	801e90e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e834:	f1bb 0f00 	cmp.w	fp, #0
 801e838:	db65      	blt.n	801e906 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e83a:	455b      	cmp	r3, fp
 801e83c:	dd63      	ble.n	801e906 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e83e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e842:	f819 e002 	ldrb.w	lr, [r9, r2]
 801e846:	2203      	movs	r2, #3
 801e848:	fb03 9602 	mla	r6, r3, r2, r9
 801e84c:	7877      	ldrb	r7, [r6, #1]
 801e84e:	78b6      	ldrb	r6, [r6, #2]
 801e850:	f11b 0b01 	adds.w	fp, fp, #1
 801e854:	d40c      	bmi.n	801e870 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e856:	455b      	cmp	r3, fp
 801e858:	dd0a      	ble.n	801e870 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e85a:	9a04      	ldr	r2, [sp, #16]
 801e85c:	b142      	cbz	r2, 801e870 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e85e:	2203      	movs	r2, #3
 801e860:	fb13 2002 	smlabb	r0, r3, r2, r2
 801e864:	f819 5000 	ldrb.w	r5, [r9, r0]
 801e868:	fb03 9002 	mla	r0, r3, r2, r9
 801e86c:	7904      	ldrb	r4, [r0, #4]
 801e86e:	7940      	ldrb	r0, [r0, #5]
 801e870:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e874:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e878:	fb03 fb02 	mul.w	fp, r3, r2
 801e87c:	011b      	lsls	r3, r3, #4
 801e87e:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801e882:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801e886:	eba3 030b 	sub.w	r3, r3, fp
 801e88a:	b292      	uxth	r2, r2
 801e88c:	b29b      	uxth	r3, r3
 801e88e:	eba9 0902 	sub.w	r9, r9, r2
 801e892:	9304      	str	r3, [sp, #16]
 801e894:	fa1f f989 	uxth.w	r9, r9
 801e898:	fb03 f808 	mul.w	r8, r3, r8
 801e89c:	9b01      	ldr	r3, [sp, #4]
 801e89e:	fb09 8803 	mla	r8, r9, r3, r8
 801e8a2:	9b04      	ldr	r3, [sp, #16]
 801e8a4:	fb03 fc0c 	mul.w	ip, r3, ip
 801e8a8:	9b02      	ldr	r3, [sp, #8]
 801e8aa:	fb02 880e 	mla	r8, r2, lr, r8
 801e8ae:	fb09 cc03 	mla	ip, r9, r3, ip
 801e8b2:	9b04      	ldr	r3, [sp, #16]
 801e8b4:	fb0b 8805 	mla	r8, fp, r5, r8
 801e8b8:	fb02 c707 	mla	r7, r2, r7, ip
 801e8bc:	fb03 f30a 	mul.w	r3, r3, sl
 801e8c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e8c4:	fb0b 7404 	mla	r4, fp, r4, r7
 801e8c8:	f881 8000 	strb.w	r8, [r1]
 801e8cc:	1224      	asrs	r4, r4, #8
 801e8ce:	704c      	strb	r4, [r1, #1]
 801e8d0:	9c03      	ldr	r4, [sp, #12]
 801e8d2:	fb09 3904 	mla	r9, r9, r4, r3
 801e8d6:	fb02 9206 	mla	r2, r2, r6, r9
 801e8da:	fb0b 2000 	mla	r0, fp, r0, r2
 801e8de:	1200      	asrs	r0, r0, #8
 801e8e0:	7088      	strb	r0, [r1, #2]
 801e8e2:	b007      	add	sp, #28
 801e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8e8:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e8ec:	9501      	str	r5, [sp, #4]
 801e8ee:	e78c      	b.n	801e80a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801e8f0:	4682      	mov	sl, r0
 801e8f2:	46a4      	mov	ip, r4
 801e8f4:	46a8      	mov	r8, r5
 801e8f6:	9501      	str	r5, [sp, #4]
 801e8f8:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e8fc:	e793      	b.n	801e826 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e8fe:	4682      	mov	sl, r0
 801e900:	46a4      	mov	ip, r4
 801e902:	46a8      	mov	r8, r5
 801e904:	e78f      	b.n	801e826 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e906:	4606      	mov	r6, r0
 801e908:	4627      	mov	r7, r4
 801e90a:	46ae      	mov	lr, r5
 801e90c:	e7a0      	b.n	801e850 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801e90e:	4606      	mov	r6, r0
 801e910:	4627      	mov	r7, r4
 801e912:	46ae      	mov	lr, r5
 801e914:	e7ac      	b.n	801e870 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801e916 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e91a:	b09b      	sub	sp, #108	; 0x6c
 801e91c:	920b      	str	r2, [sp, #44]	; 0x2c
 801e91e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e920:	9019      	str	r0, [sp, #100]	; 0x64
 801e922:	9109      	str	r1, [sp, #36]	; 0x24
 801e924:	6850      	ldr	r0, [r2, #4]
 801e926:	9306      	str	r3, [sp, #24]
 801e928:	6812      	ldr	r2, [r2, #0]
 801e92a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e92e:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801e932:	fb00 1303 	mla	r3, r0, r3, r1
 801e936:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e93a:	18d3      	adds	r3, r2, r3
 801e93c:	9307      	str	r3, [sp, #28]
 801e93e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	9308      	str	r3, [sp, #32]
 801e944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e946:	2b00      	cmp	r3, #0
 801e948:	dc03      	bgt.n	801e952 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	f340 81ab 	ble.w	801eca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e952:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e954:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e958:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e95c:	1e48      	subs	r0, r1, #1
 801e95e:	1e55      	subs	r5, r2, #1
 801e960:	9b06      	ldr	r3, [sp, #24]
 801e962:	2b00      	cmp	r3, #0
 801e964:	f340 80b1 	ble.w	801eaca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e968:	ea5f 462b 	movs.w	r6, fp, asr #16
 801e96c:	ea4f 4324 	mov.w	r3, r4, asr #16
 801e970:	d406      	bmi.n	801e980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e972:	4286      	cmp	r6, r0
 801e974:	da04      	bge.n	801e980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e976:	2b00      	cmp	r3, #0
 801e978:	db02      	blt.n	801e980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e97a:	42ab      	cmp	r3, r5
 801e97c:	f2c0 80a6 	blt.w	801eacc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e980:	3601      	adds	r6, #1
 801e982:	f100 8097 	bmi.w	801eab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e986:	42b1      	cmp	r1, r6
 801e988:	f2c0 8094 	blt.w	801eab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e98c:	3301      	adds	r3, #1
 801e98e:	f100 8091 	bmi.w	801eab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e992:	429a      	cmp	r2, r3
 801e994:	f2c0 808e 	blt.w	801eab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e998:	9b06      	ldr	r3, [sp, #24]
 801e99a:	9e07      	ldr	r6, [sp, #28]
 801e99c:	930a      	str	r3, [sp, #40]	; 0x28
 801e99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	f340 80b0 	ble.w	801eb06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e9a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801e9a8:	1425      	asrs	r5, r4, #16
 801e9aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e9ac:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e9b0:	68c7      	ldr	r7, [r0, #12]
 801e9b2:	ea5f 402b 	movs.w	r0, fp, asr #16
 801e9b6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801e9ba:	689b      	ldr	r3, [r3, #8]
 801e9bc:	f100 80ea 	bmi.w	801eb94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e9c0:	f103 3cff 	add.w	ip, r3, #4294967295
 801e9c4:	4560      	cmp	r0, ip
 801e9c6:	f280 80e5 	bge.w	801eb94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e9ca:	2d00      	cmp	r5, #0
 801e9cc:	f2c0 80e2 	blt.w	801eb94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e9d0:	f107 3cff 	add.w	ip, r7, #4294967295
 801e9d4:	4565      	cmp	r5, ip
 801e9d6:	f280 80dd 	bge.w	801eb94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e9da:	b21b      	sxth	r3, r3
 801e9dc:	fb05 0003 	mla	r0, r5, r3, r0
 801e9e0:	9d08      	ldr	r5, [sp, #32]
 801e9e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e9e6:	182f      	adds	r7, r5, r0
 801e9e8:	5c2d      	ldrb	r5, [r5, r0]
 801e9ea:	7878      	ldrb	r0, [r7, #1]
 801e9ec:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e9f0:	900c      	str	r0, [sp, #48]	; 0x30
 801e9f2:	f897 9003 	ldrb.w	r9, [r7, #3]
 801e9f6:	f897 8004 	ldrb.w	r8, [r7, #4]
 801e9fa:	f897 a005 	ldrb.w	sl, [r7, #5]
 801e9fe:	b1c9      	cbz	r1, 801ea34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ea00:	f04f 0c03 	mov.w	ip, #3
 801ea04:	f06f 0004 	mvn.w	r0, #4
 801ea08:	3705      	adds	r7, #5
 801ea0a:	fb13 030c 	smlabb	r3, r3, ip, r0
 801ea0e:	eb07 0c03 	add.w	ip, r7, r3
 801ea12:	5cfb      	ldrb	r3, [r7, r3]
 801ea14:	930d      	str	r3, [sp, #52]	; 0x34
 801ea16:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ea1a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ea1c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ea20:	9311      	str	r3, [sp, #68]	; 0x44
 801ea22:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ea26:	930e      	str	r3, [sp, #56]	; 0x38
 801ea28:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801ea2c:	9310      	str	r3, [sp, #64]	; 0x40
 801ea2e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801ea32:	9312      	str	r3, [sp, #72]	; 0x48
 801ea34:	b292      	uxth	r2, r2
 801ea36:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ea38:	b289      	uxth	r1, r1
 801ea3a:	fb02 f301 	mul.w	r3, r2, r1
 801ea3e:	0112      	lsls	r2, r2, #4
 801ea40:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ea44:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801ea48:	1ad2      	subs	r2, r2, r3
 801ea4a:	b289      	uxth	r1, r1
 801ea4c:	b292      	uxth	r2, r2
 801ea4e:	1a7f      	subs	r7, r7, r1
 801ea50:	fb02 f909 	mul.w	r9, r2, r9
 801ea54:	b2bf      	uxth	r7, r7
 801ea56:	fb02 f808 	mul.w	r8, r2, r8
 801ea5a:	fb02 fa0a 	mul.w	sl, r2, sl
 801ea5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea60:	fb07 9905 	mla	r9, r7, r5, r9
 801ea64:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ea66:	fb07 8800 	mla	r8, r7, r0, r8
 801ea6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ea6c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801ea70:	fb01 9905 	mla	r9, r1, r5, r9
 801ea74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ea76:	fb01 8800 	mla	r8, r1, r0, r8
 801ea7a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ea7c:	fb01 a102 	mla	r1, r1, r2, sl
 801ea80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ea82:	fb03 9905 	mla	r9, r3, r5, r9
 801ea86:	fb03 8800 	mla	r8, r3, r0, r8
 801ea8a:	fb03 1302 	mla	r3, r3, r2, r1
 801ea8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea92:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ea96:	121b      	asrs	r3, r3, #8
 801ea98:	f886 9000 	strb.w	r9, [r6]
 801ea9c:	f886 8001 	strb.w	r8, [r6, #1]
 801eaa0:	70b3      	strb	r3, [r6, #2]
 801eaa2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eaa4:	3603      	adds	r6, #3
 801eaa6:	449b      	add	fp, r3
 801eaa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaaa:	441c      	add	r4, r3
 801eaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eaae:	3b01      	subs	r3, #1
 801eab0:	930a      	str	r3, [sp, #40]	; 0x28
 801eab2:	e774      	b.n	801e99e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801eab4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eab6:	449b      	add	fp, r3
 801eab8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaba:	441c      	add	r4, r3
 801eabc:	9b06      	ldr	r3, [sp, #24]
 801eabe:	3b01      	subs	r3, #1
 801eac0:	9306      	str	r3, [sp, #24]
 801eac2:	9b07      	ldr	r3, [sp, #28]
 801eac4:	3303      	adds	r3, #3
 801eac6:	9307      	str	r3, [sp, #28]
 801eac8:	e74a      	b.n	801e960 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801eaca:	d024      	beq.n	801eb16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eacc:	9b06      	ldr	r3, [sp, #24]
 801eace:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ead0:	3b01      	subs	r3, #1
 801ead2:	fb00 b003 	mla	r0, r0, r3, fp
 801ead6:	1400      	asrs	r0, r0, #16
 801ead8:	f53f af5e 	bmi.w	801e998 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801eadc:	3901      	subs	r1, #1
 801eade:	4288      	cmp	r0, r1
 801eae0:	f6bf af5a 	bge.w	801e998 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801eae4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eae6:	fb01 4303 	mla	r3, r1, r3, r4
 801eaea:	141b      	asrs	r3, r3, #16
 801eaec:	f53f af54 	bmi.w	801e998 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801eaf0:	3a01      	subs	r2, #1
 801eaf2:	4293      	cmp	r3, r2
 801eaf4:	f6bf af50 	bge.w	801e998 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801eaf8:	9b07      	ldr	r3, [sp, #28]
 801eafa:	f8dd e018 	ldr.w	lr, [sp, #24]
 801eafe:	1cde      	adds	r6, r3, #3
 801eb00:	f1be 0f00 	cmp.w	lr, #0
 801eb04:	dc5f      	bgt.n	801ebc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801eb06:	9b06      	ldr	r3, [sp, #24]
 801eb08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801eb0c:	9b07      	ldr	r3, [sp, #28]
 801eb0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eb12:	4423      	add	r3, r4
 801eb14:	9307      	str	r3, [sp, #28]
 801eb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	f340 80c5 	ble.w	801eca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801eb1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb24:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb2c:	eef0 6a62 	vmov.f32	s13, s5
 801eb30:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eb34:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb3c:	ee16 ba90 	vmov	fp, s13
 801eb40:	eef0 6a43 	vmov.f32	s13, s6
 801eb44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb48:	ee16 4a90 	vmov	r4, s13
 801eb4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb50:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb64:	ee12 2a90 	vmov	r2, s5
 801eb68:	eef0 2a47 	vmov.f32	s5, s14
 801eb6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb70:	ee13 2a10 	vmov	r2, s6
 801eb74:	9327      	str	r3, [sp, #156]	; 0x9c
 801eb76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb78:	eeb0 3a67 	vmov.f32	s6, s15
 801eb7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb80:	9328      	str	r3, [sp, #160]	; 0xa0
 801eb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eb86:	3b01      	subs	r3, #1
 801eb88:	9309      	str	r3, [sp, #36]	; 0x24
 801eb8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb8c:	bf08      	it	eq
 801eb8e:	4613      	moveq	r3, r2
 801eb90:	9306      	str	r3, [sp, #24]
 801eb92:	e6d7      	b.n	801e944 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801eb94:	f110 0c01 	adds.w	ip, r0, #1
 801eb98:	d483      	bmi.n	801eaa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801eb9a:	4563      	cmp	r3, ip
 801eb9c:	db81      	blt.n	801eaa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801eb9e:	f115 0c01 	adds.w	ip, r5, #1
 801eba2:	f53f af7e 	bmi.w	801eaa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801eba6:	4567      	cmp	r7, ip
 801eba8:	f6ff af7b 	blt.w	801eaa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ebac:	b23f      	sxth	r7, r7
 801ebae:	b21b      	sxth	r3, r3
 801ebb0:	9700      	str	r7, [sp, #0]
 801ebb2:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801ebb6:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801ebba:	9a08      	ldr	r2, [sp, #32]
 801ebbc:	4631      	mov	r1, r6
 801ebbe:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ebc0:	f7ff fdf9 	bl	801e7b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ebc4:	e76d      	b.n	801eaa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ebc6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ebc8:	ea4f 402b 	mov.w	r0, fp, asr #16
 801ebcc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ebd0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ebd4:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ebd8:	1421      	asrs	r1, r4, #16
 801ebda:	930a      	str	r3, [sp, #40]	; 0x28
 801ebdc:	fb0c 0101 	mla	r1, ip, r1, r0
 801ebe0:	9808      	ldr	r0, [sp, #32]
 801ebe2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ebe6:	1845      	adds	r5, r0, r1
 801ebe8:	5c40      	ldrb	r0, [r0, r1]
 801ebea:	796f      	ldrb	r7, [r5, #5]
 801ebec:	7869      	ldrb	r1, [r5, #1]
 801ebee:	f895 8002 	ldrb.w	r8, [r5, #2]
 801ebf2:	f895 a003 	ldrb.w	sl, [r5, #3]
 801ebf6:	f895 9004 	ldrb.w	r9, [r5, #4]
 801ebfa:	970c      	str	r7, [sp, #48]	; 0x30
 801ebfc:	b1a2      	cbz	r2, 801ec28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801ebfe:	2703      	movs	r7, #3
 801ec00:	f06f 0304 	mvn.w	r3, #4
 801ec04:	3505      	adds	r5, #5
 801ec06:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801ec0a:	eb05 070c 	add.w	r7, r5, ip
 801ec0e:	f815 500c 	ldrb.w	r5, [r5, ip]
 801ec12:	9513      	str	r5, [sp, #76]	; 0x4c
 801ec14:	787d      	ldrb	r5, [r7, #1]
 801ec16:	9515      	str	r5, [sp, #84]	; 0x54
 801ec18:	78bd      	ldrb	r5, [r7, #2]
 801ec1a:	9517      	str	r5, [sp, #92]	; 0x5c
 801ec1c:	78fd      	ldrb	r5, [r7, #3]
 801ec1e:	9514      	str	r5, [sp, #80]	; 0x50
 801ec20:	793d      	ldrb	r5, [r7, #4]
 801ec22:	9516      	str	r5, [sp, #88]	; 0x58
 801ec24:	797d      	ldrb	r5, [r7, #5]
 801ec26:	9518      	str	r5, [sp, #96]	; 0x60
 801ec28:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801ec2c:	b292      	uxth	r2, r2
 801ec2e:	3603      	adds	r6, #3
 801ec30:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ec34:	fb03 f502 	mul.w	r5, r3, r2
 801ec38:	011b      	lsls	r3, r3, #4
 801ec3a:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801ec3e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801ec42:	1b5b      	subs	r3, r3, r5
 801ec44:	b292      	uxth	r2, r2
 801ec46:	b29b      	uxth	r3, r3
 801ec48:	1abf      	subs	r7, r7, r2
 801ec4a:	fb03 f909 	mul.w	r9, r3, r9
 801ec4e:	b2bf      	uxth	r7, r7
 801ec50:	fb03 fa0a 	mul.w	sl, r3, sl
 801ec54:	fb07 9901 	mla	r9, r7, r1, r9
 801ec58:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ec5a:	fb07 aa00 	mla	sl, r7, r0, sl
 801ec5e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ec60:	fb02 9901 	mla	r9, r2, r1, r9
 801ec64:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ec66:	fb02 aa00 	mla	sl, r2, r0, sl
 801ec6a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ec6c:	fb05 9901 	mla	r9, r5, r1, r9
 801ec70:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ec72:	fb05 aa00 	mla	sl, r5, r0, sl
 801ec76:	434b      	muls	r3, r1
 801ec78:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801ec7a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ec7e:	fb07 3308 	mla	r3, r7, r8, r3
 801ec82:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec86:	f806 ac06 	strb.w	sl, [r6, #-6]
 801ec8a:	fb02 3201 	mla	r2, r2, r1, r3
 801ec8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ec90:	f806 9c05 	strb.w	r9, [r6, #-5]
 801ec94:	fb05 2503 	mla	r5, r5, r3, r2
 801ec98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ec9a:	122d      	asrs	r5, r5, #8
 801ec9c:	449b      	add	fp, r3
 801ec9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eca0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801eca4:	441c      	add	r4, r3
 801eca6:	e72b      	b.n	801eb00 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eca8:	b01b      	add	sp, #108	; 0x6c
 801ecaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801ecae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecb2:	b087      	sub	sp, #28
 801ecb4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801ecb8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801ecbc:	fb05 7003 	mla	r0, r5, r3, r7
 801ecc0:	2d00      	cmp	r5, #0
 801ecc2:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ecc6:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801ecca:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801ecce:	f2c0 811f 	blt.w	801ef10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801ecd2:	45a8      	cmp	r8, r5
 801ecd4:	f340 811c 	ble.w	801ef10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801ecd8:	2f00      	cmp	r7, #0
 801ecda:	f2c0 8117 	blt.w	801ef0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801ecde:	42bb      	cmp	r3, r7
 801ece0:	f340 8114 	ble.w	801ef0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801ece4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801ece8:	1c7a      	adds	r2, r7, #1
 801ecea:	f100 8114 	bmi.w	801ef16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801ecee:	4293      	cmp	r3, r2
 801ecf0:	f340 8111 	ble.w	801ef16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801ecf4:	2c00      	cmp	r4, #0
 801ecf6:	f000 8110 	beq.w	801ef1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801ecfa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801ecfe:	3501      	adds	r5, #1
 801ed00:	f100 810f 	bmi.w	801ef22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801ed04:	45a8      	cmp	r8, r5
 801ed06:	f340 810c 	ble.w	801ef22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801ed0a:	f1be 0f00 	cmp.w	lr, #0
 801ed0e:	f000 810b 	beq.w	801ef28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801ed12:	2f00      	cmp	r7, #0
 801ed14:	f2c0 8103 	blt.w	801ef1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801ed18:	42bb      	cmp	r3, r7
 801ed1a:	f340 8100 	ble.w	801ef1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801ed1e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801ed22:	3701      	adds	r7, #1
 801ed24:	f100 8103 	bmi.w	801ef2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801ed28:	42bb      	cmp	r3, r7
 801ed2a:	f340 8100 	ble.w	801ef2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801ed2e:	2c00      	cmp	r4, #0
 801ed30:	f000 80ff 	beq.w	801ef32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801ed34:	3301      	adds	r3, #1
 801ed36:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ed3a:	fa1f fc84 	uxth.w	ip, r4
 801ed3e:	fa1f fe8e 	uxth.w	lr, lr
 801ed42:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ed46:	fb0c f90e 	mul.w	r9, ip, lr
 801ed4a:	0e13      	lsrs	r3, r2, #24
 801ed4c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ed50:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ed54:	9302      	str	r3, [sp, #8]
 801ed56:	ebac 0709 	sub.w	r7, ip, r9
 801ed5a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ed5e:	fa1f f48e 	uxth.w	r4, lr
 801ed62:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801ed66:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ed6a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ed6e:	fb0a fe0e 	mul.w	lr, sl, lr
 801ed72:	1b1b      	subs	r3, r3, r4
 801ed74:	fb0a f606 	mul.w	r6, sl, r6
 801ed78:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ed7c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ed80:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ed84:	b29b      	uxth	r3, r3
 801ed86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed8a:	b2bf      	uxth	r7, r7
 801ed8c:	9301      	str	r3, [sp, #4]
 801ed8e:	44e6      	add	lr, ip
 801ed90:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ed94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed98:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ed9c:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801eda0:	9303      	str	r3, [sp, #12]
 801eda2:	0a33      	lsrs	r3, r6, #8
 801eda4:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801eda8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801edac:	9304      	str	r3, [sp, #16]
 801edae:	fb0b f606 	mul.w	r6, fp, r6
 801edb2:	fb0b f000 	mul.w	r0, fp, r0
 801edb6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801edba:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801edbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801edc2:	44b6      	add	lr, r6
 801edc4:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801edc8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801edcc:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801edd0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801edd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801edd8:	fb08 f606 	mul.w	r6, r8, r6
 801eddc:	0a03      	lsrs	r3, r0, #8
 801edde:	fb08 f505 	mul.w	r5, r8, r5
 801ede2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ede6:	0a30      	lsrs	r0, r6, #8
 801ede8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801edec:	9305      	str	r3, [sp, #20]
 801edee:	0e13      	lsrs	r3, r2, #24
 801edf0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801edf4:	fb0e fe07 	mul.w	lr, lr, r7
 801edf8:	4430      	add	r0, r6
 801edfa:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801edfe:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ee02:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801ee06:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ee0a:	0a00      	lsrs	r0, r0, #8
 801ee0c:	435e      	muls	r6, r3
 801ee0e:	0a2d      	lsrs	r5, r5, #8
 801ee10:	435a      	muls	r2, r3
 801ee12:	9b03      	ldr	r3, [sp, #12]
 801ee14:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ee18:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ee1c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ee20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee24:	44b4      	add	ip, r6
 801ee26:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801ee2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee2e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ee32:	9e01      	ldr	r6, [sp, #4]
 801ee34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee38:	fb03 ee06 	mla	lr, r3, r6, lr
 801ee3c:	9b04      	ldr	r3, [sp, #16]
 801ee3e:	0a12      	lsrs	r2, r2, #8
 801ee40:	fb0c ee09 	mla	lr, ip, r9, lr
 801ee44:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801ee48:	9b05      	ldr	r3, [sp, #20]
 801ee4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ee4e:	fb00 ee04 	mla	lr, r0, r4, lr
 801ee52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee56:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801ee5a:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801ee5e:	9b01      	ldr	r3, [sp, #4]
 801ee60:	fb07 fe0e 	mul.w	lr, r7, lr
 801ee64:	fb07 f70b 	mul.w	r7, r7, fp
 801ee68:	fb03 ee06 	mla	lr, r3, r6, lr
 801ee6c:	fb03 730a 	mla	r3, r3, sl, r7
 801ee70:	fb09 e202 	mla	r2, r9, r2, lr
 801ee74:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801ee78:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ee7c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801ee80:	fb04 3408 	mla	r4, r4, r8, r3
 801ee84:	9b02      	ldr	r3, [sp, #8]
 801ee86:	b292      	uxth	r2, r2
 801ee88:	fb09 4903 	mla	r9, r9, r3, r4
 801ee8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee90:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ee94:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ee98:	fb09 f902 	mul.w	r9, r9, r2
 801ee9c:	ea40 0e0e 	orr.w	lr, r0, lr
 801eea0:	f109 0301 	add.w	r3, r9, #1
 801eea4:	fa5f f08e 	uxtb.w	r0, lr
 801eea8:	fb10 f002 	smulbb	r0, r0, r2
 801eeac:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801eeb0:	780b      	ldrb	r3, [r1, #0]
 801eeb2:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801eeb6:	fa5f f989 	uxtb.w	r9, r9
 801eeba:	fb03 0309 	mla	r3, r3, r9, r0
 801eebe:	b29b      	uxth	r3, r3
 801eec0:	1c58      	adds	r0, r3, #1
 801eec2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801eec6:	7848      	ldrb	r0, [r1, #1]
 801eec8:	fb10 f009 	smulbb	r0, r0, r9
 801eecc:	121b      	asrs	r3, r3, #8
 801eece:	700b      	strb	r3, [r1, #0]
 801eed0:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801eed4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801eed8:	fb03 0302 	mla	r3, r3, r2, r0
 801eedc:	b29b      	uxth	r3, r3
 801eede:	1c58      	adds	r0, r3, #1
 801eee0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801eee4:	121b      	asrs	r3, r3, #8
 801eee6:	704b      	strb	r3, [r1, #1]
 801eee8:	788b      	ldrb	r3, [r1, #2]
 801eeea:	fb13 f909 	smulbb	r9, r3, r9
 801eeee:	fb0e 9e02 	mla	lr, lr, r2, r9
 801eef2:	fa1f fe8e 	uxth.w	lr, lr
 801eef6:	f10e 0301 	add.w	r3, lr, #1
 801eefa:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801eefe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ef02:	f881 e002 	strb.w	lr, [r1, #2]
 801ef06:	b007      	add	sp, #28
 801ef08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef0c:	2600      	movs	r6, #0
 801ef0e:	e6eb      	b.n	801ece8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801ef10:	2000      	movs	r0, #0
 801ef12:	4606      	mov	r6, r0
 801ef14:	e6f3      	b.n	801ecfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ef16:	2000      	movs	r0, #0
 801ef18:	e6f1      	b.n	801ecfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ef1a:	4620      	mov	r0, r4
 801ef1c:	e6ef      	b.n	801ecfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ef1e:	2500      	movs	r5, #0
 801ef20:	e6ff      	b.n	801ed22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801ef22:	2200      	movs	r2, #0
 801ef24:	4615      	mov	r5, r2
 801ef26:	e708      	b.n	801ed3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ef28:	4672      	mov	r2, lr
 801ef2a:	4675      	mov	r5, lr
 801ef2c:	e705      	b.n	801ed3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ef2e:	2200      	movs	r2, #0
 801ef30:	e703      	b.n	801ed3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ef32:	4622      	mov	r2, r4
 801ef34:	e701      	b.n	801ed3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801ef36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef3a:	b09d      	sub	sp, #116	; 0x74
 801ef3c:	9219      	str	r2, [sp, #100]	; 0x64
 801ef3e:	9307      	str	r3, [sp, #28]
 801ef40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ef42:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801ef46:	901b      	str	r0, [sp, #108]	; 0x6c
 801ef48:	931a      	str	r3, [sp, #104]	; 0x68
 801ef4a:	6850      	ldr	r0, [r2, #4]
 801ef4c:	9117      	str	r1, [sp, #92]	; 0x5c
 801ef4e:	6812      	ldr	r2, [r2, #0]
 801ef50:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801ef54:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801ef58:	fb00 1303 	mla	r3, r0, r3, r1
 801ef5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef60:	18d3      	adds	r3, r2, r3
 801ef62:	930a      	str	r3, [sp, #40]	; 0x28
 801ef64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef66:	681b      	ldr	r3, [r3, #0]
 801ef68:	9310      	str	r3, [sp, #64]	; 0x40
 801ef6a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801ef6e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	dc03      	bgt.n	801ef7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ef76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	f340 8368 	ble.w	801f64e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ef7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef88:	1e48      	subs	r0, r1, #1
 801ef8a:	1e57      	subs	r7, r2, #1
 801ef8c:	9b07      	ldr	r3, [sp, #28]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	f340 8187 	ble.w	801f2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ef94:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ef98:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ef9c:	d406      	bmi.n	801efac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef9e:	4584      	cmp	ip, r0
 801efa0:	da04      	bge.n	801efac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	db02      	blt.n	801efac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801efa6:	42bb      	cmp	r3, r7
 801efa8:	f2c0 817c 	blt.w	801f2a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801efac:	f11c 0c01 	adds.w	ip, ip, #1
 801efb0:	f100 816c 	bmi.w	801f28c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801efb4:	4561      	cmp	r1, ip
 801efb6:	f2c0 8169 	blt.w	801f28c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801efba:	3301      	adds	r3, #1
 801efbc:	f100 8166 	bmi.w	801f28c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801efc0:	429a      	cmp	r2, r3
 801efc2:	f2c0 8163 	blt.w	801f28c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801efc6:	9b07      	ldr	r3, [sp, #28]
 801efc8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801efca:	9318      	str	r3, [sp, #96]	; 0x60
 801efcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801efce:	2b00      	cmp	r3, #0
 801efd0:	f340 8186 	ble.w	801f2e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801efd4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801efd6:	142a      	asrs	r2, r5, #16
 801efd8:	ea4f 4026 	mov.w	r0, r6, asr #16
 801efdc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801efe0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801efe4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801efe8:	f100 81cb 	bmi.w	801f382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801efec:	f10e 38ff 	add.w	r8, lr, #4294967295
 801eff0:	4542      	cmp	r2, r8
 801eff2:	f280 81c6 	bge.w	801f382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801eff6:	2800      	cmp	r0, #0
 801eff8:	f2c0 81c3 	blt.w	801f382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801effc:	f103 38ff 	add.w	r8, r3, #4294967295
 801f000:	4540      	cmp	r0, r8
 801f002:	f280 81be 	bge.w	801f382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f006:	fa0f f38e 	sxth.w	r3, lr
 801f00a:	fb00 2203 	mla	r2, r0, r3, r2
 801f00e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f010:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801f014:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f018:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f01c:	2900      	cmp	r1, #0
 801f01e:	f000 81a6 	beq.w	801f36e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801f022:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f026:	900c      	str	r0, [sp, #48]	; 0x30
 801f028:	0e00      	lsrs	r0, r0, #24
 801f02a:	9013      	str	r0, [sp, #76]	; 0x4c
 801f02c:	f1bc 0f00 	cmp.w	ip, #0
 801f030:	d00f      	beq.n	801f052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f032:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f036:	3b01      	subs	r3, #1
 801f038:	009b      	lsls	r3, r3, #2
 801f03a:	3304      	adds	r3, #4
 801f03c:	eb08 0003 	add.w	r0, r8, r3
 801f040:	f858 3003 	ldr.w	r3, [r8, r3]
 801f044:	9308      	str	r3, [sp, #32]
 801f046:	0e1b      	lsrs	r3, r3, #24
 801f048:	9311      	str	r3, [sp, #68]	; 0x44
 801f04a:	6843      	ldr	r3, [r0, #4]
 801f04c:	930d      	str	r3, [sp, #52]	; 0x34
 801f04e:	0e1b      	lsrs	r3, r3, #24
 801f050:	9314      	str	r3, [sp, #80]	; 0x50
 801f052:	b289      	uxth	r1, r1
 801f054:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f056:	fa1f fc8c 	uxth.w	ip, ip
 801f05a:	0108      	lsls	r0, r1, #4
 801f05c:	fb01 f90c 	mul.w	r9, r1, ip
 801f060:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f064:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801f068:	eba0 0809 	sub.w	r8, r0, r9
 801f06c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f06e:	fa1f f18c 	uxth.w	r1, ip
 801f072:	fa1f f888 	uxth.w	r8, r8
 801f076:	1a5b      	subs	r3, r3, r1
 801f078:	fb08 f000 	mul.w	r0, r8, r0
 801f07c:	b29b      	uxth	r3, r3
 801f07e:	fb03 000e 	mla	r0, r3, lr, r0
 801f082:	fb01 0004 	mla	r0, r1, r4, r0
 801f086:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f088:	fb09 0004 	mla	r0, r9, r4, r0
 801f08c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f090:	2800      	cmp	r0, #0
 801f092:	f000 80f2 	beq.w	801f27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f096:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f09a:	d01b      	beq.n	801f0d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f09c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801f0a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f0a4:	fb0e fa0a 	mul.w	sl, lr, sl
 801f0a8:	fb0e fe02 	mul.w	lr, lr, r2
 801f0ac:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801f0b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f0b4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f0b8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f0bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f0c0:	4452      	add	r2, sl
 801f0c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0c6:	0a12      	lsrs	r2, r2, #8
 801f0c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f0cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f0d0:	ea42 020c 	orr.w	r2, r2, ip
 801f0d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f0d6:	2cff      	cmp	r4, #255	; 0xff
 801f0d8:	d021      	beq.n	801f11e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f0da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f0dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f0e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f0e2:	fb04 fb0b 	mul.w	fp, r4, fp
 801f0e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f0e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f0ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f0ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f0f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f0f6:	fb04 fa0a 	mul.w	sl, r4, sl
 801f0fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f0fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f102:	44de      	add	lr, fp
 801f104:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f108:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f10c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f110:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f114:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f118:	ea4e 040a 	orr.w	r4, lr, sl
 801f11c:	940c      	str	r4, [sp, #48]	; 0x30
 801f11e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f120:	2cff      	cmp	r4, #255	; 0xff
 801f122:	d021      	beq.n	801f168 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f124:	9c08      	ldr	r4, [sp, #32]
 801f126:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f12a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f12c:	fb04 fb0b 	mul.w	fp, r4, fp
 801f130:	9c08      	ldr	r4, [sp, #32]
 801f132:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f136:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f138:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f13c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f140:	fb04 fa0a 	mul.w	sl, r4, sl
 801f144:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f148:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f14c:	44de      	add	lr, fp
 801f14e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f152:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f156:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f15a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f15e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f162:	ea4e 040a 	orr.w	r4, lr, sl
 801f166:	9408      	str	r4, [sp, #32]
 801f168:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f16a:	2cff      	cmp	r4, #255	; 0xff
 801f16c:	d021      	beq.n	801f1b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f16e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f170:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f174:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f176:	fb04 fb0b 	mul.w	fp, r4, fp
 801f17a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f17c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f180:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f182:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f186:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f18a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f18e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f192:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f196:	44de      	add	lr, fp
 801f198:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f19c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f1a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f1ac:	ea4e 040a 	orr.w	r4, lr, sl
 801f1b0:	940d      	str	r4, [sp, #52]	; 0x34
 801f1b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f1b4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f1b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f1bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f1c0:	9c08      	ldr	r4, [sp, #32]
 801f1c2:	fb08 fc0c 	mul.w	ip, r8, ip
 801f1c6:	fb03 cc0e 	mla	ip, r3, lr, ip
 801f1ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f1ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f1d0:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f1d4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f1d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f1da:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f1de:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f1e2:	fb08 f80e 	mul.w	r8, r8, lr
 801f1e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1ea:	fb03 8202 	mla	r2, r3, r2, r8
 801f1ee:	9b08      	ldr	r3, [sp, #32]
 801f1f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1f4:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801f1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f1fa:	fb01 220a 	mla	r2, r1, sl, r2
 801f1fe:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801f202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f204:	fb09 2901 	mla	r9, r9, r1, r2
 801f208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f20a:	4343      	muls	r3, r0
 801f20c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f210:	1c58      	adds	r0, r3, #1
 801f212:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f216:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f21a:	783b      	ldrb	r3, [r7, #0]
 801f21c:	ea4c 0c09 	orr.w	ip, ip, r9
 801f220:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f224:	fa5f f28c 	uxtb.w	r2, ip
 801f228:	b2c0      	uxtb	r0, r0
 801f22a:	fb12 f201 	smulbb	r2, r2, r1
 801f22e:	fb03 2300 	mla	r3, r3, r0, r2
 801f232:	b29b      	uxth	r3, r3
 801f234:	1c5a      	adds	r2, r3, #1
 801f236:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f23a:	787a      	ldrb	r2, [r7, #1]
 801f23c:	fb12 f200 	smulbb	r2, r2, r0
 801f240:	121b      	asrs	r3, r3, #8
 801f242:	703b      	strb	r3, [r7, #0]
 801f244:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f248:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f24c:	fb03 2301 	mla	r3, r3, r1, r2
 801f250:	b29b      	uxth	r3, r3
 801f252:	1c5a      	adds	r2, r3, #1
 801f254:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f258:	121b      	asrs	r3, r3, #8
 801f25a:	707b      	strb	r3, [r7, #1]
 801f25c:	78bb      	ldrb	r3, [r7, #2]
 801f25e:	fb13 f000 	smulbb	r0, r3, r0
 801f262:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f266:	fa1f fc8c 	uxth.w	ip, ip
 801f26a:	f10c 0301 	add.w	r3, ip, #1
 801f26e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f272:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f276:	f887 c002 	strb.w	ip, [r7, #2]
 801f27a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f27c:	3703      	adds	r7, #3
 801f27e:	441d      	add	r5, r3
 801f280:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f282:	441e      	add	r6, r3
 801f284:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f286:	3b01      	subs	r3, #1
 801f288:	9318      	str	r3, [sp, #96]	; 0x60
 801f28a:	e69f      	b.n	801efcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f28c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f28e:	441d      	add	r5, r3
 801f290:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f292:	441e      	add	r6, r3
 801f294:	9b07      	ldr	r3, [sp, #28]
 801f296:	3b01      	subs	r3, #1
 801f298:	9307      	str	r3, [sp, #28]
 801f29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f29c:	3303      	adds	r3, #3
 801f29e:	930a      	str	r3, [sp, #40]	; 0x28
 801f2a0:	e674      	b.n	801ef8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f2a2:	d025      	beq.n	801f2f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f2a4:	9b07      	ldr	r3, [sp, #28]
 801f2a6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f2a8:	3b01      	subs	r3, #1
 801f2aa:	fb00 5003 	mla	r0, r0, r3, r5
 801f2ae:	1400      	asrs	r0, r0, #16
 801f2b0:	f53f ae89 	bmi.w	801efc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f2b4:	3901      	subs	r1, #1
 801f2b6:	4288      	cmp	r0, r1
 801f2b8:	f6bf ae85 	bge.w	801efc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f2bc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f2be:	fb01 6303 	mla	r3, r1, r3, r6
 801f2c2:	141b      	asrs	r3, r3, #16
 801f2c4:	f53f ae7f 	bmi.w	801efc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f2c8:	3a01      	subs	r2, #1
 801f2ca:	4293      	cmp	r3, r2
 801f2cc:	f6bf ae7b 	bge.w	801efc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f2d6:	f103 0e03 	add.w	lr, r3, #3
 801f2da:	f1bb 0f00 	cmp.w	fp, #0
 801f2de:	dc6e      	bgt.n	801f3be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f2e0:	9b07      	ldr	r3, [sp, #28]
 801f2e2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f2ec:	4423      	add	r3, r4
 801f2ee:	930a      	str	r3, [sp, #40]	; 0x28
 801f2f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	f340 81ab 	ble.w	801f64e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f2f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f302:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f306:	eef0 6a62 	vmov.f32	s13, s5
 801f30a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f30e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f312:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f316:	ee16 5a90 	vmov	r5, s13
 801f31a:	eef0 6a43 	vmov.f32	s13, s6
 801f31e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f322:	ee16 6a90 	vmov	r6, s13
 801f326:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f32a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f32e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f332:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f336:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f33a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f33e:	ee12 2a90 	vmov	r2, s5
 801f342:	eef0 2a47 	vmov.f32	s5, s14
 801f346:	fb92 f3f3 	sdiv	r3, r2, r3
 801f34a:	ee13 2a10 	vmov	r2, s6
 801f34e:	9329      	str	r3, [sp, #164]	; 0xa4
 801f350:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f352:	eeb0 3a67 	vmov.f32	s6, s15
 801f356:	fb92 f3f3 	sdiv	r3, r2, r3
 801f35a:	932a      	str	r3, [sp, #168]	; 0xa8
 801f35c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f35e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f360:	3b01      	subs	r3, #1
 801f362:	9317      	str	r3, [sp, #92]	; 0x5c
 801f364:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f366:	bf08      	it	eq
 801f368:	4613      	moveq	r3, r2
 801f36a:	9307      	str	r3, [sp, #28]
 801f36c:	e600      	b.n	801ef70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f36e:	f1bc 0f00 	cmp.w	ip, #0
 801f372:	f43f ae6e 	beq.w	801f052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f376:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f37a:	9308      	str	r3, [sp, #32]
 801f37c:	0e1b      	lsrs	r3, r3, #24
 801f37e:	9311      	str	r3, [sp, #68]	; 0x44
 801f380:	e667      	b.n	801f052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f382:	f112 0801 	adds.w	r8, r2, #1
 801f386:	f53f af78 	bmi.w	801f27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f38a:	45c6      	cmp	lr, r8
 801f38c:	f6ff af75 	blt.w	801f27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f390:	f110 0801 	adds.w	r8, r0, #1
 801f394:	f53f af71 	bmi.w	801f27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f398:	4543      	cmp	r3, r8
 801f39a:	f6ff af6e 	blt.w	801f27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f39e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f3a0:	b21b      	sxth	r3, r3
 801f3a2:	9201      	str	r2, [sp, #4]
 801f3a4:	9300      	str	r3, [sp, #0]
 801f3a6:	fa0f f38e 	sxth.w	r3, lr
 801f3aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f3b0:	e9cd c404 	strd	ip, r4, [sp, #16]
 801f3b4:	4639      	mov	r1, r7
 801f3b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f3b8:	f7ff fc79 	bl	801ecae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801f3bc:	e75d      	b.n	801f27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f3be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f3c0:	142f      	asrs	r7, r5, #16
 801f3c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f3c4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f3c8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801f3cc:	1433      	asrs	r3, r6, #16
 801f3ce:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f3d2:	fb02 7303 	mla	r3, r2, r3, r7
 801f3d6:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801f3da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f3de:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f3e2:	2900      	cmp	r1, #0
 801f3e4:	f000 812a 	beq.w	801f63c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801f3e8:	687c      	ldr	r4, [r7, #4]
 801f3ea:	940e      	str	r4, [sp, #56]	; 0x38
 801f3ec:	0e24      	lsrs	r4, r4, #24
 801f3ee:	9415      	str	r4, [sp, #84]	; 0x54
 801f3f0:	b178      	cbz	r0, 801f412 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f3f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801f3f6:	3a01      	subs	r2, #1
 801f3f8:	0092      	lsls	r2, r2, #2
 801f3fa:	3204      	adds	r2, #4
 801f3fc:	eb07 0802 	add.w	r8, r7, r2
 801f400:	58ba      	ldr	r2, [r7, r2]
 801f402:	9209      	str	r2, [sp, #36]	; 0x24
 801f404:	0e12      	lsrs	r2, r2, #24
 801f406:	9212      	str	r2, [sp, #72]	; 0x48
 801f408:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f40c:	920f      	str	r2, [sp, #60]	; 0x3c
 801f40e:	0e12      	lsrs	r2, r2, #24
 801f410:	9216      	str	r2, [sp, #88]	; 0x58
 801f412:	b289      	uxth	r1, r1
 801f414:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f416:	b280      	uxth	r0, r0
 801f418:	fb01 f900 	mul.w	r9, r1, r0
 801f41c:	0109      	lsls	r1, r1, #4
 801f41e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f422:	eba1 0809 	sub.w	r8, r1, r9
 801f426:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f42a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f42c:	b280      	uxth	r0, r0
 801f42e:	fa1f f888 	uxth.w	r8, r8
 801f432:	1a12      	subs	r2, r2, r0
 801f434:	fb08 f101 	mul.w	r1, r8, r1
 801f438:	b292      	uxth	r2, r2
 801f43a:	fb02 110c 	mla	r1, r2, ip, r1
 801f43e:	fb00 1104 	mla	r1, r0, r4, r1
 801f442:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f444:	fb09 1104 	mla	r1, r9, r4, r1
 801f448:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f44c:	2900      	cmp	r1, #0
 801f44e:	f000 80ec 	beq.w	801f62a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801f452:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f456:	d019      	beq.n	801f48c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801f458:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f45c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f460:	fb0c fa0a 	mul.w	sl, ip, sl
 801f464:	fb0c fc03 	mul.w	ip, ip, r3
 801f468:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f46c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f470:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f474:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f478:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f47c:	4453      	add	r3, sl
 801f47e:	0a3f      	lsrs	r7, r7, #8
 801f480:	0a1b      	lsrs	r3, r3, #8
 801f482:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f486:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f48a:	433b      	orrs	r3, r7
 801f48c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f48e:	2cff      	cmp	r4, #255	; 0xff
 801f490:	d020      	beq.n	801f4d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801f492:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f494:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f498:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f49a:	4367      	muls	r7, r4
 801f49c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f49e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f4a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f4a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f4a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f4ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4b0:	fb04 fa0a 	mul.w	sl, r4, sl
 801f4b4:	44bc      	add	ip, r7
 801f4b6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f4ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f4c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f4ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f4ce:	ea4c 040a 	orr.w	r4, ip, sl
 801f4d2:	940e      	str	r4, [sp, #56]	; 0x38
 801f4d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f4d6:	2cff      	cmp	r4, #255	; 0xff
 801f4d8:	d020      	beq.n	801f51c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801f4da:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f4dc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f4e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f4e2:	4367      	muls	r7, r4
 801f4e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f4e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f4ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f4ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f4f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f4f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801f4fc:	44bc      	add	ip, r7
 801f4fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f502:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f506:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f50a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f50e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f512:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f516:	ea4c 040a 	orr.w	r4, ip, sl
 801f51a:	9409      	str	r4, [sp, #36]	; 0x24
 801f51c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f51e:	2cff      	cmp	r4, #255	; 0xff
 801f520:	d020      	beq.n	801f564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801f522:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f524:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f528:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f52a:	4367      	muls	r7, r4
 801f52c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f52e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f532:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f536:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f538:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f53c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f540:	fb04 fa0a 	mul.w	sl, r4, sl
 801f544:	44bc      	add	ip, r7
 801f546:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f54a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f54e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f552:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f556:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f55a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f55e:	ea4c 040a 	orr.w	r4, ip, sl
 801f562:	940f      	str	r4, [sp, #60]	; 0x3c
 801f564:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f566:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f56a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f56e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f572:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f574:	fb08 f707 	mul.w	r7, r8, r7
 801f578:	fb02 770c 	mla	r7, r2, ip, r7
 801f57c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f580:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f582:	fb00 770c 	mla	r7, r0, ip, r7
 801f586:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f58a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f58c:	fb09 770c 	mla	r7, r9, ip, r7
 801f590:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801f594:	fb08 f80c 	mul.w	r8, r8, ip
 801f598:	0a3f      	lsrs	r7, r7, #8
 801f59a:	fb02 8303 	mla	r3, r2, r3, r8
 801f59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f5a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f5a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5aa:	fb00 330a 	mla	r3, r0, sl, r3
 801f5ae:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f5b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f5b4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f5be:	434b      	muls	r3, r1
 801f5c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f5c4:	1c59      	adds	r1, r3, #1
 801f5c6:	ea47 070c 	orr.w	r7, r7, ip
 801f5ca:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f5ce:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f5d2:	b2fa      	uxtb	r2, r7
 801f5d4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f5d8:	fb12 f200 	smulbb	r2, r2, r0
 801f5dc:	b2c9      	uxtb	r1, r1
 801f5de:	fb03 2301 	mla	r3, r3, r1, r2
 801f5e2:	b29b      	uxth	r3, r3
 801f5e4:	1c5a      	adds	r2, r3, #1
 801f5e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f5ea:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f5ee:	fb12 f201 	smulbb	r2, r2, r1
 801f5f2:	121b      	asrs	r3, r3, #8
 801f5f4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f5f8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801f5fc:	0c3f      	lsrs	r7, r7, #16
 801f5fe:	fb03 2300 	mla	r3, r3, r0, r2
 801f602:	b29b      	uxth	r3, r3
 801f604:	1c5a      	adds	r2, r3, #1
 801f606:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f60a:	121b      	asrs	r3, r3, #8
 801f60c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f610:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f614:	fb13 f101 	smulbb	r1, r3, r1
 801f618:	fb07 1700 	mla	r7, r7, r0, r1
 801f61c:	b2bf      	uxth	r7, r7
 801f61e:	1c79      	adds	r1, r7, #1
 801f620:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f624:	123f      	asrs	r7, r7, #8
 801f626:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f62a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f62c:	f10e 0e03 	add.w	lr, lr, #3
 801f630:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f634:	441d      	add	r5, r3
 801f636:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f638:	441e      	add	r6, r3
 801f63a:	e64e      	b.n	801f2da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801f63c:	2800      	cmp	r0, #0
 801f63e:	f43f aee8 	beq.w	801f412 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f642:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f646:	9209      	str	r2, [sp, #36]	; 0x24
 801f648:	0e12      	lsrs	r2, r2, #24
 801f64a:	9212      	str	r2, [sp, #72]	; 0x48
 801f64c:	e6e1      	b.n	801f412 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f64e:	b01d      	add	sp, #116	; 0x74
 801f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f654 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801f654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f658:	b087      	sub	sp, #28
 801f65a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801f65e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f662:	fb05 7003 	mla	r0, r5, r3, r7
 801f666:	2d00      	cmp	r5, #0
 801f668:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801f66c:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801f670:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f674:	f2c0 810a 	blt.w	801f88c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f678:	45a8      	cmp	r8, r5
 801f67a:	f340 8107 	ble.w	801f88c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f67e:	2f00      	cmp	r7, #0
 801f680:	f2c0 8102 	blt.w	801f888 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f684:	42bb      	cmp	r3, r7
 801f686:	f340 80ff 	ble.w	801f888 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f68a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f68e:	1c7a      	adds	r2, r7, #1
 801f690:	f100 80ff 	bmi.w	801f892 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f694:	4293      	cmp	r3, r2
 801f696:	f340 80fc 	ble.w	801f892 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f69a:	2c00      	cmp	r4, #0
 801f69c:	f000 80fb 	beq.w	801f896 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801f6a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f6a4:	3501      	adds	r5, #1
 801f6a6:	f100 80fa 	bmi.w	801f89e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f6aa:	45a8      	cmp	r8, r5
 801f6ac:	f340 80f7 	ble.w	801f89e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f6b0:	f1be 0f00 	cmp.w	lr, #0
 801f6b4:	f000 80f6 	beq.w	801f8a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801f6b8:	2f00      	cmp	r7, #0
 801f6ba:	f2c0 80ee 	blt.w	801f89a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f6be:	42bb      	cmp	r3, r7
 801f6c0:	f340 80eb 	ble.w	801f89a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f6c4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f6c8:	3701      	adds	r7, #1
 801f6ca:	f100 80ee 	bmi.w	801f8aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f6ce:	42bb      	cmp	r3, r7
 801f6d0:	f340 80eb 	ble.w	801f8aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f6d4:	2c00      	cmp	r4, #0
 801f6d6:	f000 80ea 	beq.w	801f8ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801f6da:	3301      	adds	r3, #1
 801f6dc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f6e0:	fa1f fc84 	uxth.w	ip, r4
 801f6e4:	fa1f fe8e 	uxth.w	lr, lr
 801f6e8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f6ec:	fb0c f90e 	mul.w	r9, ip, lr
 801f6f0:	0e13      	lsrs	r3, r2, #24
 801f6f2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f6f6:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f6fa:	9302      	str	r3, [sp, #8]
 801f6fc:	ebac 0709 	sub.w	r7, ip, r9
 801f700:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f704:	fa1f f48e 	uxth.w	r4, lr
 801f708:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801f70c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f710:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f714:	fb0a fe0e 	mul.w	lr, sl, lr
 801f718:	1b1b      	subs	r3, r3, r4
 801f71a:	fb0a f606 	mul.w	r6, sl, r6
 801f71e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f722:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f726:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f72a:	b29b      	uxth	r3, r3
 801f72c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f730:	b2bf      	uxth	r7, r7
 801f732:	9301      	str	r3, [sp, #4]
 801f734:	44e6      	add	lr, ip
 801f736:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f73a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f73e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f742:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801f746:	9303      	str	r3, [sp, #12]
 801f748:	0a33      	lsrs	r3, r6, #8
 801f74a:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801f74e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f752:	9304      	str	r3, [sp, #16]
 801f754:	fb0b f606 	mul.w	r6, fp, r6
 801f758:	fb0b f000 	mul.w	r0, fp, r0
 801f75c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f760:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f764:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f768:	44b6      	add	lr, r6
 801f76a:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801f76e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f772:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801f776:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f77a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f77e:	fb08 f606 	mul.w	r6, r8, r6
 801f782:	0a03      	lsrs	r3, r0, #8
 801f784:	fb08 f505 	mul.w	r5, r8, r5
 801f788:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f78c:	0a30      	lsrs	r0, r6, #8
 801f78e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f792:	9305      	str	r3, [sp, #20]
 801f794:	0e13      	lsrs	r3, r2, #24
 801f796:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f79a:	fb0e fe07 	mul.w	lr, lr, r7
 801f79e:	4430      	add	r0, r6
 801f7a0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f7a4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f7a8:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801f7ac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f7b0:	0a00      	lsrs	r0, r0, #8
 801f7b2:	435e      	muls	r6, r3
 801f7b4:	0a2d      	lsrs	r5, r5, #8
 801f7b6:	435a      	muls	r2, r3
 801f7b8:	9b03      	ldr	r3, [sp, #12]
 801f7ba:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f7be:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f7c2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f7c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7ca:	44b4      	add	ip, r6
 801f7cc:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801f7d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7d4:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f7d8:	9e01      	ldr	r6, [sp, #4]
 801f7da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7de:	fb03 ee06 	mla	lr, r3, r6, lr
 801f7e2:	9b04      	ldr	r3, [sp, #16]
 801f7e4:	0a12      	lsrs	r2, r2, #8
 801f7e6:	fb0c ee09 	mla	lr, ip, r9, lr
 801f7ea:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801f7ee:	9b05      	ldr	r3, [sp, #20]
 801f7f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f7f4:	fb00 ee04 	mla	lr, r0, r4, lr
 801f7f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7fc:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801f800:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801f804:	9b01      	ldr	r3, [sp, #4]
 801f806:	fb07 fe0e 	mul.w	lr, r7, lr
 801f80a:	fb07 f70b 	mul.w	r7, r7, fp
 801f80e:	fb03 ee06 	mla	lr, r3, r6, lr
 801f812:	fb03 730a 	mla	r3, r3, sl, r7
 801f816:	fb09 e202 	mla	r2, r9, r2, lr
 801f81a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801f81e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f822:	fb04 3408 	mla	r4, r4, r8, r3
 801f826:	9b02      	ldr	r3, [sp, #8]
 801f828:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f82c:	fb09 4903 	mla	r9, r9, r3, r4
 801f830:	780b      	ldrb	r3, [r1, #0]
 801f832:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f836:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801f83a:	ea40 0e0e 	orr.w	lr, r0, lr
 801f83e:	fa5f f989 	uxtb.w	r9, r9
 801f842:	fb03 f209 	mul.w	r2, r3, r9
 801f846:	1c53      	adds	r3, r2, #1
 801f848:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f84c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801f850:	700b      	strb	r3, [r1, #0]
 801f852:	784b      	ldrb	r3, [r1, #1]
 801f854:	fb03 f309 	mul.w	r3, r3, r9
 801f858:	1c5a      	adds	r2, r3, #1
 801f85a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f85e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f862:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f866:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f86a:	704b      	strb	r3, [r1, #1]
 801f86c:	788b      	ldrb	r3, [r1, #2]
 801f86e:	fb03 f909 	mul.w	r9, r3, r9
 801f872:	f109 0301 	add.w	r3, r9, #1
 801f876:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f87a:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801f87e:	f881 e002 	strb.w	lr, [r1, #2]
 801f882:	b007      	add	sp, #28
 801f884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f888:	2600      	movs	r6, #0
 801f88a:	e700      	b.n	801f68e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801f88c:	2000      	movs	r0, #0
 801f88e:	4606      	mov	r6, r0
 801f890:	e708      	b.n	801f6a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f892:	2000      	movs	r0, #0
 801f894:	e706      	b.n	801f6a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f896:	4620      	mov	r0, r4
 801f898:	e704      	b.n	801f6a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f89a:	2500      	movs	r5, #0
 801f89c:	e714      	b.n	801f6c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801f89e:	2200      	movs	r2, #0
 801f8a0:	4615      	mov	r5, r2
 801f8a2:	e71d      	b.n	801f6e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f8a4:	4672      	mov	r2, lr
 801f8a6:	4675      	mov	r5, lr
 801f8a8:	e71a      	b.n	801f6e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f8aa:	2200      	movs	r2, #0
 801f8ac:	e718      	b.n	801f6e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f8ae:	4622      	mov	r2, r4
 801f8b0:	e716      	b.n	801f6e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801f8b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8b6:	b099      	sub	sp, #100	; 0x64
 801f8b8:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801f8bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f8be:	9017      	str	r0, [sp, #92]	; 0x5c
 801f8c0:	9306      	str	r3, [sp, #24]
 801f8c2:	6850      	ldr	r0, [r2, #4]
 801f8c4:	6812      	ldr	r2, [r2, #0]
 801f8c6:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f8ca:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801f8ce:	fb00 1303 	mla	r3, r0, r3, r1
 801f8d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8d6:	18d3      	adds	r3, r2, r3
 801f8d8:	9309      	str	r3, [sp, #36]	; 0x24
 801f8da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	930e      	str	r3, [sp, #56]	; 0x38
 801f8e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	dc03      	bgt.n	801f8ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f8e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	f340 8360 	ble.w	801ffae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f8ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f8f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f8f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f8f8:	1e48      	subs	r0, r1, #1
 801f8fa:	1e57      	subs	r7, r2, #1
 801f8fc:	9b06      	ldr	r3, [sp, #24]
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	f340 817b 	ble.w	801fbfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801f904:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f908:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f90c:	d406      	bmi.n	801f91c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f90e:	4584      	cmp	ip, r0
 801f910:	da04      	bge.n	801f91c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f912:	2b00      	cmp	r3, #0
 801f914:	db02      	blt.n	801f91c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f916:	42bb      	cmp	r3, r7
 801f918:	f2c0 8170 	blt.w	801fbfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f91c:	f11c 0c01 	adds.w	ip, ip, #1
 801f920:	f100 8160 	bmi.w	801fbe4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f924:	4561      	cmp	r1, ip
 801f926:	f2c0 815d 	blt.w	801fbe4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f92a:	3301      	adds	r3, #1
 801f92c:	f100 815a 	bmi.w	801fbe4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f930:	429a      	cmp	r2, r3
 801f932:	f2c0 8157 	blt.w	801fbe4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f936:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f93a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f93c:	f1b8 0f00 	cmp.w	r8, #0
 801f940:	f340 8179 	ble.w	801fc36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f944:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f946:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f94a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f94c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f950:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f954:	142a      	asrs	r2, r5, #16
 801f956:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f95a:	689b      	ldr	r3, [r3, #8]
 801f95c:	f100 81be 	bmi.w	801fcdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f960:	f103 39ff 	add.w	r9, r3, #4294967295
 801f964:	454a      	cmp	r2, r9
 801f966:	f280 81b9 	bge.w	801fcdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f96a:	f1bc 0f00 	cmp.w	ip, #0
 801f96e:	f2c0 81b5 	blt.w	801fcdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f972:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f976:	45cc      	cmp	ip, r9
 801f978:	f280 81b0 	bge.w	801fcdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f97c:	b21b      	sxth	r3, r3
 801f97e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f980:	fb0c 2203 	mla	r2, ip, r3, r2
 801f984:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801f988:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f98c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f990:	2900      	cmp	r1, #0
 801f992:	f000 8197 	beq.w	801fcc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801f996:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801f99a:	940a      	str	r4, [sp, #40]	; 0x28
 801f99c:	0e24      	lsrs	r4, r4, #24
 801f99e:	9411      	str	r4, [sp, #68]	; 0x44
 801f9a0:	b180      	cbz	r0, 801f9c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f9a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f9a6:	3b01      	subs	r3, #1
 801f9a8:	009b      	lsls	r3, r3, #2
 801f9aa:	3304      	adds	r3, #4
 801f9ac:	eb09 0c03 	add.w	ip, r9, r3
 801f9b0:	f859 3003 	ldr.w	r3, [r9, r3]
 801f9b4:	9307      	str	r3, [sp, #28]
 801f9b6:	0e1b      	lsrs	r3, r3, #24
 801f9b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801f9ba:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f9be:	930b      	str	r3, [sp, #44]	; 0x2c
 801f9c0:	0e1b      	lsrs	r3, r3, #24
 801f9c2:	9312      	str	r3, [sp, #72]	; 0x48
 801f9c4:	b289      	uxth	r1, r1
 801f9c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f9c8:	b280      	uxth	r0, r0
 801f9ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f9cc:	fb01 fa00 	mul.w	sl, r1, r0
 801f9d0:	0109      	lsls	r1, r1, #4
 801f9d2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f9d6:	eba1 090a 	sub.w	r9, r1, sl
 801f9da:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801f9de:	b280      	uxth	r0, r0
 801f9e0:	fa1f f989 	uxth.w	r9, r9
 801f9e4:	1a09      	subs	r1, r1, r0
 801f9e6:	fb09 f303 	mul.w	r3, r9, r3
 801f9ea:	b289      	uxth	r1, r1
 801f9ec:	fb01 330e 	mla	r3, r1, lr, r3
 801f9f0:	fb00 3304 	mla	r3, r0, r4, r3
 801f9f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f9f6:	fb0a 3304 	mla	r3, sl, r4, r3
 801f9fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	f000 80e8 	beq.w	801fbd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fa04:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fa08:	d01b      	beq.n	801fa42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801fa0a:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801fa0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fa12:	fb0e fb0b 	mul.w	fp, lr, fp
 801fa16:	fb0e fe02 	mul.w	lr, lr, r2
 801fa1a:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801fa1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fa22:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fa26:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fa2a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fa2e:	445a      	add	r2, fp
 801fa30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa34:	0a12      	lsrs	r2, r2, #8
 801fa36:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fa3a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fa3e:	ea42 020c 	orr.w	r2, r2, ip
 801fa42:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fa44:	2cff      	cmp	r4, #255	; 0xff
 801fa46:	d021      	beq.n	801fa8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801fa48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fa4a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fa4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fa50:	fb04 fc0c 	mul.w	ip, r4, ip
 801fa54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fa56:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fa5a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801fa5e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fa60:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fa64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fa68:	fb04 fb0b 	mul.w	fp, r4, fp
 801fa6c:	44e6      	add	lr, ip
 801fa6e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801fa72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa76:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801fa7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fa7e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fa82:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fa86:	ea4e 040b 	orr.w	r4, lr, fp
 801fa8a:	940a      	str	r4, [sp, #40]	; 0x28
 801fa8c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fa8e:	2cff      	cmp	r4, #255	; 0xff
 801fa90:	d021      	beq.n	801fad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801fa92:	9c07      	ldr	r4, [sp, #28]
 801fa94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fa98:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fa9a:	fb04 fc0c 	mul.w	ip, r4, ip
 801fa9e:	9c07      	ldr	r4, [sp, #28]
 801faa0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801faa4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801faa8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801faaa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801faae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fab2:	fb04 fb0b 	mul.w	fp, r4, fp
 801fab6:	44e6      	add	lr, ip
 801fab8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801fabc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fac0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801fac4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fac8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801facc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fad0:	ea4e 040b 	orr.w	r4, lr, fp
 801fad4:	9407      	str	r4, [sp, #28]
 801fad6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fad8:	2cff      	cmp	r4, #255	; 0xff
 801fada:	d021      	beq.n	801fb20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801fadc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fade:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fae2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fae4:	fb04 fc0c 	mul.w	ip, r4, ip
 801fae8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801faea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801faee:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801faf2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801faf4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801faf8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fafc:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb00:	44e6      	add	lr, ip
 801fb02:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801fb06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb0a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801fb0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb12:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fb16:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fb1a:	ea4e 040b 	orr.w	r4, lr, fp
 801fb1e:	940b      	str	r4, [sp, #44]	; 0x2c
 801fb20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb22:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fb26:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fb2a:	2bff      	cmp	r3, #255	; 0xff
 801fb2c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fb30:	9c07      	ldr	r4, [sp, #28]
 801fb32:	fb09 fc0c 	mul.w	ip, r9, ip
 801fb36:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fb3a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fb3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb40:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fb44:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fb48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb4a:	fb0a cc0e 	mla	ip, sl, lr, ip
 801fb4e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fb52:	fb09 f90e 	mul.w	r9, r9, lr
 801fb56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb5a:	fb01 9202 	mla	r2, r1, r2, r9
 801fb5e:	9907      	ldr	r1, [sp, #28]
 801fb60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb64:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801fb68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fb6a:	fb00 220b 	mla	r2, r0, fp, r2
 801fb6e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801fb72:	fb0a 2a00 	mla	sl, sl, r0, r2
 801fb76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb7e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fb82:	fa5f f08c 	uxtb.w	r0, ip
 801fb86:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801fb8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fb8e:	f000 80a2 	beq.w	801fcd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801fb92:	43db      	mvns	r3, r3
 801fb94:	783a      	ldrb	r2, [r7, #0]
 801fb96:	f897 a002 	ldrb.w	sl, [r7, #2]
 801fb9a:	b2db      	uxtb	r3, r3
 801fb9c:	fb02 fe03 	mul.w	lr, r2, r3
 801fba0:	fb0a fa03 	mul.w	sl, sl, r3
 801fba4:	f10e 0201 	add.w	r2, lr, #1
 801fba8:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801fbac:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fbb0:	703a      	strb	r2, [r7, #0]
 801fbb2:	787a      	ldrb	r2, [r7, #1]
 801fbb4:	fb02 f003 	mul.w	r0, r2, r3
 801fbb8:	f10a 0301 	add.w	r3, sl, #1
 801fbbc:	1c42      	adds	r2, r0, #1
 801fbbe:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fbc2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801fbc6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801fbca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fbce:	707a      	strb	r2, [r7, #1]
 801fbd0:	f887 c002 	strb.w	ip, [r7, #2]
 801fbd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fbd6:	3703      	adds	r7, #3
 801fbd8:	f108 38ff 	add.w	r8, r8, #4294967295
 801fbdc:	441d      	add	r5, r3
 801fbde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fbe0:	441e      	add	r6, r3
 801fbe2:	e6ab      	b.n	801f93c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fbe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fbe6:	441d      	add	r5, r3
 801fbe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fbea:	441e      	add	r6, r3
 801fbec:	9b06      	ldr	r3, [sp, #24]
 801fbee:	3b01      	subs	r3, #1
 801fbf0:	9306      	str	r3, [sp, #24]
 801fbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbf4:	3303      	adds	r3, #3
 801fbf6:	9309      	str	r3, [sp, #36]	; 0x24
 801fbf8:	e680      	b.n	801f8fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fbfa:	d024      	beq.n	801fc46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801fbfc:	9b06      	ldr	r3, [sp, #24]
 801fbfe:	9825      	ldr	r0, [sp, #148]	; 0x94
 801fc00:	3b01      	subs	r3, #1
 801fc02:	fb00 5003 	mla	r0, r0, r3, r5
 801fc06:	1400      	asrs	r0, r0, #16
 801fc08:	f53f ae95 	bmi.w	801f936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc0c:	3901      	subs	r1, #1
 801fc0e:	4288      	cmp	r0, r1
 801fc10:	f6bf ae91 	bge.w	801f936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc14:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fc16:	fb01 6303 	mla	r3, r1, r3, r6
 801fc1a:	141b      	asrs	r3, r3, #16
 801fc1c:	f53f ae8b 	bmi.w	801f936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc20:	3a01      	subs	r2, #1
 801fc22:	4293      	cmp	r3, r2
 801fc24:	f6bf ae87 	bge.w	801f936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc2a:	f8dd b018 	ldr.w	fp, [sp, #24]
 801fc2e:	1cdf      	adds	r7, r3, #3
 801fc30:	f1bb 0f00 	cmp.w	fp, #0
 801fc34:	dc6e      	bgt.n	801fd14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801fc36:	9b06      	ldr	r3, [sp, #24]
 801fc38:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fc42:	4423      	add	r3, r4
 801fc44:	9309      	str	r3, [sp, #36]	; 0x24
 801fc46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	f340 81b0 	ble.w	801ffae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801fc4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fc54:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc5c:	eef0 6a62 	vmov.f32	s13, s5
 801fc60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fc64:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc6c:	ee16 5a90 	vmov	r5, s13
 801fc70:	eef0 6a43 	vmov.f32	s13, s6
 801fc74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc78:	ee16 6a90 	vmov	r6, s13
 801fc7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc80:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc84:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc94:	ee12 2a90 	vmov	r2, s5
 801fc98:	eef0 2a47 	vmov.f32	s5, s14
 801fc9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fca0:	ee13 2a10 	vmov	r2, s6
 801fca4:	9325      	str	r3, [sp, #148]	; 0x94
 801fca6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fca8:	eeb0 3a67 	vmov.f32	s6, s15
 801fcac:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcb0:	9326      	str	r3, [sp, #152]	; 0x98
 801fcb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fcb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fcb6:	3b01      	subs	r3, #1
 801fcb8:	9315      	str	r3, [sp, #84]	; 0x54
 801fcba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fcbc:	bf08      	it	eq
 801fcbe:	4613      	moveq	r3, r2
 801fcc0:	9306      	str	r3, [sp, #24]
 801fcc2:	e60d      	b.n	801f8e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fcc4:	2800      	cmp	r0, #0
 801fcc6:	f43f ae7d 	beq.w	801f9c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801fcca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fcce:	9307      	str	r3, [sp, #28]
 801fcd0:	0e1b      	lsrs	r3, r3, #24
 801fcd2:	930f      	str	r3, [sp, #60]	; 0x3c
 801fcd4:	e676      	b.n	801f9c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801fcd6:	7038      	strb	r0, [r7, #0]
 801fcd8:	7079      	strb	r1, [r7, #1]
 801fcda:	e779      	b.n	801fbd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fcdc:	f112 0901 	adds.w	r9, r2, #1
 801fce0:	f53f af78 	bmi.w	801fbd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fce4:	454b      	cmp	r3, r9
 801fce6:	f6ff af75 	blt.w	801fbd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fcea:	f11c 0901 	adds.w	r9, ip, #1
 801fcee:	f53f af71 	bmi.w	801fbd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fcf2:	45ce      	cmp	lr, r9
 801fcf4:	f6ff af6e 	blt.w	801fbd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fcf8:	b21b      	sxth	r3, r3
 801fcfa:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801fcfe:	fa0f f28e 	sxth.w	r2, lr
 801fd02:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801fd06:	9200      	str	r2, [sp, #0]
 801fd08:	4639      	mov	r1, r7
 801fd0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fd0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801fd0e:	f7ff fca1 	bl	801f654 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801fd12:	e75f      	b.n	801fbd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fd14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fd16:	1429      	asrs	r1, r5, #16
 801fd18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fd1a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801fd1e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801fd22:	1433      	asrs	r3, r6, #16
 801fd24:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fd28:	fb0c 1303 	mla	r3, ip, r3, r1
 801fd2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fd2e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fd32:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fd36:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fd3a:	2a00      	cmp	r2, #0
 801fd3c:	f000 8129 	beq.w	801ff92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801fd40:	684c      	ldr	r4, [r1, #4]
 801fd42:	940c      	str	r4, [sp, #48]	; 0x30
 801fd44:	0e24      	lsrs	r4, r4, #24
 801fd46:	9413      	str	r4, [sp, #76]	; 0x4c
 801fd48:	b198      	cbz	r0, 801fd72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801fd4a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801fd4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fd52:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801fd56:	f10c 0c04 	add.w	ip, ip, #4
 801fd5a:	eb01 080c 	add.w	r8, r1, ip
 801fd5e:	f851 100c 	ldr.w	r1, [r1, ip]
 801fd62:	9108      	str	r1, [sp, #32]
 801fd64:	0e09      	lsrs	r1, r1, #24
 801fd66:	9110      	str	r1, [sp, #64]	; 0x40
 801fd68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fd6c:	910d      	str	r1, [sp, #52]	; 0x34
 801fd6e:	0e09      	lsrs	r1, r1, #24
 801fd70:	9114      	str	r1, [sp, #80]	; 0x50
 801fd72:	b292      	uxth	r2, r2
 801fd74:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fd76:	b280      	uxth	r0, r0
 801fd78:	fb02 f900 	mul.w	r9, r2, r0
 801fd7c:	0112      	lsls	r2, r2, #4
 801fd7e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fd82:	eba2 0809 	sub.w	r8, r2, r9
 801fd86:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fd8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd8c:	b280      	uxth	r0, r0
 801fd8e:	fa1f f888 	uxth.w	r8, r8
 801fd92:	1a09      	subs	r1, r1, r0
 801fd94:	fb08 f202 	mul.w	r2, r8, r2
 801fd98:	b289      	uxth	r1, r1
 801fd9a:	fb01 220e 	mla	r2, r1, lr, r2
 801fd9e:	fb00 2204 	mla	r2, r0, r4, r2
 801fda2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fda4:	fb09 2204 	mla	r2, r9, r4, r2
 801fda8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fdac:	2a00      	cmp	r2, #0
 801fdae:	f000 80e8 	beq.w	801ff82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801fdb2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fdb6:	d01b      	beq.n	801fdf0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801fdb8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fdbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdc0:	fb0e fa0a 	mul.w	sl, lr, sl
 801fdc4:	fb0e fe03 	mul.w	lr, lr, r3
 801fdc8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fdcc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fdd0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fdd4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdd8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fddc:	4453      	add	r3, sl
 801fdde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fde2:	0a1b      	lsrs	r3, r3, #8
 801fde4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fde8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdec:	ea43 030c 	orr.w	r3, r3, ip
 801fdf0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fdf2:	2cff      	cmp	r4, #255	; 0xff
 801fdf4:	d021      	beq.n	801fe3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801fdf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fdf8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fdfc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fdfe:	fb04 fc0c 	mul.w	ip, r4, ip
 801fe02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fe04:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fe08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fe0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fe0e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fe16:	fb04 fa0a 	mul.w	sl, r4, sl
 801fe1a:	44e6      	add	lr, ip
 801fe1c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fe20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fe28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fe2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fe34:	ea4e 040a 	orr.w	r4, lr, sl
 801fe38:	940c      	str	r4, [sp, #48]	; 0x30
 801fe3a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fe3c:	2cff      	cmp	r4, #255	; 0xff
 801fe3e:	d021      	beq.n	801fe84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801fe40:	9c08      	ldr	r4, [sp, #32]
 801fe42:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fe46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fe48:	fb04 fc0c 	mul.w	ip, r4, ip
 801fe4c:	9c08      	ldr	r4, [sp, #32]
 801fe4e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fe52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fe54:	fb04 fa0e 	mul.w	sl, r4, lr
 801fe58:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fe5c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fe64:	44e6      	add	lr, ip
 801fe66:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fe6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fe6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fe7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fe7e:	ea4e 040a 	orr.w	r4, lr, sl
 801fe82:	9408      	str	r4, [sp, #32]
 801fe84:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fe86:	2cff      	cmp	r4, #255	; 0xff
 801fe88:	d021      	beq.n	801fece <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801fe8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fe8c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fe90:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fe92:	fb04 fc0c 	mul.w	ip, r4, ip
 801fe96:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fe98:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fe9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fea0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fea2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fea6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801feaa:	fb04 fa0a 	mul.w	sl, r4, sl
 801feae:	44e6      	add	lr, ip
 801feb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801feb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801feb8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801febc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fec0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fec4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fec8:	ea4e 040a 	orr.w	r4, lr, sl
 801fecc:	940d      	str	r4, [sp, #52]	; 0x34
 801fece:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fed0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fed4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fed8:	2aff      	cmp	r2, #255	; 0xff
 801feda:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fede:	9c08      	ldr	r4, [sp, #32]
 801fee0:	fb08 fc0c 	mul.w	ip, r8, ip
 801fee4:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fee8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801feec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801feee:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fef2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fef6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fef8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fefc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ff00:	fb08 f80e 	mul.w	r8, r8, lr
 801ff04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff08:	fb01 8303 	mla	r3, r1, r3, r8
 801ff0c:	9908      	ldr	r1, [sp, #32]
 801ff0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff12:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ff16:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ff18:	fb00 330a 	mla	r3, r0, sl, r3
 801ff1c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801ff20:	fb09 3e0e 	mla	lr, r9, lr, r3
 801ff24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff28:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ff2c:	ea4c 0c0e 	orr.w	ip, ip, lr
 801ff30:	fa5f f08c 	uxtb.w	r0, ip
 801ff34:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ff38:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ff3c:	d032      	beq.n	801ffa4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801ff3e:	43d2      	mvns	r2, r2
 801ff40:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801ff44:	b2d2      	uxtb	r2, r2
 801ff46:	fb0e fe02 	mul.w	lr, lr, r2
 801ff4a:	f10e 0301 	add.w	r3, lr, #1
 801ff4e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801ff52:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ff56:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801ff5a:	4350      	muls	r0, r2
 801ff5c:	f807 3c03 	strb.w	r3, [r7, #-3]
 801ff60:	1c43      	adds	r3, r0, #1
 801ff62:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ff66:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ff6a:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801ff6e:	4353      	muls	r3, r2
 801ff70:	f807 1c02 	strb.w	r1, [r7, #-2]
 801ff74:	1c5a      	adds	r2, r3, #1
 801ff76:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ff7a:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801ff7e:	f807 cc01 	strb.w	ip, [r7, #-1]
 801ff82:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ff84:	3703      	adds	r7, #3
 801ff86:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ff8a:	441d      	add	r5, r3
 801ff8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ff8e:	441e      	add	r6, r3
 801ff90:	e64e      	b.n	801fc30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801ff92:	2800      	cmp	r0, #0
 801ff94:	f43f aeed 	beq.w	801fd72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801ff98:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801ff9c:	9108      	str	r1, [sp, #32]
 801ff9e:	0e09      	lsrs	r1, r1, #24
 801ffa0:	9110      	str	r1, [sp, #64]	; 0x40
 801ffa2:	e6e6      	b.n	801fd72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801ffa4:	f807 0c03 	strb.w	r0, [r7, #-3]
 801ffa8:	f807 1c02 	strb.w	r1, [r7, #-2]
 801ffac:	e7e7      	b.n	801ff7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801ffae:	b019      	add	sp, #100	; 0x64
 801ffb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ffb4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801ffb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffb8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801ffbc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ffc0:	2c00      	cmp	r4, #0
 801ffc2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801ffc6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801ffca:	fb00 4e03 	mla	lr, r0, r3, r4
 801ffce:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801ffd2:	f2c0 80b8 	blt.w	8020146 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ffd6:	45a1      	cmp	r9, r4
 801ffd8:	f340 80b5 	ble.w	8020146 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ffdc:	2800      	cmp	r0, #0
 801ffde:	f2c0 80b2 	blt.w	8020146 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ffe2:	4580      	cmp	r8, r0
 801ffe4:	f340 80af 	ble.w	8020146 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ffe8:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801ffec:	f01e 0f01 	tst.w	lr, #1
 801fff0:	5d56      	ldrb	r6, [r2, r5]
 801fff2:	bf0c      	ite	eq
 801fff4:	f006 060f 	andeq.w	r6, r6, #15
 801fff8:	1136      	asrne	r6, r6, #4
 801fffa:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801fffe:	b2f6      	uxtb	r6, r6
 8020000:	f114 0a01 	adds.w	sl, r4, #1
 8020004:	f100 80a1 	bmi.w	802014a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020008:	45d1      	cmp	r9, sl
 802000a:	f340 809e 	ble.w	802014a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802000e:	2800      	cmp	r0, #0
 8020010:	f2c0 809b 	blt.w	802014a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020014:	4580      	cmp	r8, r0
 8020016:	f340 8098 	ble.w	802014a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802001a:	2f00      	cmp	r7, #0
 802001c:	f000 8097 	beq.w	802014e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8020020:	f10e 0b01 	add.w	fp, lr, #1
 8020024:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020028:	f01b 0f01 	tst.w	fp, #1
 802002c:	5d55      	ldrb	r5, [r2, r5]
 802002e:	bf0c      	ite	eq
 8020030:	f005 050f 	andeq.w	r5, r5, #15
 8020034:	112d      	asrne	r5, r5, #4
 8020036:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802003a:	b2ed      	uxtb	r5, r5
 802003c:	f1bc 0f00 	cmp.w	ip, #0
 8020040:	f000 8089 	beq.w	8020156 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8020044:	2c00      	cmp	r4, #0
 8020046:	f100 0001 	add.w	r0, r0, #1
 802004a:	f2c0 8082 	blt.w	8020152 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802004e:	45a1      	cmp	r9, r4
 8020050:	dd7f      	ble.n	8020152 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020052:	2800      	cmp	r0, #0
 8020054:	db7d      	blt.n	8020152 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020056:	4580      	cmp	r8, r0
 8020058:	dd7b      	ble.n	8020152 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802005a:	eb03 0b0e 	add.w	fp, r3, lr
 802005e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020062:	f01b 0f01 	tst.w	fp, #1
 8020066:	5d14      	ldrb	r4, [r2, r4]
 8020068:	bf0c      	ite	eq
 802006a:	f004 040f 	andeq.w	r4, r4, #15
 802006e:	1124      	asrne	r4, r4, #4
 8020070:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020074:	b2e4      	uxtb	r4, r4
 8020076:	f1ba 0f00 	cmp.w	sl, #0
 802007a:	db6f      	blt.n	802015c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802007c:	45d1      	cmp	r9, sl
 802007e:	dd6d      	ble.n	802015c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020080:	2800      	cmp	r0, #0
 8020082:	db6b      	blt.n	802015c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020084:	4580      	cmp	r8, r0
 8020086:	dd69      	ble.n	802015c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020088:	2f00      	cmp	r7, #0
 802008a:	d069      	beq.n	8020160 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 802008c:	3301      	adds	r3, #1
 802008e:	449e      	add	lr, r3
 8020090:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020094:	f01e 0f01 	tst.w	lr, #1
 8020098:	5cd0      	ldrb	r0, [r2, r3]
 802009a:	bf0c      	ite	eq
 802009c:	f000 000f 	andeq.w	r0, r0, #15
 80200a0:	1100      	asrne	r0, r0, #4
 80200a2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80200a6:	b2c3      	uxtb	r3, r0
 80200a8:	b2ba      	uxth	r2, r7
 80200aa:	fa1f fc8c 	uxth.w	ip, ip
 80200ae:	fb02 f00c 	mul.w	r0, r2, ip
 80200b2:	0112      	lsls	r2, r2, #4
 80200b4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80200b8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80200bc:	1a12      	subs	r2, r2, r0
 80200be:	fa1f fc8c 	uxth.w	ip, ip
 80200c2:	b292      	uxth	r2, r2
 80200c4:	eba7 070c 	sub.w	r7, r7, ip
 80200c8:	436a      	muls	r2, r5
 80200ca:	b2bf      	uxth	r7, r7
 80200cc:	fb06 2207 	mla	r2, r6, r7, r2
 80200d0:	fb0c 2404 	mla	r4, ip, r4, r2
 80200d4:	fb00 4303 	mla	r3, r0, r3, r4
 80200d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80200dc:	b38b      	cbz	r3, 8020142 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 80200de:	4a21      	ldr	r2, [pc, #132]	; (8020164 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 80200e0:	6814      	ldr	r4, [r2, #0]
 80200e2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80200e6:	b2e5      	uxtb	r5, r4
 80200e8:	4353      	muls	r3, r2
 80200ea:	1c5a      	adds	r2, r3, #1
 80200ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80200f0:	1212      	asrs	r2, r2, #8
 80200f2:	b290      	uxth	r0, r2
 80200f4:	43d2      	mvns	r2, r2
 80200f6:	fb15 f500 	smulbb	r5, r5, r0
 80200fa:	b2d3      	uxtb	r3, r2
 80200fc:	780a      	ldrb	r2, [r1, #0]
 80200fe:	fb02 5203 	mla	r2, r2, r3, r5
 8020102:	b292      	uxth	r2, r2
 8020104:	1c55      	adds	r5, r2, #1
 8020106:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802010a:	784d      	ldrb	r5, [r1, #1]
 802010c:	fb15 f503 	smulbb	r5, r5, r3
 8020110:	1212      	asrs	r2, r2, #8
 8020112:	700a      	strb	r2, [r1, #0]
 8020114:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020118:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802011c:	fb02 5200 	mla	r2, r2, r0, r5
 8020120:	b292      	uxth	r2, r2
 8020122:	1c55      	adds	r5, r2, #1
 8020124:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020128:	1212      	asrs	r2, r2, #8
 802012a:	704a      	strb	r2, [r1, #1]
 802012c:	788a      	ldrb	r2, [r1, #2]
 802012e:	fb12 f303 	smulbb	r3, r2, r3
 8020132:	fb04 3300 	mla	r3, r4, r0, r3
 8020136:	b29b      	uxth	r3, r3
 8020138:	1c5a      	adds	r2, r3, #1
 802013a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802013e:	121b      	asrs	r3, r3, #8
 8020140:	708b      	strb	r3, [r1, #2]
 8020142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020146:	2600      	movs	r6, #0
 8020148:	e75a      	b.n	8020000 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 802014a:	2500      	movs	r5, #0
 802014c:	e776      	b.n	802003c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802014e:	463d      	mov	r5, r7
 8020150:	e774      	b.n	802003c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020152:	2400      	movs	r4, #0
 8020154:	e78f      	b.n	8020076 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8020156:	4663      	mov	r3, ip
 8020158:	4664      	mov	r4, ip
 802015a:	e7a5      	b.n	80200a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802015c:	2300      	movs	r3, #0
 802015e:	e7a3      	b.n	80200a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020160:	463b      	mov	r3, r7
 8020162:	e7a1      	b.n	80200a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020164:	20011b44 	.word	0x20011b44

08020168 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802016c:	b097      	sub	sp, #92	; 0x5c
 802016e:	9214      	str	r2, [sp, #80]	; 0x50
 8020170:	9309      	str	r3, [sp, #36]	; 0x24
 8020172:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020174:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020178:	9015      	str	r0, [sp, #84]	; 0x54
 802017a:	910c      	str	r1, [sp, #48]	; 0x30
 802017c:	6850      	ldr	r0, [r2, #4]
 802017e:	930e      	str	r3, [sp, #56]	; 0x38
 8020180:	6812      	ldr	r2, [r2, #0]
 8020182:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8020186:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 802018a:	fb00 1303 	mla	r3, r0, r3, r1
 802018e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020192:	eb02 0a03 	add.w	sl, r2, r3
 8020196:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020198:	689b      	ldr	r3, [r3, #8]
 802019a:	3301      	adds	r3, #1
 802019c:	f023 0301 	bic.w	r3, r3, #1
 80201a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80201a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201a4:	681f      	ldr	r7, [r3, #0]
 80201a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201a8:	2b00      	cmp	r3, #0
 80201aa:	dc03      	bgt.n	80201b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80201ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	f340 8247 	ble.w	8020642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80201b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80201ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80201be:	1e48      	subs	r0, r1, #1
 80201c0:	f102 3cff 	add.w	ip, r2, #4294967295
 80201c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201c6:	2b00      	cmp	r3, #0
 80201c8:	f340 80e5 	ble.w	8020396 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80201cc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80201d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80201d4:	d406      	bmi.n	80201e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80201d6:	4586      	cmp	lr, r0
 80201d8:	da04      	bge.n	80201e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80201da:	2b00      	cmp	r3, #0
 80201dc:	db02      	blt.n	80201e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80201de:	4563      	cmp	r3, ip
 80201e0:	f2c0 80da 	blt.w	8020398 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80201e4:	f11e 0e01 	adds.w	lr, lr, #1
 80201e8:	f100 80cb 	bmi.w	8020382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80201ec:	4571      	cmp	r1, lr
 80201ee:	f2c0 80c8 	blt.w	8020382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80201f2:	3301      	adds	r3, #1
 80201f4:	f100 80c5 	bmi.w	8020382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80201f8:	429a      	cmp	r2, r3
 80201fa:	f2c0 80c2 	blt.w	8020382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80201fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020200:	46d0      	mov	r8, sl
 8020202:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020206:	930d      	str	r3, [sp, #52]	; 0x34
 8020208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802020a:	2b00      	cmp	r3, #0
 802020c:	f340 80e3 	ble.w	80203d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020210:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020212:	1430      	asrs	r0, r6, #16
 8020214:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020218:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802021c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020220:	142b      	asrs	r3, r5, #16
 8020222:	f100 812e 	bmi.w	8020482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020226:	f10c 3bff 	add.w	fp, ip, #4294967295
 802022a:	455b      	cmp	r3, fp
 802022c:	f280 8129 	bge.w	8020482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020230:	2800      	cmp	r0, #0
 8020232:	f2c0 8126 	blt.w	8020482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020236:	f10e 3bff 	add.w	fp, lr, #4294967295
 802023a:	4558      	cmp	r0, fp
 802023c:	f280 8121 	bge.w	8020482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020240:	fb00 3309 	mla	r3, r0, r9, r3
 8020244:	0858      	lsrs	r0, r3, #1
 8020246:	07dc      	lsls	r4, r3, #31
 8020248:	f817 c000 	ldrb.w	ip, [r7, r0]
 802024c:	bf54      	ite	pl
 802024e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020252:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020256:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802025a:	fa5f fc8c 	uxtb.w	ip, ip
 802025e:	2a00      	cmp	r2, #0
 8020260:	f000 80fe 	beq.w	8020460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020264:	1c58      	adds	r0, r3, #1
 8020266:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802026a:	07c0      	lsls	r0, r0, #31
 802026c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020270:	bf54      	ite	pl
 8020272:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020276:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802027a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802027e:	fa5f f08e 	uxtb.w	r0, lr
 8020282:	9010      	str	r0, [sp, #64]	; 0x40
 8020284:	b1d9      	cbz	r1, 80202be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020286:	444b      	add	r3, r9
 8020288:	0858      	lsrs	r0, r3, #1
 802028a:	07dc      	lsls	r4, r3, #31
 802028c:	f103 0301 	add.w	r3, r3, #1
 8020290:	5c38      	ldrb	r0, [r7, r0]
 8020292:	bf54      	ite	pl
 8020294:	f000 000f 	andpl.w	r0, r0, #15
 8020298:	1100      	asrmi	r0, r0, #4
 802029a:	07dc      	lsls	r4, r3, #31
 802029c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80202a0:	b2c0      	uxtb	r0, r0
 80202a2:	900a      	str	r0, [sp, #40]	; 0x28
 80202a4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80202a8:	f817 e000 	ldrb.w	lr, [r7, r0]
 80202ac:	bf54      	ite	pl
 80202ae:	f00e 030f 	andpl.w	r3, lr, #15
 80202b2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80202b6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80202ba:	b2db      	uxtb	r3, r3
 80202bc:	9311      	str	r3, [sp, #68]	; 0x44
 80202be:	b292      	uxth	r2, r2
 80202c0:	b289      	uxth	r1, r1
 80202c2:	0113      	lsls	r3, r2, #4
 80202c4:	fb02 f001 	mul.w	r0, r2, r1
 80202c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80202ca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80202ce:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80202d2:	1a1b      	subs	r3, r3, r0
 80202d4:	b289      	uxth	r1, r1
 80202d6:	b29b      	uxth	r3, r3
 80202d8:	ebae 0e01 	sub.w	lr, lr, r1
 80202dc:	4353      	muls	r3, r2
 80202de:	fa1f fe8e 	uxth.w	lr, lr
 80202e2:	fb0c 320e 	mla	r2, ip, lr, r3
 80202e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202e8:	fb01 2203 	mla	r2, r1, r3, r2
 80202ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80202ee:	fb00 2203 	mla	r2, r0, r3, r2
 80202f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80202f6:	2a00      	cmp	r2, #0
 80202f8:	d039      	beq.n	802036e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80202fa:	4bc7      	ldr	r3, [pc, #796]	; (8020618 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80202fc:	6819      	ldr	r1, [r3, #0]
 80202fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020300:	fa5f fc81 	uxtb.w	ip, r1
 8020304:	435a      	muls	r2, r3
 8020306:	1c53      	adds	r3, r2, #1
 8020308:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802030c:	1212      	asrs	r2, r2, #8
 802030e:	b290      	uxth	r0, r2
 8020310:	43d2      	mvns	r2, r2
 8020312:	fb1c fc00 	smulbb	ip, ip, r0
 8020316:	b2d3      	uxtb	r3, r2
 8020318:	f898 2000 	ldrb.w	r2, [r8]
 802031c:	fb02 c203 	mla	r2, r2, r3, ip
 8020320:	b292      	uxth	r2, r2
 8020322:	f102 0c01 	add.w	ip, r2, #1
 8020326:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802032a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802032e:	fb1c fc03 	smulbb	ip, ip, r3
 8020332:	1212      	asrs	r2, r2, #8
 8020334:	f888 2000 	strb.w	r2, [r8]
 8020338:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802033c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020340:	fb02 c200 	mla	r2, r2, r0, ip
 8020344:	b292      	uxth	r2, r2
 8020346:	f102 0c01 	add.w	ip, r2, #1
 802034a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802034e:	1212      	asrs	r2, r2, #8
 8020350:	f888 2001 	strb.w	r2, [r8, #1]
 8020354:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020358:	fb12 f303 	smulbb	r3, r2, r3
 802035c:	fb01 3300 	mla	r3, r1, r0, r3
 8020360:	b29b      	uxth	r3, r3
 8020362:	1c5a      	adds	r2, r3, #1
 8020364:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020368:	121b      	asrs	r3, r3, #8
 802036a:	f888 3002 	strb.w	r3, [r8, #2]
 802036e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020370:	f108 0803 	add.w	r8, r8, #3
 8020374:	441d      	add	r5, r3
 8020376:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020378:	441e      	add	r6, r3
 802037a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802037c:	3b01      	subs	r3, #1
 802037e:	930d      	str	r3, [sp, #52]	; 0x34
 8020380:	e742      	b.n	8020208 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020384:	f10a 0a03 	add.w	sl, sl, #3
 8020388:	441d      	add	r5, r3
 802038a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802038c:	441e      	add	r6, r3
 802038e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020390:	3b01      	subs	r3, #1
 8020392:	9309      	str	r3, [sp, #36]	; 0x24
 8020394:	e716      	b.n	80201c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020396:	d024      	beq.n	80203e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802039a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802039c:	3b01      	subs	r3, #1
 802039e:	fb00 5003 	mla	r0, r0, r3, r5
 80203a2:	1400      	asrs	r0, r0, #16
 80203a4:	f53f af2b 	bmi.w	80201fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203a8:	3901      	subs	r1, #1
 80203aa:	4288      	cmp	r0, r1
 80203ac:	f6bf af27 	bge.w	80201fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203b0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80203b2:	fb01 6303 	mla	r3, r1, r3, r6
 80203b6:	141b      	asrs	r3, r3, #16
 80203b8:	f53f af21 	bmi.w	80201fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203bc:	3a01      	subs	r2, #1
 80203be:	4293      	cmp	r3, r2
 80203c0:	f6bf af1d 	bge.w	80201fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203c4:	f10a 0e03 	add.w	lr, sl, #3
 80203c8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80203cc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80203d0:	f1b8 0f00 	cmp.w	r8, #0
 80203d4:	dc76      	bgt.n	80204c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80203d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80203dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80203e0:	44a2      	add	sl, r4
 80203e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	f340 812c 	ble.w	8020642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80203ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80203ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203f8:	eef0 6a62 	vmov.f32	s13, s5
 80203fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020400:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020404:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020408:	ee16 5a90 	vmov	r5, s13
 802040c:	eef0 6a43 	vmov.f32	s13, s6
 8020410:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020414:	ee16 6a90 	vmov	r6, s13
 8020418:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802041c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020420:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020424:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020428:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802042c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020430:	ee12 2a90 	vmov	r2, s5
 8020434:	eef0 2a47 	vmov.f32	s5, s14
 8020438:	fb92 f3f3 	sdiv	r3, r2, r3
 802043c:	ee13 2a10 	vmov	r2, s6
 8020440:	9323      	str	r3, [sp, #140]	; 0x8c
 8020442:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020444:	eeb0 3a67 	vmov.f32	s6, s15
 8020448:	fb92 f3f3 	sdiv	r3, r2, r3
 802044c:	9324      	str	r3, [sp, #144]	; 0x90
 802044e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020452:	3b01      	subs	r3, #1
 8020454:	930c      	str	r3, [sp, #48]	; 0x30
 8020456:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020458:	bf08      	it	eq
 802045a:	4613      	moveq	r3, r2
 802045c:	9309      	str	r3, [sp, #36]	; 0x24
 802045e:	e6a2      	b.n	80201a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020460:	2900      	cmp	r1, #0
 8020462:	f43f af2c 	beq.w	80202be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020466:	eb09 0003 	add.w	r0, r9, r3
 802046a:	0843      	lsrs	r3, r0, #1
 802046c:	07c0      	lsls	r0, r0, #31
 802046e:	5cfb      	ldrb	r3, [r7, r3]
 8020470:	bf54      	ite	pl
 8020472:	f003 030f 	andpl.w	r3, r3, #15
 8020476:	111b      	asrmi	r3, r3, #4
 8020478:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802047c:	b2db      	uxtb	r3, r3
 802047e:	930a      	str	r3, [sp, #40]	; 0x28
 8020480:	e71d      	b.n	80202be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020482:	f113 0b01 	adds.w	fp, r3, #1
 8020486:	f53f af72 	bmi.w	802036e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802048a:	45dc      	cmp	ip, fp
 802048c:	f6ff af6f 	blt.w	802036e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020490:	f110 0b01 	adds.w	fp, r0, #1
 8020494:	f53f af6b 	bmi.w	802036e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020498:	45de      	cmp	lr, fp
 802049a:	f6ff af68 	blt.w	802036e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802049e:	9302      	str	r3, [sp, #8]
 80204a0:	fa0f f38e 	sxth.w	r3, lr
 80204a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204a6:	9301      	str	r3, [sp, #4]
 80204a8:	fa0f f38c 	sxth.w	r3, ip
 80204ac:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80204b0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80204b4:	9300      	str	r3, [sp, #0]
 80204b6:	463a      	mov	r2, r7
 80204b8:	464b      	mov	r3, r9
 80204ba:	4641      	mov	r1, r8
 80204bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80204be:	f7ff fd79 	bl	801ffb4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80204c2:	e754      	b.n	802036e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80204c4:	142a      	asrs	r2, r5, #16
 80204c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80204ca:	1433      	asrs	r3, r6, #16
 80204cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80204d0:	fb09 2303 	mla	r3, r9, r3, r2
 80204d4:	085a      	lsrs	r2, r3, #1
 80204d6:	07dc      	lsls	r4, r3, #31
 80204d8:	5cba      	ldrb	r2, [r7, r2]
 80204da:	bf54      	ite	pl
 80204dc:	f002 020f 	andpl.w	r2, r2, #15
 80204e0:	1112      	asrmi	r2, r2, #4
 80204e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80204e6:	b2d2      	uxtb	r2, r2
 80204e8:	2900      	cmp	r1, #0
 80204ea:	f000 8097 	beq.w	802061c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80204ee:	f103 0b01 	add.w	fp, r3, #1
 80204f2:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80204f6:	f01b 0f01 	tst.w	fp, #1
 80204fa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80204fe:	bf0c      	ite	eq
 8020500:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020504:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020508:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802050c:	fa5f f48c 	uxtb.w	r4, ip
 8020510:	9412      	str	r4, [sp, #72]	; 0x48
 8020512:	b300      	cbz	r0, 8020556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020514:	444b      	add	r3, r9
 8020516:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802051a:	07dc      	lsls	r4, r3, #31
 802051c:	f103 0301 	add.w	r3, r3, #1
 8020520:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020524:	bf54      	ite	pl
 8020526:	f00c 0c0f 	andpl.w	ip, ip, #15
 802052a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802052e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020532:	fa5f f48c 	uxtb.w	r4, ip
 8020536:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802053a:	940b      	str	r4, [sp, #44]	; 0x2c
 802053c:	07dc      	lsls	r4, r3, #31
 802053e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020542:	bf54      	ite	pl
 8020544:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020548:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802054c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020550:	fa5f f38c 	uxtb.w	r3, ip
 8020554:	9313      	str	r3, [sp, #76]	; 0x4c
 8020556:	b289      	uxth	r1, r1
 8020558:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802055a:	b280      	uxth	r0, r0
 802055c:	fb01 f300 	mul.w	r3, r1, r0
 8020560:	0109      	lsls	r1, r1, #4
 8020562:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020566:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802056a:	1ac9      	subs	r1, r1, r3
 802056c:	b280      	uxth	r0, r0
 802056e:	b289      	uxth	r1, r1
 8020570:	ebac 0c00 	sub.w	ip, ip, r0
 8020574:	4361      	muls	r1, r4
 8020576:	fa1f fc8c 	uxth.w	ip, ip
 802057a:	fb02 120c 	mla	r2, r2, ip, r1
 802057e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020580:	fb00 2001 	mla	r0, r0, r1, r2
 8020584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020586:	fb03 0302 	mla	r3, r3, r2, r0
 802058a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802058e:	2b00      	cmp	r3, #0
 8020590:	d039      	beq.n	8020606 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020592:	4a21      	ldr	r2, [pc, #132]	; (8020618 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020594:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020598:	6810      	ldr	r0, [r2, #0]
 802059a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802059c:	fa5f fc80 	uxtb.w	ip, r0
 80205a0:	4353      	muls	r3, r2
 80205a2:	1c5a      	adds	r2, r3, #1
 80205a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80205a8:	121b      	asrs	r3, r3, #8
 80205aa:	b29a      	uxth	r2, r3
 80205ac:	43db      	mvns	r3, r3
 80205ae:	fb1c fc02 	smulbb	ip, ip, r2
 80205b2:	b2db      	uxtb	r3, r3
 80205b4:	fb01 c103 	mla	r1, r1, r3, ip
 80205b8:	b289      	uxth	r1, r1
 80205ba:	f101 0c01 	add.w	ip, r1, #1
 80205be:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80205c2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80205c6:	fb1c fc03 	smulbb	ip, ip, r3
 80205ca:	1209      	asrs	r1, r1, #8
 80205cc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80205d0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80205d4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80205d8:	fb01 c102 	mla	r1, r1, r2, ip
 80205dc:	b289      	uxth	r1, r1
 80205de:	f101 0c01 	add.w	ip, r1, #1
 80205e2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80205e6:	1209      	asrs	r1, r1, #8
 80205e8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80205ec:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80205f0:	fb11 f303 	smulbb	r3, r1, r3
 80205f4:	fb00 3002 	mla	r0, r0, r2, r3
 80205f8:	b280      	uxth	r0, r0
 80205fa:	1c42      	adds	r2, r0, #1
 80205fc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020600:	1200      	asrs	r0, r0, #8
 8020602:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020606:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020608:	f10e 0e03 	add.w	lr, lr, #3
 802060c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020610:	441d      	add	r5, r3
 8020612:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020614:	441e      	add	r6, r3
 8020616:	e6db      	b.n	80203d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8020618:	20011b44 	.word	0x20011b44
 802061c:	2800      	cmp	r0, #0
 802061e:	d09a      	beq.n	8020556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020620:	444b      	add	r3, r9
 8020622:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020626:	07db      	lsls	r3, r3, #31
 8020628:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802062c:	bf54      	ite	pl
 802062e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020632:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020636:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802063a:	fa5f f38c 	uxtb.w	r3, ip
 802063e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020640:	e789      	b.n	8020556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020642:	b017      	add	sp, #92	; 0x5c
 8020644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020648 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8020648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802064c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8020650:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020654:	2d00      	cmp	r5, #0
 8020656:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802065a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 802065e:	fb04 5e03 	mla	lr, r4, r3, r5
 8020662:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8020666:	f2c0 80b1 	blt.w	80207cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802066a:	45a9      	cmp	r9, r5
 802066c:	f340 80ae 	ble.w	80207cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020670:	2c00      	cmp	r4, #0
 8020672:	f2c0 80ab 	blt.w	80207cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020676:	45a0      	cmp	r8, r4
 8020678:	f340 80a8 	ble.w	80207cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802067c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8020680:	f01e 0f01 	tst.w	lr, #1
 8020684:	5d97      	ldrb	r7, [r2, r6]
 8020686:	bf0c      	ite	eq
 8020688:	f007 070f 	andeq.w	r7, r7, #15
 802068c:	113f      	asrne	r7, r7, #4
 802068e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8020692:	b2ff      	uxtb	r7, r7
 8020694:	f115 0a01 	adds.w	sl, r5, #1
 8020698:	f100 809a 	bmi.w	80207d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802069c:	45d1      	cmp	r9, sl
 802069e:	f340 8097 	ble.w	80207d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80206a2:	2c00      	cmp	r4, #0
 80206a4:	f2c0 8094 	blt.w	80207d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80206a8:	45a0      	cmp	r8, r4
 80206aa:	f340 8091 	ble.w	80207d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80206ae:	2800      	cmp	r0, #0
 80206b0:	f000 8090 	beq.w	80207d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80206b4:	f10e 0b01 	add.w	fp, lr, #1
 80206b8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80206bc:	f01b 0f01 	tst.w	fp, #1
 80206c0:	5d96      	ldrb	r6, [r2, r6]
 80206c2:	bf0c      	ite	eq
 80206c4:	f006 060f 	andeq.w	r6, r6, #15
 80206c8:	1136      	asrne	r6, r6, #4
 80206ca:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80206ce:	b2f6      	uxtb	r6, r6
 80206d0:	f1bc 0f00 	cmp.w	ip, #0
 80206d4:	f000 8082 	beq.w	80207dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80206d8:	2d00      	cmp	r5, #0
 80206da:	f104 0401 	add.w	r4, r4, #1
 80206de:	db7b      	blt.n	80207d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80206e0:	45a9      	cmp	r9, r5
 80206e2:	dd79      	ble.n	80207d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80206e4:	2c00      	cmp	r4, #0
 80206e6:	db77      	blt.n	80207d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80206e8:	45a0      	cmp	r8, r4
 80206ea:	dd75      	ble.n	80207d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80206ec:	eb03 0b0e 	add.w	fp, r3, lr
 80206f0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80206f4:	f01b 0f01 	tst.w	fp, #1
 80206f8:	5d55      	ldrb	r5, [r2, r5]
 80206fa:	bf0c      	ite	eq
 80206fc:	f005 050f 	andeq.w	r5, r5, #15
 8020700:	112d      	asrne	r5, r5, #4
 8020702:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020706:	b2ed      	uxtb	r5, r5
 8020708:	f1ba 0f00 	cmp.w	sl, #0
 802070c:	db69      	blt.n	80207e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802070e:	45d1      	cmp	r9, sl
 8020710:	dd67      	ble.n	80207e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020712:	2c00      	cmp	r4, #0
 8020714:	db65      	blt.n	80207e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020716:	45a0      	cmp	r8, r4
 8020718:	dd63      	ble.n	80207e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802071a:	2800      	cmp	r0, #0
 802071c:	d063      	beq.n	80207e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802071e:	3301      	adds	r3, #1
 8020720:	449e      	add	lr, r3
 8020722:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020726:	f01e 0f01 	tst.w	lr, #1
 802072a:	5cd4      	ldrb	r4, [r2, r3]
 802072c:	bf0c      	ite	eq
 802072e:	f004 040f 	andeq.w	r4, r4, #15
 8020732:	1124      	asrne	r4, r4, #4
 8020734:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020738:	b2e3      	uxtb	r3, r4
 802073a:	b282      	uxth	r2, r0
 802073c:	fa1f fc8c 	uxth.w	ip, ip
 8020740:	fb02 f40c 	mul.w	r4, r2, ip
 8020744:	0112      	lsls	r2, r2, #4
 8020746:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 802074a:	fa1f f08c 	uxth.w	r0, ip
 802074e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8020752:	1b12      	subs	r2, r2, r4
 8020754:	ebac 0c00 	sub.w	ip, ip, r0
 8020758:	b292      	uxth	r2, r2
 802075a:	fa1f fc8c 	uxth.w	ip, ip
 802075e:	4372      	muls	r2, r6
 8020760:	fb07 220c 	mla	r2, r7, ip, r2
 8020764:	fb00 2005 	mla	r0, r0, r5, r2
 8020768:	fb04 0303 	mla	r3, r4, r3, r0
 802076c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020770:	b353      	cbz	r3, 80207c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8020772:	4a1e      	ldr	r2, [pc, #120]	; (80207ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8020774:	7808      	ldrb	r0, [r1, #0]
 8020776:	6814      	ldr	r4, [r2, #0]
 8020778:	b29a      	uxth	r2, r3
 802077a:	43db      	mvns	r3, r3
 802077c:	b2e5      	uxtb	r5, r4
 802077e:	b2db      	uxtb	r3, r3
 8020780:	fb15 f502 	smulbb	r5, r5, r2
 8020784:	fb00 5003 	mla	r0, r0, r3, r5
 8020788:	b280      	uxth	r0, r0
 802078a:	1c45      	adds	r5, r0, #1
 802078c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020790:	784d      	ldrb	r5, [r1, #1]
 8020792:	fb15 f503 	smulbb	r5, r5, r3
 8020796:	1200      	asrs	r0, r0, #8
 8020798:	7008      	strb	r0, [r1, #0]
 802079a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802079e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80207a2:	fb00 5002 	mla	r0, r0, r2, r5
 80207a6:	b280      	uxth	r0, r0
 80207a8:	1c45      	adds	r5, r0, #1
 80207aa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80207ae:	1200      	asrs	r0, r0, #8
 80207b0:	7048      	strb	r0, [r1, #1]
 80207b2:	7888      	ldrb	r0, [r1, #2]
 80207b4:	fb10 f303 	smulbb	r3, r0, r3
 80207b8:	fb04 3202 	mla	r2, r4, r2, r3
 80207bc:	b292      	uxth	r2, r2
 80207be:	1c53      	adds	r3, r2, #1
 80207c0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80207c4:	1212      	asrs	r2, r2, #8
 80207c6:	708a      	strb	r2, [r1, #2]
 80207c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207cc:	2700      	movs	r7, #0
 80207ce:	e761      	b.n	8020694 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80207d0:	2600      	movs	r6, #0
 80207d2:	e77d      	b.n	80206d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80207d4:	4606      	mov	r6, r0
 80207d6:	e77b      	b.n	80206d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80207d8:	2500      	movs	r5, #0
 80207da:	e795      	b.n	8020708 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80207dc:	4663      	mov	r3, ip
 80207de:	4665      	mov	r5, ip
 80207e0:	e7ab      	b.n	802073a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80207e2:	2300      	movs	r3, #0
 80207e4:	e7a9      	b.n	802073a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80207e6:	4603      	mov	r3, r0
 80207e8:	e7a7      	b.n	802073a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80207ea:	bf00      	nop
 80207ec:	20011b44 	.word	0x20011b44

080207f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207f4:	b093      	sub	sp, #76	; 0x4c
 80207f6:	461c      	mov	r4, r3
 80207f8:	920c      	str	r2, [sp, #48]	; 0x30
 80207fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80207fc:	9011      	str	r0, [sp, #68]	; 0x44
 80207fe:	9107      	str	r1, [sp, #28]
 8020800:	6850      	ldr	r0, [r2, #4]
 8020802:	6812      	ldr	r2, [r2, #0]
 8020804:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8020808:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 802080c:	fb00 1303 	mla	r3, r0, r3, r1
 8020810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020814:	eb02 0b03 	add.w	fp, r2, r3
 8020818:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802081a:	689b      	ldr	r3, [r3, #8]
 802081c:	3301      	adds	r3, #1
 802081e:	f023 0301 	bic.w	r3, r3, #1
 8020822:	9309      	str	r3, [sp, #36]	; 0x24
 8020824:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020826:	f8d3 8000 	ldr.w	r8, [r3]
 802082a:	9b07      	ldr	r3, [sp, #28]
 802082c:	2b00      	cmp	r3, #0
 802082e:	dc03      	bgt.n	8020838 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020832:	2b00      	cmp	r3, #0
 8020834:	f340 822b 	ble.w	8020c8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020838:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802083a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802083e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020842:	1e48      	subs	r0, r1, #1
 8020844:	1e57      	subs	r7, r2, #1
 8020846:	2c00      	cmp	r4, #0
 8020848:	f340 80d7 	ble.w	80209fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802084c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020850:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020854:	d406      	bmi.n	8020864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020856:	4584      	cmp	ip, r0
 8020858:	da04      	bge.n	8020864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802085a:	2b00      	cmp	r3, #0
 802085c:	db02      	blt.n	8020864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802085e:	42bb      	cmp	r3, r7
 8020860:	f2c0 80cc 	blt.w	80209fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020864:	f11c 0c01 	adds.w	ip, ip, #1
 8020868:	f100 80bf 	bmi.w	80209ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802086c:	4561      	cmp	r1, ip
 802086e:	f2c0 80bc 	blt.w	80209ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020872:	3301      	adds	r3, #1
 8020874:	f100 80b9 	bmi.w	80209ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020878:	429a      	cmp	r2, r3
 802087a:	f2c0 80b6 	blt.w	80209ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802087e:	46a2      	mov	sl, r4
 8020880:	465f      	mov	r7, fp
 8020882:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020886:	f1ba 0f00 	cmp.w	sl, #0
 802088a:	f340 80d4 	ble.w	8020a36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802088e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8020892:	1430      	asrs	r0, r6, #16
 8020894:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020898:	9308      	str	r3, [sp, #32]
 802089a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802089c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80208a0:	142b      	asrs	r3, r5, #16
 80208a2:	f100 8124 	bmi.w	8020aee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80208a6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80208aa:	4293      	cmp	r3, r2
 80208ac:	f280 811f 	bge.w	8020aee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80208b0:	2800      	cmp	r0, #0
 80208b2:	f2c0 811c 	blt.w	8020aee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80208b6:	f10e 32ff 	add.w	r2, lr, #4294967295
 80208ba:	4290      	cmp	r0, r2
 80208bc:	f280 8117 	bge.w	8020aee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80208c0:	fb00 3309 	mla	r3, r0, r9, r3
 80208c4:	0858      	lsrs	r0, r3, #1
 80208c6:	07da      	lsls	r2, r3, #31
 80208c8:	9a08      	ldr	r2, [sp, #32]
 80208ca:	f818 c000 	ldrb.w	ip, [r8, r0]
 80208ce:	bf54      	ite	pl
 80208d0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80208d4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80208d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80208dc:	fa5f fc8c 	uxtb.w	ip, ip
 80208e0:	2a00      	cmp	r2, #0
 80208e2:	f000 80ed 	beq.w	8020ac0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80208e6:	1c58      	adds	r0, r3, #1
 80208e8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80208ec:	07c0      	lsls	r0, r0, #31
 80208ee:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80208f2:	bf54      	ite	pl
 80208f4:	f00e 0e0f 	andpl.w	lr, lr, #15
 80208f8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80208fc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020900:	fa5f fe8e 	uxtb.w	lr, lr
 8020904:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8020908:	b1c9      	cbz	r1, 802093e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802090a:	444b      	add	r3, r9
 802090c:	0858      	lsrs	r0, r3, #1
 802090e:	07da      	lsls	r2, r3, #31
 8020910:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020914:	bf54      	ite	pl
 8020916:	f000 000f 	andpl.w	r0, r0, #15
 802091a:	1100      	asrmi	r0, r0, #4
 802091c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020920:	b2c0      	uxtb	r0, r0
 8020922:	900a      	str	r0, [sp, #40]	; 0x28
 8020924:	1c58      	adds	r0, r3, #1
 8020926:	0843      	lsrs	r3, r0, #1
 8020928:	07c2      	lsls	r2, r0, #31
 802092a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802092e:	bf54      	ite	pl
 8020930:	f003 030f 	andpl.w	r3, r3, #15
 8020934:	111b      	asrmi	r3, r3, #4
 8020936:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802093a:	b2db      	uxtb	r3, r3
 802093c:	930e      	str	r3, [sp, #56]	; 0x38
 802093e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020942:	b289      	uxth	r1, r1
 8020944:	fb02 f301 	mul.w	r3, r2, r1
 8020948:	0112      	lsls	r2, r2, #4
 802094a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802094e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8020952:	1ad2      	subs	r2, r2, r3
 8020954:	b289      	uxth	r1, r1
 8020956:	b292      	uxth	r2, r2
 8020958:	1a40      	subs	r0, r0, r1
 802095a:	fa1f fe80 	uxth.w	lr, r0
 802095e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020960:	4342      	muls	r2, r0
 8020962:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8020966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020968:	fb01 c102 	mla	r1, r1, r2, ip
 802096c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802096e:	fb03 1302 	mla	r3, r3, r2, r1
 8020972:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020976:	b383      	cbz	r3, 80209da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020978:	4ac6      	ldr	r2, [pc, #792]	; (8020c94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802097a:	2bff      	cmp	r3, #255	; 0xff
 802097c:	6812      	ldr	r2, [r2, #0]
 802097e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8020982:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8020986:	b2d2      	uxtb	r2, r2
 8020988:	f000 80ac 	beq.w	8020ae4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802098c:	b299      	uxth	r1, r3
 802098e:	43db      	mvns	r3, r3
 8020990:	f897 c000 	ldrb.w	ip, [r7]
 8020994:	fb12 f201 	smulbb	r2, r2, r1
 8020998:	b2db      	uxtb	r3, r3
 802099a:	fb10 f001 	smulbb	r0, r0, r1
 802099e:	fb0c 2203 	mla	r2, ip, r3, r2
 80209a2:	fb1e f101 	smulbb	r1, lr, r1
 80209a6:	b292      	uxth	r2, r2
 80209a8:	f102 0c01 	add.w	ip, r2, #1
 80209ac:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80209b0:	1212      	asrs	r2, r2, #8
 80209b2:	703a      	strb	r2, [r7, #0]
 80209b4:	787a      	ldrb	r2, [r7, #1]
 80209b6:	fb02 0003 	mla	r0, r2, r3, r0
 80209ba:	b280      	uxth	r0, r0
 80209bc:	1c42      	adds	r2, r0, #1
 80209be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80209c2:	78ba      	ldrb	r2, [r7, #2]
 80209c4:	fb02 1303 	mla	r3, r2, r3, r1
 80209c8:	1200      	asrs	r0, r0, #8
 80209ca:	b29b      	uxth	r3, r3
 80209cc:	7078      	strb	r0, [r7, #1]
 80209ce:	f103 0e01 	add.w	lr, r3, #1
 80209d2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80209d6:	121b      	asrs	r3, r3, #8
 80209d8:	70bb      	strb	r3, [r7, #2]
 80209da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80209dc:	3703      	adds	r7, #3
 80209de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80209e2:	441d      	add	r5, r3
 80209e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80209e6:	441e      	add	r6, r3
 80209e8:	e74d      	b.n	8020886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80209ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80209ec:	3c01      	subs	r4, #1
 80209ee:	f10b 0b03 	add.w	fp, fp, #3
 80209f2:	441d      	add	r5, r3
 80209f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80209f6:	441e      	add	r6, r3
 80209f8:	e725      	b.n	8020846 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80209fa:	d021      	beq.n	8020a40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80209fc:	1e63      	subs	r3, r4, #1
 80209fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020a00:	fb00 5003 	mla	r0, r0, r3, r5
 8020a04:	1400      	asrs	r0, r0, #16
 8020a06:	f53f af3a 	bmi.w	802087e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020a0a:	3901      	subs	r1, #1
 8020a0c:	4288      	cmp	r0, r1
 8020a0e:	f6bf af36 	bge.w	802087e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020a12:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020a14:	fb01 6303 	mla	r3, r1, r3, r6
 8020a18:	141b      	asrs	r3, r3, #16
 8020a1a:	f53f af30 	bmi.w	802087e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020a1e:	3a01      	subs	r2, #1
 8020a20:	4293      	cmp	r3, r2
 8020a22:	f6bf af2c 	bge.w	802087e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020a26:	f10b 0c03 	add.w	ip, fp, #3
 8020a2a:	46a6      	mov	lr, r4
 8020a2c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020a30:	f1be 0f00 	cmp.w	lr, #0
 8020a34:	dc79      	bgt.n	8020b2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8020a36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8020a3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a3e:	44a3      	add	fp, r4
 8020a40:	9b07      	ldr	r3, [sp, #28]
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	f340 8123 	ble.w	8020c8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020a4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a56:	eef0 6a62 	vmov.f32	s13, s5
 8020a5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020a5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a66:	ee16 5a90 	vmov	r5, s13
 8020a6a:	eef0 6a43 	vmov.f32	s13, s6
 8020a6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a72:	ee16 6a90 	vmov	r6, s13
 8020a76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a8e:	ee12 2a90 	vmov	r2, s5
 8020a92:	eef0 2a47 	vmov.f32	s5, s14
 8020a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a9a:	ee13 2a10 	vmov	r2, s6
 8020a9e:	931f      	str	r3, [sp, #124]	; 0x7c
 8020aa0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020aa2:	eeb0 3a67 	vmov.f32	s6, s15
 8020aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020aaa:	9320      	str	r3, [sp, #128]	; 0x80
 8020aac:	9b07      	ldr	r3, [sp, #28]
 8020aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ab0:	3b01      	subs	r3, #1
 8020ab2:	9307      	str	r3, [sp, #28]
 8020ab4:	bf08      	it	eq
 8020ab6:	4614      	moveq	r4, r2
 8020ab8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020aba:	bf18      	it	ne
 8020abc:	461c      	movne	r4, r3
 8020abe:	e6b4      	b.n	802082a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020ac0:	2900      	cmp	r1, #0
 8020ac2:	f43f af3c 	beq.w	802093e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020ac6:	eb09 0003 	add.w	r0, r9, r3
 8020aca:	0843      	lsrs	r3, r0, #1
 8020acc:	07c0      	lsls	r0, r0, #31
 8020ace:	f818 3003 	ldrb.w	r3, [r8, r3]
 8020ad2:	bf54      	ite	pl
 8020ad4:	f003 030f 	andpl.w	r3, r3, #15
 8020ad8:	111b      	asrmi	r3, r3, #4
 8020ada:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020ade:	b2db      	uxtb	r3, r3
 8020ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8020ae2:	e72c      	b.n	802093e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020ae4:	703a      	strb	r2, [r7, #0]
 8020ae6:	7078      	strb	r0, [r7, #1]
 8020ae8:	f887 e002 	strb.w	lr, [r7, #2]
 8020aec:	e775      	b.n	80209da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020aee:	1c5a      	adds	r2, r3, #1
 8020af0:	f53f af73 	bmi.w	80209da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020af4:	4594      	cmp	ip, r2
 8020af6:	f6ff af70 	blt.w	80209da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020afa:	1c42      	adds	r2, r0, #1
 8020afc:	f53f af6d 	bmi.w	80209da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020b00:	4596      	cmp	lr, r2
 8020b02:	f6ff af6a 	blt.w	80209da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020b06:	9302      	str	r3, [sp, #8]
 8020b08:	fa0f f38e 	sxth.w	r3, lr
 8020b0c:	9a08      	ldr	r2, [sp, #32]
 8020b0e:	9301      	str	r3, [sp, #4]
 8020b10:	fa0f f38c 	sxth.w	r3, ip
 8020b14:	9105      	str	r1, [sp, #20]
 8020b16:	4639      	mov	r1, r7
 8020b18:	9300      	str	r3, [sp, #0]
 8020b1a:	464b      	mov	r3, r9
 8020b1c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020b20:	4642      	mov	r2, r8
 8020b22:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020b24:	f7ff fd90 	bl	8020648 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8020b28:	e757      	b.n	80209da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020b2a:	142a      	asrs	r2, r5, #16
 8020b2c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020b30:	1433      	asrs	r3, r6, #16
 8020b32:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8020b36:	fb09 2303 	mla	r3, r9, r3, r2
 8020b3a:	085a      	lsrs	r2, r3, #1
 8020b3c:	07d9      	lsls	r1, r3, #31
 8020b3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8020b42:	bf54      	ite	pl
 8020b44:	f002 020f 	andpl.w	r2, r2, #15
 8020b48:	1112      	asrmi	r2, r2, #4
 8020b4a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020b4e:	b2d2      	uxtb	r2, r2
 8020b50:	2800      	cmp	r0, #0
 8020b52:	f000 8085 	beq.w	8020c60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8020b56:	f103 0a01 	add.w	sl, r3, #1
 8020b5a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8020b5e:	f01a 0f01 	tst.w	sl, #1
 8020b62:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020b66:	bf0c      	ite	eq
 8020b68:	f001 010f 	andeq.w	r1, r1, #15
 8020b6c:	1109      	asrne	r1, r1, #4
 8020b6e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020b72:	b2c9      	uxtb	r1, r1
 8020b74:	910f      	str	r1, [sp, #60]	; 0x3c
 8020b76:	b1df      	cbz	r7, 8020bb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020b78:	444b      	add	r3, r9
 8020b7a:	0859      	lsrs	r1, r3, #1
 8020b7c:	f013 0f01 	tst.w	r3, #1
 8020b80:	f103 0301 	add.w	r3, r3, #1
 8020b84:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020b88:	bf0c      	ite	eq
 8020b8a:	f001 010f 	andeq.w	r1, r1, #15
 8020b8e:	1109      	asrne	r1, r1, #4
 8020b90:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020b94:	b2c9      	uxtb	r1, r1
 8020b96:	910b      	str	r1, [sp, #44]	; 0x2c
 8020b98:	0859      	lsrs	r1, r3, #1
 8020b9a:	07db      	lsls	r3, r3, #31
 8020b9c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020ba0:	bf54      	ite	pl
 8020ba2:	f001 010f 	andpl.w	r1, r1, #15
 8020ba6:	1109      	asrmi	r1, r1, #4
 8020ba8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020bac:	b2c9      	uxtb	r1, r1
 8020bae:	9110      	str	r1, [sp, #64]	; 0x40
 8020bb0:	b280      	uxth	r0, r0
 8020bb2:	b2bf      	uxth	r7, r7
 8020bb4:	fb00 f307 	mul.w	r3, r0, r7
 8020bb8:	0100      	lsls	r0, r0, #4
 8020bba:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8020bbe:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8020bc2:	1ac0      	subs	r0, r0, r3
 8020bc4:	b2bf      	uxth	r7, r7
 8020bc6:	b280      	uxth	r0, r0
 8020bc8:	1bc9      	subs	r1, r1, r7
 8020bca:	fa1f fa81 	uxth.w	sl, r1
 8020bce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020bd0:	4348      	muls	r0, r1
 8020bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020bd4:	fb02 020a 	mla	r2, r2, sl, r0
 8020bd8:	fb07 2701 	mla	r7, r7, r1, r2
 8020bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020bde:	fb03 7302 	mla	r3, r3, r2, r7
 8020be2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020be6:	b393      	cbz	r3, 8020c4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020be8:	4a2a      	ldr	r2, [pc, #168]	; (8020c94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8020bea:	2bff      	cmp	r3, #255	; 0xff
 8020bec:	6811      	ldr	r1, [r2, #0]
 8020bee:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8020bf2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8020bf6:	b2c9      	uxtb	r1, r1
 8020bf8:	d042      	beq.n	8020c80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8020bfa:	b298      	uxth	r0, r3
 8020bfc:	43db      	mvns	r3, r3
 8020bfe:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8020c02:	fb11 f100 	smulbb	r1, r1, r0
 8020c06:	b2db      	uxtb	r3, r3
 8020c08:	fb17 f700 	smulbb	r7, r7, r0
 8020c0c:	fb02 1103 	mla	r1, r2, r3, r1
 8020c10:	fb1a f000 	smulbb	r0, sl, r0
 8020c14:	b289      	uxth	r1, r1
 8020c16:	1c4a      	adds	r2, r1, #1
 8020c18:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020c1c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8020c20:	fb02 7703 	mla	r7, r2, r3, r7
 8020c24:	1209      	asrs	r1, r1, #8
 8020c26:	b2bf      	uxth	r7, r7
 8020c28:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020c2c:	1c7a      	adds	r2, r7, #1
 8020c2e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020c32:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8020c36:	fb02 0303 	mla	r3, r2, r3, r0
 8020c3a:	123f      	asrs	r7, r7, #8
 8020c3c:	b29b      	uxth	r3, r3
 8020c3e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020c42:	1c5a      	adds	r2, r3, #1
 8020c44:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020c48:	121b      	asrs	r3, r3, #8
 8020c4a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8020c4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020c50:	f10c 0c03 	add.w	ip, ip, #3
 8020c54:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020c58:	441d      	add	r5, r3
 8020c5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c5c:	441e      	add	r6, r3
 8020c5e:	e6e7      	b.n	8020a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020c60:	2f00      	cmp	r7, #0
 8020c62:	d0a5      	beq.n	8020bb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020c64:	444b      	add	r3, r9
 8020c66:	0859      	lsrs	r1, r3, #1
 8020c68:	07db      	lsls	r3, r3, #31
 8020c6a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020c6e:	bf54      	ite	pl
 8020c70:	f001 010f 	andpl.w	r1, r1, #15
 8020c74:	1109      	asrmi	r1, r1, #4
 8020c76:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020c7a:	b2c9      	uxtb	r1, r1
 8020c7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8020c7e:	e797      	b.n	8020bb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020c80:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020c84:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020c88:	f80c ac01 	strb.w	sl, [ip, #-1]
 8020c8c:	e7df      	b.n	8020c4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020c8e:	b013      	add	sp, #76	; 0x4c
 8020c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c94:	20011b44 	.word	0x20011b44

08020c98 <CRC_Lock>:
 8020c98:	4a20      	ldr	r2, [pc, #128]	; (8020d1c <CRC_Lock+0x84>)
 8020c9a:	b530      	push	{r4, r5, lr}
 8020c9c:	6813      	ldr	r3, [r2, #0]
 8020c9e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8020ca2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8020ca6:	f023 0301 	bic.w	r3, r3, #1
 8020caa:	6013      	str	r3, [r2, #0]
 8020cac:	4b1c      	ldr	r3, [pc, #112]	; (8020d20 <CRC_Lock+0x88>)
 8020cae:	681a      	ldr	r2, [r3, #0]
 8020cb0:	4022      	ands	r2, r4
 8020cb2:	42aa      	cmp	r2, r5
 8020cb4:	d005      	beq.n	8020cc2 <CRC_Lock+0x2a>
 8020cb6:	681b      	ldr	r3, [r3, #0]
 8020cb8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8020cbc:	4023      	ands	r3, r4
 8020cbe:	4293      	cmp	r3, r2
 8020cc0:	d124      	bne.n	8020d0c <CRC_Lock+0x74>
 8020cc2:	4b18      	ldr	r3, [pc, #96]	; (8020d24 <CRC_Lock+0x8c>)
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	bb0b      	cbnz	r3, 8020d0c <CRC_Lock+0x74>
 8020cc8:	4b17      	ldr	r3, [pc, #92]	; (8020d28 <CRC_Lock+0x90>)
 8020cca:	681a      	ldr	r2, [r3, #0]
 8020ccc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020cd0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8020cd4:	d00d      	beq.n	8020cf2 <CRC_Lock+0x5a>
 8020cd6:	681a      	ldr	r2, [r3, #0]
 8020cd8:	f240 4483 	movw	r4, #1155	; 0x483
 8020cdc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020ce0:	42a2      	cmp	r2, r4
 8020ce2:	d006      	beq.n	8020cf2 <CRC_Lock+0x5a>
 8020ce4:	681b      	ldr	r3, [r3, #0]
 8020ce6:	f240 4285 	movw	r2, #1157	; 0x485
 8020cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020cee:	4293      	cmp	r3, r2
 8020cf0:	d10c      	bne.n	8020d0c <CRC_Lock+0x74>
 8020cf2:	4b0e      	ldr	r3, [pc, #56]	; (8020d2c <CRC_Lock+0x94>)
 8020cf4:	2201      	movs	r2, #1
 8020cf6:	601a      	str	r2, [r3, #0]
 8020cf8:	681a      	ldr	r2, [r3, #0]
 8020cfa:	2a00      	cmp	r2, #0
 8020cfc:	d1fc      	bne.n	8020cf8 <CRC_Lock+0x60>
 8020cfe:	4b0c      	ldr	r3, [pc, #48]	; (8020d30 <CRC_Lock+0x98>)
 8020d00:	6018      	str	r0, [r3, #0]
 8020d02:	6818      	ldr	r0, [r3, #0]
 8020d04:	1a43      	subs	r3, r0, r1
 8020d06:	4258      	negs	r0, r3
 8020d08:	4158      	adcs	r0, r3
 8020d0a:	bd30      	pop	{r4, r5, pc}
 8020d0c:	4b09      	ldr	r3, [pc, #36]	; (8020d34 <CRC_Lock+0x9c>)
 8020d0e:	2201      	movs	r2, #1
 8020d10:	601a      	str	r2, [r3, #0]
 8020d12:	681a      	ldr	r2, [r3, #0]
 8020d14:	2a00      	cmp	r2, #0
 8020d16:	d1fc      	bne.n	8020d12 <CRC_Lock+0x7a>
 8020d18:	4b07      	ldr	r3, [pc, #28]	; (8020d38 <CRC_Lock+0xa0>)
 8020d1a:	e7f1      	b.n	8020d00 <CRC_Lock+0x68>
 8020d1c:	e0002000 	.word	0xe0002000
 8020d20:	e000ed00 	.word	0xe000ed00
 8020d24:	e0042000 	.word	0xe0042000
 8020d28:	5c001000 	.word	0x5c001000
 8020d2c:	58024c08 	.word	0x58024c08
 8020d30:	58024c00 	.word	0x58024c00
 8020d34:	40023008 	.word	0x40023008
 8020d38:	40023000 	.word	0x40023000

08020d3c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020d3c:	6101      	str	r1, [r0, #16]
 8020d3e:	4770      	bx	lr

08020d40 <_ZN8touchgfx8Gestures4tickEv>:
 8020d40:	7b83      	ldrb	r3, [r0, #14]
 8020d42:	b14b      	cbz	r3, 8020d58 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020d44:	8903      	ldrh	r3, [r0, #8]
 8020d46:	3301      	adds	r3, #1
 8020d48:	b29b      	uxth	r3, r3
 8020d4a:	2b07      	cmp	r3, #7
 8020d4c:	8103      	strh	r3, [r0, #8]
 8020d4e:	bf81      	itttt	hi
 8020d50:	2300      	movhi	r3, #0
 8020d52:	8143      	strhhi	r3, [r0, #10]
 8020d54:	8183      	strhhi	r3, [r0, #12]
 8020d56:	7383      	strbhi	r3, [r0, #14]
 8020d58:	4770      	bx	lr
	...

08020d5c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020d5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020d60:	4698      	mov	r8, r3
 8020d62:	8883      	ldrh	r3, [r0, #4]
 8020d64:	4604      	mov	r4, r0
 8020d66:	4617      	mov	r7, r2
 8020d68:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020d6c:	eba8 0303 	sub.w	r3, r8, r3
 8020d70:	4a19      	ldr	r2, [pc, #100]	; (8020dd8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8020d72:	460e      	mov	r6, r1
 8020d74:	b21b      	sxth	r3, r3
 8020d76:	88c1      	ldrh	r1, [r0, #6]
 8020d78:	9200      	str	r2, [sp, #0]
 8020d7a:	2000      	movs	r0, #0
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	8aa2      	ldrh	r2, [r4, #20]
 8020d80:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8020d84:	bfb8      	it	lt
 8020d86:	425b      	neglt	r3, r3
 8020d88:	f88d 0004 	strb.w	r0, [sp, #4]
 8020d8c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020d90:	b21b      	sxth	r3, r3
 8020d92:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020d96:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020d9a:	4293      	cmp	r3, r2
 8020d9c:	dc07      	bgt.n	8020dae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8020d9e:	1a69      	subs	r1, r5, r1
 8020da0:	b209      	sxth	r1, r1
 8020da2:	2900      	cmp	r1, #0
 8020da4:	bfb8      	it	lt
 8020da6:	4249      	neglt	r1, r1
 8020da8:	b209      	sxth	r1, r1
 8020daa:	428a      	cmp	r2, r1
 8020dac:	da10      	bge.n	8020dd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8020dae:	6920      	ldr	r0, [r4, #16]
 8020db0:	4669      	mov	r1, sp
 8020db2:	eba8 0606 	sub.w	r6, r8, r6
 8020db6:	1bef      	subs	r7, r5, r7
 8020db8:	6803      	ldr	r3, [r0, #0]
 8020dba:	685b      	ldr	r3, [r3, #4]
 8020dbc:	4798      	blx	r3
 8020dbe:	2300      	movs	r3, #0
 8020dc0:	2001      	movs	r0, #1
 8020dc2:	8166      	strh	r6, [r4, #10]
 8020dc4:	8123      	strh	r3, [r4, #8]
 8020dc6:	81a7      	strh	r7, [r4, #12]
 8020dc8:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020dcc:	80e5      	strh	r5, [r4, #6]
 8020dce:	73a0      	strb	r0, [r4, #14]
 8020dd0:	b004      	add	sp, #16
 8020dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020dd6:	bf00      	nop
 8020dd8:	08024314 	.word	0x08024314

08020ddc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020dde:	461e      	mov	r6, r3
 8020de0:	1e4b      	subs	r3, r1, #1
 8020de2:	b085      	sub	sp, #20
 8020de4:	4604      	mov	r4, r0
 8020de6:	2b01      	cmp	r3, #1
 8020de8:	460d      	mov	r5, r1
 8020dea:	4617      	mov	r7, r2
 8020dec:	d84b      	bhi.n	8020e86 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020dee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020df2:	1cd3      	adds	r3, r2, #3
 8020df4:	b29b      	uxth	r3, r3
 8020df6:	2b06      	cmp	r3, #6
 8020df8:	d916      	bls.n	8020e28 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8020dfa:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8020e9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020dfe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020e02:	f8cd c004 	str.w	ip, [sp, #4]
 8020e06:	f04f 0c00 	mov.w	ip, #0
 8020e0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020e0e:	6900      	ldr	r0, [r0, #16]
 8020e10:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020e14:	a901      	add	r1, sp, #4
 8020e16:	f88d c008 	strb.w	ip, [sp, #8]
 8020e1a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020e1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e22:	6803      	ldr	r3, [r0, #0]
 8020e24:	689b      	ldr	r3, [r3, #8]
 8020e26:	4798      	blx	r3
 8020e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020e2c:	1cd3      	adds	r3, r2, #3
 8020e2e:	b29b      	uxth	r3, r3
 8020e30:	2b06      	cmp	r3, #6
 8020e32:	d916      	bls.n	8020e62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020e34:	f8df c064 	ldr.w	ip, [pc, #100]	; 8020e9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020e38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020e3c:	f8cd c004 	str.w	ip, [sp, #4]
 8020e40:	f04f 0c01 	mov.w	ip, #1
 8020e44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020e48:	6920      	ldr	r0, [r4, #16]
 8020e4a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020e4e:	a901      	add	r1, sp, #4
 8020e50:	f88d c008 	strb.w	ip, [sp, #8]
 8020e54:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020e58:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e5c:	6803      	ldr	r3, [r0, #0]
 8020e5e:	689b      	ldr	r3, [r3, #8]
 8020e60:	4798      	blx	r3
 8020e62:	4b0d      	ldr	r3, [pc, #52]	; (8020e98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8020e64:	a901      	add	r1, sp, #4
 8020e66:	6920      	ldr	r0, [r4, #16]
 8020e68:	9301      	str	r3, [sp, #4]
 8020e6a:	2300      	movs	r3, #0
 8020e6c:	f88d 5008 	strb.w	r5, [sp, #8]
 8020e70:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020e74:	f8ad 600c 	strh.w	r6, [sp, #12]
 8020e78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e7c:	6803      	ldr	r3, [r0, #0]
 8020e7e:	681b      	ldr	r3, [r3, #0]
 8020e80:	4798      	blx	r3
 8020e82:	b005      	add	sp, #20
 8020e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e86:	2900      	cmp	r1, #0
 8020e88:	d1eb      	bne.n	8020e62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020e8a:	80a2      	strh	r2, [r4, #4]
 8020e8c:	80c6      	strh	r6, [r0, #6]
 8020e8e:	60a1      	str	r1, [r4, #8]
 8020e90:	81a1      	strh	r1, [r4, #12]
 8020e92:	73a1      	strb	r1, [r4, #14]
 8020e94:	e7e5      	b.n	8020e62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020e96:	bf00      	nop
 8020e98:	08024300 	.word	0x08024300
 8020e9c:	08024328 	.word	0x08024328

08020ea0 <__aeabi_atexit>:
 8020ea0:	460b      	mov	r3, r1
 8020ea2:	4601      	mov	r1, r0
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	f000 b853 	b.w	8020f50 <__cxa_atexit>

08020eaa <_ZdlPvj>:
 8020eaa:	f000 b812 	b.w	8020ed2 <_ZdlPv>

08020eae <__cxa_guard_acquire>:
 8020eae:	6803      	ldr	r3, [r0, #0]
 8020eb0:	07db      	lsls	r3, r3, #31
 8020eb2:	d406      	bmi.n	8020ec2 <__cxa_guard_acquire+0x14>
 8020eb4:	7843      	ldrb	r3, [r0, #1]
 8020eb6:	b103      	cbz	r3, 8020eba <__cxa_guard_acquire+0xc>
 8020eb8:	deff      	udf	#255	; 0xff
 8020eba:	2301      	movs	r3, #1
 8020ebc:	7043      	strb	r3, [r0, #1]
 8020ebe:	4618      	mov	r0, r3
 8020ec0:	4770      	bx	lr
 8020ec2:	2000      	movs	r0, #0
 8020ec4:	4770      	bx	lr

08020ec6 <__cxa_guard_release>:
 8020ec6:	2301      	movs	r3, #1
 8020ec8:	6003      	str	r3, [r0, #0]
 8020eca:	4770      	bx	lr

08020ecc <__cxa_pure_virtual>:
 8020ecc:	b508      	push	{r3, lr}
 8020ece:	f000 f80f 	bl	8020ef0 <_ZSt9terminatev>

08020ed2 <_ZdlPv>:
 8020ed2:	f000 b989 	b.w	80211e8 <free>

08020ed6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020ed6:	b508      	push	{r3, lr}
 8020ed8:	4780      	blx	r0
 8020eda:	f000 f80e 	bl	8020efa <abort>
	...

08020ee0 <_ZSt13get_terminatev>:
 8020ee0:	4b02      	ldr	r3, [pc, #8]	; (8020eec <_ZSt13get_terminatev+0xc>)
 8020ee2:	6818      	ldr	r0, [r3, #0]
 8020ee4:	f3bf 8f5b 	dmb	ish
 8020ee8:	4770      	bx	lr
 8020eea:	bf00      	nop
 8020eec:	20000094 	.word	0x20000094

08020ef0 <_ZSt9terminatev>:
 8020ef0:	b508      	push	{r3, lr}
 8020ef2:	f7ff fff5 	bl	8020ee0 <_ZSt13get_terminatev>
 8020ef6:	f7ff ffee 	bl	8020ed6 <_ZN10__cxxabiv111__terminateEPFvvE>

08020efa <abort>:
 8020efa:	b508      	push	{r3, lr}
 8020efc:	2006      	movs	r0, #6
 8020efe:	f000 fe01 	bl	8021b04 <raise>
 8020f02:	2001      	movs	r0, #1
 8020f04:	f7e1 f89a 	bl	800203c <_exit>

08020f08 <__assert_func>:
 8020f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020f0a:	4614      	mov	r4, r2
 8020f0c:	461a      	mov	r2, r3
 8020f0e:	4b09      	ldr	r3, [pc, #36]	; (8020f34 <__assert_func+0x2c>)
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	4605      	mov	r5, r0
 8020f14:	68d8      	ldr	r0, [r3, #12]
 8020f16:	b14c      	cbz	r4, 8020f2c <__assert_func+0x24>
 8020f18:	4b07      	ldr	r3, [pc, #28]	; (8020f38 <__assert_func+0x30>)
 8020f1a:	9100      	str	r1, [sp, #0]
 8020f1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020f20:	4906      	ldr	r1, [pc, #24]	; (8020f3c <__assert_func+0x34>)
 8020f22:	462b      	mov	r3, r5
 8020f24:	f000 f8fe 	bl	8021124 <fiprintf>
 8020f28:	f7ff ffe7 	bl	8020efa <abort>
 8020f2c:	4b04      	ldr	r3, [pc, #16]	; (8020f40 <__assert_func+0x38>)
 8020f2e:	461c      	mov	r4, r3
 8020f30:	e7f3      	b.n	8020f1a <__assert_func+0x12>
 8020f32:	bf00      	nop
 8020f34:	20000098 	.word	0x20000098
 8020f38:	08024550 	.word	0x08024550
 8020f3c:	0802455d 	.word	0x0802455d
 8020f40:	0802458b 	.word	0x0802458b

08020f44 <atexit>:
 8020f44:	2300      	movs	r3, #0
 8020f46:	4601      	mov	r1, r0
 8020f48:	461a      	mov	r2, r3
 8020f4a:	4618      	mov	r0, r3
 8020f4c:	f000 bf0c 	b.w	8021d68 <__register_exitproc>

08020f50 <__cxa_atexit>:
 8020f50:	b510      	push	{r4, lr}
 8020f52:	4c05      	ldr	r4, [pc, #20]	; (8020f68 <__cxa_atexit+0x18>)
 8020f54:	4613      	mov	r3, r2
 8020f56:	b12c      	cbz	r4, 8020f64 <__cxa_atexit+0x14>
 8020f58:	460a      	mov	r2, r1
 8020f5a:	4601      	mov	r1, r0
 8020f5c:	2002      	movs	r0, #2
 8020f5e:	f000 ff03 	bl	8021d68 <__register_exitproc>
 8020f62:	bd10      	pop	{r4, pc}
 8020f64:	4620      	mov	r0, r4
 8020f66:	e7fc      	b.n	8020f62 <__cxa_atexit+0x12>
 8020f68:	08021d69 	.word	0x08021d69

08020f6c <__errno>:
 8020f6c:	4b01      	ldr	r3, [pc, #4]	; (8020f74 <__errno+0x8>)
 8020f6e:	6818      	ldr	r0, [r3, #0]
 8020f70:	4770      	bx	lr
 8020f72:	bf00      	nop
 8020f74:	20000098 	.word	0x20000098

08020f78 <std>:
 8020f78:	2300      	movs	r3, #0
 8020f7a:	b510      	push	{r4, lr}
 8020f7c:	4604      	mov	r4, r0
 8020f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8020f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020f86:	6083      	str	r3, [r0, #8]
 8020f88:	8181      	strh	r1, [r0, #12]
 8020f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8020f8c:	81c2      	strh	r2, [r0, #14]
 8020f8e:	6183      	str	r3, [r0, #24]
 8020f90:	4619      	mov	r1, r3
 8020f92:	2208      	movs	r2, #8
 8020f94:	305c      	adds	r0, #92	; 0x5c
 8020f96:	f000 f93d 	bl	8021214 <memset>
 8020f9a:	4b05      	ldr	r3, [pc, #20]	; (8020fb0 <std+0x38>)
 8020f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8020f9e:	4b05      	ldr	r3, [pc, #20]	; (8020fb4 <std+0x3c>)
 8020fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8020fa2:	4b05      	ldr	r3, [pc, #20]	; (8020fb8 <std+0x40>)
 8020fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020fa6:	4b05      	ldr	r3, [pc, #20]	; (8020fbc <std+0x44>)
 8020fa8:	6224      	str	r4, [r4, #32]
 8020faa:	6323      	str	r3, [r4, #48]	; 0x30
 8020fac:	bd10      	pop	{r4, pc}
 8020fae:	bf00      	nop
 8020fb0:	08021b3d 	.word	0x08021b3d
 8020fb4:	08021b5f 	.word	0x08021b5f
 8020fb8:	08021b97 	.word	0x08021b97
 8020fbc:	08021bbb 	.word	0x08021bbb

08020fc0 <_cleanup_r>:
 8020fc0:	4901      	ldr	r1, [pc, #4]	; (8020fc8 <_cleanup_r+0x8>)
 8020fc2:	f000 b8c1 	b.w	8021148 <_fwalk_reent>
 8020fc6:	bf00      	nop
 8020fc8:	08021f59 	.word	0x08021f59

08020fcc <__sfmoreglue>:
 8020fcc:	b570      	push	{r4, r5, r6, lr}
 8020fce:	2268      	movs	r2, #104	; 0x68
 8020fd0:	1e4d      	subs	r5, r1, #1
 8020fd2:	4355      	muls	r5, r2
 8020fd4:	460e      	mov	r6, r1
 8020fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020fda:	f000 f98f 	bl	80212fc <_malloc_r>
 8020fde:	4604      	mov	r4, r0
 8020fe0:	b140      	cbz	r0, 8020ff4 <__sfmoreglue+0x28>
 8020fe2:	2100      	movs	r1, #0
 8020fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8020fe8:	300c      	adds	r0, #12
 8020fea:	60a0      	str	r0, [r4, #8]
 8020fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020ff0:	f000 f910 	bl	8021214 <memset>
 8020ff4:	4620      	mov	r0, r4
 8020ff6:	bd70      	pop	{r4, r5, r6, pc}

08020ff8 <__sfp_lock_acquire>:
 8020ff8:	4801      	ldr	r0, [pc, #4]	; (8021000 <__sfp_lock_acquire+0x8>)
 8020ffa:	f000 b8ea 	b.w	80211d2 <__retarget_lock_acquire_recursive>
 8020ffe:	bf00      	nop
 8021000:	20011c1a 	.word	0x20011c1a

08021004 <__sfp_lock_release>:
 8021004:	4801      	ldr	r0, [pc, #4]	; (802100c <__sfp_lock_release+0x8>)
 8021006:	f000 b8e6 	b.w	80211d6 <__retarget_lock_release_recursive>
 802100a:	bf00      	nop
 802100c:	20011c1a 	.word	0x20011c1a

08021010 <__sinit_lock_acquire>:
 8021010:	4801      	ldr	r0, [pc, #4]	; (8021018 <__sinit_lock_acquire+0x8>)
 8021012:	f000 b8de 	b.w	80211d2 <__retarget_lock_acquire_recursive>
 8021016:	bf00      	nop
 8021018:	20011c1b 	.word	0x20011c1b

0802101c <__sinit_lock_release>:
 802101c:	4801      	ldr	r0, [pc, #4]	; (8021024 <__sinit_lock_release+0x8>)
 802101e:	f000 b8da 	b.w	80211d6 <__retarget_lock_release_recursive>
 8021022:	bf00      	nop
 8021024:	20011c1b 	.word	0x20011c1b

08021028 <__sinit>:
 8021028:	b510      	push	{r4, lr}
 802102a:	4604      	mov	r4, r0
 802102c:	f7ff fff0 	bl	8021010 <__sinit_lock_acquire>
 8021030:	69a3      	ldr	r3, [r4, #24]
 8021032:	b11b      	cbz	r3, 802103c <__sinit+0x14>
 8021034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021038:	f7ff bff0 	b.w	802101c <__sinit_lock_release>
 802103c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021040:	6523      	str	r3, [r4, #80]	; 0x50
 8021042:	4b13      	ldr	r3, [pc, #76]	; (8021090 <__sinit+0x68>)
 8021044:	4a13      	ldr	r2, [pc, #76]	; (8021094 <__sinit+0x6c>)
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	62a2      	str	r2, [r4, #40]	; 0x28
 802104a:	42a3      	cmp	r3, r4
 802104c:	bf04      	itt	eq
 802104e:	2301      	moveq	r3, #1
 8021050:	61a3      	streq	r3, [r4, #24]
 8021052:	4620      	mov	r0, r4
 8021054:	f000 f820 	bl	8021098 <__sfp>
 8021058:	6060      	str	r0, [r4, #4]
 802105a:	4620      	mov	r0, r4
 802105c:	f000 f81c 	bl	8021098 <__sfp>
 8021060:	60a0      	str	r0, [r4, #8]
 8021062:	4620      	mov	r0, r4
 8021064:	f000 f818 	bl	8021098 <__sfp>
 8021068:	2200      	movs	r2, #0
 802106a:	60e0      	str	r0, [r4, #12]
 802106c:	2104      	movs	r1, #4
 802106e:	6860      	ldr	r0, [r4, #4]
 8021070:	f7ff ff82 	bl	8020f78 <std>
 8021074:	68a0      	ldr	r0, [r4, #8]
 8021076:	2201      	movs	r2, #1
 8021078:	2109      	movs	r1, #9
 802107a:	f7ff ff7d 	bl	8020f78 <std>
 802107e:	68e0      	ldr	r0, [r4, #12]
 8021080:	2202      	movs	r2, #2
 8021082:	2112      	movs	r1, #18
 8021084:	f7ff ff78 	bl	8020f78 <std>
 8021088:	2301      	movs	r3, #1
 802108a:	61a3      	str	r3, [r4, #24]
 802108c:	e7d2      	b.n	8021034 <__sinit+0xc>
 802108e:	bf00      	nop
 8021090:	080245ec 	.word	0x080245ec
 8021094:	08020fc1 	.word	0x08020fc1

08021098 <__sfp>:
 8021098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802109a:	4607      	mov	r7, r0
 802109c:	f7ff ffac 	bl	8020ff8 <__sfp_lock_acquire>
 80210a0:	4b1e      	ldr	r3, [pc, #120]	; (802111c <__sfp+0x84>)
 80210a2:	681e      	ldr	r6, [r3, #0]
 80210a4:	69b3      	ldr	r3, [r6, #24]
 80210a6:	b913      	cbnz	r3, 80210ae <__sfp+0x16>
 80210a8:	4630      	mov	r0, r6
 80210aa:	f7ff ffbd 	bl	8021028 <__sinit>
 80210ae:	3648      	adds	r6, #72	; 0x48
 80210b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80210b4:	3b01      	subs	r3, #1
 80210b6:	d503      	bpl.n	80210c0 <__sfp+0x28>
 80210b8:	6833      	ldr	r3, [r6, #0]
 80210ba:	b30b      	cbz	r3, 8021100 <__sfp+0x68>
 80210bc:	6836      	ldr	r6, [r6, #0]
 80210be:	e7f7      	b.n	80210b0 <__sfp+0x18>
 80210c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80210c4:	b9d5      	cbnz	r5, 80210fc <__sfp+0x64>
 80210c6:	4b16      	ldr	r3, [pc, #88]	; (8021120 <__sfp+0x88>)
 80210c8:	60e3      	str	r3, [r4, #12]
 80210ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80210ce:	6665      	str	r5, [r4, #100]	; 0x64
 80210d0:	f000 f87e 	bl	80211d0 <__retarget_lock_init_recursive>
 80210d4:	f7ff ff96 	bl	8021004 <__sfp_lock_release>
 80210d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80210dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80210e0:	6025      	str	r5, [r4, #0]
 80210e2:	61a5      	str	r5, [r4, #24]
 80210e4:	2208      	movs	r2, #8
 80210e6:	4629      	mov	r1, r5
 80210e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80210ec:	f000 f892 	bl	8021214 <memset>
 80210f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80210f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80210f8:	4620      	mov	r0, r4
 80210fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210fc:	3468      	adds	r4, #104	; 0x68
 80210fe:	e7d9      	b.n	80210b4 <__sfp+0x1c>
 8021100:	2104      	movs	r1, #4
 8021102:	4638      	mov	r0, r7
 8021104:	f7ff ff62 	bl	8020fcc <__sfmoreglue>
 8021108:	4604      	mov	r4, r0
 802110a:	6030      	str	r0, [r6, #0]
 802110c:	2800      	cmp	r0, #0
 802110e:	d1d5      	bne.n	80210bc <__sfp+0x24>
 8021110:	f7ff ff78 	bl	8021004 <__sfp_lock_release>
 8021114:	230c      	movs	r3, #12
 8021116:	603b      	str	r3, [r7, #0]
 8021118:	e7ee      	b.n	80210f8 <__sfp+0x60>
 802111a:	bf00      	nop
 802111c:	080245ec 	.word	0x080245ec
 8021120:	ffff0001 	.word	0xffff0001

08021124 <fiprintf>:
 8021124:	b40e      	push	{r1, r2, r3}
 8021126:	b503      	push	{r0, r1, lr}
 8021128:	4601      	mov	r1, r0
 802112a:	ab03      	add	r3, sp, #12
 802112c:	4805      	ldr	r0, [pc, #20]	; (8021144 <fiprintf+0x20>)
 802112e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021132:	6800      	ldr	r0, [r0, #0]
 8021134:	9301      	str	r3, [sp, #4]
 8021136:	f000 f97f 	bl	8021438 <_vfiprintf_r>
 802113a:	b002      	add	sp, #8
 802113c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021140:	b003      	add	sp, #12
 8021142:	4770      	bx	lr
 8021144:	20000098 	.word	0x20000098

08021148 <_fwalk_reent>:
 8021148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802114c:	4606      	mov	r6, r0
 802114e:	4688      	mov	r8, r1
 8021150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021154:	2700      	movs	r7, #0
 8021156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802115a:	f1b9 0901 	subs.w	r9, r9, #1
 802115e:	d505      	bpl.n	802116c <_fwalk_reent+0x24>
 8021160:	6824      	ldr	r4, [r4, #0]
 8021162:	2c00      	cmp	r4, #0
 8021164:	d1f7      	bne.n	8021156 <_fwalk_reent+0xe>
 8021166:	4638      	mov	r0, r7
 8021168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802116c:	89ab      	ldrh	r3, [r5, #12]
 802116e:	2b01      	cmp	r3, #1
 8021170:	d907      	bls.n	8021182 <_fwalk_reent+0x3a>
 8021172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021176:	3301      	adds	r3, #1
 8021178:	d003      	beq.n	8021182 <_fwalk_reent+0x3a>
 802117a:	4629      	mov	r1, r5
 802117c:	4630      	mov	r0, r6
 802117e:	47c0      	blx	r8
 8021180:	4307      	orrs	r7, r0
 8021182:	3568      	adds	r5, #104	; 0x68
 8021184:	e7e9      	b.n	802115a <_fwalk_reent+0x12>
	...

08021188 <__libc_init_array>:
 8021188:	b570      	push	{r4, r5, r6, lr}
 802118a:	4d0d      	ldr	r5, [pc, #52]	; (80211c0 <__libc_init_array+0x38>)
 802118c:	4c0d      	ldr	r4, [pc, #52]	; (80211c4 <__libc_init_array+0x3c>)
 802118e:	1b64      	subs	r4, r4, r5
 8021190:	10a4      	asrs	r4, r4, #2
 8021192:	2600      	movs	r6, #0
 8021194:	42a6      	cmp	r6, r4
 8021196:	d109      	bne.n	80211ac <__libc_init_array+0x24>
 8021198:	4d0b      	ldr	r5, [pc, #44]	; (80211c8 <__libc_init_array+0x40>)
 802119a:	4c0c      	ldr	r4, [pc, #48]	; (80211cc <__libc_init_array+0x44>)
 802119c:	f000 ffd0 	bl	8022140 <_init>
 80211a0:	1b64      	subs	r4, r4, r5
 80211a2:	10a4      	asrs	r4, r4, #2
 80211a4:	2600      	movs	r6, #0
 80211a6:	42a6      	cmp	r6, r4
 80211a8:	d105      	bne.n	80211b6 <__libc_init_array+0x2e>
 80211aa:	bd70      	pop	{r4, r5, r6, pc}
 80211ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80211b0:	4798      	blx	r3
 80211b2:	3601      	adds	r6, #1
 80211b4:	e7ee      	b.n	8021194 <__libc_init_array+0xc>
 80211b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80211ba:	4798      	blx	r3
 80211bc:	3601      	adds	r6, #1
 80211be:	e7f2      	b.n	80211a6 <__libc_init_array+0x1e>
 80211c0:	080a485c 	.word	0x080a485c
 80211c4:	080a485c 	.word	0x080a485c
 80211c8:	080a485c 	.word	0x080a485c
 80211cc:	080a4870 	.word	0x080a4870

080211d0 <__retarget_lock_init_recursive>:
 80211d0:	4770      	bx	lr

080211d2 <__retarget_lock_acquire_recursive>:
 80211d2:	4770      	bx	lr

080211d4 <__retarget_lock_release>:
 80211d4:	4770      	bx	lr

080211d6 <__retarget_lock_release_recursive>:
 80211d6:	4770      	bx	lr

080211d8 <malloc>:
 80211d8:	4b02      	ldr	r3, [pc, #8]	; (80211e4 <malloc+0xc>)
 80211da:	4601      	mov	r1, r0
 80211dc:	6818      	ldr	r0, [r3, #0]
 80211de:	f000 b88d 	b.w	80212fc <_malloc_r>
 80211e2:	bf00      	nop
 80211e4:	20000098 	.word	0x20000098

080211e8 <free>:
 80211e8:	4b02      	ldr	r3, [pc, #8]	; (80211f4 <free+0xc>)
 80211ea:	4601      	mov	r1, r0
 80211ec:	6818      	ldr	r0, [r3, #0]
 80211ee:	f000 b819 	b.w	8021224 <_free_r>
 80211f2:	bf00      	nop
 80211f4:	20000098 	.word	0x20000098

080211f8 <memcpy>:
 80211f8:	440a      	add	r2, r1
 80211fa:	4291      	cmp	r1, r2
 80211fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8021200:	d100      	bne.n	8021204 <memcpy+0xc>
 8021202:	4770      	bx	lr
 8021204:	b510      	push	{r4, lr}
 8021206:	f811 4b01 	ldrb.w	r4, [r1], #1
 802120a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802120e:	4291      	cmp	r1, r2
 8021210:	d1f9      	bne.n	8021206 <memcpy+0xe>
 8021212:	bd10      	pop	{r4, pc}

08021214 <memset>:
 8021214:	4402      	add	r2, r0
 8021216:	4603      	mov	r3, r0
 8021218:	4293      	cmp	r3, r2
 802121a:	d100      	bne.n	802121e <memset+0xa>
 802121c:	4770      	bx	lr
 802121e:	f803 1b01 	strb.w	r1, [r3], #1
 8021222:	e7f9      	b.n	8021218 <memset+0x4>

08021224 <_free_r>:
 8021224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021226:	2900      	cmp	r1, #0
 8021228:	d044      	beq.n	80212b4 <_free_r+0x90>
 802122a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802122e:	9001      	str	r0, [sp, #4]
 8021230:	2b00      	cmp	r3, #0
 8021232:	f1a1 0404 	sub.w	r4, r1, #4
 8021236:	bfb8      	it	lt
 8021238:	18e4      	addlt	r4, r4, r3
 802123a:	f000 ff41 	bl	80220c0 <__malloc_lock>
 802123e:	4a1e      	ldr	r2, [pc, #120]	; (80212b8 <_free_r+0x94>)
 8021240:	9801      	ldr	r0, [sp, #4]
 8021242:	6813      	ldr	r3, [r2, #0]
 8021244:	b933      	cbnz	r3, 8021254 <_free_r+0x30>
 8021246:	6063      	str	r3, [r4, #4]
 8021248:	6014      	str	r4, [r2, #0]
 802124a:	b003      	add	sp, #12
 802124c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021250:	f000 bf3c 	b.w	80220cc <__malloc_unlock>
 8021254:	42a3      	cmp	r3, r4
 8021256:	d908      	bls.n	802126a <_free_r+0x46>
 8021258:	6825      	ldr	r5, [r4, #0]
 802125a:	1961      	adds	r1, r4, r5
 802125c:	428b      	cmp	r3, r1
 802125e:	bf01      	itttt	eq
 8021260:	6819      	ldreq	r1, [r3, #0]
 8021262:	685b      	ldreq	r3, [r3, #4]
 8021264:	1949      	addeq	r1, r1, r5
 8021266:	6021      	streq	r1, [r4, #0]
 8021268:	e7ed      	b.n	8021246 <_free_r+0x22>
 802126a:	461a      	mov	r2, r3
 802126c:	685b      	ldr	r3, [r3, #4]
 802126e:	b10b      	cbz	r3, 8021274 <_free_r+0x50>
 8021270:	42a3      	cmp	r3, r4
 8021272:	d9fa      	bls.n	802126a <_free_r+0x46>
 8021274:	6811      	ldr	r1, [r2, #0]
 8021276:	1855      	adds	r5, r2, r1
 8021278:	42a5      	cmp	r5, r4
 802127a:	d10b      	bne.n	8021294 <_free_r+0x70>
 802127c:	6824      	ldr	r4, [r4, #0]
 802127e:	4421      	add	r1, r4
 8021280:	1854      	adds	r4, r2, r1
 8021282:	42a3      	cmp	r3, r4
 8021284:	6011      	str	r1, [r2, #0]
 8021286:	d1e0      	bne.n	802124a <_free_r+0x26>
 8021288:	681c      	ldr	r4, [r3, #0]
 802128a:	685b      	ldr	r3, [r3, #4]
 802128c:	6053      	str	r3, [r2, #4]
 802128e:	4421      	add	r1, r4
 8021290:	6011      	str	r1, [r2, #0]
 8021292:	e7da      	b.n	802124a <_free_r+0x26>
 8021294:	d902      	bls.n	802129c <_free_r+0x78>
 8021296:	230c      	movs	r3, #12
 8021298:	6003      	str	r3, [r0, #0]
 802129a:	e7d6      	b.n	802124a <_free_r+0x26>
 802129c:	6825      	ldr	r5, [r4, #0]
 802129e:	1961      	adds	r1, r4, r5
 80212a0:	428b      	cmp	r3, r1
 80212a2:	bf04      	itt	eq
 80212a4:	6819      	ldreq	r1, [r3, #0]
 80212a6:	685b      	ldreq	r3, [r3, #4]
 80212a8:	6063      	str	r3, [r4, #4]
 80212aa:	bf04      	itt	eq
 80212ac:	1949      	addeq	r1, r1, r5
 80212ae:	6021      	streq	r1, [r4, #0]
 80212b0:	6054      	str	r4, [r2, #4]
 80212b2:	e7ca      	b.n	802124a <_free_r+0x26>
 80212b4:	b003      	add	sp, #12
 80212b6:	bd30      	pop	{r4, r5, pc}
 80212b8:	20011c1c 	.word	0x20011c1c

080212bc <sbrk_aligned>:
 80212bc:	b570      	push	{r4, r5, r6, lr}
 80212be:	4e0e      	ldr	r6, [pc, #56]	; (80212f8 <sbrk_aligned+0x3c>)
 80212c0:	460c      	mov	r4, r1
 80212c2:	6831      	ldr	r1, [r6, #0]
 80212c4:	4605      	mov	r5, r0
 80212c6:	b911      	cbnz	r1, 80212ce <sbrk_aligned+0x12>
 80212c8:	f000 fbe4 	bl	8021a94 <_sbrk_r>
 80212cc:	6030      	str	r0, [r6, #0]
 80212ce:	4621      	mov	r1, r4
 80212d0:	4628      	mov	r0, r5
 80212d2:	f000 fbdf 	bl	8021a94 <_sbrk_r>
 80212d6:	1c43      	adds	r3, r0, #1
 80212d8:	d00a      	beq.n	80212f0 <sbrk_aligned+0x34>
 80212da:	1cc4      	adds	r4, r0, #3
 80212dc:	f024 0403 	bic.w	r4, r4, #3
 80212e0:	42a0      	cmp	r0, r4
 80212e2:	d007      	beq.n	80212f4 <sbrk_aligned+0x38>
 80212e4:	1a21      	subs	r1, r4, r0
 80212e6:	4628      	mov	r0, r5
 80212e8:	f000 fbd4 	bl	8021a94 <_sbrk_r>
 80212ec:	3001      	adds	r0, #1
 80212ee:	d101      	bne.n	80212f4 <sbrk_aligned+0x38>
 80212f0:	f04f 34ff 	mov.w	r4, #4294967295
 80212f4:	4620      	mov	r0, r4
 80212f6:	bd70      	pop	{r4, r5, r6, pc}
 80212f8:	20011c20 	.word	0x20011c20

080212fc <_malloc_r>:
 80212fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021300:	1ccd      	adds	r5, r1, #3
 8021302:	f025 0503 	bic.w	r5, r5, #3
 8021306:	3508      	adds	r5, #8
 8021308:	2d0c      	cmp	r5, #12
 802130a:	bf38      	it	cc
 802130c:	250c      	movcc	r5, #12
 802130e:	2d00      	cmp	r5, #0
 8021310:	4607      	mov	r7, r0
 8021312:	db01      	blt.n	8021318 <_malloc_r+0x1c>
 8021314:	42a9      	cmp	r1, r5
 8021316:	d905      	bls.n	8021324 <_malloc_r+0x28>
 8021318:	230c      	movs	r3, #12
 802131a:	603b      	str	r3, [r7, #0]
 802131c:	2600      	movs	r6, #0
 802131e:	4630      	mov	r0, r6
 8021320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021324:	4e2e      	ldr	r6, [pc, #184]	; (80213e0 <_malloc_r+0xe4>)
 8021326:	f000 fecb 	bl	80220c0 <__malloc_lock>
 802132a:	6833      	ldr	r3, [r6, #0]
 802132c:	461c      	mov	r4, r3
 802132e:	bb34      	cbnz	r4, 802137e <_malloc_r+0x82>
 8021330:	4629      	mov	r1, r5
 8021332:	4638      	mov	r0, r7
 8021334:	f7ff ffc2 	bl	80212bc <sbrk_aligned>
 8021338:	1c43      	adds	r3, r0, #1
 802133a:	4604      	mov	r4, r0
 802133c:	d14d      	bne.n	80213da <_malloc_r+0xde>
 802133e:	6834      	ldr	r4, [r6, #0]
 8021340:	4626      	mov	r6, r4
 8021342:	2e00      	cmp	r6, #0
 8021344:	d140      	bne.n	80213c8 <_malloc_r+0xcc>
 8021346:	6823      	ldr	r3, [r4, #0]
 8021348:	4631      	mov	r1, r6
 802134a:	4638      	mov	r0, r7
 802134c:	eb04 0803 	add.w	r8, r4, r3
 8021350:	f000 fba0 	bl	8021a94 <_sbrk_r>
 8021354:	4580      	cmp	r8, r0
 8021356:	d13a      	bne.n	80213ce <_malloc_r+0xd2>
 8021358:	6821      	ldr	r1, [r4, #0]
 802135a:	3503      	adds	r5, #3
 802135c:	1a6d      	subs	r5, r5, r1
 802135e:	f025 0503 	bic.w	r5, r5, #3
 8021362:	3508      	adds	r5, #8
 8021364:	2d0c      	cmp	r5, #12
 8021366:	bf38      	it	cc
 8021368:	250c      	movcc	r5, #12
 802136a:	4629      	mov	r1, r5
 802136c:	4638      	mov	r0, r7
 802136e:	f7ff ffa5 	bl	80212bc <sbrk_aligned>
 8021372:	3001      	adds	r0, #1
 8021374:	d02b      	beq.n	80213ce <_malloc_r+0xd2>
 8021376:	6823      	ldr	r3, [r4, #0]
 8021378:	442b      	add	r3, r5
 802137a:	6023      	str	r3, [r4, #0]
 802137c:	e00e      	b.n	802139c <_malloc_r+0xa0>
 802137e:	6822      	ldr	r2, [r4, #0]
 8021380:	1b52      	subs	r2, r2, r5
 8021382:	d41e      	bmi.n	80213c2 <_malloc_r+0xc6>
 8021384:	2a0b      	cmp	r2, #11
 8021386:	d916      	bls.n	80213b6 <_malloc_r+0xba>
 8021388:	1961      	adds	r1, r4, r5
 802138a:	42a3      	cmp	r3, r4
 802138c:	6025      	str	r5, [r4, #0]
 802138e:	bf18      	it	ne
 8021390:	6059      	strne	r1, [r3, #4]
 8021392:	6863      	ldr	r3, [r4, #4]
 8021394:	bf08      	it	eq
 8021396:	6031      	streq	r1, [r6, #0]
 8021398:	5162      	str	r2, [r4, r5]
 802139a:	604b      	str	r3, [r1, #4]
 802139c:	4638      	mov	r0, r7
 802139e:	f104 060b 	add.w	r6, r4, #11
 80213a2:	f000 fe93 	bl	80220cc <__malloc_unlock>
 80213a6:	f026 0607 	bic.w	r6, r6, #7
 80213aa:	1d23      	adds	r3, r4, #4
 80213ac:	1af2      	subs	r2, r6, r3
 80213ae:	d0b6      	beq.n	802131e <_malloc_r+0x22>
 80213b0:	1b9b      	subs	r3, r3, r6
 80213b2:	50a3      	str	r3, [r4, r2]
 80213b4:	e7b3      	b.n	802131e <_malloc_r+0x22>
 80213b6:	6862      	ldr	r2, [r4, #4]
 80213b8:	42a3      	cmp	r3, r4
 80213ba:	bf0c      	ite	eq
 80213bc:	6032      	streq	r2, [r6, #0]
 80213be:	605a      	strne	r2, [r3, #4]
 80213c0:	e7ec      	b.n	802139c <_malloc_r+0xa0>
 80213c2:	4623      	mov	r3, r4
 80213c4:	6864      	ldr	r4, [r4, #4]
 80213c6:	e7b2      	b.n	802132e <_malloc_r+0x32>
 80213c8:	4634      	mov	r4, r6
 80213ca:	6876      	ldr	r6, [r6, #4]
 80213cc:	e7b9      	b.n	8021342 <_malloc_r+0x46>
 80213ce:	230c      	movs	r3, #12
 80213d0:	603b      	str	r3, [r7, #0]
 80213d2:	4638      	mov	r0, r7
 80213d4:	f000 fe7a 	bl	80220cc <__malloc_unlock>
 80213d8:	e7a1      	b.n	802131e <_malloc_r+0x22>
 80213da:	6025      	str	r5, [r4, #0]
 80213dc:	e7de      	b.n	802139c <_malloc_r+0xa0>
 80213de:	bf00      	nop
 80213e0:	20011c1c 	.word	0x20011c1c

080213e4 <__sfputc_r>:
 80213e4:	6893      	ldr	r3, [r2, #8]
 80213e6:	3b01      	subs	r3, #1
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	b410      	push	{r4}
 80213ec:	6093      	str	r3, [r2, #8]
 80213ee:	da08      	bge.n	8021402 <__sfputc_r+0x1e>
 80213f0:	6994      	ldr	r4, [r2, #24]
 80213f2:	42a3      	cmp	r3, r4
 80213f4:	db01      	blt.n	80213fa <__sfputc_r+0x16>
 80213f6:	290a      	cmp	r1, #10
 80213f8:	d103      	bne.n	8021402 <__sfputc_r+0x1e>
 80213fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80213fe:	f000 bbe1 	b.w	8021bc4 <__swbuf_r>
 8021402:	6813      	ldr	r3, [r2, #0]
 8021404:	1c58      	adds	r0, r3, #1
 8021406:	6010      	str	r0, [r2, #0]
 8021408:	7019      	strb	r1, [r3, #0]
 802140a:	4608      	mov	r0, r1
 802140c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021410:	4770      	bx	lr

08021412 <__sfputs_r>:
 8021412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021414:	4606      	mov	r6, r0
 8021416:	460f      	mov	r7, r1
 8021418:	4614      	mov	r4, r2
 802141a:	18d5      	adds	r5, r2, r3
 802141c:	42ac      	cmp	r4, r5
 802141e:	d101      	bne.n	8021424 <__sfputs_r+0x12>
 8021420:	2000      	movs	r0, #0
 8021422:	e007      	b.n	8021434 <__sfputs_r+0x22>
 8021424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021428:	463a      	mov	r2, r7
 802142a:	4630      	mov	r0, r6
 802142c:	f7ff ffda 	bl	80213e4 <__sfputc_r>
 8021430:	1c43      	adds	r3, r0, #1
 8021432:	d1f3      	bne.n	802141c <__sfputs_r+0xa>
 8021434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021438 <_vfiprintf_r>:
 8021438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802143c:	460d      	mov	r5, r1
 802143e:	b09d      	sub	sp, #116	; 0x74
 8021440:	4614      	mov	r4, r2
 8021442:	4698      	mov	r8, r3
 8021444:	4606      	mov	r6, r0
 8021446:	b118      	cbz	r0, 8021450 <_vfiprintf_r+0x18>
 8021448:	6983      	ldr	r3, [r0, #24]
 802144a:	b90b      	cbnz	r3, 8021450 <_vfiprintf_r+0x18>
 802144c:	f7ff fdec 	bl	8021028 <__sinit>
 8021450:	4b89      	ldr	r3, [pc, #548]	; (8021678 <_vfiprintf_r+0x240>)
 8021452:	429d      	cmp	r5, r3
 8021454:	d11b      	bne.n	802148e <_vfiprintf_r+0x56>
 8021456:	6875      	ldr	r5, [r6, #4]
 8021458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802145a:	07d9      	lsls	r1, r3, #31
 802145c:	d405      	bmi.n	802146a <_vfiprintf_r+0x32>
 802145e:	89ab      	ldrh	r3, [r5, #12]
 8021460:	059a      	lsls	r2, r3, #22
 8021462:	d402      	bmi.n	802146a <_vfiprintf_r+0x32>
 8021464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021466:	f7ff feb4 	bl	80211d2 <__retarget_lock_acquire_recursive>
 802146a:	89ab      	ldrh	r3, [r5, #12]
 802146c:	071b      	lsls	r3, r3, #28
 802146e:	d501      	bpl.n	8021474 <_vfiprintf_r+0x3c>
 8021470:	692b      	ldr	r3, [r5, #16]
 8021472:	b9eb      	cbnz	r3, 80214b0 <_vfiprintf_r+0x78>
 8021474:	4629      	mov	r1, r5
 8021476:	4630      	mov	r0, r6
 8021478:	f000 fc08 	bl	8021c8c <__swsetup_r>
 802147c:	b1c0      	cbz	r0, 80214b0 <_vfiprintf_r+0x78>
 802147e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021480:	07dc      	lsls	r4, r3, #31
 8021482:	d50e      	bpl.n	80214a2 <_vfiprintf_r+0x6a>
 8021484:	f04f 30ff 	mov.w	r0, #4294967295
 8021488:	b01d      	add	sp, #116	; 0x74
 802148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802148e:	4b7b      	ldr	r3, [pc, #492]	; (802167c <_vfiprintf_r+0x244>)
 8021490:	429d      	cmp	r5, r3
 8021492:	d101      	bne.n	8021498 <_vfiprintf_r+0x60>
 8021494:	68b5      	ldr	r5, [r6, #8]
 8021496:	e7df      	b.n	8021458 <_vfiprintf_r+0x20>
 8021498:	4b79      	ldr	r3, [pc, #484]	; (8021680 <_vfiprintf_r+0x248>)
 802149a:	429d      	cmp	r5, r3
 802149c:	bf08      	it	eq
 802149e:	68f5      	ldreq	r5, [r6, #12]
 80214a0:	e7da      	b.n	8021458 <_vfiprintf_r+0x20>
 80214a2:	89ab      	ldrh	r3, [r5, #12]
 80214a4:	0598      	lsls	r0, r3, #22
 80214a6:	d4ed      	bmi.n	8021484 <_vfiprintf_r+0x4c>
 80214a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80214aa:	f7ff fe94 	bl	80211d6 <__retarget_lock_release_recursive>
 80214ae:	e7e9      	b.n	8021484 <_vfiprintf_r+0x4c>
 80214b0:	2300      	movs	r3, #0
 80214b2:	9309      	str	r3, [sp, #36]	; 0x24
 80214b4:	2320      	movs	r3, #32
 80214b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80214ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80214be:	2330      	movs	r3, #48	; 0x30
 80214c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021684 <_vfiprintf_r+0x24c>
 80214c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80214c8:	f04f 0901 	mov.w	r9, #1
 80214cc:	4623      	mov	r3, r4
 80214ce:	469a      	mov	sl, r3
 80214d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80214d4:	b10a      	cbz	r2, 80214da <_vfiprintf_r+0xa2>
 80214d6:	2a25      	cmp	r2, #37	; 0x25
 80214d8:	d1f9      	bne.n	80214ce <_vfiprintf_r+0x96>
 80214da:	ebba 0b04 	subs.w	fp, sl, r4
 80214de:	d00b      	beq.n	80214f8 <_vfiprintf_r+0xc0>
 80214e0:	465b      	mov	r3, fp
 80214e2:	4622      	mov	r2, r4
 80214e4:	4629      	mov	r1, r5
 80214e6:	4630      	mov	r0, r6
 80214e8:	f7ff ff93 	bl	8021412 <__sfputs_r>
 80214ec:	3001      	adds	r0, #1
 80214ee:	f000 80aa 	beq.w	8021646 <_vfiprintf_r+0x20e>
 80214f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80214f4:	445a      	add	r2, fp
 80214f6:	9209      	str	r2, [sp, #36]	; 0x24
 80214f8:	f89a 3000 	ldrb.w	r3, [sl]
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	f000 80a2 	beq.w	8021646 <_vfiprintf_r+0x20e>
 8021502:	2300      	movs	r3, #0
 8021504:	f04f 32ff 	mov.w	r2, #4294967295
 8021508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802150c:	f10a 0a01 	add.w	sl, sl, #1
 8021510:	9304      	str	r3, [sp, #16]
 8021512:	9307      	str	r3, [sp, #28]
 8021514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021518:	931a      	str	r3, [sp, #104]	; 0x68
 802151a:	4654      	mov	r4, sl
 802151c:	2205      	movs	r2, #5
 802151e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021522:	4858      	ldr	r0, [pc, #352]	; (8021684 <_vfiprintf_r+0x24c>)
 8021524:	f7de fe74 	bl	8000210 <memchr>
 8021528:	9a04      	ldr	r2, [sp, #16]
 802152a:	b9d8      	cbnz	r0, 8021564 <_vfiprintf_r+0x12c>
 802152c:	06d1      	lsls	r1, r2, #27
 802152e:	bf44      	itt	mi
 8021530:	2320      	movmi	r3, #32
 8021532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021536:	0713      	lsls	r3, r2, #28
 8021538:	bf44      	itt	mi
 802153a:	232b      	movmi	r3, #43	; 0x2b
 802153c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021540:	f89a 3000 	ldrb.w	r3, [sl]
 8021544:	2b2a      	cmp	r3, #42	; 0x2a
 8021546:	d015      	beq.n	8021574 <_vfiprintf_r+0x13c>
 8021548:	9a07      	ldr	r2, [sp, #28]
 802154a:	4654      	mov	r4, sl
 802154c:	2000      	movs	r0, #0
 802154e:	f04f 0c0a 	mov.w	ip, #10
 8021552:	4621      	mov	r1, r4
 8021554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021558:	3b30      	subs	r3, #48	; 0x30
 802155a:	2b09      	cmp	r3, #9
 802155c:	d94e      	bls.n	80215fc <_vfiprintf_r+0x1c4>
 802155e:	b1b0      	cbz	r0, 802158e <_vfiprintf_r+0x156>
 8021560:	9207      	str	r2, [sp, #28]
 8021562:	e014      	b.n	802158e <_vfiprintf_r+0x156>
 8021564:	eba0 0308 	sub.w	r3, r0, r8
 8021568:	fa09 f303 	lsl.w	r3, r9, r3
 802156c:	4313      	orrs	r3, r2
 802156e:	9304      	str	r3, [sp, #16]
 8021570:	46a2      	mov	sl, r4
 8021572:	e7d2      	b.n	802151a <_vfiprintf_r+0xe2>
 8021574:	9b03      	ldr	r3, [sp, #12]
 8021576:	1d19      	adds	r1, r3, #4
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	9103      	str	r1, [sp, #12]
 802157c:	2b00      	cmp	r3, #0
 802157e:	bfbb      	ittet	lt
 8021580:	425b      	neglt	r3, r3
 8021582:	f042 0202 	orrlt.w	r2, r2, #2
 8021586:	9307      	strge	r3, [sp, #28]
 8021588:	9307      	strlt	r3, [sp, #28]
 802158a:	bfb8      	it	lt
 802158c:	9204      	strlt	r2, [sp, #16]
 802158e:	7823      	ldrb	r3, [r4, #0]
 8021590:	2b2e      	cmp	r3, #46	; 0x2e
 8021592:	d10c      	bne.n	80215ae <_vfiprintf_r+0x176>
 8021594:	7863      	ldrb	r3, [r4, #1]
 8021596:	2b2a      	cmp	r3, #42	; 0x2a
 8021598:	d135      	bne.n	8021606 <_vfiprintf_r+0x1ce>
 802159a:	9b03      	ldr	r3, [sp, #12]
 802159c:	1d1a      	adds	r2, r3, #4
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	9203      	str	r2, [sp, #12]
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	bfb8      	it	lt
 80215a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80215aa:	3402      	adds	r4, #2
 80215ac:	9305      	str	r3, [sp, #20]
 80215ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021694 <_vfiprintf_r+0x25c>
 80215b2:	7821      	ldrb	r1, [r4, #0]
 80215b4:	2203      	movs	r2, #3
 80215b6:	4650      	mov	r0, sl
 80215b8:	f7de fe2a 	bl	8000210 <memchr>
 80215bc:	b140      	cbz	r0, 80215d0 <_vfiprintf_r+0x198>
 80215be:	2340      	movs	r3, #64	; 0x40
 80215c0:	eba0 000a 	sub.w	r0, r0, sl
 80215c4:	fa03 f000 	lsl.w	r0, r3, r0
 80215c8:	9b04      	ldr	r3, [sp, #16]
 80215ca:	4303      	orrs	r3, r0
 80215cc:	3401      	adds	r4, #1
 80215ce:	9304      	str	r3, [sp, #16]
 80215d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215d4:	482c      	ldr	r0, [pc, #176]	; (8021688 <_vfiprintf_r+0x250>)
 80215d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80215da:	2206      	movs	r2, #6
 80215dc:	f7de fe18 	bl	8000210 <memchr>
 80215e0:	2800      	cmp	r0, #0
 80215e2:	d03f      	beq.n	8021664 <_vfiprintf_r+0x22c>
 80215e4:	4b29      	ldr	r3, [pc, #164]	; (802168c <_vfiprintf_r+0x254>)
 80215e6:	bb1b      	cbnz	r3, 8021630 <_vfiprintf_r+0x1f8>
 80215e8:	9b03      	ldr	r3, [sp, #12]
 80215ea:	3307      	adds	r3, #7
 80215ec:	f023 0307 	bic.w	r3, r3, #7
 80215f0:	3308      	adds	r3, #8
 80215f2:	9303      	str	r3, [sp, #12]
 80215f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215f6:	443b      	add	r3, r7
 80215f8:	9309      	str	r3, [sp, #36]	; 0x24
 80215fa:	e767      	b.n	80214cc <_vfiprintf_r+0x94>
 80215fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8021600:	460c      	mov	r4, r1
 8021602:	2001      	movs	r0, #1
 8021604:	e7a5      	b.n	8021552 <_vfiprintf_r+0x11a>
 8021606:	2300      	movs	r3, #0
 8021608:	3401      	adds	r4, #1
 802160a:	9305      	str	r3, [sp, #20]
 802160c:	4619      	mov	r1, r3
 802160e:	f04f 0c0a 	mov.w	ip, #10
 8021612:	4620      	mov	r0, r4
 8021614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021618:	3a30      	subs	r2, #48	; 0x30
 802161a:	2a09      	cmp	r2, #9
 802161c:	d903      	bls.n	8021626 <_vfiprintf_r+0x1ee>
 802161e:	2b00      	cmp	r3, #0
 8021620:	d0c5      	beq.n	80215ae <_vfiprintf_r+0x176>
 8021622:	9105      	str	r1, [sp, #20]
 8021624:	e7c3      	b.n	80215ae <_vfiprintf_r+0x176>
 8021626:	fb0c 2101 	mla	r1, ip, r1, r2
 802162a:	4604      	mov	r4, r0
 802162c:	2301      	movs	r3, #1
 802162e:	e7f0      	b.n	8021612 <_vfiprintf_r+0x1da>
 8021630:	ab03      	add	r3, sp, #12
 8021632:	9300      	str	r3, [sp, #0]
 8021634:	462a      	mov	r2, r5
 8021636:	4b16      	ldr	r3, [pc, #88]	; (8021690 <_vfiprintf_r+0x258>)
 8021638:	a904      	add	r1, sp, #16
 802163a:	4630      	mov	r0, r6
 802163c:	f3af 8000 	nop.w
 8021640:	4607      	mov	r7, r0
 8021642:	1c78      	adds	r0, r7, #1
 8021644:	d1d6      	bne.n	80215f4 <_vfiprintf_r+0x1bc>
 8021646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021648:	07d9      	lsls	r1, r3, #31
 802164a:	d405      	bmi.n	8021658 <_vfiprintf_r+0x220>
 802164c:	89ab      	ldrh	r3, [r5, #12]
 802164e:	059a      	lsls	r2, r3, #22
 8021650:	d402      	bmi.n	8021658 <_vfiprintf_r+0x220>
 8021652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021654:	f7ff fdbf 	bl	80211d6 <__retarget_lock_release_recursive>
 8021658:	89ab      	ldrh	r3, [r5, #12]
 802165a:	065b      	lsls	r3, r3, #25
 802165c:	f53f af12 	bmi.w	8021484 <_vfiprintf_r+0x4c>
 8021660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021662:	e711      	b.n	8021488 <_vfiprintf_r+0x50>
 8021664:	ab03      	add	r3, sp, #12
 8021666:	9300      	str	r3, [sp, #0]
 8021668:	462a      	mov	r2, r5
 802166a:	4b09      	ldr	r3, [pc, #36]	; (8021690 <_vfiprintf_r+0x258>)
 802166c:	a904      	add	r1, sp, #16
 802166e:	4630      	mov	r0, r6
 8021670:	f000 f880 	bl	8021774 <_printf_i>
 8021674:	e7e4      	b.n	8021640 <_vfiprintf_r+0x208>
 8021676:	bf00      	nop
 8021678:	080245ac 	.word	0x080245ac
 802167c:	080245cc 	.word	0x080245cc
 8021680:	0802458c 	.word	0x0802458c
 8021684:	080245f0 	.word	0x080245f0
 8021688:	080245fa 	.word	0x080245fa
 802168c:	00000000 	.word	0x00000000
 8021690:	08021413 	.word	0x08021413
 8021694:	080245f6 	.word	0x080245f6

08021698 <_printf_common>:
 8021698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802169c:	4616      	mov	r6, r2
 802169e:	4699      	mov	r9, r3
 80216a0:	688a      	ldr	r2, [r1, #8]
 80216a2:	690b      	ldr	r3, [r1, #16]
 80216a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80216a8:	4293      	cmp	r3, r2
 80216aa:	bfb8      	it	lt
 80216ac:	4613      	movlt	r3, r2
 80216ae:	6033      	str	r3, [r6, #0]
 80216b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80216b4:	4607      	mov	r7, r0
 80216b6:	460c      	mov	r4, r1
 80216b8:	b10a      	cbz	r2, 80216be <_printf_common+0x26>
 80216ba:	3301      	adds	r3, #1
 80216bc:	6033      	str	r3, [r6, #0]
 80216be:	6823      	ldr	r3, [r4, #0]
 80216c0:	0699      	lsls	r1, r3, #26
 80216c2:	bf42      	ittt	mi
 80216c4:	6833      	ldrmi	r3, [r6, #0]
 80216c6:	3302      	addmi	r3, #2
 80216c8:	6033      	strmi	r3, [r6, #0]
 80216ca:	6825      	ldr	r5, [r4, #0]
 80216cc:	f015 0506 	ands.w	r5, r5, #6
 80216d0:	d106      	bne.n	80216e0 <_printf_common+0x48>
 80216d2:	f104 0a19 	add.w	sl, r4, #25
 80216d6:	68e3      	ldr	r3, [r4, #12]
 80216d8:	6832      	ldr	r2, [r6, #0]
 80216da:	1a9b      	subs	r3, r3, r2
 80216dc:	42ab      	cmp	r3, r5
 80216de:	dc26      	bgt.n	802172e <_printf_common+0x96>
 80216e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80216e4:	1e13      	subs	r3, r2, #0
 80216e6:	6822      	ldr	r2, [r4, #0]
 80216e8:	bf18      	it	ne
 80216ea:	2301      	movne	r3, #1
 80216ec:	0692      	lsls	r2, r2, #26
 80216ee:	d42b      	bmi.n	8021748 <_printf_common+0xb0>
 80216f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80216f4:	4649      	mov	r1, r9
 80216f6:	4638      	mov	r0, r7
 80216f8:	47c0      	blx	r8
 80216fa:	3001      	adds	r0, #1
 80216fc:	d01e      	beq.n	802173c <_printf_common+0xa4>
 80216fe:	6823      	ldr	r3, [r4, #0]
 8021700:	68e5      	ldr	r5, [r4, #12]
 8021702:	6832      	ldr	r2, [r6, #0]
 8021704:	f003 0306 	and.w	r3, r3, #6
 8021708:	2b04      	cmp	r3, #4
 802170a:	bf08      	it	eq
 802170c:	1aad      	subeq	r5, r5, r2
 802170e:	68a3      	ldr	r3, [r4, #8]
 8021710:	6922      	ldr	r2, [r4, #16]
 8021712:	bf0c      	ite	eq
 8021714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021718:	2500      	movne	r5, #0
 802171a:	4293      	cmp	r3, r2
 802171c:	bfc4      	itt	gt
 802171e:	1a9b      	subgt	r3, r3, r2
 8021720:	18ed      	addgt	r5, r5, r3
 8021722:	2600      	movs	r6, #0
 8021724:	341a      	adds	r4, #26
 8021726:	42b5      	cmp	r5, r6
 8021728:	d11a      	bne.n	8021760 <_printf_common+0xc8>
 802172a:	2000      	movs	r0, #0
 802172c:	e008      	b.n	8021740 <_printf_common+0xa8>
 802172e:	2301      	movs	r3, #1
 8021730:	4652      	mov	r2, sl
 8021732:	4649      	mov	r1, r9
 8021734:	4638      	mov	r0, r7
 8021736:	47c0      	blx	r8
 8021738:	3001      	adds	r0, #1
 802173a:	d103      	bne.n	8021744 <_printf_common+0xac>
 802173c:	f04f 30ff 	mov.w	r0, #4294967295
 8021740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021744:	3501      	adds	r5, #1
 8021746:	e7c6      	b.n	80216d6 <_printf_common+0x3e>
 8021748:	18e1      	adds	r1, r4, r3
 802174a:	1c5a      	adds	r2, r3, #1
 802174c:	2030      	movs	r0, #48	; 0x30
 802174e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021752:	4422      	add	r2, r4
 8021754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802175c:	3302      	adds	r3, #2
 802175e:	e7c7      	b.n	80216f0 <_printf_common+0x58>
 8021760:	2301      	movs	r3, #1
 8021762:	4622      	mov	r2, r4
 8021764:	4649      	mov	r1, r9
 8021766:	4638      	mov	r0, r7
 8021768:	47c0      	blx	r8
 802176a:	3001      	adds	r0, #1
 802176c:	d0e6      	beq.n	802173c <_printf_common+0xa4>
 802176e:	3601      	adds	r6, #1
 8021770:	e7d9      	b.n	8021726 <_printf_common+0x8e>
	...

08021774 <_printf_i>:
 8021774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021778:	7e0f      	ldrb	r7, [r1, #24]
 802177a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802177c:	2f78      	cmp	r7, #120	; 0x78
 802177e:	4691      	mov	r9, r2
 8021780:	4680      	mov	r8, r0
 8021782:	460c      	mov	r4, r1
 8021784:	469a      	mov	sl, r3
 8021786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802178a:	d807      	bhi.n	802179c <_printf_i+0x28>
 802178c:	2f62      	cmp	r7, #98	; 0x62
 802178e:	d80a      	bhi.n	80217a6 <_printf_i+0x32>
 8021790:	2f00      	cmp	r7, #0
 8021792:	f000 80d8 	beq.w	8021946 <_printf_i+0x1d2>
 8021796:	2f58      	cmp	r7, #88	; 0x58
 8021798:	f000 80a3 	beq.w	80218e2 <_printf_i+0x16e>
 802179c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80217a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80217a4:	e03a      	b.n	802181c <_printf_i+0xa8>
 80217a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80217aa:	2b15      	cmp	r3, #21
 80217ac:	d8f6      	bhi.n	802179c <_printf_i+0x28>
 80217ae:	a101      	add	r1, pc, #4	; (adr r1, 80217b4 <_printf_i+0x40>)
 80217b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80217b4:	0802180d 	.word	0x0802180d
 80217b8:	08021821 	.word	0x08021821
 80217bc:	0802179d 	.word	0x0802179d
 80217c0:	0802179d 	.word	0x0802179d
 80217c4:	0802179d 	.word	0x0802179d
 80217c8:	0802179d 	.word	0x0802179d
 80217cc:	08021821 	.word	0x08021821
 80217d0:	0802179d 	.word	0x0802179d
 80217d4:	0802179d 	.word	0x0802179d
 80217d8:	0802179d 	.word	0x0802179d
 80217dc:	0802179d 	.word	0x0802179d
 80217e0:	0802192d 	.word	0x0802192d
 80217e4:	08021851 	.word	0x08021851
 80217e8:	0802190f 	.word	0x0802190f
 80217ec:	0802179d 	.word	0x0802179d
 80217f0:	0802179d 	.word	0x0802179d
 80217f4:	0802194f 	.word	0x0802194f
 80217f8:	0802179d 	.word	0x0802179d
 80217fc:	08021851 	.word	0x08021851
 8021800:	0802179d 	.word	0x0802179d
 8021804:	0802179d 	.word	0x0802179d
 8021808:	08021917 	.word	0x08021917
 802180c:	682b      	ldr	r3, [r5, #0]
 802180e:	1d1a      	adds	r2, r3, #4
 8021810:	681b      	ldr	r3, [r3, #0]
 8021812:	602a      	str	r2, [r5, #0]
 8021814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802181c:	2301      	movs	r3, #1
 802181e:	e0a3      	b.n	8021968 <_printf_i+0x1f4>
 8021820:	6820      	ldr	r0, [r4, #0]
 8021822:	6829      	ldr	r1, [r5, #0]
 8021824:	0606      	lsls	r6, r0, #24
 8021826:	f101 0304 	add.w	r3, r1, #4
 802182a:	d50a      	bpl.n	8021842 <_printf_i+0xce>
 802182c:	680e      	ldr	r6, [r1, #0]
 802182e:	602b      	str	r3, [r5, #0]
 8021830:	2e00      	cmp	r6, #0
 8021832:	da03      	bge.n	802183c <_printf_i+0xc8>
 8021834:	232d      	movs	r3, #45	; 0x2d
 8021836:	4276      	negs	r6, r6
 8021838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802183c:	485e      	ldr	r0, [pc, #376]	; (80219b8 <_printf_i+0x244>)
 802183e:	230a      	movs	r3, #10
 8021840:	e019      	b.n	8021876 <_printf_i+0x102>
 8021842:	680e      	ldr	r6, [r1, #0]
 8021844:	602b      	str	r3, [r5, #0]
 8021846:	f010 0f40 	tst.w	r0, #64	; 0x40
 802184a:	bf18      	it	ne
 802184c:	b236      	sxthne	r6, r6
 802184e:	e7ef      	b.n	8021830 <_printf_i+0xbc>
 8021850:	682b      	ldr	r3, [r5, #0]
 8021852:	6820      	ldr	r0, [r4, #0]
 8021854:	1d19      	adds	r1, r3, #4
 8021856:	6029      	str	r1, [r5, #0]
 8021858:	0601      	lsls	r1, r0, #24
 802185a:	d501      	bpl.n	8021860 <_printf_i+0xec>
 802185c:	681e      	ldr	r6, [r3, #0]
 802185e:	e002      	b.n	8021866 <_printf_i+0xf2>
 8021860:	0646      	lsls	r6, r0, #25
 8021862:	d5fb      	bpl.n	802185c <_printf_i+0xe8>
 8021864:	881e      	ldrh	r6, [r3, #0]
 8021866:	4854      	ldr	r0, [pc, #336]	; (80219b8 <_printf_i+0x244>)
 8021868:	2f6f      	cmp	r7, #111	; 0x6f
 802186a:	bf0c      	ite	eq
 802186c:	2308      	moveq	r3, #8
 802186e:	230a      	movne	r3, #10
 8021870:	2100      	movs	r1, #0
 8021872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021876:	6865      	ldr	r5, [r4, #4]
 8021878:	60a5      	str	r5, [r4, #8]
 802187a:	2d00      	cmp	r5, #0
 802187c:	bfa2      	ittt	ge
 802187e:	6821      	ldrge	r1, [r4, #0]
 8021880:	f021 0104 	bicge.w	r1, r1, #4
 8021884:	6021      	strge	r1, [r4, #0]
 8021886:	b90e      	cbnz	r6, 802188c <_printf_i+0x118>
 8021888:	2d00      	cmp	r5, #0
 802188a:	d04d      	beq.n	8021928 <_printf_i+0x1b4>
 802188c:	4615      	mov	r5, r2
 802188e:	fbb6 f1f3 	udiv	r1, r6, r3
 8021892:	fb03 6711 	mls	r7, r3, r1, r6
 8021896:	5dc7      	ldrb	r7, [r0, r7]
 8021898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802189c:	4637      	mov	r7, r6
 802189e:	42bb      	cmp	r3, r7
 80218a0:	460e      	mov	r6, r1
 80218a2:	d9f4      	bls.n	802188e <_printf_i+0x11a>
 80218a4:	2b08      	cmp	r3, #8
 80218a6:	d10b      	bne.n	80218c0 <_printf_i+0x14c>
 80218a8:	6823      	ldr	r3, [r4, #0]
 80218aa:	07de      	lsls	r6, r3, #31
 80218ac:	d508      	bpl.n	80218c0 <_printf_i+0x14c>
 80218ae:	6923      	ldr	r3, [r4, #16]
 80218b0:	6861      	ldr	r1, [r4, #4]
 80218b2:	4299      	cmp	r1, r3
 80218b4:	bfde      	ittt	le
 80218b6:	2330      	movle	r3, #48	; 0x30
 80218b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80218bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80218c0:	1b52      	subs	r2, r2, r5
 80218c2:	6122      	str	r2, [r4, #16]
 80218c4:	f8cd a000 	str.w	sl, [sp]
 80218c8:	464b      	mov	r3, r9
 80218ca:	aa03      	add	r2, sp, #12
 80218cc:	4621      	mov	r1, r4
 80218ce:	4640      	mov	r0, r8
 80218d0:	f7ff fee2 	bl	8021698 <_printf_common>
 80218d4:	3001      	adds	r0, #1
 80218d6:	d14c      	bne.n	8021972 <_printf_i+0x1fe>
 80218d8:	f04f 30ff 	mov.w	r0, #4294967295
 80218dc:	b004      	add	sp, #16
 80218de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80218e2:	4835      	ldr	r0, [pc, #212]	; (80219b8 <_printf_i+0x244>)
 80218e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80218e8:	6829      	ldr	r1, [r5, #0]
 80218ea:	6823      	ldr	r3, [r4, #0]
 80218ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80218f0:	6029      	str	r1, [r5, #0]
 80218f2:	061d      	lsls	r5, r3, #24
 80218f4:	d514      	bpl.n	8021920 <_printf_i+0x1ac>
 80218f6:	07df      	lsls	r7, r3, #31
 80218f8:	bf44      	itt	mi
 80218fa:	f043 0320 	orrmi.w	r3, r3, #32
 80218fe:	6023      	strmi	r3, [r4, #0]
 8021900:	b91e      	cbnz	r6, 802190a <_printf_i+0x196>
 8021902:	6823      	ldr	r3, [r4, #0]
 8021904:	f023 0320 	bic.w	r3, r3, #32
 8021908:	6023      	str	r3, [r4, #0]
 802190a:	2310      	movs	r3, #16
 802190c:	e7b0      	b.n	8021870 <_printf_i+0xfc>
 802190e:	6823      	ldr	r3, [r4, #0]
 8021910:	f043 0320 	orr.w	r3, r3, #32
 8021914:	6023      	str	r3, [r4, #0]
 8021916:	2378      	movs	r3, #120	; 0x78
 8021918:	4828      	ldr	r0, [pc, #160]	; (80219bc <_printf_i+0x248>)
 802191a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802191e:	e7e3      	b.n	80218e8 <_printf_i+0x174>
 8021920:	0659      	lsls	r1, r3, #25
 8021922:	bf48      	it	mi
 8021924:	b2b6      	uxthmi	r6, r6
 8021926:	e7e6      	b.n	80218f6 <_printf_i+0x182>
 8021928:	4615      	mov	r5, r2
 802192a:	e7bb      	b.n	80218a4 <_printf_i+0x130>
 802192c:	682b      	ldr	r3, [r5, #0]
 802192e:	6826      	ldr	r6, [r4, #0]
 8021930:	6961      	ldr	r1, [r4, #20]
 8021932:	1d18      	adds	r0, r3, #4
 8021934:	6028      	str	r0, [r5, #0]
 8021936:	0635      	lsls	r5, r6, #24
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	d501      	bpl.n	8021940 <_printf_i+0x1cc>
 802193c:	6019      	str	r1, [r3, #0]
 802193e:	e002      	b.n	8021946 <_printf_i+0x1d2>
 8021940:	0670      	lsls	r0, r6, #25
 8021942:	d5fb      	bpl.n	802193c <_printf_i+0x1c8>
 8021944:	8019      	strh	r1, [r3, #0]
 8021946:	2300      	movs	r3, #0
 8021948:	6123      	str	r3, [r4, #16]
 802194a:	4615      	mov	r5, r2
 802194c:	e7ba      	b.n	80218c4 <_printf_i+0x150>
 802194e:	682b      	ldr	r3, [r5, #0]
 8021950:	1d1a      	adds	r2, r3, #4
 8021952:	602a      	str	r2, [r5, #0]
 8021954:	681d      	ldr	r5, [r3, #0]
 8021956:	6862      	ldr	r2, [r4, #4]
 8021958:	2100      	movs	r1, #0
 802195a:	4628      	mov	r0, r5
 802195c:	f7de fc58 	bl	8000210 <memchr>
 8021960:	b108      	cbz	r0, 8021966 <_printf_i+0x1f2>
 8021962:	1b40      	subs	r0, r0, r5
 8021964:	6060      	str	r0, [r4, #4]
 8021966:	6863      	ldr	r3, [r4, #4]
 8021968:	6123      	str	r3, [r4, #16]
 802196a:	2300      	movs	r3, #0
 802196c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021970:	e7a8      	b.n	80218c4 <_printf_i+0x150>
 8021972:	6923      	ldr	r3, [r4, #16]
 8021974:	462a      	mov	r2, r5
 8021976:	4649      	mov	r1, r9
 8021978:	4640      	mov	r0, r8
 802197a:	47d0      	blx	sl
 802197c:	3001      	adds	r0, #1
 802197e:	d0ab      	beq.n	80218d8 <_printf_i+0x164>
 8021980:	6823      	ldr	r3, [r4, #0]
 8021982:	079b      	lsls	r3, r3, #30
 8021984:	d413      	bmi.n	80219ae <_printf_i+0x23a>
 8021986:	68e0      	ldr	r0, [r4, #12]
 8021988:	9b03      	ldr	r3, [sp, #12]
 802198a:	4298      	cmp	r0, r3
 802198c:	bfb8      	it	lt
 802198e:	4618      	movlt	r0, r3
 8021990:	e7a4      	b.n	80218dc <_printf_i+0x168>
 8021992:	2301      	movs	r3, #1
 8021994:	4632      	mov	r2, r6
 8021996:	4649      	mov	r1, r9
 8021998:	4640      	mov	r0, r8
 802199a:	47d0      	blx	sl
 802199c:	3001      	adds	r0, #1
 802199e:	d09b      	beq.n	80218d8 <_printf_i+0x164>
 80219a0:	3501      	adds	r5, #1
 80219a2:	68e3      	ldr	r3, [r4, #12]
 80219a4:	9903      	ldr	r1, [sp, #12]
 80219a6:	1a5b      	subs	r3, r3, r1
 80219a8:	42ab      	cmp	r3, r5
 80219aa:	dcf2      	bgt.n	8021992 <_printf_i+0x21e>
 80219ac:	e7eb      	b.n	8021986 <_printf_i+0x212>
 80219ae:	2500      	movs	r5, #0
 80219b0:	f104 0619 	add.w	r6, r4, #25
 80219b4:	e7f5      	b.n	80219a2 <_printf_i+0x22e>
 80219b6:	bf00      	nop
 80219b8:	08024601 	.word	0x08024601
 80219bc:	08024612 	.word	0x08024612

080219c0 <cleanup_glue>:
 80219c0:	b538      	push	{r3, r4, r5, lr}
 80219c2:	460c      	mov	r4, r1
 80219c4:	6809      	ldr	r1, [r1, #0]
 80219c6:	4605      	mov	r5, r0
 80219c8:	b109      	cbz	r1, 80219ce <cleanup_glue+0xe>
 80219ca:	f7ff fff9 	bl	80219c0 <cleanup_glue>
 80219ce:	4621      	mov	r1, r4
 80219d0:	4628      	mov	r0, r5
 80219d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80219d6:	f7ff bc25 	b.w	8021224 <_free_r>
	...

080219dc <_reclaim_reent>:
 80219dc:	4b2c      	ldr	r3, [pc, #176]	; (8021a90 <_reclaim_reent+0xb4>)
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	4283      	cmp	r3, r0
 80219e2:	b570      	push	{r4, r5, r6, lr}
 80219e4:	4604      	mov	r4, r0
 80219e6:	d051      	beq.n	8021a8c <_reclaim_reent+0xb0>
 80219e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80219ea:	b143      	cbz	r3, 80219fe <_reclaim_reent+0x22>
 80219ec:	68db      	ldr	r3, [r3, #12]
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	d14a      	bne.n	8021a88 <_reclaim_reent+0xac>
 80219f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219f4:	6819      	ldr	r1, [r3, #0]
 80219f6:	b111      	cbz	r1, 80219fe <_reclaim_reent+0x22>
 80219f8:	4620      	mov	r0, r4
 80219fa:	f7ff fc13 	bl	8021224 <_free_r>
 80219fe:	6961      	ldr	r1, [r4, #20]
 8021a00:	b111      	cbz	r1, 8021a08 <_reclaim_reent+0x2c>
 8021a02:	4620      	mov	r0, r4
 8021a04:	f7ff fc0e 	bl	8021224 <_free_r>
 8021a08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8021a0a:	b111      	cbz	r1, 8021a12 <_reclaim_reent+0x36>
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	f7ff fc09 	bl	8021224 <_free_r>
 8021a12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021a14:	b111      	cbz	r1, 8021a1c <_reclaim_reent+0x40>
 8021a16:	4620      	mov	r0, r4
 8021a18:	f7ff fc04 	bl	8021224 <_free_r>
 8021a1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8021a1e:	b111      	cbz	r1, 8021a26 <_reclaim_reent+0x4a>
 8021a20:	4620      	mov	r0, r4
 8021a22:	f7ff fbff 	bl	8021224 <_free_r>
 8021a26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021a28:	b111      	cbz	r1, 8021a30 <_reclaim_reent+0x54>
 8021a2a:	4620      	mov	r0, r4
 8021a2c:	f7ff fbfa 	bl	8021224 <_free_r>
 8021a30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021a32:	b111      	cbz	r1, 8021a3a <_reclaim_reent+0x5e>
 8021a34:	4620      	mov	r0, r4
 8021a36:	f7ff fbf5 	bl	8021224 <_free_r>
 8021a3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8021a3c:	b111      	cbz	r1, 8021a44 <_reclaim_reent+0x68>
 8021a3e:	4620      	mov	r0, r4
 8021a40:	f7ff fbf0 	bl	8021224 <_free_r>
 8021a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021a46:	b111      	cbz	r1, 8021a4e <_reclaim_reent+0x72>
 8021a48:	4620      	mov	r0, r4
 8021a4a:	f7ff fbeb 	bl	8021224 <_free_r>
 8021a4e:	69a3      	ldr	r3, [r4, #24]
 8021a50:	b1e3      	cbz	r3, 8021a8c <_reclaim_reent+0xb0>
 8021a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021a54:	4620      	mov	r0, r4
 8021a56:	4798      	blx	r3
 8021a58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8021a5a:	b1b9      	cbz	r1, 8021a8c <_reclaim_reent+0xb0>
 8021a5c:	4620      	mov	r0, r4
 8021a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021a62:	f7ff bfad 	b.w	80219c0 <cleanup_glue>
 8021a66:	5949      	ldr	r1, [r1, r5]
 8021a68:	b941      	cbnz	r1, 8021a7c <_reclaim_reent+0xa0>
 8021a6a:	3504      	adds	r5, #4
 8021a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021a6e:	2d80      	cmp	r5, #128	; 0x80
 8021a70:	68d9      	ldr	r1, [r3, #12]
 8021a72:	d1f8      	bne.n	8021a66 <_reclaim_reent+0x8a>
 8021a74:	4620      	mov	r0, r4
 8021a76:	f7ff fbd5 	bl	8021224 <_free_r>
 8021a7a:	e7ba      	b.n	80219f2 <_reclaim_reent+0x16>
 8021a7c:	680e      	ldr	r6, [r1, #0]
 8021a7e:	4620      	mov	r0, r4
 8021a80:	f7ff fbd0 	bl	8021224 <_free_r>
 8021a84:	4631      	mov	r1, r6
 8021a86:	e7ef      	b.n	8021a68 <_reclaim_reent+0x8c>
 8021a88:	2500      	movs	r5, #0
 8021a8a:	e7ef      	b.n	8021a6c <_reclaim_reent+0x90>
 8021a8c:	bd70      	pop	{r4, r5, r6, pc}
 8021a8e:	bf00      	nop
 8021a90:	20000098 	.word	0x20000098

08021a94 <_sbrk_r>:
 8021a94:	b538      	push	{r3, r4, r5, lr}
 8021a96:	4d06      	ldr	r5, [pc, #24]	; (8021ab0 <_sbrk_r+0x1c>)
 8021a98:	2300      	movs	r3, #0
 8021a9a:	4604      	mov	r4, r0
 8021a9c:	4608      	mov	r0, r1
 8021a9e:	602b      	str	r3, [r5, #0]
 8021aa0:	f7e0 fb44 	bl	800212c <_sbrk>
 8021aa4:	1c43      	adds	r3, r0, #1
 8021aa6:	d102      	bne.n	8021aae <_sbrk_r+0x1a>
 8021aa8:	682b      	ldr	r3, [r5, #0]
 8021aaa:	b103      	cbz	r3, 8021aae <_sbrk_r+0x1a>
 8021aac:	6023      	str	r3, [r4, #0]
 8021aae:	bd38      	pop	{r3, r4, r5, pc}
 8021ab0:	20011d2c 	.word	0x20011d2c

08021ab4 <_raise_r>:
 8021ab4:	291f      	cmp	r1, #31
 8021ab6:	b538      	push	{r3, r4, r5, lr}
 8021ab8:	4604      	mov	r4, r0
 8021aba:	460d      	mov	r5, r1
 8021abc:	d904      	bls.n	8021ac8 <_raise_r+0x14>
 8021abe:	2316      	movs	r3, #22
 8021ac0:	6003      	str	r3, [r0, #0]
 8021ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8021ac6:	bd38      	pop	{r3, r4, r5, pc}
 8021ac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021aca:	b112      	cbz	r2, 8021ad2 <_raise_r+0x1e>
 8021acc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021ad0:	b94b      	cbnz	r3, 8021ae6 <_raise_r+0x32>
 8021ad2:	4620      	mov	r0, r4
 8021ad4:	f000 f830 	bl	8021b38 <_getpid_r>
 8021ad8:	462a      	mov	r2, r5
 8021ada:	4601      	mov	r1, r0
 8021adc:	4620      	mov	r0, r4
 8021ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021ae2:	f000 b817 	b.w	8021b14 <_kill_r>
 8021ae6:	2b01      	cmp	r3, #1
 8021ae8:	d00a      	beq.n	8021b00 <_raise_r+0x4c>
 8021aea:	1c59      	adds	r1, r3, #1
 8021aec:	d103      	bne.n	8021af6 <_raise_r+0x42>
 8021aee:	2316      	movs	r3, #22
 8021af0:	6003      	str	r3, [r0, #0]
 8021af2:	2001      	movs	r0, #1
 8021af4:	e7e7      	b.n	8021ac6 <_raise_r+0x12>
 8021af6:	2400      	movs	r4, #0
 8021af8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021afc:	4628      	mov	r0, r5
 8021afe:	4798      	blx	r3
 8021b00:	2000      	movs	r0, #0
 8021b02:	e7e0      	b.n	8021ac6 <_raise_r+0x12>

08021b04 <raise>:
 8021b04:	4b02      	ldr	r3, [pc, #8]	; (8021b10 <raise+0xc>)
 8021b06:	4601      	mov	r1, r0
 8021b08:	6818      	ldr	r0, [r3, #0]
 8021b0a:	f7ff bfd3 	b.w	8021ab4 <_raise_r>
 8021b0e:	bf00      	nop
 8021b10:	20000098 	.word	0x20000098

08021b14 <_kill_r>:
 8021b14:	b538      	push	{r3, r4, r5, lr}
 8021b16:	4d07      	ldr	r5, [pc, #28]	; (8021b34 <_kill_r+0x20>)
 8021b18:	2300      	movs	r3, #0
 8021b1a:	4604      	mov	r4, r0
 8021b1c:	4608      	mov	r0, r1
 8021b1e:	4611      	mov	r1, r2
 8021b20:	602b      	str	r3, [r5, #0]
 8021b22:	f7e0 fa7b 	bl	800201c <_kill>
 8021b26:	1c43      	adds	r3, r0, #1
 8021b28:	d102      	bne.n	8021b30 <_kill_r+0x1c>
 8021b2a:	682b      	ldr	r3, [r5, #0]
 8021b2c:	b103      	cbz	r3, 8021b30 <_kill_r+0x1c>
 8021b2e:	6023      	str	r3, [r4, #0]
 8021b30:	bd38      	pop	{r3, r4, r5, pc}
 8021b32:	bf00      	nop
 8021b34:	20011d2c 	.word	0x20011d2c

08021b38 <_getpid_r>:
 8021b38:	f7e0 ba68 	b.w	800200c <_getpid>

08021b3c <__sread>:
 8021b3c:	b510      	push	{r4, lr}
 8021b3e:	460c      	mov	r4, r1
 8021b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b44:	f000 fac8 	bl	80220d8 <_read_r>
 8021b48:	2800      	cmp	r0, #0
 8021b4a:	bfab      	itete	ge
 8021b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8021b50:	181b      	addge	r3, r3, r0
 8021b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021b56:	bfac      	ite	ge
 8021b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8021b5a:	81a3      	strhlt	r3, [r4, #12]
 8021b5c:	bd10      	pop	{r4, pc}

08021b5e <__swrite>:
 8021b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b62:	461f      	mov	r7, r3
 8021b64:	898b      	ldrh	r3, [r1, #12]
 8021b66:	05db      	lsls	r3, r3, #23
 8021b68:	4605      	mov	r5, r0
 8021b6a:	460c      	mov	r4, r1
 8021b6c:	4616      	mov	r6, r2
 8021b6e:	d505      	bpl.n	8021b7c <__swrite+0x1e>
 8021b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b74:	2302      	movs	r3, #2
 8021b76:	2200      	movs	r2, #0
 8021b78:	f000 fa2a 	bl	8021fd0 <_lseek_r>
 8021b7c:	89a3      	ldrh	r3, [r4, #12]
 8021b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021b86:	81a3      	strh	r3, [r4, #12]
 8021b88:	4632      	mov	r2, r6
 8021b8a:	463b      	mov	r3, r7
 8021b8c:	4628      	mov	r0, r5
 8021b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021b92:	f000 b869 	b.w	8021c68 <_write_r>

08021b96 <__sseek>:
 8021b96:	b510      	push	{r4, lr}
 8021b98:	460c      	mov	r4, r1
 8021b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b9e:	f000 fa17 	bl	8021fd0 <_lseek_r>
 8021ba2:	1c43      	adds	r3, r0, #1
 8021ba4:	89a3      	ldrh	r3, [r4, #12]
 8021ba6:	bf15      	itete	ne
 8021ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8021baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021bb2:	81a3      	strheq	r3, [r4, #12]
 8021bb4:	bf18      	it	ne
 8021bb6:	81a3      	strhne	r3, [r4, #12]
 8021bb8:	bd10      	pop	{r4, pc}

08021bba <__sclose>:
 8021bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bbe:	f000 b935 	b.w	8021e2c <_close_r>
	...

08021bc4 <__swbuf_r>:
 8021bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bc6:	460e      	mov	r6, r1
 8021bc8:	4614      	mov	r4, r2
 8021bca:	4605      	mov	r5, r0
 8021bcc:	b118      	cbz	r0, 8021bd6 <__swbuf_r+0x12>
 8021bce:	6983      	ldr	r3, [r0, #24]
 8021bd0:	b90b      	cbnz	r3, 8021bd6 <__swbuf_r+0x12>
 8021bd2:	f7ff fa29 	bl	8021028 <__sinit>
 8021bd6:	4b21      	ldr	r3, [pc, #132]	; (8021c5c <__swbuf_r+0x98>)
 8021bd8:	429c      	cmp	r4, r3
 8021bda:	d12b      	bne.n	8021c34 <__swbuf_r+0x70>
 8021bdc:	686c      	ldr	r4, [r5, #4]
 8021bde:	69a3      	ldr	r3, [r4, #24]
 8021be0:	60a3      	str	r3, [r4, #8]
 8021be2:	89a3      	ldrh	r3, [r4, #12]
 8021be4:	071a      	lsls	r2, r3, #28
 8021be6:	d52f      	bpl.n	8021c48 <__swbuf_r+0x84>
 8021be8:	6923      	ldr	r3, [r4, #16]
 8021bea:	b36b      	cbz	r3, 8021c48 <__swbuf_r+0x84>
 8021bec:	6923      	ldr	r3, [r4, #16]
 8021bee:	6820      	ldr	r0, [r4, #0]
 8021bf0:	1ac0      	subs	r0, r0, r3
 8021bf2:	6963      	ldr	r3, [r4, #20]
 8021bf4:	b2f6      	uxtb	r6, r6
 8021bf6:	4283      	cmp	r3, r0
 8021bf8:	4637      	mov	r7, r6
 8021bfa:	dc04      	bgt.n	8021c06 <__swbuf_r+0x42>
 8021bfc:	4621      	mov	r1, r4
 8021bfe:	4628      	mov	r0, r5
 8021c00:	f000 f9aa 	bl	8021f58 <_fflush_r>
 8021c04:	bb30      	cbnz	r0, 8021c54 <__swbuf_r+0x90>
 8021c06:	68a3      	ldr	r3, [r4, #8]
 8021c08:	3b01      	subs	r3, #1
 8021c0a:	60a3      	str	r3, [r4, #8]
 8021c0c:	6823      	ldr	r3, [r4, #0]
 8021c0e:	1c5a      	adds	r2, r3, #1
 8021c10:	6022      	str	r2, [r4, #0]
 8021c12:	701e      	strb	r6, [r3, #0]
 8021c14:	6963      	ldr	r3, [r4, #20]
 8021c16:	3001      	adds	r0, #1
 8021c18:	4283      	cmp	r3, r0
 8021c1a:	d004      	beq.n	8021c26 <__swbuf_r+0x62>
 8021c1c:	89a3      	ldrh	r3, [r4, #12]
 8021c1e:	07db      	lsls	r3, r3, #31
 8021c20:	d506      	bpl.n	8021c30 <__swbuf_r+0x6c>
 8021c22:	2e0a      	cmp	r6, #10
 8021c24:	d104      	bne.n	8021c30 <__swbuf_r+0x6c>
 8021c26:	4621      	mov	r1, r4
 8021c28:	4628      	mov	r0, r5
 8021c2a:	f000 f995 	bl	8021f58 <_fflush_r>
 8021c2e:	b988      	cbnz	r0, 8021c54 <__swbuf_r+0x90>
 8021c30:	4638      	mov	r0, r7
 8021c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c34:	4b0a      	ldr	r3, [pc, #40]	; (8021c60 <__swbuf_r+0x9c>)
 8021c36:	429c      	cmp	r4, r3
 8021c38:	d101      	bne.n	8021c3e <__swbuf_r+0x7a>
 8021c3a:	68ac      	ldr	r4, [r5, #8]
 8021c3c:	e7cf      	b.n	8021bde <__swbuf_r+0x1a>
 8021c3e:	4b09      	ldr	r3, [pc, #36]	; (8021c64 <__swbuf_r+0xa0>)
 8021c40:	429c      	cmp	r4, r3
 8021c42:	bf08      	it	eq
 8021c44:	68ec      	ldreq	r4, [r5, #12]
 8021c46:	e7ca      	b.n	8021bde <__swbuf_r+0x1a>
 8021c48:	4621      	mov	r1, r4
 8021c4a:	4628      	mov	r0, r5
 8021c4c:	f000 f81e 	bl	8021c8c <__swsetup_r>
 8021c50:	2800      	cmp	r0, #0
 8021c52:	d0cb      	beq.n	8021bec <__swbuf_r+0x28>
 8021c54:	f04f 37ff 	mov.w	r7, #4294967295
 8021c58:	e7ea      	b.n	8021c30 <__swbuf_r+0x6c>
 8021c5a:	bf00      	nop
 8021c5c:	080245ac 	.word	0x080245ac
 8021c60:	080245cc 	.word	0x080245cc
 8021c64:	0802458c 	.word	0x0802458c

08021c68 <_write_r>:
 8021c68:	b538      	push	{r3, r4, r5, lr}
 8021c6a:	4d07      	ldr	r5, [pc, #28]	; (8021c88 <_write_r+0x20>)
 8021c6c:	4604      	mov	r4, r0
 8021c6e:	4608      	mov	r0, r1
 8021c70:	4611      	mov	r1, r2
 8021c72:	2200      	movs	r2, #0
 8021c74:	602a      	str	r2, [r5, #0]
 8021c76:	461a      	mov	r2, r3
 8021c78:	f7e0 fa07 	bl	800208a <_write>
 8021c7c:	1c43      	adds	r3, r0, #1
 8021c7e:	d102      	bne.n	8021c86 <_write_r+0x1e>
 8021c80:	682b      	ldr	r3, [r5, #0]
 8021c82:	b103      	cbz	r3, 8021c86 <_write_r+0x1e>
 8021c84:	6023      	str	r3, [r4, #0]
 8021c86:	bd38      	pop	{r3, r4, r5, pc}
 8021c88:	20011d2c 	.word	0x20011d2c

08021c8c <__swsetup_r>:
 8021c8c:	4b32      	ldr	r3, [pc, #200]	; (8021d58 <__swsetup_r+0xcc>)
 8021c8e:	b570      	push	{r4, r5, r6, lr}
 8021c90:	681d      	ldr	r5, [r3, #0]
 8021c92:	4606      	mov	r6, r0
 8021c94:	460c      	mov	r4, r1
 8021c96:	b125      	cbz	r5, 8021ca2 <__swsetup_r+0x16>
 8021c98:	69ab      	ldr	r3, [r5, #24]
 8021c9a:	b913      	cbnz	r3, 8021ca2 <__swsetup_r+0x16>
 8021c9c:	4628      	mov	r0, r5
 8021c9e:	f7ff f9c3 	bl	8021028 <__sinit>
 8021ca2:	4b2e      	ldr	r3, [pc, #184]	; (8021d5c <__swsetup_r+0xd0>)
 8021ca4:	429c      	cmp	r4, r3
 8021ca6:	d10f      	bne.n	8021cc8 <__swsetup_r+0x3c>
 8021ca8:	686c      	ldr	r4, [r5, #4]
 8021caa:	89a3      	ldrh	r3, [r4, #12]
 8021cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021cb0:	0719      	lsls	r1, r3, #28
 8021cb2:	d42c      	bmi.n	8021d0e <__swsetup_r+0x82>
 8021cb4:	06dd      	lsls	r5, r3, #27
 8021cb6:	d411      	bmi.n	8021cdc <__swsetup_r+0x50>
 8021cb8:	2309      	movs	r3, #9
 8021cba:	6033      	str	r3, [r6, #0]
 8021cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021cc0:	81a3      	strh	r3, [r4, #12]
 8021cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8021cc6:	e03e      	b.n	8021d46 <__swsetup_r+0xba>
 8021cc8:	4b25      	ldr	r3, [pc, #148]	; (8021d60 <__swsetup_r+0xd4>)
 8021cca:	429c      	cmp	r4, r3
 8021ccc:	d101      	bne.n	8021cd2 <__swsetup_r+0x46>
 8021cce:	68ac      	ldr	r4, [r5, #8]
 8021cd0:	e7eb      	b.n	8021caa <__swsetup_r+0x1e>
 8021cd2:	4b24      	ldr	r3, [pc, #144]	; (8021d64 <__swsetup_r+0xd8>)
 8021cd4:	429c      	cmp	r4, r3
 8021cd6:	bf08      	it	eq
 8021cd8:	68ec      	ldreq	r4, [r5, #12]
 8021cda:	e7e6      	b.n	8021caa <__swsetup_r+0x1e>
 8021cdc:	0758      	lsls	r0, r3, #29
 8021cde:	d512      	bpl.n	8021d06 <__swsetup_r+0x7a>
 8021ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021ce2:	b141      	cbz	r1, 8021cf6 <__swsetup_r+0x6a>
 8021ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021ce8:	4299      	cmp	r1, r3
 8021cea:	d002      	beq.n	8021cf2 <__swsetup_r+0x66>
 8021cec:	4630      	mov	r0, r6
 8021cee:	f7ff fa99 	bl	8021224 <_free_r>
 8021cf2:	2300      	movs	r3, #0
 8021cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8021cf6:	89a3      	ldrh	r3, [r4, #12]
 8021cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021cfc:	81a3      	strh	r3, [r4, #12]
 8021cfe:	2300      	movs	r3, #0
 8021d00:	6063      	str	r3, [r4, #4]
 8021d02:	6923      	ldr	r3, [r4, #16]
 8021d04:	6023      	str	r3, [r4, #0]
 8021d06:	89a3      	ldrh	r3, [r4, #12]
 8021d08:	f043 0308 	orr.w	r3, r3, #8
 8021d0c:	81a3      	strh	r3, [r4, #12]
 8021d0e:	6923      	ldr	r3, [r4, #16]
 8021d10:	b94b      	cbnz	r3, 8021d26 <__swsetup_r+0x9a>
 8021d12:	89a3      	ldrh	r3, [r4, #12]
 8021d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021d1c:	d003      	beq.n	8021d26 <__swsetup_r+0x9a>
 8021d1e:	4621      	mov	r1, r4
 8021d20:	4630      	mov	r0, r6
 8021d22:	f000 f98d 	bl	8022040 <__smakebuf_r>
 8021d26:	89a0      	ldrh	r0, [r4, #12]
 8021d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021d2c:	f010 0301 	ands.w	r3, r0, #1
 8021d30:	d00a      	beq.n	8021d48 <__swsetup_r+0xbc>
 8021d32:	2300      	movs	r3, #0
 8021d34:	60a3      	str	r3, [r4, #8]
 8021d36:	6963      	ldr	r3, [r4, #20]
 8021d38:	425b      	negs	r3, r3
 8021d3a:	61a3      	str	r3, [r4, #24]
 8021d3c:	6923      	ldr	r3, [r4, #16]
 8021d3e:	b943      	cbnz	r3, 8021d52 <__swsetup_r+0xc6>
 8021d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021d44:	d1ba      	bne.n	8021cbc <__swsetup_r+0x30>
 8021d46:	bd70      	pop	{r4, r5, r6, pc}
 8021d48:	0781      	lsls	r1, r0, #30
 8021d4a:	bf58      	it	pl
 8021d4c:	6963      	ldrpl	r3, [r4, #20]
 8021d4e:	60a3      	str	r3, [r4, #8]
 8021d50:	e7f4      	b.n	8021d3c <__swsetup_r+0xb0>
 8021d52:	2000      	movs	r0, #0
 8021d54:	e7f7      	b.n	8021d46 <__swsetup_r+0xba>
 8021d56:	bf00      	nop
 8021d58:	20000098 	.word	0x20000098
 8021d5c:	080245ac 	.word	0x080245ac
 8021d60:	080245cc 	.word	0x080245cc
 8021d64:	0802458c 	.word	0x0802458c

08021d68 <__register_exitproc>:
 8021d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021e28 <__register_exitproc+0xc0>
 8021d70:	4606      	mov	r6, r0
 8021d72:	f8d8 0000 	ldr.w	r0, [r8]
 8021d76:	461f      	mov	r7, r3
 8021d78:	460d      	mov	r5, r1
 8021d7a:	4691      	mov	r9, r2
 8021d7c:	f7ff fa29 	bl	80211d2 <__retarget_lock_acquire_recursive>
 8021d80:	4b25      	ldr	r3, [pc, #148]	; (8021e18 <__register_exitproc+0xb0>)
 8021d82:	681c      	ldr	r4, [r3, #0]
 8021d84:	b934      	cbnz	r4, 8021d94 <__register_exitproc+0x2c>
 8021d86:	4c25      	ldr	r4, [pc, #148]	; (8021e1c <__register_exitproc+0xb4>)
 8021d88:	601c      	str	r4, [r3, #0]
 8021d8a:	4b25      	ldr	r3, [pc, #148]	; (8021e20 <__register_exitproc+0xb8>)
 8021d8c:	b113      	cbz	r3, 8021d94 <__register_exitproc+0x2c>
 8021d8e:	681b      	ldr	r3, [r3, #0]
 8021d90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021d94:	6863      	ldr	r3, [r4, #4]
 8021d96:	2b1f      	cmp	r3, #31
 8021d98:	dd07      	ble.n	8021daa <__register_exitproc+0x42>
 8021d9a:	f8d8 0000 	ldr.w	r0, [r8]
 8021d9e:	f7ff fa1a 	bl	80211d6 <__retarget_lock_release_recursive>
 8021da2:	f04f 30ff 	mov.w	r0, #4294967295
 8021da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021daa:	b34e      	cbz	r6, 8021e00 <__register_exitproc+0x98>
 8021dac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021db0:	b988      	cbnz	r0, 8021dd6 <__register_exitproc+0x6e>
 8021db2:	4b1c      	ldr	r3, [pc, #112]	; (8021e24 <__register_exitproc+0xbc>)
 8021db4:	b923      	cbnz	r3, 8021dc0 <__register_exitproc+0x58>
 8021db6:	f8d8 0000 	ldr.w	r0, [r8]
 8021dba:	f7ff fa0b 	bl	80211d4 <__retarget_lock_release>
 8021dbe:	e7f0      	b.n	8021da2 <__register_exitproc+0x3a>
 8021dc0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021dc4:	f7ff fa08 	bl	80211d8 <malloc>
 8021dc8:	2800      	cmp	r0, #0
 8021dca:	d0f4      	beq.n	8021db6 <__register_exitproc+0x4e>
 8021dcc:	2300      	movs	r3, #0
 8021dce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021dd2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021dd6:	6863      	ldr	r3, [r4, #4]
 8021dd8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021ddc:	2201      	movs	r2, #1
 8021dde:	409a      	lsls	r2, r3
 8021de0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021de4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021de8:	4313      	orrs	r3, r2
 8021dea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021dee:	2e02      	cmp	r6, #2
 8021df0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021df4:	bf02      	ittt	eq
 8021df6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021dfa:	4313      	orreq	r3, r2
 8021dfc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021e00:	6863      	ldr	r3, [r4, #4]
 8021e02:	f8d8 0000 	ldr.w	r0, [r8]
 8021e06:	1c5a      	adds	r2, r3, #1
 8021e08:	3302      	adds	r3, #2
 8021e0a:	6062      	str	r2, [r4, #4]
 8021e0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021e10:	f7ff f9e1 	bl	80211d6 <__retarget_lock_release_recursive>
 8021e14:	2000      	movs	r0, #0
 8021e16:	e7c6      	b.n	8021da6 <__register_exitproc+0x3e>
 8021e18:	20011dbc 	.word	0x20011dbc
 8021e1c:	20011d30 	.word	0x20011d30
 8021e20:	08024624 	.word	0x08024624
 8021e24:	080211d9 	.word	0x080211d9
 8021e28:	200000fc 	.word	0x200000fc

08021e2c <_close_r>:
 8021e2c:	b538      	push	{r3, r4, r5, lr}
 8021e2e:	4d06      	ldr	r5, [pc, #24]	; (8021e48 <_close_r+0x1c>)
 8021e30:	2300      	movs	r3, #0
 8021e32:	4604      	mov	r4, r0
 8021e34:	4608      	mov	r0, r1
 8021e36:	602b      	str	r3, [r5, #0]
 8021e38:	f7e0 f943 	bl	80020c2 <_close>
 8021e3c:	1c43      	adds	r3, r0, #1
 8021e3e:	d102      	bne.n	8021e46 <_close_r+0x1a>
 8021e40:	682b      	ldr	r3, [r5, #0]
 8021e42:	b103      	cbz	r3, 8021e46 <_close_r+0x1a>
 8021e44:	6023      	str	r3, [r4, #0]
 8021e46:	bd38      	pop	{r3, r4, r5, pc}
 8021e48:	20011d2c 	.word	0x20011d2c

08021e4c <__sflush_r>:
 8021e4c:	898a      	ldrh	r2, [r1, #12]
 8021e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e52:	4605      	mov	r5, r0
 8021e54:	0710      	lsls	r0, r2, #28
 8021e56:	460c      	mov	r4, r1
 8021e58:	d458      	bmi.n	8021f0c <__sflush_r+0xc0>
 8021e5a:	684b      	ldr	r3, [r1, #4]
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	dc05      	bgt.n	8021e6c <__sflush_r+0x20>
 8021e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	dc02      	bgt.n	8021e6c <__sflush_r+0x20>
 8021e66:	2000      	movs	r0, #0
 8021e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021e6e:	2e00      	cmp	r6, #0
 8021e70:	d0f9      	beq.n	8021e66 <__sflush_r+0x1a>
 8021e72:	2300      	movs	r3, #0
 8021e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021e78:	682f      	ldr	r7, [r5, #0]
 8021e7a:	602b      	str	r3, [r5, #0]
 8021e7c:	d032      	beq.n	8021ee4 <__sflush_r+0x98>
 8021e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021e80:	89a3      	ldrh	r3, [r4, #12]
 8021e82:	075a      	lsls	r2, r3, #29
 8021e84:	d505      	bpl.n	8021e92 <__sflush_r+0x46>
 8021e86:	6863      	ldr	r3, [r4, #4]
 8021e88:	1ac0      	subs	r0, r0, r3
 8021e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021e8c:	b10b      	cbz	r3, 8021e92 <__sflush_r+0x46>
 8021e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021e90:	1ac0      	subs	r0, r0, r3
 8021e92:	2300      	movs	r3, #0
 8021e94:	4602      	mov	r2, r0
 8021e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021e98:	6a21      	ldr	r1, [r4, #32]
 8021e9a:	4628      	mov	r0, r5
 8021e9c:	47b0      	blx	r6
 8021e9e:	1c43      	adds	r3, r0, #1
 8021ea0:	89a3      	ldrh	r3, [r4, #12]
 8021ea2:	d106      	bne.n	8021eb2 <__sflush_r+0x66>
 8021ea4:	6829      	ldr	r1, [r5, #0]
 8021ea6:	291d      	cmp	r1, #29
 8021ea8:	d82c      	bhi.n	8021f04 <__sflush_r+0xb8>
 8021eaa:	4a2a      	ldr	r2, [pc, #168]	; (8021f54 <__sflush_r+0x108>)
 8021eac:	40ca      	lsrs	r2, r1
 8021eae:	07d6      	lsls	r6, r2, #31
 8021eb0:	d528      	bpl.n	8021f04 <__sflush_r+0xb8>
 8021eb2:	2200      	movs	r2, #0
 8021eb4:	6062      	str	r2, [r4, #4]
 8021eb6:	04d9      	lsls	r1, r3, #19
 8021eb8:	6922      	ldr	r2, [r4, #16]
 8021eba:	6022      	str	r2, [r4, #0]
 8021ebc:	d504      	bpl.n	8021ec8 <__sflush_r+0x7c>
 8021ebe:	1c42      	adds	r2, r0, #1
 8021ec0:	d101      	bne.n	8021ec6 <__sflush_r+0x7a>
 8021ec2:	682b      	ldr	r3, [r5, #0]
 8021ec4:	b903      	cbnz	r3, 8021ec8 <__sflush_r+0x7c>
 8021ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8021ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021eca:	602f      	str	r7, [r5, #0]
 8021ecc:	2900      	cmp	r1, #0
 8021ece:	d0ca      	beq.n	8021e66 <__sflush_r+0x1a>
 8021ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021ed4:	4299      	cmp	r1, r3
 8021ed6:	d002      	beq.n	8021ede <__sflush_r+0x92>
 8021ed8:	4628      	mov	r0, r5
 8021eda:	f7ff f9a3 	bl	8021224 <_free_r>
 8021ede:	2000      	movs	r0, #0
 8021ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8021ee2:	e7c1      	b.n	8021e68 <__sflush_r+0x1c>
 8021ee4:	6a21      	ldr	r1, [r4, #32]
 8021ee6:	2301      	movs	r3, #1
 8021ee8:	4628      	mov	r0, r5
 8021eea:	47b0      	blx	r6
 8021eec:	1c41      	adds	r1, r0, #1
 8021eee:	d1c7      	bne.n	8021e80 <__sflush_r+0x34>
 8021ef0:	682b      	ldr	r3, [r5, #0]
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d0c4      	beq.n	8021e80 <__sflush_r+0x34>
 8021ef6:	2b1d      	cmp	r3, #29
 8021ef8:	d001      	beq.n	8021efe <__sflush_r+0xb2>
 8021efa:	2b16      	cmp	r3, #22
 8021efc:	d101      	bne.n	8021f02 <__sflush_r+0xb6>
 8021efe:	602f      	str	r7, [r5, #0]
 8021f00:	e7b1      	b.n	8021e66 <__sflush_r+0x1a>
 8021f02:	89a3      	ldrh	r3, [r4, #12]
 8021f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021f08:	81a3      	strh	r3, [r4, #12]
 8021f0a:	e7ad      	b.n	8021e68 <__sflush_r+0x1c>
 8021f0c:	690f      	ldr	r7, [r1, #16]
 8021f0e:	2f00      	cmp	r7, #0
 8021f10:	d0a9      	beq.n	8021e66 <__sflush_r+0x1a>
 8021f12:	0793      	lsls	r3, r2, #30
 8021f14:	680e      	ldr	r6, [r1, #0]
 8021f16:	bf08      	it	eq
 8021f18:	694b      	ldreq	r3, [r1, #20]
 8021f1a:	600f      	str	r7, [r1, #0]
 8021f1c:	bf18      	it	ne
 8021f1e:	2300      	movne	r3, #0
 8021f20:	eba6 0807 	sub.w	r8, r6, r7
 8021f24:	608b      	str	r3, [r1, #8]
 8021f26:	f1b8 0f00 	cmp.w	r8, #0
 8021f2a:	dd9c      	ble.n	8021e66 <__sflush_r+0x1a>
 8021f2c:	6a21      	ldr	r1, [r4, #32]
 8021f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021f30:	4643      	mov	r3, r8
 8021f32:	463a      	mov	r2, r7
 8021f34:	4628      	mov	r0, r5
 8021f36:	47b0      	blx	r6
 8021f38:	2800      	cmp	r0, #0
 8021f3a:	dc06      	bgt.n	8021f4a <__sflush_r+0xfe>
 8021f3c:	89a3      	ldrh	r3, [r4, #12]
 8021f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021f42:	81a3      	strh	r3, [r4, #12]
 8021f44:	f04f 30ff 	mov.w	r0, #4294967295
 8021f48:	e78e      	b.n	8021e68 <__sflush_r+0x1c>
 8021f4a:	4407      	add	r7, r0
 8021f4c:	eba8 0800 	sub.w	r8, r8, r0
 8021f50:	e7e9      	b.n	8021f26 <__sflush_r+0xda>
 8021f52:	bf00      	nop
 8021f54:	20400001 	.word	0x20400001

08021f58 <_fflush_r>:
 8021f58:	b538      	push	{r3, r4, r5, lr}
 8021f5a:	690b      	ldr	r3, [r1, #16]
 8021f5c:	4605      	mov	r5, r0
 8021f5e:	460c      	mov	r4, r1
 8021f60:	b913      	cbnz	r3, 8021f68 <_fflush_r+0x10>
 8021f62:	2500      	movs	r5, #0
 8021f64:	4628      	mov	r0, r5
 8021f66:	bd38      	pop	{r3, r4, r5, pc}
 8021f68:	b118      	cbz	r0, 8021f72 <_fflush_r+0x1a>
 8021f6a:	6983      	ldr	r3, [r0, #24]
 8021f6c:	b90b      	cbnz	r3, 8021f72 <_fflush_r+0x1a>
 8021f6e:	f7ff f85b 	bl	8021028 <__sinit>
 8021f72:	4b14      	ldr	r3, [pc, #80]	; (8021fc4 <_fflush_r+0x6c>)
 8021f74:	429c      	cmp	r4, r3
 8021f76:	d11b      	bne.n	8021fb0 <_fflush_r+0x58>
 8021f78:	686c      	ldr	r4, [r5, #4]
 8021f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f7e:	2b00      	cmp	r3, #0
 8021f80:	d0ef      	beq.n	8021f62 <_fflush_r+0xa>
 8021f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021f84:	07d0      	lsls	r0, r2, #31
 8021f86:	d404      	bmi.n	8021f92 <_fflush_r+0x3a>
 8021f88:	0599      	lsls	r1, r3, #22
 8021f8a:	d402      	bmi.n	8021f92 <_fflush_r+0x3a>
 8021f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021f8e:	f7ff f920 	bl	80211d2 <__retarget_lock_acquire_recursive>
 8021f92:	4628      	mov	r0, r5
 8021f94:	4621      	mov	r1, r4
 8021f96:	f7ff ff59 	bl	8021e4c <__sflush_r>
 8021f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021f9c:	07da      	lsls	r2, r3, #31
 8021f9e:	4605      	mov	r5, r0
 8021fa0:	d4e0      	bmi.n	8021f64 <_fflush_r+0xc>
 8021fa2:	89a3      	ldrh	r3, [r4, #12]
 8021fa4:	059b      	lsls	r3, r3, #22
 8021fa6:	d4dd      	bmi.n	8021f64 <_fflush_r+0xc>
 8021fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021faa:	f7ff f914 	bl	80211d6 <__retarget_lock_release_recursive>
 8021fae:	e7d9      	b.n	8021f64 <_fflush_r+0xc>
 8021fb0:	4b05      	ldr	r3, [pc, #20]	; (8021fc8 <_fflush_r+0x70>)
 8021fb2:	429c      	cmp	r4, r3
 8021fb4:	d101      	bne.n	8021fba <_fflush_r+0x62>
 8021fb6:	68ac      	ldr	r4, [r5, #8]
 8021fb8:	e7df      	b.n	8021f7a <_fflush_r+0x22>
 8021fba:	4b04      	ldr	r3, [pc, #16]	; (8021fcc <_fflush_r+0x74>)
 8021fbc:	429c      	cmp	r4, r3
 8021fbe:	bf08      	it	eq
 8021fc0:	68ec      	ldreq	r4, [r5, #12]
 8021fc2:	e7da      	b.n	8021f7a <_fflush_r+0x22>
 8021fc4:	080245ac 	.word	0x080245ac
 8021fc8:	080245cc 	.word	0x080245cc
 8021fcc:	0802458c 	.word	0x0802458c

08021fd0 <_lseek_r>:
 8021fd0:	b538      	push	{r3, r4, r5, lr}
 8021fd2:	4d07      	ldr	r5, [pc, #28]	; (8021ff0 <_lseek_r+0x20>)
 8021fd4:	4604      	mov	r4, r0
 8021fd6:	4608      	mov	r0, r1
 8021fd8:	4611      	mov	r1, r2
 8021fda:	2200      	movs	r2, #0
 8021fdc:	602a      	str	r2, [r5, #0]
 8021fde:	461a      	mov	r2, r3
 8021fe0:	f7e0 f896 	bl	8002110 <_lseek>
 8021fe4:	1c43      	adds	r3, r0, #1
 8021fe6:	d102      	bne.n	8021fee <_lseek_r+0x1e>
 8021fe8:	682b      	ldr	r3, [r5, #0]
 8021fea:	b103      	cbz	r3, 8021fee <_lseek_r+0x1e>
 8021fec:	6023      	str	r3, [r4, #0]
 8021fee:	bd38      	pop	{r3, r4, r5, pc}
 8021ff0:	20011d2c 	.word	0x20011d2c

08021ff4 <__swhatbuf_r>:
 8021ff4:	b570      	push	{r4, r5, r6, lr}
 8021ff6:	460e      	mov	r6, r1
 8021ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021ffc:	2900      	cmp	r1, #0
 8021ffe:	b096      	sub	sp, #88	; 0x58
 8022000:	4614      	mov	r4, r2
 8022002:	461d      	mov	r5, r3
 8022004:	da08      	bge.n	8022018 <__swhatbuf_r+0x24>
 8022006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802200a:	2200      	movs	r2, #0
 802200c:	602a      	str	r2, [r5, #0]
 802200e:	061a      	lsls	r2, r3, #24
 8022010:	d410      	bmi.n	8022034 <__swhatbuf_r+0x40>
 8022012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022016:	e00e      	b.n	8022036 <__swhatbuf_r+0x42>
 8022018:	466a      	mov	r2, sp
 802201a:	f000 f86f 	bl	80220fc <_fstat_r>
 802201e:	2800      	cmp	r0, #0
 8022020:	dbf1      	blt.n	8022006 <__swhatbuf_r+0x12>
 8022022:	9a01      	ldr	r2, [sp, #4]
 8022024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802202c:	425a      	negs	r2, r3
 802202e:	415a      	adcs	r2, r3
 8022030:	602a      	str	r2, [r5, #0]
 8022032:	e7ee      	b.n	8022012 <__swhatbuf_r+0x1e>
 8022034:	2340      	movs	r3, #64	; 0x40
 8022036:	2000      	movs	r0, #0
 8022038:	6023      	str	r3, [r4, #0]
 802203a:	b016      	add	sp, #88	; 0x58
 802203c:	bd70      	pop	{r4, r5, r6, pc}
	...

08022040 <__smakebuf_r>:
 8022040:	898b      	ldrh	r3, [r1, #12]
 8022042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022044:	079d      	lsls	r5, r3, #30
 8022046:	4606      	mov	r6, r0
 8022048:	460c      	mov	r4, r1
 802204a:	d507      	bpl.n	802205c <__smakebuf_r+0x1c>
 802204c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022050:	6023      	str	r3, [r4, #0]
 8022052:	6123      	str	r3, [r4, #16]
 8022054:	2301      	movs	r3, #1
 8022056:	6163      	str	r3, [r4, #20]
 8022058:	b002      	add	sp, #8
 802205a:	bd70      	pop	{r4, r5, r6, pc}
 802205c:	ab01      	add	r3, sp, #4
 802205e:	466a      	mov	r2, sp
 8022060:	f7ff ffc8 	bl	8021ff4 <__swhatbuf_r>
 8022064:	9900      	ldr	r1, [sp, #0]
 8022066:	4605      	mov	r5, r0
 8022068:	4630      	mov	r0, r6
 802206a:	f7ff f947 	bl	80212fc <_malloc_r>
 802206e:	b948      	cbnz	r0, 8022084 <__smakebuf_r+0x44>
 8022070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022074:	059a      	lsls	r2, r3, #22
 8022076:	d4ef      	bmi.n	8022058 <__smakebuf_r+0x18>
 8022078:	f023 0303 	bic.w	r3, r3, #3
 802207c:	f043 0302 	orr.w	r3, r3, #2
 8022080:	81a3      	strh	r3, [r4, #12]
 8022082:	e7e3      	b.n	802204c <__smakebuf_r+0xc>
 8022084:	4b0d      	ldr	r3, [pc, #52]	; (80220bc <__smakebuf_r+0x7c>)
 8022086:	62b3      	str	r3, [r6, #40]	; 0x28
 8022088:	89a3      	ldrh	r3, [r4, #12]
 802208a:	6020      	str	r0, [r4, #0]
 802208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022090:	81a3      	strh	r3, [r4, #12]
 8022092:	9b00      	ldr	r3, [sp, #0]
 8022094:	6163      	str	r3, [r4, #20]
 8022096:	9b01      	ldr	r3, [sp, #4]
 8022098:	6120      	str	r0, [r4, #16]
 802209a:	b15b      	cbz	r3, 80220b4 <__smakebuf_r+0x74>
 802209c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80220a0:	4630      	mov	r0, r6
 80220a2:	f000 f83d 	bl	8022120 <_isatty_r>
 80220a6:	b128      	cbz	r0, 80220b4 <__smakebuf_r+0x74>
 80220a8:	89a3      	ldrh	r3, [r4, #12]
 80220aa:	f023 0303 	bic.w	r3, r3, #3
 80220ae:	f043 0301 	orr.w	r3, r3, #1
 80220b2:	81a3      	strh	r3, [r4, #12]
 80220b4:	89a0      	ldrh	r0, [r4, #12]
 80220b6:	4305      	orrs	r5, r0
 80220b8:	81a5      	strh	r5, [r4, #12]
 80220ba:	e7cd      	b.n	8022058 <__smakebuf_r+0x18>
 80220bc:	08020fc1 	.word	0x08020fc1

080220c0 <__malloc_lock>:
 80220c0:	4801      	ldr	r0, [pc, #4]	; (80220c8 <__malloc_lock+0x8>)
 80220c2:	f7ff b886 	b.w	80211d2 <__retarget_lock_acquire_recursive>
 80220c6:	bf00      	nop
 80220c8:	20011c19 	.word	0x20011c19

080220cc <__malloc_unlock>:
 80220cc:	4801      	ldr	r0, [pc, #4]	; (80220d4 <__malloc_unlock+0x8>)
 80220ce:	f7ff b882 	b.w	80211d6 <__retarget_lock_release_recursive>
 80220d2:	bf00      	nop
 80220d4:	20011c19 	.word	0x20011c19

080220d8 <_read_r>:
 80220d8:	b538      	push	{r3, r4, r5, lr}
 80220da:	4d07      	ldr	r5, [pc, #28]	; (80220f8 <_read_r+0x20>)
 80220dc:	4604      	mov	r4, r0
 80220de:	4608      	mov	r0, r1
 80220e0:	4611      	mov	r1, r2
 80220e2:	2200      	movs	r2, #0
 80220e4:	602a      	str	r2, [r5, #0]
 80220e6:	461a      	mov	r2, r3
 80220e8:	f7df ffb2 	bl	8002050 <_read>
 80220ec:	1c43      	adds	r3, r0, #1
 80220ee:	d102      	bne.n	80220f6 <_read_r+0x1e>
 80220f0:	682b      	ldr	r3, [r5, #0]
 80220f2:	b103      	cbz	r3, 80220f6 <_read_r+0x1e>
 80220f4:	6023      	str	r3, [r4, #0]
 80220f6:	bd38      	pop	{r3, r4, r5, pc}
 80220f8:	20011d2c 	.word	0x20011d2c

080220fc <_fstat_r>:
 80220fc:	b538      	push	{r3, r4, r5, lr}
 80220fe:	4d07      	ldr	r5, [pc, #28]	; (802211c <_fstat_r+0x20>)
 8022100:	2300      	movs	r3, #0
 8022102:	4604      	mov	r4, r0
 8022104:	4608      	mov	r0, r1
 8022106:	4611      	mov	r1, r2
 8022108:	602b      	str	r3, [r5, #0]
 802210a:	f7df ffe6 	bl	80020da <_fstat>
 802210e:	1c43      	adds	r3, r0, #1
 8022110:	d102      	bne.n	8022118 <_fstat_r+0x1c>
 8022112:	682b      	ldr	r3, [r5, #0]
 8022114:	b103      	cbz	r3, 8022118 <_fstat_r+0x1c>
 8022116:	6023      	str	r3, [r4, #0]
 8022118:	bd38      	pop	{r3, r4, r5, pc}
 802211a:	bf00      	nop
 802211c:	20011d2c 	.word	0x20011d2c

08022120 <_isatty_r>:
 8022120:	b538      	push	{r3, r4, r5, lr}
 8022122:	4d06      	ldr	r5, [pc, #24]	; (802213c <_isatty_r+0x1c>)
 8022124:	2300      	movs	r3, #0
 8022126:	4604      	mov	r4, r0
 8022128:	4608      	mov	r0, r1
 802212a:	602b      	str	r3, [r5, #0]
 802212c:	f7df ffe5 	bl	80020fa <_isatty>
 8022130:	1c43      	adds	r3, r0, #1
 8022132:	d102      	bne.n	802213a <_isatty_r+0x1a>
 8022134:	682b      	ldr	r3, [r5, #0]
 8022136:	b103      	cbz	r3, 802213a <_isatty_r+0x1a>
 8022138:	6023      	str	r3, [r4, #0]
 802213a:	bd38      	pop	{r3, r4, r5, pc}
 802213c:	20011d2c 	.word	0x20011d2c

08022140 <_init>:
 8022140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022142:	bf00      	nop
 8022144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022146:	bc08      	pop	{r3}
 8022148:	469e      	mov	lr, r3
 802214a:	4770      	bx	lr

0802214c <_fini>:
 802214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802214e:	bf00      	nop
 8022150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022152:	bc08      	pop	{r3}
 8022154:	469e      	mov	lr, r3
 8022156:	4770      	bx	lr
